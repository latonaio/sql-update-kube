// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformQuotationsItemDatum is an object representing the database table.
type DataPlatformQuotationsItemDatum struct {
	Quotation                     int          `boil:"Quotation" json:"Quotation" toml:"Quotation" yaml:"Quotation"`
	QuotationItem                 int          `boil:"QuotationItem" json:"QuotationItem" toml:"QuotationItem" yaml:"QuotationItem"`
	QuotationItemCategory         null.String  `boil:"QuotationItemCategory" json:"QuotationItemCategory,omitempty" toml:"QuotationItemCategory" yaml:"QuotationItemCategory,omitempty"`
	QuotationItemText             null.String  `boil:"QuotationItemText" json:"QuotationItemText,omitempty" toml:"QuotationItemText" yaml:"QuotationItemText,omitempty"`
	Product                       null.String  `boil:"Product" json:"Product,omitempty" toml:"Product" yaml:"Product,omitempty"`
	QuotationQuantity             null.Float32 `boil:"QuotationQuantity" json:"QuotationQuantity,omitempty" toml:"QuotationQuantity" yaml:"QuotationQuantity,omitempty"`
	QuotationQuantityUnit         null.String  `boil:"QuotationQuantityUnit" json:"QuotationQuantityUnit,omitempty" toml:"QuotationQuantityUnit" yaml:"QuotationQuantityUnit,omitempty"`
	ItemOrderProbabilityInPercent null.Float32 `boil:"ItemOrderProbabilityInPercent" json:"ItemOrderProbabilityInPercent,omitempty" toml:"ItemOrderProbabilityInPercent" yaml:"ItemOrderProbabilityInPercent,omitempty"`
	ItemGrossWeight               null.Float32 `boil:"ItemGrossWeight" json:"ItemGrossWeight,omitempty" toml:"ItemGrossWeight" yaml:"ItemGrossWeight,omitempty"`
	ItemNetWeight                 null.Float32 `boil:"ItemNetWeight" json:"ItemNetWeight,omitempty" toml:"ItemNetWeight" yaml:"ItemNetWeight,omitempty"`
	ItemWeightUnit                null.String  `boil:"ItemWeightUnit" json:"ItemWeightUnit,omitempty" toml:"ItemWeightUnit" yaml:"ItemWeightUnit,omitempty"`
	TransactionCurrency           null.String  `boil:"TransactionCurrency" json:"TransactionCurrency,omitempty" toml:"TransactionCurrency" yaml:"TransactionCurrency,omitempty"`
	BussinessParnterCurrency      null.String  `boil:"BussinessParnterCurrency" json:"BussinessParnterCurrency,omitempty" toml:"BussinessParnterCurrency" yaml:"BussinessParnterCurrency,omitempty"`
	NetAmount                     null.Float32 `boil:"NetAmount" json:"NetAmount,omitempty" toml:"NetAmount" yaml:"NetAmount,omitempty"`
	ProductGroup                  null.String  `boil:"ProductGroup" json:"ProductGroup,omitempty" toml:"ProductGroup" yaml:"ProductGroup,omitempty"`
	ProductPricingGroup           null.String  `boil:"ProductPricingGroup" json:"ProductPricingGroup,omitempty" toml:"ProductPricingGroup" yaml:"ProductPricingGroup,omitempty"`
	Batch                         null.String  `boil:"Batch" json:"Batch,omitempty" toml:"Batch" yaml:"Batch,omitempty"`
	IssuingPlant                  null.String  `boil:"IssuingPlant" json:"IssuingPlant,omitempty" toml:"IssuingPlant" yaml:"IssuingPlant,omitempty"`
	IssuingPlantStorageLocation   null.String  `boil:"IssuingPlantStorageLocation" json:"IssuingPlantStorageLocation,omitempty" toml:"IssuingPlantStorageLocation" yaml:"IssuingPlantStorageLocation,omitempty"`
	ReceivingPlant                null.String  `boil:"ReceivingPlant" json:"ReceivingPlant,omitempty" toml:"ReceivingPlant" yaml:"ReceivingPlant,omitempty"`
	ReceivingPlantStorageLocation null.String  `boil:"ReceivingPlantStorageLocation" json:"ReceivingPlantStorageLocation,omitempty" toml:"ReceivingPlantStorageLocation" yaml:"ReceivingPlantStorageLocation,omitempty"`
	Incoterms                     null.String  `boil:"Incoterms" json:"Incoterms,omitempty" toml:"Incoterms" yaml:"Incoterms,omitempty"`
	PaymentTerms                  null.String  `boil:"PaymentTerms" json:"PaymentTerms,omitempty" toml:"PaymentTerms" yaml:"PaymentTerms,omitempty"`
	ProductTaxClassification      null.String  `boil:"ProductTaxClassification" json:"ProductTaxClassification,omitempty" toml:"ProductTaxClassification" yaml:"ProductTaxClassification,omitempty"`
	Project                       null.String  `boil:"Project" json:"Project,omitempty" toml:"Project" yaml:"Project,omitempty"`
	ProfitCenter                  null.String  `boil:"ProfitCenter" json:"ProfitCenter,omitempty" toml:"ProfitCenter" yaml:"ProfitCenter,omitempty"`
	ReferenceInquiry              null.Int     `boil:"ReferenceInquiry" json:"ReferenceInquiry,omitempty" toml:"ReferenceInquiry" yaml:"ReferenceInquiry,omitempty"`
	ReferenceInquiryItem          null.Int     `boil:"ReferenceInquiryItem" json:"ReferenceInquiryItem,omitempty" toml:"ReferenceInquiryItem" yaml:"ReferenceInquiryItem,omitempty"`

	R *dataPlatformQuotationsItemDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformQuotationsItemDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformQuotationsItemDatumColumns = struct {
	Quotation                     string
	QuotationItem                 string
	QuotationItemCategory         string
	QuotationItemText             string
	Product                       string
	QuotationQuantity             string
	QuotationQuantityUnit         string
	ItemOrderProbabilityInPercent string
	ItemGrossWeight               string
	ItemNetWeight                 string
	ItemWeightUnit                string
	TransactionCurrency           string
	BussinessParnterCurrency      string
	NetAmount                     string
	ProductGroup                  string
	ProductPricingGroup           string
	Batch                         string
	IssuingPlant                  string
	IssuingPlantStorageLocation   string
	ReceivingPlant                string
	ReceivingPlantStorageLocation string
	Incoterms                     string
	PaymentTerms                  string
	ProductTaxClassification      string
	Project                       string
	ProfitCenter                  string
	ReferenceInquiry              string
	ReferenceInquiryItem          string
}{
	Quotation:                     "Quotation",
	QuotationItem:                 "QuotationItem",
	QuotationItemCategory:         "QuotationItemCategory",
	QuotationItemText:             "QuotationItemText",
	Product:                       "Product",
	QuotationQuantity:             "QuotationQuantity",
	QuotationQuantityUnit:         "QuotationQuantityUnit",
	ItemOrderProbabilityInPercent: "ItemOrderProbabilityInPercent",
	ItemGrossWeight:               "ItemGrossWeight",
	ItemNetWeight:                 "ItemNetWeight",
	ItemWeightUnit:                "ItemWeightUnit",
	TransactionCurrency:           "TransactionCurrency",
	BussinessParnterCurrency:      "BussinessParnterCurrency",
	NetAmount:                     "NetAmount",
	ProductGroup:                  "ProductGroup",
	ProductPricingGroup:           "ProductPricingGroup",
	Batch:                         "Batch",
	IssuingPlant:                  "IssuingPlant",
	IssuingPlantStorageLocation:   "IssuingPlantStorageLocation",
	ReceivingPlant:                "ReceivingPlant",
	ReceivingPlantStorageLocation: "ReceivingPlantStorageLocation",
	Incoterms:                     "Incoterms",
	PaymentTerms:                  "PaymentTerms",
	ProductTaxClassification:      "ProductTaxClassification",
	Project:                       "Project",
	ProfitCenter:                  "ProfitCenter",
	ReferenceInquiry:              "ReferenceInquiry",
	ReferenceInquiryItem:          "ReferenceInquiryItem",
}

var DataPlatformQuotationsItemDatumTableColumns = struct {
	Quotation                     string
	QuotationItem                 string
	QuotationItemCategory         string
	QuotationItemText             string
	Product                       string
	QuotationQuantity             string
	QuotationQuantityUnit         string
	ItemOrderProbabilityInPercent string
	ItemGrossWeight               string
	ItemNetWeight                 string
	ItemWeightUnit                string
	TransactionCurrency           string
	BussinessParnterCurrency      string
	NetAmount                     string
	ProductGroup                  string
	ProductPricingGroup           string
	Batch                         string
	IssuingPlant                  string
	IssuingPlantStorageLocation   string
	ReceivingPlant                string
	ReceivingPlantStorageLocation string
	Incoterms                     string
	PaymentTerms                  string
	ProductTaxClassification      string
	Project                       string
	ProfitCenter                  string
	ReferenceInquiry              string
	ReferenceInquiryItem          string
}{
	Quotation:                     "data_platform_quotations_item_data.Quotation",
	QuotationItem:                 "data_platform_quotations_item_data.QuotationItem",
	QuotationItemCategory:         "data_platform_quotations_item_data.QuotationItemCategory",
	QuotationItemText:             "data_platform_quotations_item_data.QuotationItemText",
	Product:                       "data_platform_quotations_item_data.Product",
	QuotationQuantity:             "data_platform_quotations_item_data.QuotationQuantity",
	QuotationQuantityUnit:         "data_platform_quotations_item_data.QuotationQuantityUnit",
	ItemOrderProbabilityInPercent: "data_platform_quotations_item_data.ItemOrderProbabilityInPercent",
	ItemGrossWeight:               "data_platform_quotations_item_data.ItemGrossWeight",
	ItemNetWeight:                 "data_platform_quotations_item_data.ItemNetWeight",
	ItemWeightUnit:                "data_platform_quotations_item_data.ItemWeightUnit",
	TransactionCurrency:           "data_platform_quotations_item_data.TransactionCurrency",
	BussinessParnterCurrency:      "data_platform_quotations_item_data.BussinessParnterCurrency",
	NetAmount:                     "data_platform_quotations_item_data.NetAmount",
	ProductGroup:                  "data_platform_quotations_item_data.ProductGroup",
	ProductPricingGroup:           "data_platform_quotations_item_data.ProductPricingGroup",
	Batch:                         "data_platform_quotations_item_data.Batch",
	IssuingPlant:                  "data_platform_quotations_item_data.IssuingPlant",
	IssuingPlantStorageLocation:   "data_platform_quotations_item_data.IssuingPlantStorageLocation",
	ReceivingPlant:                "data_platform_quotations_item_data.ReceivingPlant",
	ReceivingPlantStorageLocation: "data_platform_quotations_item_data.ReceivingPlantStorageLocation",
	Incoterms:                     "data_platform_quotations_item_data.Incoterms",
	PaymentTerms:                  "data_platform_quotations_item_data.PaymentTerms",
	ProductTaxClassification:      "data_platform_quotations_item_data.ProductTaxClassification",
	Project:                       "data_platform_quotations_item_data.Project",
	ProfitCenter:                  "data_platform_quotations_item_data.ProfitCenter",
	ReferenceInquiry:              "data_platform_quotations_item_data.ReferenceInquiry",
	ReferenceInquiryItem:          "data_platform_quotations_item_data.ReferenceInquiryItem",
}

// Generated where

var DataPlatformQuotationsItemDatumWhere = struct {
	Quotation                     whereHelperint
	QuotationItem                 whereHelperint
	QuotationItemCategory         whereHelpernull_String
	QuotationItemText             whereHelpernull_String
	Product                       whereHelpernull_String
	QuotationQuantity             whereHelpernull_Float32
	QuotationQuantityUnit         whereHelpernull_String
	ItemOrderProbabilityInPercent whereHelpernull_Float32
	ItemGrossWeight               whereHelpernull_Float32
	ItemNetWeight                 whereHelpernull_Float32
	ItemWeightUnit                whereHelpernull_String
	TransactionCurrency           whereHelpernull_String
	BussinessParnterCurrency      whereHelpernull_String
	NetAmount                     whereHelpernull_Float32
	ProductGroup                  whereHelpernull_String
	ProductPricingGroup           whereHelpernull_String
	Batch                         whereHelpernull_String
	IssuingPlant                  whereHelpernull_String
	IssuingPlantStorageLocation   whereHelpernull_String
	ReceivingPlant                whereHelpernull_String
	ReceivingPlantStorageLocation whereHelpernull_String
	Incoterms                     whereHelpernull_String
	PaymentTerms                  whereHelpernull_String
	ProductTaxClassification      whereHelpernull_String
	Project                       whereHelpernull_String
	ProfitCenter                  whereHelpernull_String
	ReferenceInquiry              whereHelpernull_Int
	ReferenceInquiryItem          whereHelpernull_Int
}{
	Quotation:                     whereHelperint{field: "`data_platform_quotations_item_data`.`Quotation`"},
	QuotationItem:                 whereHelperint{field: "`data_platform_quotations_item_data`.`QuotationItem`"},
	QuotationItemCategory:         whereHelpernull_String{field: "`data_platform_quotations_item_data`.`QuotationItemCategory`"},
	QuotationItemText:             whereHelpernull_String{field: "`data_platform_quotations_item_data`.`QuotationItemText`"},
	Product:                       whereHelpernull_String{field: "`data_platform_quotations_item_data`.`Product`"},
	QuotationQuantity:             whereHelpernull_Float32{field: "`data_platform_quotations_item_data`.`QuotationQuantity`"},
	QuotationQuantityUnit:         whereHelpernull_String{field: "`data_platform_quotations_item_data`.`QuotationQuantityUnit`"},
	ItemOrderProbabilityInPercent: whereHelpernull_Float32{field: "`data_platform_quotations_item_data`.`ItemOrderProbabilityInPercent`"},
	ItemGrossWeight:               whereHelpernull_Float32{field: "`data_platform_quotations_item_data`.`ItemGrossWeight`"},
	ItemNetWeight:                 whereHelpernull_Float32{field: "`data_platform_quotations_item_data`.`ItemNetWeight`"},
	ItemWeightUnit:                whereHelpernull_String{field: "`data_platform_quotations_item_data`.`ItemWeightUnit`"},
	TransactionCurrency:           whereHelpernull_String{field: "`data_platform_quotations_item_data`.`TransactionCurrency`"},
	BussinessParnterCurrency:      whereHelpernull_String{field: "`data_platform_quotations_item_data`.`BussinessParnterCurrency`"},
	NetAmount:                     whereHelpernull_Float32{field: "`data_platform_quotations_item_data`.`NetAmount`"},
	ProductGroup:                  whereHelpernull_String{field: "`data_platform_quotations_item_data`.`ProductGroup`"},
	ProductPricingGroup:           whereHelpernull_String{field: "`data_platform_quotations_item_data`.`ProductPricingGroup`"},
	Batch:                         whereHelpernull_String{field: "`data_platform_quotations_item_data`.`Batch`"},
	IssuingPlant:                  whereHelpernull_String{field: "`data_platform_quotations_item_data`.`IssuingPlant`"},
	IssuingPlantStorageLocation:   whereHelpernull_String{field: "`data_platform_quotations_item_data`.`IssuingPlantStorageLocation`"},
	ReceivingPlant:                whereHelpernull_String{field: "`data_platform_quotations_item_data`.`ReceivingPlant`"},
	ReceivingPlantStorageLocation: whereHelpernull_String{field: "`data_platform_quotations_item_data`.`ReceivingPlantStorageLocation`"},
	Incoterms:                     whereHelpernull_String{field: "`data_platform_quotations_item_data`.`Incoterms`"},
	PaymentTerms:                  whereHelpernull_String{field: "`data_platform_quotations_item_data`.`PaymentTerms`"},
	ProductTaxClassification:      whereHelpernull_String{field: "`data_platform_quotations_item_data`.`ProductTaxClassification`"},
	Project:                       whereHelpernull_String{field: "`data_platform_quotations_item_data`.`Project`"},
	ProfitCenter:                  whereHelpernull_String{field: "`data_platform_quotations_item_data`.`ProfitCenter`"},
	ReferenceInquiry:              whereHelpernull_Int{field: "`data_platform_quotations_item_data`.`ReferenceInquiry`"},
	ReferenceInquiryItem:          whereHelpernull_Int{field: "`data_platform_quotations_item_data`.`ReferenceInquiryItem`"},
}

// DataPlatformQuotationsItemDatumRels is where relationship names are stored.
var DataPlatformQuotationsItemDatumRels = struct {
	QuotationDataPlatformQuotationsHeaderDatum            string
	QuotationDataPlatformQuotationsItemPartnerData        string
	QuotationDataPlatformQuotationsItemPricingElementData string
}{
	QuotationDataPlatformQuotationsHeaderDatum:            "QuotationDataPlatformQuotationsHeaderDatum",
	QuotationDataPlatformQuotationsItemPartnerData:        "QuotationDataPlatformQuotationsItemPartnerData",
	QuotationDataPlatformQuotationsItemPricingElementData: "QuotationDataPlatformQuotationsItemPricingElementData",
}

// dataPlatformQuotationsItemDatumR is where relationships are stored.
type dataPlatformQuotationsItemDatumR struct {
	QuotationDataPlatformQuotationsHeaderDatum            *DataPlatformQuotationsHeaderDatum                 `boil:"QuotationDataPlatformQuotationsHeaderDatum" json:"QuotationDataPlatformQuotationsHeaderDatum" toml:"QuotationDataPlatformQuotationsHeaderDatum" yaml:"QuotationDataPlatformQuotationsHeaderDatum"`
	QuotationDataPlatformQuotationsItemPartnerData        DataPlatformQuotationsItemPartnerDatumSlice        `boil:"QuotationDataPlatformQuotationsItemPartnerData" json:"QuotationDataPlatformQuotationsItemPartnerData" toml:"QuotationDataPlatformQuotationsItemPartnerData" yaml:"QuotationDataPlatformQuotationsItemPartnerData"`
	QuotationDataPlatformQuotationsItemPricingElementData DataPlatformQuotationsItemPricingElementDatumSlice `boil:"QuotationDataPlatformQuotationsItemPricingElementData" json:"QuotationDataPlatformQuotationsItemPricingElementData" toml:"QuotationDataPlatformQuotationsItemPricingElementData" yaml:"QuotationDataPlatformQuotationsItemPricingElementData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformQuotationsItemDatumR) NewStruct() *dataPlatformQuotationsItemDatumR {
	return &dataPlatformQuotationsItemDatumR{}
}

func (r *dataPlatformQuotationsItemDatumR) GetQuotationDataPlatformQuotationsHeaderDatum() *DataPlatformQuotationsHeaderDatum {
	if r == nil {
		return nil
	}
	return r.QuotationDataPlatformQuotationsHeaderDatum
}

func (r *dataPlatformQuotationsItemDatumR) GetQuotationDataPlatformQuotationsItemPartnerData() DataPlatformQuotationsItemPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.QuotationDataPlatformQuotationsItemPartnerData
}

func (r *dataPlatformQuotationsItemDatumR) GetQuotationDataPlatformQuotationsItemPricingElementData() DataPlatformQuotationsItemPricingElementDatumSlice {
	if r == nil {
		return nil
	}
	return r.QuotationDataPlatformQuotationsItemPricingElementData
}

// dataPlatformQuotationsItemDatumL is where Load methods for each relationship are stored.
type dataPlatformQuotationsItemDatumL struct{}

var (
	dataPlatformQuotationsItemDatumAllColumns            = []string{"Quotation", "QuotationItem", "QuotationItemCategory", "QuotationItemText", "Product", "QuotationQuantity", "QuotationQuantityUnit", "ItemOrderProbabilityInPercent", "ItemGrossWeight", "ItemNetWeight", "ItemWeightUnit", "TransactionCurrency", "BussinessParnterCurrency", "NetAmount", "ProductGroup", "ProductPricingGroup", "Batch", "IssuingPlant", "IssuingPlantStorageLocation", "ReceivingPlant", "ReceivingPlantStorageLocation", "Incoterms", "PaymentTerms", "ProductTaxClassification", "Project", "ProfitCenter", "ReferenceInquiry", "ReferenceInquiryItem"}
	dataPlatformQuotationsItemDatumColumnsWithoutDefault = []string{"Quotation", "QuotationItem", "QuotationItemCategory", "QuotationItemText", "Product", "QuotationQuantity", "QuotationQuantityUnit", "ItemOrderProbabilityInPercent", "ItemGrossWeight", "ItemNetWeight", "ItemWeightUnit", "TransactionCurrency", "BussinessParnterCurrency", "NetAmount", "ProductGroup", "ProductPricingGroup", "Batch", "IssuingPlant", "IssuingPlantStorageLocation", "ReceivingPlant", "ReceivingPlantStorageLocation", "Incoterms", "PaymentTerms", "ProductTaxClassification", "Project", "ProfitCenter", "ReferenceInquiry", "ReferenceInquiryItem"}
	dataPlatformQuotationsItemDatumColumnsWithDefault    = []string{}
	dataPlatformQuotationsItemDatumPrimaryKeyColumns     = []string{"Quotation", "QuotationItem"}
	dataPlatformQuotationsItemDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformQuotationsItemDatumSlice is an alias for a slice of pointers to DataPlatformQuotationsItemDatum.
	// This should almost always be used instead of []DataPlatformQuotationsItemDatum.
	DataPlatformQuotationsItemDatumSlice []*DataPlatformQuotationsItemDatum

	dataPlatformQuotationsItemDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformQuotationsItemDatumType                 = reflect.TypeOf(&DataPlatformQuotationsItemDatum{})
	dataPlatformQuotationsItemDatumMapping              = queries.MakeStructMapping(dataPlatformQuotationsItemDatumType)
	dataPlatformQuotationsItemDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformQuotationsItemDatumType, dataPlatformQuotationsItemDatumMapping, dataPlatformQuotationsItemDatumPrimaryKeyColumns)
	dataPlatformQuotationsItemDatumInsertCacheMut       sync.RWMutex
	dataPlatformQuotationsItemDatumInsertCache          = make(map[string]insertCache)
	dataPlatformQuotationsItemDatumUpdateCacheMut       sync.RWMutex
	dataPlatformQuotationsItemDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformQuotationsItemDatumUpsertCacheMut       sync.RWMutex
	dataPlatformQuotationsItemDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformQuotationsItemDatum record from the query.
func (q dataPlatformQuotationsItemDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformQuotationsItemDatum, error) {
	o := &DataPlatformQuotationsItemDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_quotations_item_data")
	}

	return o, nil
}

// All returns all DataPlatformQuotationsItemDatum records from the query.
func (q dataPlatformQuotationsItemDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformQuotationsItemDatumSlice, error) {
	var o []*DataPlatformQuotationsItemDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformQuotationsItemDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformQuotationsItemDatum records in the query.
func (q dataPlatformQuotationsItemDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_quotations_item_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformQuotationsItemDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_quotations_item_data exists")
	}

	return count > 0, nil
}

// QuotationDataPlatformQuotationsHeaderDatum pointed to by the foreign key.
func (o *DataPlatformQuotationsItemDatum) QuotationDataPlatformQuotationsHeaderDatum(mods ...qm.QueryMod) dataPlatformQuotationsHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Quotation` = ?", o.Quotation),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuotationsHeaderData(queryMods...)
}

// QuotationDataPlatformQuotationsItemPartnerData retrieves all the data_platform_quotations_item_partner_datum's DataPlatformQuotationsItemPartnerData with an executor via Quotation column.
func (o *DataPlatformQuotationsItemDatum) QuotationDataPlatformQuotationsItemPartnerData(mods ...qm.QueryMod) dataPlatformQuotationsItemPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_quotations_item_partner_data`.`Quotation`=?", o.Quotation),
	)

	return DataPlatformQuotationsItemPartnerData(queryMods...)
}

// QuotationDataPlatformQuotationsItemPricingElementData retrieves all the data_platform_quotations_item_pricing_element_datum's DataPlatformQuotationsItemPricingElementData with an executor via Quotation column.
func (o *DataPlatformQuotationsItemDatum) QuotationDataPlatformQuotationsItemPricingElementData(mods ...qm.QueryMod) dataPlatformQuotationsItemPricingElementDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_quotations_item_pricing_element_data`.`Quotation`=?", o.Quotation),
	)

	return DataPlatformQuotationsItemPricingElementData(queryMods...)
}

// LoadQuotationDataPlatformQuotationsHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformQuotationsItemDatumL) LoadQuotationDataPlatformQuotationsHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuotationsItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuotationsItemDatum
	var object *DataPlatformQuotationsItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuotationsItemDatum.(*DataPlatformQuotationsItemDatum)
		if !ok {
			object = new(DataPlatformQuotationsItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuotationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuotationsItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuotationsItemDatum.(*[]*DataPlatformQuotationsItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuotationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuotationsItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuotationsItemDatumR{}
		}
		args = append(args, object.Quotation)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuotationsItemDatumR{}
			}

			for _, a := range args {
				if a == obj.Quotation {
					continue Outer
				}
			}

			args = append(args, obj.Quotation)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quotations_header_data`),
		qm.WhereIn(`data_platform_quotations_header_data.Quotation in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuotationsHeaderDatum")
	}

	var resultSlice []*DataPlatformQuotationsHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuotationsHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quotations_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quotations_header_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.QuotationDataPlatformQuotationsHeaderDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Quotation == foreign.Quotation {
				local.R.QuotationDataPlatformQuotationsHeaderDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadQuotationDataPlatformQuotationsItemPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuotationsItemDatumL) LoadQuotationDataPlatformQuotationsItemPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuotationsItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuotationsItemDatum
	var object *DataPlatformQuotationsItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuotationsItemDatum.(*DataPlatformQuotationsItemDatum)
		if !ok {
			object = new(DataPlatformQuotationsItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuotationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuotationsItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuotationsItemDatum.(*[]*DataPlatformQuotationsItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuotationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuotationsItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuotationsItemDatumR{}
		}
		args = append(args, object.Quotation)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuotationsItemDatumR{}
			}

			for _, a := range args {
				if a == obj.Quotation {
					continue Outer
				}
			}

			args = append(args, obj.Quotation)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quotations_item_partner_data`),
		qm.WhereIn(`data_platform_quotations_item_partner_data.Quotation in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_quotations_item_partner_data")
	}

	var resultSlice []*DataPlatformQuotationsItemPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_quotations_item_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_quotations_item_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quotations_item_partner_data")
	}

	if singular {
		object.R.QuotationDataPlatformQuotationsItemPartnerData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Quotation == foreign.Quotation {
				local.R.QuotationDataPlatformQuotationsItemPartnerData = append(local.R.QuotationDataPlatformQuotationsItemPartnerData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadQuotationDataPlatformQuotationsItemPricingElementData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuotationsItemDatumL) LoadQuotationDataPlatformQuotationsItemPricingElementData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuotationsItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuotationsItemDatum
	var object *DataPlatformQuotationsItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuotationsItemDatum.(*DataPlatformQuotationsItemDatum)
		if !ok {
			object = new(DataPlatformQuotationsItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuotationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuotationsItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuotationsItemDatum.(*[]*DataPlatformQuotationsItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuotationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuotationsItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuotationsItemDatumR{}
		}
		args = append(args, object.Quotation)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuotationsItemDatumR{}
			}

			for _, a := range args {
				if a == obj.Quotation {
					continue Outer
				}
			}

			args = append(args, obj.Quotation)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quotations_item_pricing_element_data`),
		qm.WhereIn(`data_platform_quotations_item_pricing_element_data.Quotation in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_quotations_item_pricing_element_data")
	}

	var resultSlice []*DataPlatformQuotationsItemPricingElementDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_quotations_item_pricing_element_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_quotations_item_pricing_element_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quotations_item_pricing_element_data")
	}

	if singular {
		object.R.QuotationDataPlatformQuotationsItemPricingElementData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Quotation == foreign.Quotation {
				local.R.QuotationDataPlatformQuotationsItemPricingElementData = append(local.R.QuotationDataPlatformQuotationsItemPricingElementData, foreign)
				break
			}
		}
	}

	return nil
}

// SetQuotationDataPlatformQuotationsHeaderDatum of the dataPlatformQuotationsItemDatum to the related item.
// Sets o.R.QuotationDataPlatformQuotationsHeaderDatum to related.
func (o *DataPlatformQuotationsItemDatum) SetQuotationDataPlatformQuotationsHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuotationsHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_quotations_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Quotation"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Quotation, o.Quotation, o.QuotationItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Quotation = related.Quotation
	if o.R == nil {
		o.R = &dataPlatformQuotationsItemDatumR{
			QuotationDataPlatformQuotationsHeaderDatum: related,
		}
	} else {
		o.R.QuotationDataPlatformQuotationsHeaderDatum = related
	}

	return nil
}

// AddQuotationDataPlatformQuotationsItemPartnerData adds the given related objects to the existing relationships
// of the data_platform_quotations_item_datum, optionally inserting them as new records.
// Appends related to o.R.QuotationDataPlatformQuotationsItemPartnerData.
func (o *DataPlatformQuotationsItemDatum) AddQuotationDataPlatformQuotationsItemPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuotationsItemPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Quotation = o.Quotation
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_quotations_item_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Quotation"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsItemPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Quotation, rel.Quotation, rel.QuotationItem, rel.PartnerFunction}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Quotation = o.Quotation
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuotationsItemDatumR{
			QuotationDataPlatformQuotationsItemPartnerData: related,
		}
	} else {
		o.R.QuotationDataPlatformQuotationsItemPartnerData = append(o.R.QuotationDataPlatformQuotationsItemPartnerData, related...)
	}

	return nil
}

// AddQuotationDataPlatformQuotationsItemPricingElementData adds the given related objects to the existing relationships
// of the data_platform_quotations_item_datum, optionally inserting them as new records.
// Appends related to o.R.QuotationDataPlatformQuotationsItemPricingElementData.
func (o *DataPlatformQuotationsItemDatum) AddQuotationDataPlatformQuotationsItemPricingElementData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuotationsItemPricingElementDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Quotation = o.Quotation
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_quotations_item_pricing_element_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Quotation"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsItemPricingElementDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Quotation, rel.Quotation, rel.QuotationItem, rel.PricingProcedureStep, rel.PricingProcedureCounter}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Quotation = o.Quotation
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuotationsItemDatumR{
			QuotationDataPlatformQuotationsItemPricingElementData: related,
		}
	} else {
		o.R.QuotationDataPlatformQuotationsItemPricingElementData = append(o.R.QuotationDataPlatformQuotationsItemPricingElementData, related...)
	}

	return nil
}

// DataPlatformQuotationsItemData retrieves all the records using an executor.
func DataPlatformQuotationsItemData(mods ...qm.QueryMod) dataPlatformQuotationsItemDatumQuery {
	mods = append(mods, qm.From("`data_platform_quotations_item_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_quotations_item_data`.*"})
	}

	return dataPlatformQuotationsItemDatumQuery{q}
}

// FindDataPlatformQuotationsItemDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformQuotationsItemDatum(ctx context.Context, exec boil.ContextExecutor, quotation int, quotationItem int, selectCols ...string) (*DataPlatformQuotationsItemDatum, error) {
	dataPlatformQuotationsItemDatumObj := &DataPlatformQuotationsItemDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_quotations_item_data` where `Quotation`=? AND `QuotationItem`=?", sel,
	)

	q := queries.Raw(query, quotation, quotationItem)

	err := q.Bind(ctx, exec, dataPlatformQuotationsItemDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_quotations_item_data")
	}

	return dataPlatformQuotationsItemDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformQuotationsItemDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_quotations_item_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformQuotationsItemDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformQuotationsItemDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformQuotationsItemDatumInsertCache[key]
	dataPlatformQuotationsItemDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformQuotationsItemDatumAllColumns,
			dataPlatformQuotationsItemDatumColumnsWithDefault,
			dataPlatformQuotationsItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformQuotationsItemDatumType, dataPlatformQuotationsItemDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformQuotationsItemDatumType, dataPlatformQuotationsItemDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_quotations_item_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_quotations_item_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_quotations_item_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsItemDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_quotations_item_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Quotation,
		o.QuotationItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_quotations_item_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformQuotationsItemDatumInsertCacheMut.Lock()
		dataPlatformQuotationsItemDatumInsertCache[key] = cache
		dataPlatformQuotationsItemDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformQuotationsItemDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformQuotationsItemDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformQuotationsItemDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformQuotationsItemDatumUpdateCache[key]
	dataPlatformQuotationsItemDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformQuotationsItemDatumAllColumns,
			dataPlatformQuotationsItemDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_quotations_item_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_quotations_item_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsItemDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformQuotationsItemDatumType, dataPlatformQuotationsItemDatumMapping, append(wl, dataPlatformQuotationsItemDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_quotations_item_data row")
	}

	if !cached {
		dataPlatformQuotationsItemDatumUpdateCacheMut.Lock()
		dataPlatformQuotationsItemDatumUpdateCache[key] = cache
		dataPlatformQuotationsItemDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformQuotationsItemDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_quotations_item_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformQuotationsItemDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformQuotationsItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_quotations_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformQuotationsItemDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformQuotationsItemDatum slice")
	}

	return nil
}

var mySQLDataPlatformQuotationsItemDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformQuotationsItemDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_quotations_item_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformQuotationsItemDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformQuotationsItemDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformQuotationsItemDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformQuotationsItemDatumUpsertCache[key]
	dataPlatformQuotationsItemDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformQuotationsItemDatumAllColumns,
			dataPlatformQuotationsItemDatumColumnsWithDefault,
			dataPlatformQuotationsItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformQuotationsItemDatumAllColumns,
			dataPlatformQuotationsItemDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_quotations_item_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_quotations_item_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_quotations_item_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformQuotationsItemDatumType, dataPlatformQuotationsItemDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformQuotationsItemDatumType, dataPlatformQuotationsItemDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_quotations_item_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformQuotationsItemDatumType, dataPlatformQuotationsItemDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_quotations_item_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_quotations_item_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformQuotationsItemDatumUpsertCacheMut.Lock()
		dataPlatformQuotationsItemDatumUpsertCache[key] = cache
		dataPlatformQuotationsItemDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformQuotationsItemDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformQuotationsItemDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformQuotationsItemDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformQuotationsItemDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_quotations_item_data` WHERE `Quotation`=? AND `QuotationItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_quotations_item_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformQuotationsItemDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformQuotationsItemDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_quotations_item_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformQuotationsItemDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformQuotationsItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_quotations_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformQuotationsItemDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformQuotationsItemDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformQuotationsItemDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformQuotationsItemDatum(ctx, exec, o.Quotation, o.QuotationItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformQuotationsItemDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformQuotationsItemDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformQuotationsItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_quotations_item_data`.* FROM `data_platform_quotations_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformQuotationsItemDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformQuotationsItemDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformQuotationsItemDatumExists checks if the DataPlatformQuotationsItemDatum row exists.
func DataPlatformQuotationsItemDatumExists(ctx context.Context, exec boil.ContextExecutor, quotation int, quotationItem int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_quotations_item_data` where `Quotation`=? AND `QuotationItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, quotation, quotationItem)
	}
	row := exec.QueryRowContext(ctx, sql, quotation, quotationItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_quotations_item_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformQuotationsItemDatum row exists.
func (o *DataPlatformQuotationsItemDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformQuotationsItemDatumExists(ctx, exec, o.Quotation, o.QuotationItem)
}
