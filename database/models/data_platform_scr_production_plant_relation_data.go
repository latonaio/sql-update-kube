// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformSCRProductionPlantRelationDatum is an object representing the database table.
type DataPlatformSCRProductionPlantRelationDatum struct {
	SupplyChainRelationshipID                int         `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipProductionPlantID int         `boil:"SupplyChainRelationshipProductionPlantID" json:"SupplyChainRelationshipProductionPlantID" toml:"SupplyChainRelationshipProductionPlantID" yaml:"SupplyChainRelationshipProductionPlantID"`
	Buyer                                    int         `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                                   int         `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	ProductionPlantBusinessPartner           int         `boil:"ProductionPlantBusinessPartner" json:"ProductionPlantBusinessPartner" toml:"ProductionPlantBusinessPartner" yaml:"ProductionPlantBusinessPartner"`
	ProductionPlant                          string      `boil:"ProductionPlant" json:"ProductionPlant" toml:"ProductionPlant" yaml:"ProductionPlant"`
	DefaultRelation                          null.Bool   `boil:"DefaultRelation" json:"DefaultRelation,omitempty" toml:"DefaultRelation" yaml:"DefaultRelation,omitempty"`
	MRPType                                  null.String `boil:"MRPType" json:"MRPType,omitempty" toml:"MRPType" yaml:"MRPType,omitempty"`
	MRPController                            null.String `boil:"MRPController" json:"MRPController,omitempty" toml:"MRPController" yaml:"MRPController,omitempty"`
	CreationDate                             string      `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	LastChangeDate                           string      `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	IsMarkedForDeletion                      null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformSCRProductionPlantRelationDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformSCRProductionPlantRelationDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformSCRProductionPlantRelationDatumColumns = struct {
	SupplyChainRelationshipID                string
	SupplyChainRelationshipProductionPlantID string
	Buyer                                    string
	Seller                                   string
	ProductionPlantBusinessPartner           string
	ProductionPlant                          string
	DefaultRelation                          string
	MRPType                                  string
	MRPController                            string
	CreationDate                             string
	LastChangeDate                           string
	IsMarkedForDeletion                      string
}{
	SupplyChainRelationshipID:                "SupplyChainRelationshipID",
	SupplyChainRelationshipProductionPlantID: "SupplyChainRelationshipProductionPlantID",
	Buyer:                                    "Buyer",
	Seller:                                   "Seller",
	ProductionPlantBusinessPartner:           "ProductionPlantBusinessPartner",
	ProductionPlant:                          "ProductionPlant",
	DefaultRelation:                          "DefaultRelation",
	MRPType:                                  "MRPType",
	MRPController:                            "MRPController",
	CreationDate:                             "CreationDate",
	LastChangeDate:                           "LastChangeDate",
	IsMarkedForDeletion:                      "IsMarkedForDeletion",
}

var DataPlatformSCRProductionPlantRelationDatumTableColumns = struct {
	SupplyChainRelationshipID                string
	SupplyChainRelationshipProductionPlantID string
	Buyer                                    string
	Seller                                   string
	ProductionPlantBusinessPartner           string
	ProductionPlant                          string
	DefaultRelation                          string
	MRPType                                  string
	MRPController                            string
	CreationDate                             string
	LastChangeDate                           string
	IsMarkedForDeletion                      string
}{
	SupplyChainRelationshipID:                "data_platform_scr_production_plant_relation_data.SupplyChainRelationshipID",
	SupplyChainRelationshipProductionPlantID: "data_platform_scr_production_plant_relation_data.SupplyChainRelationshipProductionPlantID",
	Buyer:                                    "data_platform_scr_production_plant_relation_data.Buyer",
	Seller:                                   "data_platform_scr_production_plant_relation_data.Seller",
	ProductionPlantBusinessPartner:           "data_platform_scr_production_plant_relation_data.ProductionPlantBusinessPartner",
	ProductionPlant:                          "data_platform_scr_production_plant_relation_data.ProductionPlant",
	DefaultRelation:                          "data_platform_scr_production_plant_relation_data.DefaultRelation",
	MRPType:                                  "data_platform_scr_production_plant_relation_data.MRPType",
	MRPController:                            "data_platform_scr_production_plant_relation_data.MRPController",
	CreationDate:                             "data_platform_scr_production_plant_relation_data.CreationDate",
	LastChangeDate:                           "data_platform_scr_production_plant_relation_data.LastChangeDate",
	IsMarkedForDeletion:                      "data_platform_scr_production_plant_relation_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformSCRProductionPlantRelationDatumWhere = struct {
	SupplyChainRelationshipID                whereHelperint
	SupplyChainRelationshipProductionPlantID whereHelperint
	Buyer                                    whereHelperint
	Seller                                   whereHelperint
	ProductionPlantBusinessPartner           whereHelperint
	ProductionPlant                          whereHelperstring
	DefaultRelation                          whereHelpernull_Bool
	MRPType                                  whereHelpernull_String
	MRPController                            whereHelpernull_String
	CreationDate                             whereHelperstring
	LastChangeDate                           whereHelperstring
	IsMarkedForDeletion                      whereHelpernull_Bool
}{
	SupplyChainRelationshipID:                whereHelperint{field: "`data_platform_scr_production_plant_relation_data`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipProductionPlantID: whereHelperint{field: "`data_platform_scr_production_plant_relation_data`.`SupplyChainRelationshipProductionPlantID`"},
	Buyer:                                    whereHelperint{field: "`data_platform_scr_production_plant_relation_data`.`Buyer`"},
	Seller:                                   whereHelperint{field: "`data_platform_scr_production_plant_relation_data`.`Seller`"},
	ProductionPlantBusinessPartner:           whereHelperint{field: "`data_platform_scr_production_plant_relation_data`.`ProductionPlantBusinessPartner`"},
	ProductionPlant:                          whereHelperstring{field: "`data_platform_scr_production_plant_relation_data`.`ProductionPlant`"},
	DefaultRelation:                          whereHelpernull_Bool{field: "`data_platform_scr_production_plant_relation_data`.`DefaultRelation`"},
	MRPType:                                  whereHelpernull_String{field: "`data_platform_scr_production_plant_relation_data`.`MRPType`"},
	MRPController:                            whereHelpernull_String{field: "`data_platform_scr_production_plant_relation_data`.`MRPController`"},
	CreationDate:                             whereHelperstring{field: "`data_platform_scr_production_plant_relation_data`.`CreationDate`"},
	LastChangeDate:                           whereHelperstring{field: "`data_platform_scr_production_plant_relation_data`.`LastChangeDate`"},
	IsMarkedForDeletion:                      whereHelpernull_Bool{field: "`data_platform_scr_production_plant_relation_data`.`IsMarkedForDeletion`"},
}

// DataPlatformSCRProductionPlantRelationDatumRels is where relationship names are stored.
var DataPlatformSCRProductionPlantRelationDatumRels = struct {
	ProductionPlantDataPlatformPlantGeneralDatum string
	BuyerDataPlatformSCRGeneralDatum             string
	BuyerDataPlatformDeliveryDocumentItemData    string
	BuyerDataPlatformOrdersItemData              string
}{
	ProductionPlantDataPlatformPlantGeneralDatum: "ProductionPlantDataPlatformPlantGeneralDatum",
	BuyerDataPlatformSCRGeneralDatum:             "BuyerDataPlatformSCRGeneralDatum",
	BuyerDataPlatformDeliveryDocumentItemData:    "BuyerDataPlatformDeliveryDocumentItemData",
	BuyerDataPlatformOrdersItemData:              "BuyerDataPlatformOrdersItemData",
}

// dataPlatformSCRProductionPlantRelationDatumR is where relationships are stored.
type dataPlatformSCRProductionPlantRelationDatumR struct {
	ProductionPlantDataPlatformPlantGeneralDatum *DataPlatformPlantGeneralDatum             `boil:"ProductionPlantDataPlatformPlantGeneralDatum" json:"ProductionPlantDataPlatformPlantGeneralDatum" toml:"ProductionPlantDataPlatformPlantGeneralDatum" yaml:"ProductionPlantDataPlatformPlantGeneralDatum"`
	BuyerDataPlatformSCRGeneralDatum             *DataPlatformSCRGeneralDatum               `boil:"BuyerDataPlatformSCRGeneralDatum" json:"BuyerDataPlatformSCRGeneralDatum" toml:"BuyerDataPlatformSCRGeneralDatum" yaml:"BuyerDataPlatformSCRGeneralDatum"`
	BuyerDataPlatformDeliveryDocumentItemData    DataPlatformDeliveryDocumentItemDatumSlice `boil:"BuyerDataPlatformDeliveryDocumentItemData" json:"BuyerDataPlatformDeliveryDocumentItemData" toml:"BuyerDataPlatformDeliveryDocumentItemData" yaml:"BuyerDataPlatformDeliveryDocumentItemData"`
	BuyerDataPlatformOrdersItemData              DataPlatformOrdersItemDatumSlice           `boil:"BuyerDataPlatformOrdersItemData" json:"BuyerDataPlatformOrdersItemData" toml:"BuyerDataPlatformOrdersItemData" yaml:"BuyerDataPlatformOrdersItemData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformSCRProductionPlantRelationDatumR) NewStruct() *dataPlatformSCRProductionPlantRelationDatumR {
	return &dataPlatformSCRProductionPlantRelationDatumR{}
}

func (r *dataPlatformSCRProductionPlantRelationDatumR) GetProductionPlantDataPlatformPlantGeneralDatum() *DataPlatformPlantGeneralDatum {
	if r == nil {
		return nil
	}
	return r.ProductionPlantDataPlatformPlantGeneralDatum
}

func (r *dataPlatformSCRProductionPlantRelationDatumR) GetBuyerDataPlatformSCRGeneralDatum() *DataPlatformSCRGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRGeneralDatum
}

func (r *dataPlatformSCRProductionPlantRelationDatumR) GetBuyerDataPlatformDeliveryDocumentItemData() DataPlatformDeliveryDocumentItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformDeliveryDocumentItemData
}

func (r *dataPlatformSCRProductionPlantRelationDatumR) GetBuyerDataPlatformOrdersItemData() DataPlatformOrdersItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformOrdersItemData
}

// dataPlatformSCRProductionPlantRelationDatumL is where Load methods for each relationship are stored.
type dataPlatformSCRProductionPlantRelationDatumL struct{}

var (
	dataPlatformSCRProductionPlantRelationDatumAllColumns            = []string{"SupplyChainRelationshipID", "SupplyChainRelationshipProductionPlantID", "Buyer", "Seller", "ProductionPlantBusinessPartner", "ProductionPlant", "DefaultRelation", "MRPType", "MRPController", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformSCRProductionPlantRelationDatumColumnsWithoutDefault = []string{"SupplyChainRelationshipID", "SupplyChainRelationshipProductionPlantID", "Buyer", "Seller", "ProductionPlantBusinessPartner", "ProductionPlant", "DefaultRelation", "MRPType", "MRPController", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformSCRProductionPlantRelationDatumColumnsWithDefault    = []string{}
	dataPlatformSCRProductionPlantRelationDatumPrimaryKeyColumns     = []string{"SupplyChainRelationshipID", "SupplyChainRelationshipProductionPlantID", "Buyer", "Seller", "ProductionPlantBusinessPartner", "ProductionPlant"}
	dataPlatformSCRProductionPlantRelationDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformSCRProductionPlantRelationDatumSlice is an alias for a slice of pointers to DataPlatformSCRProductionPlantRelationDatum.
	// This should almost always be used instead of []DataPlatformSCRProductionPlantRelationDatum.
	DataPlatformSCRProductionPlantRelationDatumSlice []*DataPlatformSCRProductionPlantRelationDatum

	dataPlatformSCRProductionPlantRelationDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformSCRProductionPlantRelationDatumType                 = reflect.TypeOf(&DataPlatformSCRProductionPlantRelationDatum{})
	dataPlatformSCRProductionPlantRelationDatumMapping              = queries.MakeStructMapping(dataPlatformSCRProductionPlantRelationDatumType)
	dataPlatformSCRProductionPlantRelationDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformSCRProductionPlantRelationDatumType, dataPlatformSCRProductionPlantRelationDatumMapping, dataPlatformSCRProductionPlantRelationDatumPrimaryKeyColumns)
	dataPlatformSCRProductionPlantRelationDatumInsertCacheMut       sync.RWMutex
	dataPlatformSCRProductionPlantRelationDatumInsertCache          = make(map[string]insertCache)
	dataPlatformSCRProductionPlantRelationDatumUpdateCacheMut       sync.RWMutex
	dataPlatformSCRProductionPlantRelationDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformSCRProductionPlantRelationDatumUpsertCacheMut       sync.RWMutex
	dataPlatformSCRProductionPlantRelationDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformSCRProductionPlantRelationDatum record from the query.
func (q dataPlatformSCRProductionPlantRelationDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformSCRProductionPlantRelationDatum, error) {
	o := &DataPlatformSCRProductionPlantRelationDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_scr_production_plant_relation_data")
	}

	return o, nil
}

// All returns all DataPlatformSCRProductionPlantRelationDatum records from the query.
func (q dataPlatformSCRProductionPlantRelationDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformSCRProductionPlantRelationDatumSlice, error) {
	var o []*DataPlatformSCRProductionPlantRelationDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformSCRProductionPlantRelationDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformSCRProductionPlantRelationDatum records in the query.
func (q dataPlatformSCRProductionPlantRelationDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_scr_production_plant_relation_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformSCRProductionPlantRelationDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_scr_production_plant_relation_data exists")
	}

	return count > 0, nil
}

// ProductionPlantDataPlatformPlantGeneralDatum pointed to by the foreign key.
func (o *DataPlatformSCRProductionPlantRelationDatum) ProductionPlantDataPlatformPlantGeneralDatum(mods ...qm.QueryMod) dataPlatformPlantGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Plant` = ?", o.ProductionPlant),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPlantGeneralData(queryMods...)
}

// BuyerDataPlatformSCRGeneralDatum pointed to by the foreign key.
func (o *DataPlatformSCRProductionPlantRelationDatum) BuyerDataPlatformSCRGeneralDatum(mods ...qm.QueryMod) dataPlatformSCRGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRGeneralData(queryMods...)
}

// BuyerDataPlatformDeliveryDocumentItemData retrieves all the data_platform_delivery_document_item_datum's DataPlatformDeliveryDocumentItemData with an executor via Buyer column.
func (o *DataPlatformSCRProductionPlantRelationDatum) BuyerDataPlatformDeliveryDocumentItemData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_item_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformDeliveryDocumentItemData(queryMods...)
}

// BuyerDataPlatformOrdersItemData retrieves all the data_platform_orders_item_datum's DataPlatformOrdersItemData with an executor via Buyer column.
func (o *DataPlatformSCRProductionPlantRelationDatum) BuyerDataPlatformOrdersItemData(mods ...qm.QueryMod) dataPlatformOrdersItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_item_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformOrdersItemData(queryMods...)
}

// LoadProductionPlantDataPlatformPlantGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSCRProductionPlantRelationDatumL) LoadProductionPlantDataPlatformPlantGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRProductionPlantRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRProductionPlantRelationDatum
	var object *DataPlatformSCRProductionPlantRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRProductionPlantRelationDatum.(*DataPlatformSCRProductionPlantRelationDatum)
		if !ok {
			object = new(DataPlatformSCRProductionPlantRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRProductionPlantRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRProductionPlantRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRProductionPlantRelationDatum.(*[]*DataPlatformSCRProductionPlantRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRProductionPlantRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRProductionPlantRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRProductionPlantRelationDatumR{}
		}
		args = append(args, object.ProductionPlant)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRProductionPlantRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.ProductionPlant {
					continue Outer
				}
			}

			args = append(args, obj.ProductionPlant)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_general_data`),
		qm.WhereIn(`data_platform_plant_general_data.Plant in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPlantGeneralDatum")
	}

	var resultSlice []*DataPlatformPlantGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPlantGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_plant_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductionPlantDataPlatformPlantGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductionPlant == foreign.Plant {
				local.R.ProductionPlantDataPlatformPlantGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSCRProductionPlantRelationDatumL) LoadBuyerDataPlatformSCRGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRProductionPlantRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRProductionPlantRelationDatum
	var object *DataPlatformSCRProductionPlantRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRProductionPlantRelationDatum.(*DataPlatformSCRProductionPlantRelationDatum)
		if !ok {
			object = new(DataPlatformSCRProductionPlantRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRProductionPlantRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRProductionPlantRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRProductionPlantRelationDatum.(*[]*DataPlatformSCRProductionPlantRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRProductionPlantRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRProductionPlantRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRProductionPlantRelationDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRProductionPlantRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_general_data`),
		qm.WhereIn(`data_platform_scr_general_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRGeneralDatum")
	}

	var resultSlice []*DataPlatformSCRGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformDeliveryDocumentItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRProductionPlantRelationDatumL) LoadBuyerDataPlatformDeliveryDocumentItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRProductionPlantRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRProductionPlantRelationDatum
	var object *DataPlatformSCRProductionPlantRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRProductionPlantRelationDatum.(*DataPlatformSCRProductionPlantRelationDatum)
		if !ok {
			object = new(DataPlatformSCRProductionPlantRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRProductionPlantRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRProductionPlantRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRProductionPlantRelationDatum.(*[]*DataPlatformSCRProductionPlantRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRProductionPlantRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRProductionPlantRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRProductionPlantRelationDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRProductionPlantRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_item_data`),
		qm.WhereIn(`data_platform_delivery_document_item_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_item_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_item_data")
	}

	if singular {
		object.R.BuyerDataPlatformDeliveryDocumentItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformDeliveryDocumentItemData = append(local.R.BuyerDataPlatformDeliveryDocumentItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformOrdersItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRProductionPlantRelationDatumL) LoadBuyerDataPlatformOrdersItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRProductionPlantRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRProductionPlantRelationDatum
	var object *DataPlatformSCRProductionPlantRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRProductionPlantRelationDatum.(*DataPlatformSCRProductionPlantRelationDatum)
		if !ok {
			object = new(DataPlatformSCRProductionPlantRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRProductionPlantRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRProductionPlantRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRProductionPlantRelationDatum.(*[]*DataPlatformSCRProductionPlantRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRProductionPlantRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRProductionPlantRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRProductionPlantRelationDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRProductionPlantRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_data`),
		qm.WhereIn(`data_platform_orders_item_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_item_data")
	}

	var resultSlice []*DataPlatformOrdersItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_data")
	}

	if singular {
		object.R.BuyerDataPlatformOrdersItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformOrdersItemData = append(local.R.BuyerDataPlatformOrdersItemData, foreign)
				break
			}
		}
	}

	return nil
}

// SetProductionPlantDataPlatformPlantGeneralDatum of the dataPlatformSCRProductionPlantRelationDatum to the related item.
// Sets o.R.ProductionPlantDataPlatformPlantGeneralDatum to related.
func (o *DataPlatformSCRProductionPlantRelationDatum) SetProductionPlantDataPlatformPlantGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPlantGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_scr_production_plant_relation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductionPlant"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSCRProductionPlantRelationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Plant, o.SupplyChainRelationshipID, o.SupplyChainRelationshipProductionPlantID, o.Buyer, o.Seller, o.ProductionPlantBusinessPartner, o.ProductionPlant}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductionPlant = related.Plant
	if o.R == nil {
		o.R = &dataPlatformSCRProductionPlantRelationDatumR{
			ProductionPlantDataPlatformPlantGeneralDatum: related,
		}
	} else {
		o.R.ProductionPlantDataPlatformPlantGeneralDatum = related
	}

	return nil
}

// SetBuyerDataPlatformSCRGeneralDatum of the dataPlatformSCRProductionPlantRelationDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRGeneralDatum to related.
func (o *DataPlatformSCRProductionPlantRelationDatum) SetBuyerDataPlatformSCRGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_scr_production_plant_relation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSCRProductionPlantRelationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.SupplyChainRelationshipID, o.SupplyChainRelationshipProductionPlantID, o.Buyer, o.Seller, o.ProductionPlantBusinessPartner, o.ProductionPlant}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformSCRProductionPlantRelationDatumR{
			BuyerDataPlatformSCRGeneralDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRGeneralDatum = related
	}

	return nil
}

// AddBuyerDataPlatformDeliveryDocumentItemData adds the given related objects to the existing relationships
// of the data_platform_scr_production_plant_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformDeliveryDocumentItemData.
func (o *DataPlatformSCRProductionPlantRelationDatum) AddBuyerDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.DeliveryDocument, rel.DeliveryDocumentItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRProductionPlantRelationDatumR{
			BuyerDataPlatformDeliveryDocumentItemData: related,
		}
	} else {
		o.R.BuyerDataPlatformDeliveryDocumentItemData = append(o.R.BuyerDataPlatformDeliveryDocumentItemData, related...)
	}

	return nil
}

// AddBuyerDataPlatformOrdersItemData adds the given related objects to the existing relationships
// of the data_platform_scr_production_plant_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformOrdersItemData.
func (o *DataPlatformSCRProductionPlantRelationDatum) AddBuyerDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.OrderID, rel.OrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRProductionPlantRelationDatumR{
			BuyerDataPlatformOrdersItemData: related,
		}
	} else {
		o.R.BuyerDataPlatformOrdersItemData = append(o.R.BuyerDataPlatformOrdersItemData, related...)
	}

	return nil
}

// DataPlatformSCRProductionPlantRelationData retrieves all the records using an executor.
func DataPlatformSCRProductionPlantRelationData(mods ...qm.QueryMod) dataPlatformSCRProductionPlantRelationDatumQuery {
	mods = append(mods, qm.From("`data_platform_scr_production_plant_relation_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_scr_production_plant_relation_data`.*"})
	}

	return dataPlatformSCRProductionPlantRelationDatumQuery{q}
}

// FindDataPlatformSCRProductionPlantRelationDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformSCRProductionPlantRelationDatum(ctx context.Context, exec boil.ContextExecutor, supplyChainRelationshipID int, supplyChainRelationshipProductionPlantID int, buyer int, seller int, productionPlantBusinessPartner int, productionPlant string, selectCols ...string) (*DataPlatformSCRProductionPlantRelationDatum, error) {
	dataPlatformSCRProductionPlantRelationDatumObj := &DataPlatformSCRProductionPlantRelationDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_scr_production_plant_relation_data` where `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipProductionPlantID`=? AND `Buyer`=? AND `Seller`=? AND `ProductionPlantBusinessPartner`=? AND `ProductionPlant`=?", sel,
	)

	q := queries.Raw(query, supplyChainRelationshipID, supplyChainRelationshipProductionPlantID, buyer, seller, productionPlantBusinessPartner, productionPlant)

	err := q.Bind(ctx, exec, dataPlatformSCRProductionPlantRelationDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_scr_production_plant_relation_data")
	}

	return dataPlatformSCRProductionPlantRelationDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformSCRProductionPlantRelationDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_scr_production_plant_relation_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformSCRProductionPlantRelationDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformSCRProductionPlantRelationDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformSCRProductionPlantRelationDatumInsertCache[key]
	dataPlatformSCRProductionPlantRelationDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformSCRProductionPlantRelationDatumAllColumns,
			dataPlatformSCRProductionPlantRelationDatumColumnsWithDefault,
			dataPlatformSCRProductionPlantRelationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformSCRProductionPlantRelationDatumType, dataPlatformSCRProductionPlantRelationDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformSCRProductionPlantRelationDatumType, dataPlatformSCRProductionPlantRelationDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_scr_production_plant_relation_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_scr_production_plant_relation_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_scr_production_plant_relation_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformSCRProductionPlantRelationDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_scr_production_plant_relation_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SupplyChainRelationshipID,
		o.SupplyChainRelationshipProductionPlantID,
		o.Buyer,
		o.Seller,
		o.ProductionPlantBusinessPartner,
		o.ProductionPlant,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_scr_production_plant_relation_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformSCRProductionPlantRelationDatumInsertCacheMut.Lock()
		dataPlatformSCRProductionPlantRelationDatumInsertCache[key] = cache
		dataPlatformSCRProductionPlantRelationDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformSCRProductionPlantRelationDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformSCRProductionPlantRelationDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformSCRProductionPlantRelationDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformSCRProductionPlantRelationDatumUpdateCache[key]
	dataPlatformSCRProductionPlantRelationDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformSCRProductionPlantRelationDatumAllColumns,
			dataPlatformSCRProductionPlantRelationDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_scr_production_plant_relation_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_scr_production_plant_relation_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformSCRProductionPlantRelationDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformSCRProductionPlantRelationDatumType, dataPlatformSCRProductionPlantRelationDatumMapping, append(wl, dataPlatformSCRProductionPlantRelationDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_scr_production_plant_relation_data row")
	}

	if !cached {
		dataPlatformSCRProductionPlantRelationDatumUpdateCacheMut.Lock()
		dataPlatformSCRProductionPlantRelationDatumUpdateCache[key] = cache
		dataPlatformSCRProductionPlantRelationDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformSCRProductionPlantRelationDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_scr_production_plant_relation_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformSCRProductionPlantRelationDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSCRProductionPlantRelationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_scr_production_plant_relation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSCRProductionPlantRelationDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformSCRProductionPlantRelationDatum slice")
	}

	return nil
}

var mySQLDataPlatformSCRProductionPlantRelationDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformSCRProductionPlantRelationDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_scr_production_plant_relation_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformSCRProductionPlantRelationDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformSCRProductionPlantRelationDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformSCRProductionPlantRelationDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformSCRProductionPlantRelationDatumUpsertCache[key]
	dataPlatformSCRProductionPlantRelationDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformSCRProductionPlantRelationDatumAllColumns,
			dataPlatformSCRProductionPlantRelationDatumColumnsWithDefault,
			dataPlatformSCRProductionPlantRelationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformSCRProductionPlantRelationDatumAllColumns,
			dataPlatformSCRProductionPlantRelationDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_scr_production_plant_relation_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_scr_production_plant_relation_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_scr_production_plant_relation_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformSCRProductionPlantRelationDatumType, dataPlatformSCRProductionPlantRelationDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformSCRProductionPlantRelationDatumType, dataPlatformSCRProductionPlantRelationDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_scr_production_plant_relation_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformSCRProductionPlantRelationDatumType, dataPlatformSCRProductionPlantRelationDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_scr_production_plant_relation_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_scr_production_plant_relation_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformSCRProductionPlantRelationDatumUpsertCacheMut.Lock()
		dataPlatformSCRProductionPlantRelationDatumUpsertCache[key] = cache
		dataPlatformSCRProductionPlantRelationDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformSCRProductionPlantRelationDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformSCRProductionPlantRelationDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformSCRProductionPlantRelationDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformSCRProductionPlantRelationDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_scr_production_plant_relation_data` WHERE `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipProductionPlantID`=? AND `Buyer`=? AND `Seller`=? AND `ProductionPlantBusinessPartner`=? AND `ProductionPlant`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_scr_production_plant_relation_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformSCRProductionPlantRelationDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformSCRProductionPlantRelationDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_scr_production_plant_relation_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformSCRProductionPlantRelationDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSCRProductionPlantRelationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_scr_production_plant_relation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSCRProductionPlantRelationDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformSCRProductionPlantRelationDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformSCRProductionPlantRelationDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformSCRProductionPlantRelationDatum(ctx, exec, o.SupplyChainRelationshipID, o.SupplyChainRelationshipProductionPlantID, o.Buyer, o.Seller, o.ProductionPlantBusinessPartner, o.ProductionPlant)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformSCRProductionPlantRelationDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformSCRProductionPlantRelationDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSCRProductionPlantRelationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_scr_production_plant_relation_data`.* FROM `data_platform_scr_production_plant_relation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSCRProductionPlantRelationDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformSCRProductionPlantRelationDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformSCRProductionPlantRelationDatumExists checks if the DataPlatformSCRProductionPlantRelationDatum row exists.
func DataPlatformSCRProductionPlantRelationDatumExists(ctx context.Context, exec boil.ContextExecutor, supplyChainRelationshipID int, supplyChainRelationshipProductionPlantID int, buyer int, seller int, productionPlantBusinessPartner int, productionPlant string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_scr_production_plant_relation_data` where `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipProductionPlantID`=? AND `Buyer`=? AND `Seller`=? AND `ProductionPlantBusinessPartner`=? AND `ProductionPlant`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, supplyChainRelationshipID, supplyChainRelationshipProductionPlantID, buyer, seller, productionPlantBusinessPartner, productionPlant)
	}
	row := exec.QueryRowContext(ctx, sql, supplyChainRelationshipID, supplyChainRelationshipProductionPlantID, buyer, seller, productionPlantBusinessPartner, productionPlant)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_scr_production_plant_relation_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformSCRProductionPlantRelationDatum row exists.
func (o *DataPlatformSCRProductionPlantRelationDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformSCRProductionPlantRelationDatumExists(ctx, exec, o.SupplyChainRelationshipID, o.SupplyChainRelationshipProductionPlantID, o.Buyer, o.Seller, o.ProductionPlantBusinessPartner, o.ProductionPlant)
}
