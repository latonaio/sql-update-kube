// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformOrdersItemFreightAgreementDatum is an object representing the database table.
type DataPlatformOrdersItemFreightAgreementDatum struct {
	OrderID                                 int         `boil:"OrderID" json:"OrderID" toml:"OrderID" yaml:"OrderID"`
	OrderItem                               int         `boil:"OrderItem" json:"OrderItem" toml:"OrderItem" yaml:"OrderItem"`
	OrderItemFreightAgreement               int         `boil:"OrderItemFreightAgreement" json:"OrderItemFreightAgreement" toml:"OrderItemFreightAgreement" yaml:"OrderItemFreightAgreement"`
	FreightAgreement                        int         `boil:"FreightAgreement" json:"FreightAgreement" toml:"FreightAgreement" yaml:"FreightAgreement"`
	FreightAgreementItem                    int         `boil:"FreightAgreementItem" json:"FreightAgreementItem" toml:"FreightAgreementItem" yaml:"FreightAgreementItem"`
	SupplyChainRelationshipID               int         `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipFreightID        int         `boil:"SupplyChainRelationshipFreightID" json:"SupplyChainRelationshipFreightID" toml:"SupplyChainRelationshipFreightID" yaml:"SupplyChainRelationshipFreightID"`
	SupplyChainRelationshipFreightBillingID null.Int    `boil:"SupplyChainRelationshipFreightBillingID" json:"SupplyChainRelationshipFreightBillingID,omitempty" toml:"SupplyChainRelationshipFreightBillingID" yaml:"SupplyChainRelationshipFreightBillingID,omitempty"`
	SupplyChainRelationshipFreightPaymentID null.Int    `boil:"SupplyChainRelationshipFreightPaymentID" json:"SupplyChainRelationshipFreightPaymentID,omitempty" toml:"SupplyChainRelationshipFreightPaymentID" yaml:"SupplyChainRelationshipFreightPaymentID,omitempty"`
	FreightPartner                          int         `boil:"FreightPartner" json:"FreightPartner" toml:"FreightPartner" yaml:"FreightPartner"`
	FreightBillToParty                      null.Int    `boil:"FreightBillToParty" json:"FreightBillToParty,omitempty" toml:"FreightBillToParty" yaml:"FreightBillToParty,omitempty"`
	FreightBillFromParty                    null.Int    `boil:"FreightBillFromParty" json:"FreightBillFromParty,omitempty" toml:"FreightBillFromParty" yaml:"FreightBillFromParty,omitempty"`
	FreightBillToCountry                    null.String `boil:"FreightBillToCountry" json:"FreightBillToCountry,omitempty" toml:"FreightBillToCountry" yaml:"FreightBillToCountry,omitempty"`
	FreightBillFromCountry                  null.String `boil:"FreightBillFromCountry" json:"FreightBillFromCountry,omitempty" toml:"FreightBillFromCountry" yaml:"FreightBillFromCountry,omitempty"`
	Product                                 null.String `boil:"Product" json:"Product,omitempty" toml:"Product" yaml:"Product,omitempty"`
	Incoterms                               null.String `boil:"Incoterms" json:"Incoterms,omitempty" toml:"Incoterms" yaml:"Incoterms,omitempty"`
	Project                                 null.Int    `boil:"Project" json:"Project,omitempty" toml:"Project" yaml:"Project,omitempty"`
	WBSElement                              null.Int    `boil:"WBSElement" json:"WBSElement,omitempty" toml:"WBSElement" yaml:"WBSElement,omitempty"`
	CreationDate                            string      `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	CreationTime                            string      `boil:"CreationTime" json:"CreationTime" toml:"CreationTime" yaml:"CreationTime"`
	LastChangeDate                          string      `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	LastChangeTime                          string      `boil:"LastChangeTime" json:"LastChangeTime" toml:"LastChangeTime" yaml:"LastChangeTime"`
	IsCancelled                             null.Bool   `boil:"IsCancelled" json:"IsCancelled,omitempty" toml:"IsCancelled" yaml:"IsCancelled,omitempty"`
	IsMarkedForDeletion                     null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformOrdersItemFreightAgreementDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformOrdersItemFreightAgreementDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformOrdersItemFreightAgreementDatumColumns = struct {
	OrderID                                 string
	OrderItem                               string
	OrderItemFreightAgreement               string
	FreightAgreement                        string
	FreightAgreementItem                    string
	SupplyChainRelationshipID               string
	SupplyChainRelationshipFreightID        string
	SupplyChainRelationshipFreightBillingID string
	SupplyChainRelationshipFreightPaymentID string
	FreightPartner                          string
	FreightBillToParty                      string
	FreightBillFromParty                    string
	FreightBillToCountry                    string
	FreightBillFromCountry                  string
	Product                                 string
	Incoterms                               string
	Project                                 string
	WBSElement                              string
	CreationDate                            string
	CreationTime                            string
	LastChangeDate                          string
	LastChangeTime                          string
	IsCancelled                             string
	IsMarkedForDeletion                     string
}{
	OrderID:                                 "OrderID",
	OrderItem:                               "OrderItem",
	OrderItemFreightAgreement:               "OrderItemFreightAgreement",
	FreightAgreement:                        "FreightAgreement",
	FreightAgreementItem:                    "FreightAgreementItem",
	SupplyChainRelationshipID:               "SupplyChainRelationshipID",
	SupplyChainRelationshipFreightID:        "SupplyChainRelationshipFreightID",
	SupplyChainRelationshipFreightBillingID: "SupplyChainRelationshipFreightBillingID",
	SupplyChainRelationshipFreightPaymentID: "SupplyChainRelationshipFreightPaymentID",
	FreightPartner:                          "FreightPartner",
	FreightBillToParty:                      "FreightBillToParty",
	FreightBillFromParty:                    "FreightBillFromParty",
	FreightBillToCountry:                    "FreightBillToCountry",
	FreightBillFromCountry:                  "FreightBillFromCountry",
	Product:                                 "Product",
	Incoterms:                               "Incoterms",
	Project:                                 "Project",
	WBSElement:                              "WBSElement",
	CreationDate:                            "CreationDate",
	CreationTime:                            "CreationTime",
	LastChangeDate:                          "LastChangeDate",
	LastChangeTime:                          "LastChangeTime",
	IsCancelled:                             "IsCancelled",
	IsMarkedForDeletion:                     "IsMarkedForDeletion",
}

var DataPlatformOrdersItemFreightAgreementDatumTableColumns = struct {
	OrderID                                 string
	OrderItem                               string
	OrderItemFreightAgreement               string
	FreightAgreement                        string
	FreightAgreementItem                    string
	SupplyChainRelationshipID               string
	SupplyChainRelationshipFreightID        string
	SupplyChainRelationshipFreightBillingID string
	SupplyChainRelationshipFreightPaymentID string
	FreightPartner                          string
	FreightBillToParty                      string
	FreightBillFromParty                    string
	FreightBillToCountry                    string
	FreightBillFromCountry                  string
	Product                                 string
	Incoterms                               string
	Project                                 string
	WBSElement                              string
	CreationDate                            string
	CreationTime                            string
	LastChangeDate                          string
	LastChangeTime                          string
	IsCancelled                             string
	IsMarkedForDeletion                     string
}{
	OrderID:                                 "data_platform_orders_item_freight_agreement_data.OrderID",
	OrderItem:                               "data_platform_orders_item_freight_agreement_data.OrderItem",
	OrderItemFreightAgreement:               "data_platform_orders_item_freight_agreement_data.OrderItemFreightAgreement",
	FreightAgreement:                        "data_platform_orders_item_freight_agreement_data.FreightAgreement",
	FreightAgreementItem:                    "data_platform_orders_item_freight_agreement_data.FreightAgreementItem",
	SupplyChainRelationshipID:               "data_platform_orders_item_freight_agreement_data.SupplyChainRelationshipID",
	SupplyChainRelationshipFreightID:        "data_platform_orders_item_freight_agreement_data.SupplyChainRelationshipFreightID",
	SupplyChainRelationshipFreightBillingID: "data_platform_orders_item_freight_agreement_data.SupplyChainRelationshipFreightBillingID",
	SupplyChainRelationshipFreightPaymentID: "data_platform_orders_item_freight_agreement_data.SupplyChainRelationshipFreightPaymentID",
	FreightPartner:                          "data_platform_orders_item_freight_agreement_data.FreightPartner",
	FreightBillToParty:                      "data_platform_orders_item_freight_agreement_data.FreightBillToParty",
	FreightBillFromParty:                    "data_platform_orders_item_freight_agreement_data.FreightBillFromParty",
	FreightBillToCountry:                    "data_platform_orders_item_freight_agreement_data.FreightBillToCountry",
	FreightBillFromCountry:                  "data_platform_orders_item_freight_agreement_data.FreightBillFromCountry",
	Product:                                 "data_platform_orders_item_freight_agreement_data.Product",
	Incoterms:                               "data_platform_orders_item_freight_agreement_data.Incoterms",
	Project:                                 "data_platform_orders_item_freight_agreement_data.Project",
	WBSElement:                              "data_platform_orders_item_freight_agreement_data.WBSElement",
	CreationDate:                            "data_platform_orders_item_freight_agreement_data.CreationDate",
	CreationTime:                            "data_platform_orders_item_freight_agreement_data.CreationTime",
	LastChangeDate:                          "data_platform_orders_item_freight_agreement_data.LastChangeDate",
	LastChangeTime:                          "data_platform_orders_item_freight_agreement_data.LastChangeTime",
	IsCancelled:                             "data_platform_orders_item_freight_agreement_data.IsCancelled",
	IsMarkedForDeletion:                     "data_platform_orders_item_freight_agreement_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformOrdersItemFreightAgreementDatumWhere = struct {
	OrderID                                 whereHelperint
	OrderItem                               whereHelperint
	OrderItemFreightAgreement               whereHelperint
	FreightAgreement                        whereHelperint
	FreightAgreementItem                    whereHelperint
	SupplyChainRelationshipID               whereHelperint
	SupplyChainRelationshipFreightID        whereHelperint
	SupplyChainRelationshipFreightBillingID whereHelpernull_Int
	SupplyChainRelationshipFreightPaymentID whereHelpernull_Int
	FreightPartner                          whereHelperint
	FreightBillToParty                      whereHelpernull_Int
	FreightBillFromParty                    whereHelpernull_Int
	FreightBillToCountry                    whereHelpernull_String
	FreightBillFromCountry                  whereHelpernull_String
	Product                                 whereHelpernull_String
	Incoterms                               whereHelpernull_String
	Project                                 whereHelpernull_Int
	WBSElement                              whereHelpernull_Int
	CreationDate                            whereHelperstring
	CreationTime                            whereHelperstring
	LastChangeDate                          whereHelperstring
	LastChangeTime                          whereHelperstring
	IsCancelled                             whereHelpernull_Bool
	IsMarkedForDeletion                     whereHelpernull_Bool
}{
	OrderID:                                 whereHelperint{field: "`data_platform_orders_item_freight_agreement_data`.`OrderID`"},
	OrderItem:                               whereHelperint{field: "`data_platform_orders_item_freight_agreement_data`.`OrderItem`"},
	OrderItemFreightAgreement:               whereHelperint{field: "`data_platform_orders_item_freight_agreement_data`.`OrderItemFreightAgreement`"},
	FreightAgreement:                        whereHelperint{field: "`data_platform_orders_item_freight_agreement_data`.`FreightAgreement`"},
	FreightAgreementItem:                    whereHelperint{field: "`data_platform_orders_item_freight_agreement_data`.`FreightAgreementItem`"},
	SupplyChainRelationshipID:               whereHelperint{field: "`data_platform_orders_item_freight_agreement_data`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipFreightID:        whereHelperint{field: "`data_platform_orders_item_freight_agreement_data`.`SupplyChainRelationshipFreightID`"},
	SupplyChainRelationshipFreightBillingID: whereHelpernull_Int{field: "`data_platform_orders_item_freight_agreement_data`.`SupplyChainRelationshipFreightBillingID`"},
	SupplyChainRelationshipFreightPaymentID: whereHelpernull_Int{field: "`data_platform_orders_item_freight_agreement_data`.`SupplyChainRelationshipFreightPaymentID`"},
	FreightPartner:                          whereHelperint{field: "`data_platform_orders_item_freight_agreement_data`.`FreightPartner`"},
	FreightBillToParty:                      whereHelpernull_Int{field: "`data_platform_orders_item_freight_agreement_data`.`FreightBillToParty`"},
	FreightBillFromParty:                    whereHelpernull_Int{field: "`data_platform_orders_item_freight_agreement_data`.`FreightBillFromParty`"},
	FreightBillToCountry:                    whereHelpernull_String{field: "`data_platform_orders_item_freight_agreement_data`.`FreightBillToCountry`"},
	FreightBillFromCountry:                  whereHelpernull_String{field: "`data_platform_orders_item_freight_agreement_data`.`FreightBillFromCountry`"},
	Product:                                 whereHelpernull_String{field: "`data_platform_orders_item_freight_agreement_data`.`Product`"},
	Incoterms:                               whereHelpernull_String{field: "`data_platform_orders_item_freight_agreement_data`.`Incoterms`"},
	Project:                                 whereHelpernull_Int{field: "`data_platform_orders_item_freight_agreement_data`.`Project`"},
	WBSElement:                              whereHelpernull_Int{field: "`data_platform_orders_item_freight_agreement_data`.`WBSElement`"},
	CreationDate:                            whereHelperstring{field: "`data_platform_orders_item_freight_agreement_data`.`CreationDate`"},
	CreationTime:                            whereHelperstring{field: "`data_platform_orders_item_freight_agreement_data`.`CreationTime`"},
	LastChangeDate:                          whereHelperstring{field: "`data_platform_orders_item_freight_agreement_data`.`LastChangeDate`"},
	LastChangeTime:                          whereHelperstring{field: "`data_platform_orders_item_freight_agreement_data`.`LastChangeTime`"},
	IsCancelled:                             whereHelpernull_Bool{field: "`data_platform_orders_item_freight_agreement_data`.`IsCancelled`"},
	IsMarkedForDeletion:                     whereHelpernull_Bool{field: "`data_platform_orders_item_freight_agreement_data`.`IsMarkedForDeletion`"},
}

// DataPlatformOrdersItemFreightAgreementDatumRels is where relationship names are stored.
var DataPlatformOrdersItemFreightAgreementDatumRels = struct {
	ProductDataPlatformProductMasterGeneralDatum string
	OrderIDDataPlatformOrdersItemDatum           string
}{
	ProductDataPlatformProductMasterGeneralDatum: "ProductDataPlatformProductMasterGeneralDatum",
	OrderIDDataPlatformOrdersItemDatum:           "OrderIDDataPlatformOrdersItemDatum",
}

// dataPlatformOrdersItemFreightAgreementDatumR is where relationships are stored.
type dataPlatformOrdersItemFreightAgreementDatumR struct {
	ProductDataPlatformProductMasterGeneralDatum *DataPlatformProductMasterGeneralDatum `boil:"ProductDataPlatformProductMasterGeneralDatum" json:"ProductDataPlatformProductMasterGeneralDatum" toml:"ProductDataPlatformProductMasterGeneralDatum" yaml:"ProductDataPlatformProductMasterGeneralDatum"`
	OrderIDDataPlatformOrdersItemDatum           *DataPlatformOrdersItemDatum           `boil:"OrderIDDataPlatformOrdersItemDatum" json:"OrderIDDataPlatformOrdersItemDatum" toml:"OrderIDDataPlatformOrdersItemDatum" yaml:"OrderIDDataPlatformOrdersItemDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformOrdersItemFreightAgreementDatumR) NewStruct() *dataPlatformOrdersItemFreightAgreementDatumR {
	return &dataPlatformOrdersItemFreightAgreementDatumR{}
}

func (r *dataPlatformOrdersItemFreightAgreementDatumR) GetProductDataPlatformProductMasterGeneralDatum() *DataPlatformProductMasterGeneralDatum {
	if r == nil {
		return nil
	}
	return r.ProductDataPlatformProductMasterGeneralDatum
}

func (r *dataPlatformOrdersItemFreightAgreementDatumR) GetOrderIDDataPlatformOrdersItemDatum() *DataPlatformOrdersItemDatum {
	if r == nil {
		return nil
	}
	return r.OrderIDDataPlatformOrdersItemDatum
}

// dataPlatformOrdersItemFreightAgreementDatumL is where Load methods for each relationship are stored.
type dataPlatformOrdersItemFreightAgreementDatumL struct{}

var (
	dataPlatformOrdersItemFreightAgreementDatumAllColumns            = []string{"OrderID", "OrderItem", "OrderItemFreightAgreement", "FreightAgreement", "FreightAgreementItem", "SupplyChainRelationshipID", "SupplyChainRelationshipFreightID", "SupplyChainRelationshipFreightBillingID", "SupplyChainRelationshipFreightPaymentID", "FreightPartner", "FreightBillToParty", "FreightBillFromParty", "FreightBillToCountry", "FreightBillFromCountry", "Product", "Incoterms", "Project", "WBSElement", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsCancelled", "IsMarkedForDeletion"}
	dataPlatformOrdersItemFreightAgreementDatumColumnsWithoutDefault = []string{"OrderID", "OrderItem", "OrderItemFreightAgreement", "FreightAgreement", "FreightAgreementItem", "SupplyChainRelationshipID", "SupplyChainRelationshipFreightID", "SupplyChainRelationshipFreightBillingID", "SupplyChainRelationshipFreightPaymentID", "FreightPartner", "FreightBillToParty", "FreightBillFromParty", "FreightBillToCountry", "FreightBillFromCountry", "Product", "Incoterms", "Project", "WBSElement", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsCancelled", "IsMarkedForDeletion"}
	dataPlatformOrdersItemFreightAgreementDatumColumnsWithDefault    = []string{}
	dataPlatformOrdersItemFreightAgreementDatumPrimaryKeyColumns     = []string{"OrderID", "OrderItem", "OrderItemFreightAgreement"}
	dataPlatformOrdersItemFreightAgreementDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformOrdersItemFreightAgreementDatumSlice is an alias for a slice of pointers to DataPlatformOrdersItemFreightAgreementDatum.
	// This should almost always be used instead of []DataPlatformOrdersItemFreightAgreementDatum.
	DataPlatformOrdersItemFreightAgreementDatumSlice []*DataPlatformOrdersItemFreightAgreementDatum

	dataPlatformOrdersItemFreightAgreementDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformOrdersItemFreightAgreementDatumType                 = reflect.TypeOf(&DataPlatformOrdersItemFreightAgreementDatum{})
	dataPlatformOrdersItemFreightAgreementDatumMapping              = queries.MakeStructMapping(dataPlatformOrdersItemFreightAgreementDatumType)
	dataPlatformOrdersItemFreightAgreementDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformOrdersItemFreightAgreementDatumType, dataPlatformOrdersItemFreightAgreementDatumMapping, dataPlatformOrdersItemFreightAgreementDatumPrimaryKeyColumns)
	dataPlatformOrdersItemFreightAgreementDatumInsertCacheMut       sync.RWMutex
	dataPlatformOrdersItemFreightAgreementDatumInsertCache          = make(map[string]insertCache)
	dataPlatformOrdersItemFreightAgreementDatumUpdateCacheMut       sync.RWMutex
	dataPlatformOrdersItemFreightAgreementDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformOrdersItemFreightAgreementDatumUpsertCacheMut       sync.RWMutex
	dataPlatformOrdersItemFreightAgreementDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformOrdersItemFreightAgreementDatum record from the query.
func (q dataPlatformOrdersItemFreightAgreementDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformOrdersItemFreightAgreementDatum, error) {
	o := &DataPlatformOrdersItemFreightAgreementDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_orders_item_freight_agreement_data")
	}

	return o, nil
}

// All returns all DataPlatformOrdersItemFreightAgreementDatum records from the query.
func (q dataPlatformOrdersItemFreightAgreementDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformOrdersItemFreightAgreementDatumSlice, error) {
	var o []*DataPlatformOrdersItemFreightAgreementDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformOrdersItemFreightAgreementDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformOrdersItemFreightAgreementDatum records in the query.
func (q dataPlatformOrdersItemFreightAgreementDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_orders_item_freight_agreement_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformOrdersItemFreightAgreementDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_orders_item_freight_agreement_data exists")
	}

	return count > 0, nil
}

// ProductDataPlatformProductMasterGeneralDatum pointed to by the foreign key.
func (o *DataPlatformOrdersItemFreightAgreementDatum) ProductDataPlatformProductMasterGeneralDatum(mods ...qm.QueryMod) dataPlatformProductMasterGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Product` = ?", o.Product),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformProductMasterGeneralData(queryMods...)
}

// OrderIDDataPlatformOrdersItemDatum pointed to by the foreign key.
func (o *DataPlatformOrdersItemFreightAgreementDatum) OrderIDDataPlatformOrdersItemDatum(mods ...qm.QueryMod) dataPlatformOrdersItemDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`OrderID` = ?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformOrdersItemData(queryMods...)
}

// LoadProductDataPlatformProductMasterGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOrdersItemFreightAgreementDatumL) LoadProductDataPlatformProductMasterGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOrdersItemFreightAgreementDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOrdersItemFreightAgreementDatum
	var object *DataPlatformOrdersItemFreightAgreementDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOrdersItemFreightAgreementDatum.(*DataPlatformOrdersItemFreightAgreementDatum)
		if !ok {
			object = new(DataPlatformOrdersItemFreightAgreementDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOrdersItemFreightAgreementDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOrdersItemFreightAgreementDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOrdersItemFreightAgreementDatum.(*[]*DataPlatformOrdersItemFreightAgreementDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOrdersItemFreightAgreementDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOrdersItemFreightAgreementDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOrdersItemFreightAgreementDatumR{}
		}
		if !queries.IsNil(object.Product) {
			args = append(args, object.Product)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOrdersItemFreightAgreementDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Product) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Product) {
				args = append(args, obj.Product)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_general_data`),
		qm.WhereIn(`data_platform_product_master_general_data.Product in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformProductMasterGeneralDatum")
	}

	var resultSlice []*DataPlatformProductMasterGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformProductMasterGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_product_master_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductDataPlatformProductMasterGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Product, foreign.Product) {
				local.R.ProductDataPlatformProductMasterGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadOrderIDDataPlatformOrdersItemDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOrdersItemFreightAgreementDatumL) LoadOrderIDDataPlatformOrdersItemDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOrdersItemFreightAgreementDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOrdersItemFreightAgreementDatum
	var object *DataPlatformOrdersItemFreightAgreementDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOrdersItemFreightAgreementDatum.(*DataPlatformOrdersItemFreightAgreementDatum)
		if !ok {
			object = new(DataPlatformOrdersItemFreightAgreementDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOrdersItemFreightAgreementDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOrdersItemFreightAgreementDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOrdersItemFreightAgreementDatum.(*[]*DataPlatformOrdersItemFreightAgreementDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOrdersItemFreightAgreementDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOrdersItemFreightAgreementDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOrdersItemFreightAgreementDatumR{}
		}
		args = append(args, object.OrderID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOrdersItemFreightAgreementDatumR{}
			}

			for _, a := range args {
				if a == obj.OrderID {
					continue Outer
				}
			}

			args = append(args, obj.OrderID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_data`),
		qm.WhereIn(`data_platform_orders_item_data.OrderID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformOrdersItemDatum")
	}

	var resultSlice []*DataPlatformOrdersItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformOrdersItemDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_orders_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrderIDDataPlatformOrdersItemDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrderID == foreign.OrderID {
				local.R.OrderIDDataPlatformOrdersItemDatum = foreign
				break
			}
		}
	}

	return nil
}

// SetProductDataPlatformProductMasterGeneralDatum of the dataPlatformOrdersItemFreightAgreementDatum to the related item.
// Sets o.R.ProductDataPlatformProductMasterGeneralDatum to related.
func (o *DataPlatformOrdersItemFreightAgreementDatum) SetProductDataPlatformProductMasterGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformProductMasterGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_orders_item_freight_agreement_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Product"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemFreightAgreementDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Product, o.OrderID, o.OrderItem, o.OrderItemFreightAgreement}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Product, related.Product)
	if o.R == nil {
		o.R = &dataPlatformOrdersItemFreightAgreementDatumR{
			ProductDataPlatformProductMasterGeneralDatum: related,
		}
	} else {
		o.R.ProductDataPlatformProductMasterGeneralDatum = related
	}

	return nil
}

// RemoveProductDataPlatformProductMasterGeneralDatum relationship.
// Sets o.R.ProductDataPlatformProductMasterGeneralDatum to nil.
func (o *DataPlatformOrdersItemFreightAgreementDatum) RemoveProductDataPlatformProductMasterGeneralDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformProductMasterGeneralDatum) error {
	var err error

	queries.SetScanner(&o.Product, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("Product")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductDataPlatformProductMasterGeneralDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetOrderIDDataPlatformOrdersItemDatum of the dataPlatformOrdersItemFreightAgreementDatum to the related item.
// Sets o.R.OrderIDDataPlatformOrdersItemDatum to related.
func (o *DataPlatformOrdersItemFreightAgreementDatum) SetOrderIDDataPlatformOrdersItemDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformOrdersItemDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_orders_item_freight_agreement_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"OrderID"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemFreightAgreementDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.OrderID, o.OrderID, o.OrderItem, o.OrderItemFreightAgreement}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrderID = related.OrderID
	if o.R == nil {
		o.R = &dataPlatformOrdersItemFreightAgreementDatumR{
			OrderIDDataPlatformOrdersItemDatum: related,
		}
	} else {
		o.R.OrderIDDataPlatformOrdersItemDatum = related
	}

	return nil
}

// DataPlatformOrdersItemFreightAgreementData retrieves all the records using an executor.
func DataPlatformOrdersItemFreightAgreementData(mods ...qm.QueryMod) dataPlatformOrdersItemFreightAgreementDatumQuery {
	mods = append(mods, qm.From("`data_platform_orders_item_freight_agreement_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_orders_item_freight_agreement_data`.*"})
	}

	return dataPlatformOrdersItemFreightAgreementDatumQuery{q}
}

// FindDataPlatformOrdersItemFreightAgreementDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformOrdersItemFreightAgreementDatum(ctx context.Context, exec boil.ContextExecutor, orderID int, orderItem int, orderItemFreightAgreement int, selectCols ...string) (*DataPlatformOrdersItemFreightAgreementDatum, error) {
	dataPlatformOrdersItemFreightAgreementDatumObj := &DataPlatformOrdersItemFreightAgreementDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_orders_item_freight_agreement_data` where `OrderID`=? AND `OrderItem`=? AND `OrderItemFreightAgreement`=?", sel,
	)

	q := queries.Raw(query, orderID, orderItem, orderItemFreightAgreement)

	err := q.Bind(ctx, exec, dataPlatformOrdersItemFreightAgreementDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_orders_item_freight_agreement_data")
	}

	return dataPlatformOrdersItemFreightAgreementDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformOrdersItemFreightAgreementDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_orders_item_freight_agreement_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformOrdersItemFreightAgreementDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformOrdersItemFreightAgreementDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformOrdersItemFreightAgreementDatumInsertCache[key]
	dataPlatformOrdersItemFreightAgreementDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformOrdersItemFreightAgreementDatumAllColumns,
			dataPlatformOrdersItemFreightAgreementDatumColumnsWithDefault,
			dataPlatformOrdersItemFreightAgreementDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformOrdersItemFreightAgreementDatumType, dataPlatformOrdersItemFreightAgreementDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformOrdersItemFreightAgreementDatumType, dataPlatformOrdersItemFreightAgreementDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_orders_item_freight_agreement_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_orders_item_freight_agreement_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_orders_item_freight_agreement_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemFreightAgreementDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_orders_item_freight_agreement_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.OrderID,
		o.OrderItem,
		o.OrderItemFreightAgreement,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_orders_item_freight_agreement_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformOrdersItemFreightAgreementDatumInsertCacheMut.Lock()
		dataPlatformOrdersItemFreightAgreementDatumInsertCache[key] = cache
		dataPlatformOrdersItemFreightAgreementDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformOrdersItemFreightAgreementDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformOrdersItemFreightAgreementDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformOrdersItemFreightAgreementDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformOrdersItemFreightAgreementDatumUpdateCache[key]
	dataPlatformOrdersItemFreightAgreementDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformOrdersItemFreightAgreementDatumAllColumns,
			dataPlatformOrdersItemFreightAgreementDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_orders_item_freight_agreement_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_orders_item_freight_agreement_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemFreightAgreementDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformOrdersItemFreightAgreementDatumType, dataPlatformOrdersItemFreightAgreementDatumMapping, append(wl, dataPlatformOrdersItemFreightAgreementDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_orders_item_freight_agreement_data row")
	}

	if !cached {
		dataPlatformOrdersItemFreightAgreementDatumUpdateCacheMut.Lock()
		dataPlatformOrdersItemFreightAgreementDatumUpdateCache[key] = cache
		dataPlatformOrdersItemFreightAgreementDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformOrdersItemFreightAgreementDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_orders_item_freight_agreement_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformOrdersItemFreightAgreementDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformOrdersItemFreightAgreementDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_orders_item_freight_agreement_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformOrdersItemFreightAgreementDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformOrdersItemFreightAgreementDatum slice")
	}

	return nil
}

var mySQLDataPlatformOrdersItemFreightAgreementDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformOrdersItemFreightAgreementDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_orders_item_freight_agreement_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformOrdersItemFreightAgreementDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformOrdersItemFreightAgreementDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformOrdersItemFreightAgreementDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformOrdersItemFreightAgreementDatumUpsertCache[key]
	dataPlatformOrdersItemFreightAgreementDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformOrdersItemFreightAgreementDatumAllColumns,
			dataPlatformOrdersItemFreightAgreementDatumColumnsWithDefault,
			dataPlatformOrdersItemFreightAgreementDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformOrdersItemFreightAgreementDatumAllColumns,
			dataPlatformOrdersItemFreightAgreementDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_orders_item_freight_agreement_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_orders_item_freight_agreement_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_orders_item_freight_agreement_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformOrdersItemFreightAgreementDatumType, dataPlatformOrdersItemFreightAgreementDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformOrdersItemFreightAgreementDatumType, dataPlatformOrdersItemFreightAgreementDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_orders_item_freight_agreement_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformOrdersItemFreightAgreementDatumType, dataPlatformOrdersItemFreightAgreementDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_orders_item_freight_agreement_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_orders_item_freight_agreement_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformOrdersItemFreightAgreementDatumUpsertCacheMut.Lock()
		dataPlatformOrdersItemFreightAgreementDatumUpsertCache[key] = cache
		dataPlatformOrdersItemFreightAgreementDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformOrdersItemFreightAgreementDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformOrdersItemFreightAgreementDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformOrdersItemFreightAgreementDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformOrdersItemFreightAgreementDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_orders_item_freight_agreement_data` WHERE `OrderID`=? AND `OrderItem`=? AND `OrderItemFreightAgreement`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_orders_item_freight_agreement_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformOrdersItemFreightAgreementDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformOrdersItemFreightAgreementDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_orders_item_freight_agreement_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformOrdersItemFreightAgreementDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformOrdersItemFreightAgreementDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_orders_item_freight_agreement_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformOrdersItemFreightAgreementDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformOrdersItemFreightAgreementDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformOrdersItemFreightAgreementDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformOrdersItemFreightAgreementDatum(ctx, exec, o.OrderID, o.OrderItem, o.OrderItemFreightAgreement)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformOrdersItemFreightAgreementDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformOrdersItemFreightAgreementDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformOrdersItemFreightAgreementDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_orders_item_freight_agreement_data`.* FROM `data_platform_orders_item_freight_agreement_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformOrdersItemFreightAgreementDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformOrdersItemFreightAgreementDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformOrdersItemFreightAgreementDatumExists checks if the DataPlatformOrdersItemFreightAgreementDatum row exists.
func DataPlatformOrdersItemFreightAgreementDatumExists(ctx context.Context, exec boil.ContextExecutor, orderID int, orderItem int, orderItemFreightAgreement int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_orders_item_freight_agreement_data` where `OrderID`=? AND `OrderItem`=? AND `OrderItemFreightAgreement`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, orderID, orderItem, orderItemFreightAgreement)
	}
	row := exec.QueryRowContext(ctx, sql, orderID, orderItem, orderItemFreightAgreement)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_orders_item_freight_agreement_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformOrdersItemFreightAgreementDatum row exists.
func (o *DataPlatformOrdersItemFreightAgreementDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformOrdersItemFreightAgreementDatumExists(ctx, exec, o.OrderID, o.OrderItem, o.OrderItemFreightAgreement)
}
