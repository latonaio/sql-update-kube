// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformBatchMasterRecordBatchDatum is an object representing the database table.
type DataPlatformBatchMasterRecordBatchDatum struct {
	Product             string      `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	BusinessPartner     int         `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	Plant               string      `boil:"Plant" json:"Plant" toml:"Plant" yaml:"Plant"`
	Batch               string      `boil:"Batch" json:"Batch" toml:"Batch" yaml:"Batch"`
	ValidityStartDate   string      `boil:"ValidityStartDate" json:"ValidityStartDate" toml:"ValidityStartDate" yaml:"ValidityStartDate"`
	ValidityStartTime   string      `boil:"ValidityStartTime" json:"ValidityStartTime" toml:"ValidityStartTime" yaml:"ValidityStartTime"`
	ValidityEndDate     string      `boil:"ValidityEndDate" json:"ValidityEndDate" toml:"ValidityEndDate" yaml:"ValidityEndDate"`
	ValidityEndTime     string      `boil:"ValidityEndTime" json:"ValidityEndTime" toml:"ValidityEndTime" yaml:"ValidityEndTime"`
	CountryOfOrigin     null.String `boil:"CountryOfOrigin" json:"CountryOfOrigin,omitempty" toml:"CountryOfOrigin" yaml:"CountryOfOrigin,omitempty"`
	ManufactureDate     null.String `boil:"ManufactureDate" json:"ManufactureDate,omitempty" toml:"ManufactureDate" yaml:"ManufactureDate,omitempty"`
	CreationDateTime    null.String `boil:"CreationDateTime" json:"CreationDateTime,omitempty" toml:"CreationDateTime" yaml:"CreationDateTime,omitempty"`
	LastChangeDateTime  null.String `boil:"LastChangeDateTime" json:"LastChangeDateTime,omitempty" toml:"LastChangeDateTime" yaml:"LastChangeDateTime,omitempty"`
	IsMarkedForDeletion null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformBatchMasterRecordBatchDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformBatchMasterRecordBatchDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformBatchMasterRecordBatchDatumColumns = struct {
	Product             string
	BusinessPartner     string
	Plant               string
	Batch               string
	ValidityStartDate   string
	ValidityStartTime   string
	ValidityEndDate     string
	ValidityEndTime     string
	CountryOfOrigin     string
	ManufactureDate     string
	CreationDateTime    string
	LastChangeDateTime  string
	IsMarkedForDeletion string
}{
	Product:             "Product",
	BusinessPartner:     "BusinessPartner",
	Plant:               "Plant",
	Batch:               "Batch",
	ValidityStartDate:   "ValidityStartDate",
	ValidityStartTime:   "ValidityStartTime",
	ValidityEndDate:     "ValidityEndDate",
	ValidityEndTime:     "ValidityEndTime",
	CountryOfOrigin:     "CountryOfOrigin",
	ManufactureDate:     "ManufactureDate",
	CreationDateTime:    "CreationDateTime",
	LastChangeDateTime:  "LastChangeDateTime",
	IsMarkedForDeletion: "IsMarkedForDeletion",
}

var DataPlatformBatchMasterRecordBatchDatumTableColumns = struct {
	Product             string
	BusinessPartner     string
	Plant               string
	Batch               string
	ValidityStartDate   string
	ValidityStartTime   string
	ValidityEndDate     string
	ValidityEndTime     string
	CountryOfOrigin     string
	ManufactureDate     string
	CreationDateTime    string
	LastChangeDateTime  string
	IsMarkedForDeletion string
}{
	Product:             "data_platform_batch_master_record_batch_data.Product",
	BusinessPartner:     "data_platform_batch_master_record_batch_data.BusinessPartner",
	Plant:               "data_platform_batch_master_record_batch_data.Plant",
	Batch:               "data_platform_batch_master_record_batch_data.Batch",
	ValidityStartDate:   "data_platform_batch_master_record_batch_data.ValidityStartDate",
	ValidityStartTime:   "data_platform_batch_master_record_batch_data.ValidityStartTime",
	ValidityEndDate:     "data_platform_batch_master_record_batch_data.ValidityEndDate",
	ValidityEndTime:     "data_platform_batch_master_record_batch_data.ValidityEndTime",
	CountryOfOrigin:     "data_platform_batch_master_record_batch_data.CountryOfOrigin",
	ManufactureDate:     "data_platform_batch_master_record_batch_data.ManufactureDate",
	CreationDateTime:    "data_platform_batch_master_record_batch_data.CreationDateTime",
	LastChangeDateTime:  "data_platform_batch_master_record_batch_data.LastChangeDateTime",
	IsMarkedForDeletion: "data_platform_batch_master_record_batch_data.IsMarkedForDeletion",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var DataPlatformBatchMasterRecordBatchDatumWhere = struct {
	Product             whereHelperstring
	BusinessPartner     whereHelperint
	Plant               whereHelperstring
	Batch               whereHelperstring
	ValidityStartDate   whereHelperstring
	ValidityStartTime   whereHelperstring
	ValidityEndDate     whereHelperstring
	ValidityEndTime     whereHelperstring
	CountryOfOrigin     whereHelpernull_String
	ManufactureDate     whereHelpernull_String
	CreationDateTime    whereHelpernull_String
	LastChangeDateTime  whereHelpernull_String
	IsMarkedForDeletion whereHelpernull_Bool
}{
	Product:             whereHelperstring{field: "`data_platform_batch_master_record_batch_data`.`Product`"},
	BusinessPartner:     whereHelperint{field: "`data_platform_batch_master_record_batch_data`.`BusinessPartner`"},
	Plant:               whereHelperstring{field: "`data_platform_batch_master_record_batch_data`.`Plant`"},
	Batch:               whereHelperstring{field: "`data_platform_batch_master_record_batch_data`.`Batch`"},
	ValidityStartDate:   whereHelperstring{field: "`data_platform_batch_master_record_batch_data`.`ValidityStartDate`"},
	ValidityStartTime:   whereHelperstring{field: "`data_platform_batch_master_record_batch_data`.`ValidityStartTime`"},
	ValidityEndDate:     whereHelperstring{field: "`data_platform_batch_master_record_batch_data`.`ValidityEndDate`"},
	ValidityEndTime:     whereHelperstring{field: "`data_platform_batch_master_record_batch_data`.`ValidityEndTime`"},
	CountryOfOrigin:     whereHelpernull_String{field: "`data_platform_batch_master_record_batch_data`.`CountryOfOrigin`"},
	ManufactureDate:     whereHelpernull_String{field: "`data_platform_batch_master_record_batch_data`.`ManufactureDate`"},
	CreationDateTime:    whereHelpernull_String{field: "`data_platform_batch_master_record_batch_data`.`CreationDateTime`"},
	LastChangeDateTime:  whereHelpernull_String{field: "`data_platform_batch_master_record_batch_data`.`LastChangeDateTime`"},
	IsMarkedForDeletion: whereHelpernull_Bool{field: "`data_platform_batch_master_record_batch_data`.`IsMarkedForDeletion`"},
}

// DataPlatformBatchMasterRecordBatchDatumRels is where relationship names are stored.
var DataPlatformBatchMasterRecordBatchDatumRels = struct {
}{}

// dataPlatformBatchMasterRecordBatchDatumR is where relationships are stored.
type dataPlatformBatchMasterRecordBatchDatumR struct {
}

// NewStruct creates a new relationship struct
func (*dataPlatformBatchMasterRecordBatchDatumR) NewStruct() *dataPlatformBatchMasterRecordBatchDatumR {
	return &dataPlatformBatchMasterRecordBatchDatumR{}
}

// dataPlatformBatchMasterRecordBatchDatumL is where Load methods for each relationship are stored.
type dataPlatformBatchMasterRecordBatchDatumL struct{}

var (
	dataPlatformBatchMasterRecordBatchDatumAllColumns            = []string{"Product", "BusinessPartner", "Plant", "Batch", "ValidityStartDate", "ValidityStartTime", "ValidityEndDate", "ValidityEndTime", "CountryOfOrigin", "ManufactureDate", "CreationDateTime", "LastChangeDateTime", "IsMarkedForDeletion"}
	dataPlatformBatchMasterRecordBatchDatumColumnsWithoutDefault = []string{"Product", "BusinessPartner", "Plant", "Batch", "ValidityStartDate", "ValidityStartTime", "ValidityEndDate", "ValidityEndTime", "CountryOfOrigin", "ManufactureDate", "CreationDateTime", "LastChangeDateTime", "IsMarkedForDeletion"}
	dataPlatformBatchMasterRecordBatchDatumColumnsWithDefault    = []string{}
	dataPlatformBatchMasterRecordBatchDatumPrimaryKeyColumns     = []string{"BusinessPartner", "Product", "Plant", "Batch"}
	dataPlatformBatchMasterRecordBatchDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformBatchMasterRecordBatchDatumSlice is an alias for a slice of pointers to DataPlatformBatchMasterRecordBatchDatum.
	// This should almost always be used instead of []DataPlatformBatchMasterRecordBatchDatum.
	DataPlatformBatchMasterRecordBatchDatumSlice []*DataPlatformBatchMasterRecordBatchDatum

	dataPlatformBatchMasterRecordBatchDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformBatchMasterRecordBatchDatumType                 = reflect.TypeOf(&DataPlatformBatchMasterRecordBatchDatum{})
	dataPlatformBatchMasterRecordBatchDatumMapping              = queries.MakeStructMapping(dataPlatformBatchMasterRecordBatchDatumType)
	dataPlatformBatchMasterRecordBatchDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformBatchMasterRecordBatchDatumType, dataPlatformBatchMasterRecordBatchDatumMapping, dataPlatformBatchMasterRecordBatchDatumPrimaryKeyColumns)
	dataPlatformBatchMasterRecordBatchDatumInsertCacheMut       sync.RWMutex
	dataPlatformBatchMasterRecordBatchDatumInsertCache          = make(map[string]insertCache)
	dataPlatformBatchMasterRecordBatchDatumUpdateCacheMut       sync.RWMutex
	dataPlatformBatchMasterRecordBatchDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformBatchMasterRecordBatchDatumUpsertCacheMut       sync.RWMutex
	dataPlatformBatchMasterRecordBatchDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformBatchMasterRecordBatchDatum record from the query.
func (q dataPlatformBatchMasterRecordBatchDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformBatchMasterRecordBatchDatum, error) {
	o := &DataPlatformBatchMasterRecordBatchDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_batch_master_record_batch_data")
	}

	return o, nil
}

// All returns all DataPlatformBatchMasterRecordBatchDatum records from the query.
func (q dataPlatformBatchMasterRecordBatchDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformBatchMasterRecordBatchDatumSlice, error) {
	var o []*DataPlatformBatchMasterRecordBatchDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformBatchMasterRecordBatchDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformBatchMasterRecordBatchDatum records in the query.
func (q dataPlatformBatchMasterRecordBatchDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_batch_master_record_batch_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformBatchMasterRecordBatchDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_batch_master_record_batch_data exists")
	}

	return count > 0, nil
}

// DataPlatformBatchMasterRecordBatchData retrieves all the records using an executor.
func DataPlatformBatchMasterRecordBatchData(mods ...qm.QueryMod) dataPlatformBatchMasterRecordBatchDatumQuery {
	mods = append(mods, qm.From("`data_platform_batch_master_record_batch_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_batch_master_record_batch_data`.*"})
	}

	return dataPlatformBatchMasterRecordBatchDatumQuery{q}
}

// FindDataPlatformBatchMasterRecordBatchDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformBatchMasterRecordBatchDatum(ctx context.Context, exec boil.ContextExecutor, businessPartner int, product string, plant string, batch string, selectCols ...string) (*DataPlatformBatchMasterRecordBatchDatum, error) {
	dataPlatformBatchMasterRecordBatchDatumObj := &DataPlatformBatchMasterRecordBatchDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_batch_master_record_batch_data` where `BusinessPartner`=? AND `Product`=? AND `Plant`=? AND `Batch`=?", sel,
	)

	q := queries.Raw(query, businessPartner, product, plant, batch)

	err := q.Bind(ctx, exec, dataPlatformBatchMasterRecordBatchDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_batch_master_record_batch_data")
	}

	return dataPlatformBatchMasterRecordBatchDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformBatchMasterRecordBatchDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_batch_master_record_batch_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformBatchMasterRecordBatchDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformBatchMasterRecordBatchDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformBatchMasterRecordBatchDatumInsertCache[key]
	dataPlatformBatchMasterRecordBatchDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformBatchMasterRecordBatchDatumAllColumns,
			dataPlatformBatchMasterRecordBatchDatumColumnsWithDefault,
			dataPlatformBatchMasterRecordBatchDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformBatchMasterRecordBatchDatumType, dataPlatformBatchMasterRecordBatchDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformBatchMasterRecordBatchDatumType, dataPlatformBatchMasterRecordBatchDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_batch_master_record_batch_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_batch_master_record_batch_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_batch_master_record_batch_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformBatchMasterRecordBatchDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_batch_master_record_batch_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BusinessPartner,
		o.Product,
		o.Plant,
		o.Batch,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_batch_master_record_batch_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformBatchMasterRecordBatchDatumInsertCacheMut.Lock()
		dataPlatformBatchMasterRecordBatchDatumInsertCache[key] = cache
		dataPlatformBatchMasterRecordBatchDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformBatchMasterRecordBatchDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformBatchMasterRecordBatchDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformBatchMasterRecordBatchDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformBatchMasterRecordBatchDatumUpdateCache[key]
	dataPlatformBatchMasterRecordBatchDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformBatchMasterRecordBatchDatumAllColumns,
			dataPlatformBatchMasterRecordBatchDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_batch_master_record_batch_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_batch_master_record_batch_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformBatchMasterRecordBatchDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformBatchMasterRecordBatchDatumType, dataPlatformBatchMasterRecordBatchDatumMapping, append(wl, dataPlatformBatchMasterRecordBatchDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_batch_master_record_batch_data row")
	}

	if !cached {
		dataPlatformBatchMasterRecordBatchDatumUpdateCacheMut.Lock()
		dataPlatformBatchMasterRecordBatchDatumUpdateCache[key] = cache
		dataPlatformBatchMasterRecordBatchDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformBatchMasterRecordBatchDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_batch_master_record_batch_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformBatchMasterRecordBatchDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBatchMasterRecordBatchDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_batch_master_record_batch_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBatchMasterRecordBatchDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformBatchMasterRecordBatchDatum slice")
	}

	return nil
}

var mySQLDataPlatformBatchMasterRecordBatchDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformBatchMasterRecordBatchDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_batch_master_record_batch_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformBatchMasterRecordBatchDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformBatchMasterRecordBatchDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformBatchMasterRecordBatchDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformBatchMasterRecordBatchDatumUpsertCache[key]
	dataPlatformBatchMasterRecordBatchDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformBatchMasterRecordBatchDatumAllColumns,
			dataPlatformBatchMasterRecordBatchDatumColumnsWithDefault,
			dataPlatformBatchMasterRecordBatchDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformBatchMasterRecordBatchDatumAllColumns,
			dataPlatformBatchMasterRecordBatchDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_batch_master_record_batch_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_batch_master_record_batch_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_batch_master_record_batch_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformBatchMasterRecordBatchDatumType, dataPlatformBatchMasterRecordBatchDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformBatchMasterRecordBatchDatumType, dataPlatformBatchMasterRecordBatchDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_batch_master_record_batch_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformBatchMasterRecordBatchDatumType, dataPlatformBatchMasterRecordBatchDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_batch_master_record_batch_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_batch_master_record_batch_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformBatchMasterRecordBatchDatumUpsertCacheMut.Lock()
		dataPlatformBatchMasterRecordBatchDatumUpsertCache[key] = cache
		dataPlatformBatchMasterRecordBatchDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformBatchMasterRecordBatchDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformBatchMasterRecordBatchDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformBatchMasterRecordBatchDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformBatchMasterRecordBatchDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_batch_master_record_batch_data` WHERE `BusinessPartner`=? AND `Product`=? AND `Plant`=? AND `Batch`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_batch_master_record_batch_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformBatchMasterRecordBatchDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformBatchMasterRecordBatchDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_batch_master_record_batch_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformBatchMasterRecordBatchDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBatchMasterRecordBatchDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_batch_master_record_batch_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBatchMasterRecordBatchDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformBatchMasterRecordBatchDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformBatchMasterRecordBatchDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformBatchMasterRecordBatchDatum(ctx, exec, o.BusinessPartner, o.Product, o.Plant, o.Batch)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformBatchMasterRecordBatchDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformBatchMasterRecordBatchDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBatchMasterRecordBatchDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_batch_master_record_batch_data`.* FROM `data_platform_batch_master_record_batch_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBatchMasterRecordBatchDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformBatchMasterRecordBatchDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformBatchMasterRecordBatchDatumExists checks if the DataPlatformBatchMasterRecordBatchDatum row exists.
func DataPlatformBatchMasterRecordBatchDatumExists(ctx context.Context, exec boil.ContextExecutor, businessPartner int, product string, plant string, batch string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_batch_master_record_batch_data` where `BusinessPartner`=? AND `Product`=? AND `Plant`=? AND `Batch`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, businessPartner, product, plant, batch)
	}
	row := exec.QueryRowContext(ctx, sql, businessPartner, product, plant, batch)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_batch_master_record_batch_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformBatchMasterRecordBatchDatum row exists.
func (o *DataPlatformBatchMasterRecordBatchDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformBatchMasterRecordBatchDatumExists(ctx, exec, o.BusinessPartner, o.Product, o.Plant, o.Batch)
}
