// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformSCRFreightRelationDatum is an object representing the database table.
type DataPlatformSCRFreightRelationDatum struct {
	SupplyChainRelationshipID        int         `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipFreightID int         `boil:"SupplyChainRelationshipFreightID" json:"SupplyChainRelationshipFreightID" toml:"SupplyChainRelationshipFreightID" yaml:"SupplyChainRelationshipFreightID"`
	Buyer                            int         `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                           int         `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	FreightPartner                   int         `boil:"FreightPartner" json:"FreightPartner" toml:"FreightPartner" yaml:"FreightPartner"`
	CreationDate                     null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	LastChangeDate                   null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	IsMarkedForDeletion              null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformSCRFreightRelationDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformSCRFreightRelationDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformSCRFreightRelationDatumColumns = struct {
	SupplyChainRelationshipID        string
	SupplyChainRelationshipFreightID string
	Buyer                            string
	Seller                           string
	FreightPartner                   string
	CreationDate                     string
	LastChangeDate                   string
	IsMarkedForDeletion              string
}{
	SupplyChainRelationshipID:        "SupplyChainRelationshipID",
	SupplyChainRelationshipFreightID: "SupplyChainRelationshipFreightID",
	Buyer:                            "Buyer",
	Seller:                           "Seller",
	FreightPartner:                   "FreightPartner",
	CreationDate:                     "CreationDate",
	LastChangeDate:                   "LastChangeDate",
	IsMarkedForDeletion:              "IsMarkedForDeletion",
}

var DataPlatformSCRFreightRelationDatumTableColumns = struct {
	SupplyChainRelationshipID        string
	SupplyChainRelationshipFreightID string
	Buyer                            string
	Seller                           string
	FreightPartner                   string
	CreationDate                     string
	LastChangeDate                   string
	IsMarkedForDeletion              string
}{
	SupplyChainRelationshipID:        "data_platform_scr_freight_relation_data.SupplyChainRelationshipID",
	SupplyChainRelationshipFreightID: "data_platform_scr_freight_relation_data.SupplyChainRelationshipFreightID",
	Buyer:                            "data_platform_scr_freight_relation_data.Buyer",
	Seller:                           "data_platform_scr_freight_relation_data.Seller",
	FreightPartner:                   "data_platform_scr_freight_relation_data.FreightPartner",
	CreationDate:                     "data_platform_scr_freight_relation_data.CreationDate",
	LastChangeDate:                   "data_platform_scr_freight_relation_data.LastChangeDate",
	IsMarkedForDeletion:              "data_platform_scr_freight_relation_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformSCRFreightRelationDatumWhere = struct {
	SupplyChainRelationshipID        whereHelperint
	SupplyChainRelationshipFreightID whereHelperint
	Buyer                            whereHelperint
	Seller                           whereHelperint
	FreightPartner                   whereHelperint
	CreationDate                     whereHelpernull_String
	LastChangeDate                   whereHelpernull_String
	IsMarkedForDeletion              whereHelpernull_Bool
}{
	SupplyChainRelationshipID:        whereHelperint{field: "`data_platform_scr_freight_relation_data`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipFreightID: whereHelperint{field: "`data_platform_scr_freight_relation_data`.`SupplyChainRelationshipFreightID`"},
	Buyer:                            whereHelperint{field: "`data_platform_scr_freight_relation_data`.`Buyer`"},
	Seller:                           whereHelperint{field: "`data_platform_scr_freight_relation_data`.`Seller`"},
	FreightPartner:                   whereHelperint{field: "`data_platform_scr_freight_relation_data`.`FreightPartner`"},
	CreationDate:                     whereHelpernull_String{field: "`data_platform_scr_freight_relation_data`.`CreationDate`"},
	LastChangeDate:                   whereHelpernull_String{field: "`data_platform_scr_freight_relation_data`.`LastChangeDate`"},
	IsMarkedForDeletion:              whereHelpernull_Bool{field: "`data_platform_scr_freight_relation_data`.`IsMarkedForDeletion`"},
}

// DataPlatformSCRFreightRelationDatumRels is where relationship names are stored.
var DataPlatformSCRFreightRelationDatumRels = struct {
	FreightPartnerDataPlatformBusinessPartnerGeneralDatum string
	BuyerDataPlatformSCRGeneralDatum                      string
	BuyerDataPlatformSCRFreightBillingRelationData        string
	BuyerDataPlatformSCRFreightTransactionData            string
}{
	FreightPartnerDataPlatformBusinessPartnerGeneralDatum: "FreightPartnerDataPlatformBusinessPartnerGeneralDatum",
	BuyerDataPlatformSCRGeneralDatum:                      "BuyerDataPlatformSCRGeneralDatum",
	BuyerDataPlatformSCRFreightBillingRelationData:        "BuyerDataPlatformSCRFreightBillingRelationData",
	BuyerDataPlatformSCRFreightTransactionData:            "BuyerDataPlatformSCRFreightTransactionData",
}

// dataPlatformSCRFreightRelationDatumR is where relationships are stored.
type dataPlatformSCRFreightRelationDatumR struct {
	FreightPartnerDataPlatformBusinessPartnerGeneralDatum *DataPlatformBusinessPartnerGeneralDatum        `boil:"FreightPartnerDataPlatformBusinessPartnerGeneralDatum" json:"FreightPartnerDataPlatformBusinessPartnerGeneralDatum" toml:"FreightPartnerDataPlatformBusinessPartnerGeneralDatum" yaml:"FreightPartnerDataPlatformBusinessPartnerGeneralDatum"`
	BuyerDataPlatformSCRGeneralDatum                      *DataPlatformSCRGeneralDatum                    `boil:"BuyerDataPlatformSCRGeneralDatum" json:"BuyerDataPlatformSCRGeneralDatum" toml:"BuyerDataPlatformSCRGeneralDatum" yaml:"BuyerDataPlatformSCRGeneralDatum"`
	BuyerDataPlatformSCRFreightBillingRelationData        DataPlatformSCRFreightBillingRelationDatumSlice `boil:"BuyerDataPlatformSCRFreightBillingRelationData" json:"BuyerDataPlatformSCRFreightBillingRelationData" toml:"BuyerDataPlatformSCRFreightBillingRelationData" yaml:"BuyerDataPlatformSCRFreightBillingRelationData"`
	BuyerDataPlatformSCRFreightTransactionData            DataPlatformSCRFreightTransactionDatumSlice     `boil:"BuyerDataPlatformSCRFreightTransactionData" json:"BuyerDataPlatformSCRFreightTransactionData" toml:"BuyerDataPlatformSCRFreightTransactionData" yaml:"BuyerDataPlatformSCRFreightTransactionData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformSCRFreightRelationDatumR) NewStruct() *dataPlatformSCRFreightRelationDatumR {
	return &dataPlatformSCRFreightRelationDatumR{}
}

func (r *dataPlatformSCRFreightRelationDatumR) GetFreightPartnerDataPlatformBusinessPartnerGeneralDatum() *DataPlatformBusinessPartnerGeneralDatum {
	if r == nil {
		return nil
	}
	return r.FreightPartnerDataPlatformBusinessPartnerGeneralDatum
}

func (r *dataPlatformSCRFreightRelationDatumR) GetBuyerDataPlatformSCRGeneralDatum() *DataPlatformSCRGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRGeneralDatum
}

func (r *dataPlatformSCRFreightRelationDatumR) GetBuyerDataPlatformSCRFreightBillingRelationData() DataPlatformSCRFreightBillingRelationDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRFreightBillingRelationData
}

func (r *dataPlatformSCRFreightRelationDatumR) GetBuyerDataPlatformSCRFreightTransactionData() DataPlatformSCRFreightTransactionDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRFreightTransactionData
}

// dataPlatformSCRFreightRelationDatumL is where Load methods for each relationship are stored.
type dataPlatformSCRFreightRelationDatumL struct{}

var (
	dataPlatformSCRFreightRelationDatumAllColumns            = []string{"SupplyChainRelationshipID", "SupplyChainRelationshipFreightID", "Buyer", "Seller", "FreightPartner", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformSCRFreightRelationDatumColumnsWithoutDefault = []string{"SupplyChainRelationshipID", "SupplyChainRelationshipFreightID", "Buyer", "Seller", "FreightPartner", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformSCRFreightRelationDatumColumnsWithDefault    = []string{}
	dataPlatformSCRFreightRelationDatumPrimaryKeyColumns     = []string{"SupplyChainRelationshipID", "SupplyChainRelationshipFreightID", "Buyer", "Seller", "FreightPartner"}
	dataPlatformSCRFreightRelationDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformSCRFreightRelationDatumSlice is an alias for a slice of pointers to DataPlatformSCRFreightRelationDatum.
	// This should almost always be used instead of []DataPlatformSCRFreightRelationDatum.
	DataPlatformSCRFreightRelationDatumSlice []*DataPlatformSCRFreightRelationDatum

	dataPlatformSCRFreightRelationDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformSCRFreightRelationDatumType                 = reflect.TypeOf(&DataPlatformSCRFreightRelationDatum{})
	dataPlatformSCRFreightRelationDatumMapping              = queries.MakeStructMapping(dataPlatformSCRFreightRelationDatumType)
	dataPlatformSCRFreightRelationDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformSCRFreightRelationDatumType, dataPlatformSCRFreightRelationDatumMapping, dataPlatformSCRFreightRelationDatumPrimaryKeyColumns)
	dataPlatformSCRFreightRelationDatumInsertCacheMut       sync.RWMutex
	dataPlatformSCRFreightRelationDatumInsertCache          = make(map[string]insertCache)
	dataPlatformSCRFreightRelationDatumUpdateCacheMut       sync.RWMutex
	dataPlatformSCRFreightRelationDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformSCRFreightRelationDatumUpsertCacheMut       sync.RWMutex
	dataPlatformSCRFreightRelationDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformSCRFreightRelationDatum record from the query.
func (q dataPlatformSCRFreightRelationDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformSCRFreightRelationDatum, error) {
	o := &DataPlatformSCRFreightRelationDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_scr_freight_relation_data")
	}

	return o, nil
}

// All returns all DataPlatformSCRFreightRelationDatum records from the query.
func (q dataPlatformSCRFreightRelationDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformSCRFreightRelationDatumSlice, error) {
	var o []*DataPlatformSCRFreightRelationDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformSCRFreightRelationDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformSCRFreightRelationDatum records in the query.
func (q dataPlatformSCRFreightRelationDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_scr_freight_relation_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformSCRFreightRelationDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_scr_freight_relation_data exists")
	}

	return count > 0, nil
}

// FreightPartnerDataPlatformBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *DataPlatformSCRFreightRelationDatum) FreightPartnerDataPlatformBusinessPartnerGeneralDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.FreightPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// BuyerDataPlatformSCRGeneralDatum pointed to by the foreign key.
func (o *DataPlatformSCRFreightRelationDatum) BuyerDataPlatformSCRGeneralDatum(mods ...qm.QueryMod) dataPlatformSCRGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRGeneralData(queryMods...)
}

// BuyerDataPlatformSCRFreightBillingRelationData retrieves all the data_platform_scr_freight_billing_relation_datum's DataPlatformSCRFreightBillingRelationData with an executor via Buyer column.
func (o *DataPlatformSCRFreightRelationDatum) BuyerDataPlatformSCRFreightBillingRelationData(mods ...qm.QueryMod) dataPlatformSCRFreightBillingRelationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_freight_billing_relation_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformSCRFreightBillingRelationData(queryMods...)
}

// BuyerDataPlatformSCRFreightTransactionData retrieves all the data_platform_scr_freight_transaction_datum's DataPlatformSCRFreightTransactionData with an executor via Buyer column.
func (o *DataPlatformSCRFreightRelationDatum) BuyerDataPlatformSCRFreightTransactionData(mods ...qm.QueryMod) dataPlatformSCRFreightTransactionDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_freight_transaction_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformSCRFreightTransactionData(queryMods...)
}

// LoadFreightPartnerDataPlatformBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSCRFreightRelationDatumL) LoadFreightPartnerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRFreightRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRFreightRelationDatum
	var object *DataPlatformSCRFreightRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRFreightRelationDatum.(*DataPlatformSCRFreightRelationDatum)
		if !ok {
			object = new(DataPlatformSCRFreightRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRFreightRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRFreightRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRFreightRelationDatum.(*[]*DataPlatformSCRFreightRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRFreightRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRFreightRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRFreightRelationDatumR{}
		}
		args = append(args, object.FreightPartner)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRFreightRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.FreightPartner {
					continue Outer
				}
			}

			args = append(args, obj.FreightPartner)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerGeneralDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FreightPartnerDataPlatformBusinessPartnerGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FreightPartner == foreign.BusinessPartner {
				local.R.FreightPartnerDataPlatformBusinessPartnerGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSCRFreightRelationDatumL) LoadBuyerDataPlatformSCRGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRFreightRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRFreightRelationDatum
	var object *DataPlatformSCRFreightRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRFreightRelationDatum.(*DataPlatformSCRFreightRelationDatum)
		if !ok {
			object = new(DataPlatformSCRFreightRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRFreightRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRFreightRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRFreightRelationDatum.(*[]*DataPlatformSCRFreightRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRFreightRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRFreightRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRFreightRelationDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRFreightRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_general_data`),
		qm.WhereIn(`data_platform_scr_general_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRGeneralDatum")
	}

	var resultSlice []*DataPlatformSCRGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRFreightBillingRelationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRFreightRelationDatumL) LoadBuyerDataPlatformSCRFreightBillingRelationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRFreightRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRFreightRelationDatum
	var object *DataPlatformSCRFreightRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRFreightRelationDatum.(*DataPlatformSCRFreightRelationDatum)
		if !ok {
			object = new(DataPlatformSCRFreightRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRFreightRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRFreightRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRFreightRelationDatum.(*[]*DataPlatformSCRFreightRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRFreightRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRFreightRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRFreightRelationDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRFreightRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_freight_billing_relation_data`),
		qm.WhereIn(`data_platform_scr_freight_billing_relation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_freight_billing_relation_data")
	}

	var resultSlice []*DataPlatformSCRFreightBillingRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_freight_billing_relation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_freight_billing_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_freight_billing_relation_data")
	}

	if singular {
		object.R.BuyerDataPlatformSCRFreightBillingRelationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRFreightBillingRelationData = append(local.R.BuyerDataPlatformSCRFreightBillingRelationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRFreightTransactionData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRFreightRelationDatumL) LoadBuyerDataPlatformSCRFreightTransactionData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRFreightRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRFreightRelationDatum
	var object *DataPlatformSCRFreightRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRFreightRelationDatum.(*DataPlatformSCRFreightRelationDatum)
		if !ok {
			object = new(DataPlatformSCRFreightRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRFreightRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRFreightRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRFreightRelationDatum.(*[]*DataPlatformSCRFreightRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRFreightRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRFreightRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRFreightRelationDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRFreightRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_freight_transaction_data`),
		qm.WhereIn(`data_platform_scr_freight_transaction_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_freight_transaction_data")
	}

	var resultSlice []*DataPlatformSCRFreightTransactionDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_freight_transaction_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_freight_transaction_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_freight_transaction_data")
	}

	if singular {
		object.R.BuyerDataPlatformSCRFreightTransactionData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRFreightTransactionData = append(local.R.BuyerDataPlatformSCRFreightTransactionData, foreign)
				break
			}
		}
	}

	return nil
}

// SetFreightPartnerDataPlatformBusinessPartnerGeneralDatum of the dataPlatformSCRFreightRelationDatum to the related item.
// Sets o.R.FreightPartnerDataPlatformBusinessPartnerGeneralDatum to related.
func (o *DataPlatformSCRFreightRelationDatum) SetFreightPartnerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_scr_freight_relation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"FreightPartner"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSCRFreightRelationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.SupplyChainRelationshipID, o.SupplyChainRelationshipFreightID, o.Buyer, o.Seller, o.FreightPartner}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FreightPartner = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformSCRFreightRelationDatumR{
			FreightPartnerDataPlatformBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.FreightPartnerDataPlatformBusinessPartnerGeneralDatum = related
	}

	return nil
}

// SetBuyerDataPlatformSCRGeneralDatum of the dataPlatformSCRFreightRelationDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRGeneralDatum to related.
func (o *DataPlatformSCRFreightRelationDatum) SetBuyerDataPlatformSCRGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_scr_freight_relation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSCRFreightRelationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.SupplyChainRelationshipID, o.SupplyChainRelationshipFreightID, o.Buyer, o.Seller, o.FreightPartner}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformSCRFreightRelationDatumR{
			BuyerDataPlatformSCRGeneralDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRGeneralDatum = related
	}

	return nil
}

// AddBuyerDataPlatformSCRFreightBillingRelationData adds the given related objects to the existing relationships
// of the data_platform_scr_freight_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformSCRFreightBillingRelationData.
func (o *DataPlatformSCRFreightRelationDatum) AddBuyerDataPlatformSCRFreightBillingRelationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRFreightBillingRelationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_freight_billing_relation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRFreightBillingRelationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipFreightID, rel.SupplyChainRelationshipFreightBillingID, rel.Buyer, rel.Seller, rel.FreightPartner, rel.FreightBillToParty, rel.FreightBillFromParty}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRFreightRelationDatumR{
			BuyerDataPlatformSCRFreightBillingRelationData: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRFreightBillingRelationData = append(o.R.BuyerDataPlatformSCRFreightBillingRelationData, related...)
	}

	return nil
}

// AddBuyerDataPlatformSCRFreightTransactionData adds the given related objects to the existing relationships
// of the data_platform_scr_freight_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformSCRFreightTransactionData.
func (o *DataPlatformSCRFreightRelationDatum) AddBuyerDataPlatformSCRFreightTransactionData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRFreightTransactionDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_freight_transaction_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRFreightTransactionDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipFreightID, rel.Buyer, rel.Seller, rel.FreightPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRFreightRelationDatumR{
			BuyerDataPlatformSCRFreightTransactionData: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRFreightTransactionData = append(o.R.BuyerDataPlatformSCRFreightTransactionData, related...)
	}

	return nil
}

// DataPlatformSCRFreightRelationData retrieves all the records using an executor.
func DataPlatformSCRFreightRelationData(mods ...qm.QueryMod) dataPlatformSCRFreightRelationDatumQuery {
	mods = append(mods, qm.From("`data_platform_scr_freight_relation_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_scr_freight_relation_data`.*"})
	}

	return dataPlatformSCRFreightRelationDatumQuery{q}
}

// FindDataPlatformSCRFreightRelationDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformSCRFreightRelationDatum(ctx context.Context, exec boil.ContextExecutor, supplyChainRelationshipID int, supplyChainRelationshipFreightID int, buyer int, seller int, freightPartner int, selectCols ...string) (*DataPlatformSCRFreightRelationDatum, error) {
	dataPlatformSCRFreightRelationDatumObj := &DataPlatformSCRFreightRelationDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_scr_freight_relation_data` where `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipFreightID`=? AND `Buyer`=? AND `Seller`=? AND `FreightPartner`=?", sel,
	)

	q := queries.Raw(query, supplyChainRelationshipID, supplyChainRelationshipFreightID, buyer, seller, freightPartner)

	err := q.Bind(ctx, exec, dataPlatformSCRFreightRelationDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_scr_freight_relation_data")
	}

	return dataPlatformSCRFreightRelationDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformSCRFreightRelationDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_scr_freight_relation_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformSCRFreightRelationDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformSCRFreightRelationDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformSCRFreightRelationDatumInsertCache[key]
	dataPlatformSCRFreightRelationDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformSCRFreightRelationDatumAllColumns,
			dataPlatformSCRFreightRelationDatumColumnsWithDefault,
			dataPlatformSCRFreightRelationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformSCRFreightRelationDatumType, dataPlatformSCRFreightRelationDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformSCRFreightRelationDatumType, dataPlatformSCRFreightRelationDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_scr_freight_relation_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_scr_freight_relation_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_scr_freight_relation_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformSCRFreightRelationDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_scr_freight_relation_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SupplyChainRelationshipID,
		o.SupplyChainRelationshipFreightID,
		o.Buyer,
		o.Seller,
		o.FreightPartner,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_scr_freight_relation_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformSCRFreightRelationDatumInsertCacheMut.Lock()
		dataPlatformSCRFreightRelationDatumInsertCache[key] = cache
		dataPlatformSCRFreightRelationDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformSCRFreightRelationDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformSCRFreightRelationDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformSCRFreightRelationDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformSCRFreightRelationDatumUpdateCache[key]
	dataPlatformSCRFreightRelationDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformSCRFreightRelationDatumAllColumns,
			dataPlatformSCRFreightRelationDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_scr_freight_relation_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_scr_freight_relation_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformSCRFreightRelationDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformSCRFreightRelationDatumType, dataPlatformSCRFreightRelationDatumMapping, append(wl, dataPlatformSCRFreightRelationDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_scr_freight_relation_data row")
	}

	if !cached {
		dataPlatformSCRFreightRelationDatumUpdateCacheMut.Lock()
		dataPlatformSCRFreightRelationDatumUpdateCache[key] = cache
		dataPlatformSCRFreightRelationDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformSCRFreightRelationDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_scr_freight_relation_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformSCRFreightRelationDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSCRFreightRelationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_scr_freight_relation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSCRFreightRelationDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformSCRFreightRelationDatum slice")
	}

	return nil
}

var mySQLDataPlatformSCRFreightRelationDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformSCRFreightRelationDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_scr_freight_relation_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformSCRFreightRelationDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformSCRFreightRelationDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformSCRFreightRelationDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformSCRFreightRelationDatumUpsertCache[key]
	dataPlatformSCRFreightRelationDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformSCRFreightRelationDatumAllColumns,
			dataPlatformSCRFreightRelationDatumColumnsWithDefault,
			dataPlatformSCRFreightRelationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformSCRFreightRelationDatumAllColumns,
			dataPlatformSCRFreightRelationDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_scr_freight_relation_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_scr_freight_relation_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_scr_freight_relation_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformSCRFreightRelationDatumType, dataPlatformSCRFreightRelationDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformSCRFreightRelationDatumType, dataPlatformSCRFreightRelationDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_scr_freight_relation_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformSCRFreightRelationDatumType, dataPlatformSCRFreightRelationDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_scr_freight_relation_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_scr_freight_relation_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformSCRFreightRelationDatumUpsertCacheMut.Lock()
		dataPlatformSCRFreightRelationDatumUpsertCache[key] = cache
		dataPlatformSCRFreightRelationDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformSCRFreightRelationDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformSCRFreightRelationDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformSCRFreightRelationDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformSCRFreightRelationDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_scr_freight_relation_data` WHERE `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipFreightID`=? AND `Buyer`=? AND `Seller`=? AND `FreightPartner`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_scr_freight_relation_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformSCRFreightRelationDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformSCRFreightRelationDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_scr_freight_relation_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformSCRFreightRelationDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSCRFreightRelationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_scr_freight_relation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSCRFreightRelationDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformSCRFreightRelationDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformSCRFreightRelationDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformSCRFreightRelationDatum(ctx, exec, o.SupplyChainRelationshipID, o.SupplyChainRelationshipFreightID, o.Buyer, o.Seller, o.FreightPartner)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformSCRFreightRelationDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformSCRFreightRelationDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSCRFreightRelationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_scr_freight_relation_data`.* FROM `data_platform_scr_freight_relation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSCRFreightRelationDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformSCRFreightRelationDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformSCRFreightRelationDatumExists checks if the DataPlatformSCRFreightRelationDatum row exists.
func DataPlatformSCRFreightRelationDatumExists(ctx context.Context, exec boil.ContextExecutor, supplyChainRelationshipID int, supplyChainRelationshipFreightID int, buyer int, seller int, freightPartner int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_scr_freight_relation_data` where `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipFreightID`=? AND `Buyer`=? AND `Seller`=? AND `FreightPartner`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, supplyChainRelationshipID, supplyChainRelationshipFreightID, buyer, seller, freightPartner)
	}
	row := exec.QueryRowContext(ctx, sql, supplyChainRelationshipID, supplyChainRelationshipFreightID, buyer, seller, freightPartner)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_scr_freight_relation_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformSCRFreightRelationDatum row exists.
func (o *DataPlatformSCRFreightRelationDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformSCRFreightRelationDatumExists(ctx, exec, o.SupplyChainRelationshipID, o.SupplyChainRelationshipFreightID, o.Buyer, o.Seller, o.FreightPartner)
}
