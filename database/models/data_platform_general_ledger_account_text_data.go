// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformGeneralLedgerAccountTextDatum is an object representing the database table.
type DataPlatformGeneralLedgerAccountTextDatum struct {
	ChartOfAccounts    string      `boil:"ChartOfAccounts" json:"ChartOfAccounts" toml:"ChartOfAccounts" yaml:"ChartOfAccounts"`
	GLAccount          string      `boil:"GLAccount" json:"GLAccount" toml:"GLAccount" yaml:"GLAccount"`
	Language           string      `boil:"Language" json:"Language" toml:"Language" yaml:"Language"`
	GLAccountName      null.String `boil:"GLAccountName" json:"GLAccountName,omitempty" toml:"GLAccountName" yaml:"GLAccountName,omitempty"`
	GLAccountLongName  null.String `boil:"GLAccountLongName" json:"GLAccountLongName,omitempty" toml:"GLAccountLongName" yaml:"GLAccountLongName,omitempty"`
	LastChangeDateTime null.String `boil:"LastChangeDateTime" json:"LastChangeDateTime,omitempty" toml:"LastChangeDateTime" yaml:"LastChangeDateTime,omitempty"`

	R *dataPlatformGeneralLedgerAccountTextDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformGeneralLedgerAccountTextDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformGeneralLedgerAccountTextDatumColumns = struct {
	ChartOfAccounts    string
	GLAccount          string
	Language           string
	GLAccountName      string
	GLAccountLongName  string
	LastChangeDateTime string
}{
	ChartOfAccounts:    "ChartOfAccounts",
	GLAccount:          "GLAccount",
	Language:           "Language",
	GLAccountName:      "GLAccountName",
	GLAccountLongName:  "GLAccountLongName",
	LastChangeDateTime: "LastChangeDateTime",
}

var DataPlatformGeneralLedgerAccountTextDatumTableColumns = struct {
	ChartOfAccounts    string
	GLAccount          string
	Language           string
	GLAccountName      string
	GLAccountLongName  string
	LastChangeDateTime string
}{
	ChartOfAccounts:    "data_platform_general_ledger_account_text_data.ChartOfAccounts",
	GLAccount:          "data_platform_general_ledger_account_text_data.GLAccount",
	Language:           "data_platform_general_ledger_account_text_data.Language",
	GLAccountName:      "data_platform_general_ledger_account_text_data.GLAccountName",
	GLAccountLongName:  "data_platform_general_ledger_account_text_data.GLAccountLongName",
	LastChangeDateTime: "data_platform_general_ledger_account_text_data.LastChangeDateTime",
}

// Generated where

var DataPlatformGeneralLedgerAccountTextDatumWhere = struct {
	ChartOfAccounts    whereHelperstring
	GLAccount          whereHelperstring
	Language           whereHelperstring
	GLAccountName      whereHelpernull_String
	GLAccountLongName  whereHelpernull_String
	LastChangeDateTime whereHelpernull_String
}{
	ChartOfAccounts:    whereHelperstring{field: "`data_platform_general_ledger_account_text_data`.`ChartOfAccounts`"},
	GLAccount:          whereHelperstring{field: "`data_platform_general_ledger_account_text_data`.`GLAccount`"},
	Language:           whereHelperstring{field: "`data_platform_general_ledger_account_text_data`.`Language`"},
	GLAccountName:      whereHelpernull_String{field: "`data_platform_general_ledger_account_text_data`.`GLAccountName`"},
	GLAccountLongName:  whereHelpernull_String{field: "`data_platform_general_ledger_account_text_data`.`GLAccountLongName`"},
	LastChangeDateTime: whereHelpernull_String{field: "`data_platform_general_ledger_account_text_data`.`LastChangeDateTime`"},
}

// DataPlatformGeneralLedgerAccountTextDatumRels is where relationship names are stored.
var DataPlatformGeneralLedgerAccountTextDatumRels = struct {
	ChartOfAccount string
}{
	ChartOfAccount: "ChartOfAccount",
}

// dataPlatformGeneralLedgerAccountTextDatumR is where relationships are stored.
type dataPlatformGeneralLedgerAccountTextDatumR struct {
	ChartOfAccount *DataPlatformGeneralLedgerAccountChartOfAccountsDatum `boil:"ChartOfAccount" json:"ChartOfAccount" toml:"ChartOfAccount" yaml:"ChartOfAccount"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformGeneralLedgerAccountTextDatumR) NewStruct() *dataPlatformGeneralLedgerAccountTextDatumR {
	return &dataPlatformGeneralLedgerAccountTextDatumR{}
}

func (r *dataPlatformGeneralLedgerAccountTextDatumR) GetChartOfAccount() *DataPlatformGeneralLedgerAccountChartOfAccountsDatum {
	if r == nil {
		return nil
	}
	return r.ChartOfAccount
}

// dataPlatformGeneralLedgerAccountTextDatumL is where Load methods for each relationship are stored.
type dataPlatformGeneralLedgerAccountTextDatumL struct{}

var (
	dataPlatformGeneralLedgerAccountTextDatumAllColumns            = []string{"ChartOfAccounts", "GLAccount", "Language", "GLAccountName", "GLAccountLongName", "LastChangeDateTime"}
	dataPlatformGeneralLedgerAccountTextDatumColumnsWithoutDefault = []string{"ChartOfAccounts", "GLAccount", "Language", "GLAccountName", "GLAccountLongName", "LastChangeDateTime"}
	dataPlatformGeneralLedgerAccountTextDatumColumnsWithDefault    = []string{}
	dataPlatformGeneralLedgerAccountTextDatumPrimaryKeyColumns     = []string{"ChartOfAccounts", "GLAccount", "Language"}
	dataPlatformGeneralLedgerAccountTextDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformGeneralLedgerAccountTextDatumSlice is an alias for a slice of pointers to DataPlatformGeneralLedgerAccountTextDatum.
	// This should almost always be used instead of []DataPlatformGeneralLedgerAccountTextDatum.
	DataPlatformGeneralLedgerAccountTextDatumSlice []*DataPlatformGeneralLedgerAccountTextDatum

	dataPlatformGeneralLedgerAccountTextDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformGeneralLedgerAccountTextDatumType                 = reflect.TypeOf(&DataPlatformGeneralLedgerAccountTextDatum{})
	dataPlatformGeneralLedgerAccountTextDatumMapping              = queries.MakeStructMapping(dataPlatformGeneralLedgerAccountTextDatumType)
	dataPlatformGeneralLedgerAccountTextDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformGeneralLedgerAccountTextDatumType, dataPlatformGeneralLedgerAccountTextDatumMapping, dataPlatformGeneralLedgerAccountTextDatumPrimaryKeyColumns)
	dataPlatformGeneralLedgerAccountTextDatumInsertCacheMut       sync.RWMutex
	dataPlatformGeneralLedgerAccountTextDatumInsertCache          = make(map[string]insertCache)
	dataPlatformGeneralLedgerAccountTextDatumUpdateCacheMut       sync.RWMutex
	dataPlatformGeneralLedgerAccountTextDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformGeneralLedgerAccountTextDatumUpsertCacheMut       sync.RWMutex
	dataPlatformGeneralLedgerAccountTextDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformGeneralLedgerAccountTextDatum record from the query.
func (q dataPlatformGeneralLedgerAccountTextDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformGeneralLedgerAccountTextDatum, error) {
	o := &DataPlatformGeneralLedgerAccountTextDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_general_ledger_account_text_data")
	}

	return o, nil
}

// All returns all DataPlatformGeneralLedgerAccountTextDatum records from the query.
func (q dataPlatformGeneralLedgerAccountTextDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformGeneralLedgerAccountTextDatumSlice, error) {
	var o []*DataPlatformGeneralLedgerAccountTextDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformGeneralLedgerAccountTextDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformGeneralLedgerAccountTextDatum records in the query.
func (q dataPlatformGeneralLedgerAccountTextDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_general_ledger_account_text_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformGeneralLedgerAccountTextDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_general_ledger_account_text_data exists")
	}

	return count > 0, nil
}

// ChartOfAccount pointed to by the foreign key.
func (o *DataPlatformGeneralLedgerAccountTextDatum) ChartOfAccount(mods ...qm.QueryMod) dataPlatformGeneralLedgerAccountChartOfAccountsDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ChartOfAccounts` = ?", o.ChartOfAccounts),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformGeneralLedgerAccountChartOfAccountsData(queryMods...)
}

// LoadChartOfAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformGeneralLedgerAccountTextDatumL) LoadChartOfAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformGeneralLedgerAccountTextDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformGeneralLedgerAccountTextDatum
	var object *DataPlatformGeneralLedgerAccountTextDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformGeneralLedgerAccountTextDatum.(*DataPlatformGeneralLedgerAccountTextDatum)
		if !ok {
			object = new(DataPlatformGeneralLedgerAccountTextDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformGeneralLedgerAccountTextDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformGeneralLedgerAccountTextDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformGeneralLedgerAccountTextDatum.(*[]*DataPlatformGeneralLedgerAccountTextDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformGeneralLedgerAccountTextDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformGeneralLedgerAccountTextDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformGeneralLedgerAccountTextDatumR{}
		}
		args = append(args, object.ChartOfAccounts)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformGeneralLedgerAccountTextDatumR{}
			}

			for _, a := range args {
				if a == obj.ChartOfAccounts {
					continue Outer
				}
			}

			args = append(args, obj.ChartOfAccounts)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_general_ledger_account_chart_of_accounts_data`),
		qm.WhereIn(`data_platform_general_ledger_account_chart_of_accounts_data.ChartOfAccounts in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformGeneralLedgerAccountChartOfAccountsDatum")
	}

	var resultSlice []*DataPlatformGeneralLedgerAccountChartOfAccountsDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformGeneralLedgerAccountChartOfAccountsDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_general_ledger_account_chart_of_accounts_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_general_ledger_account_chart_of_accounts_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ChartOfAccount = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChartOfAccounts == foreign.ChartOfAccounts {
				local.R.ChartOfAccount = foreign
				break
			}
		}
	}

	return nil
}

// SetChartOfAccount of the dataPlatformGeneralLedgerAccountTextDatum to the related item.
// Sets o.R.ChartOfAccount to related.
func (o *DataPlatformGeneralLedgerAccountTextDatum) SetChartOfAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformGeneralLedgerAccountChartOfAccountsDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_general_ledger_account_text_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ChartOfAccounts"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformGeneralLedgerAccountTextDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.ChartOfAccounts, o.ChartOfAccounts, o.GLAccount, o.Language}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChartOfAccounts = related.ChartOfAccounts
	if o.R == nil {
		o.R = &dataPlatformGeneralLedgerAccountTextDatumR{
			ChartOfAccount: related,
		}
	} else {
		o.R.ChartOfAccount = related
	}

	return nil
}

// DataPlatformGeneralLedgerAccountTextData retrieves all the records using an executor.
func DataPlatformGeneralLedgerAccountTextData(mods ...qm.QueryMod) dataPlatformGeneralLedgerAccountTextDatumQuery {
	mods = append(mods, qm.From("`data_platform_general_ledger_account_text_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_general_ledger_account_text_data`.*"})
	}

	return dataPlatformGeneralLedgerAccountTextDatumQuery{q}
}

// FindDataPlatformGeneralLedgerAccountTextDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformGeneralLedgerAccountTextDatum(ctx context.Context, exec boil.ContextExecutor, chartOfAccounts string, gLAccount string, language string, selectCols ...string) (*DataPlatformGeneralLedgerAccountTextDatum, error) {
	dataPlatformGeneralLedgerAccountTextDatumObj := &DataPlatformGeneralLedgerAccountTextDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_general_ledger_account_text_data` where `ChartOfAccounts`=? AND `GLAccount`=? AND `Language`=?", sel,
	)

	q := queries.Raw(query, chartOfAccounts, gLAccount, language)

	err := q.Bind(ctx, exec, dataPlatformGeneralLedgerAccountTextDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_general_ledger_account_text_data")
	}

	return dataPlatformGeneralLedgerAccountTextDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformGeneralLedgerAccountTextDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_general_ledger_account_text_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformGeneralLedgerAccountTextDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformGeneralLedgerAccountTextDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformGeneralLedgerAccountTextDatumInsertCache[key]
	dataPlatformGeneralLedgerAccountTextDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformGeneralLedgerAccountTextDatumAllColumns,
			dataPlatformGeneralLedgerAccountTextDatumColumnsWithDefault,
			dataPlatformGeneralLedgerAccountTextDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformGeneralLedgerAccountTextDatumType, dataPlatformGeneralLedgerAccountTextDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformGeneralLedgerAccountTextDatumType, dataPlatformGeneralLedgerAccountTextDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_general_ledger_account_text_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_general_ledger_account_text_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_general_ledger_account_text_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformGeneralLedgerAccountTextDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_general_ledger_account_text_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ChartOfAccounts,
		o.GLAccount,
		o.Language,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_general_ledger_account_text_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformGeneralLedgerAccountTextDatumInsertCacheMut.Lock()
		dataPlatformGeneralLedgerAccountTextDatumInsertCache[key] = cache
		dataPlatformGeneralLedgerAccountTextDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformGeneralLedgerAccountTextDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformGeneralLedgerAccountTextDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformGeneralLedgerAccountTextDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformGeneralLedgerAccountTextDatumUpdateCache[key]
	dataPlatformGeneralLedgerAccountTextDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformGeneralLedgerAccountTextDatumAllColumns,
			dataPlatformGeneralLedgerAccountTextDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_general_ledger_account_text_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_general_ledger_account_text_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformGeneralLedgerAccountTextDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformGeneralLedgerAccountTextDatumType, dataPlatformGeneralLedgerAccountTextDatumMapping, append(wl, dataPlatformGeneralLedgerAccountTextDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_general_ledger_account_text_data row")
	}

	if !cached {
		dataPlatformGeneralLedgerAccountTextDatumUpdateCacheMut.Lock()
		dataPlatformGeneralLedgerAccountTextDatumUpdateCache[key] = cache
		dataPlatformGeneralLedgerAccountTextDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformGeneralLedgerAccountTextDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_general_ledger_account_text_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformGeneralLedgerAccountTextDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformGeneralLedgerAccountTextDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_general_ledger_account_text_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformGeneralLedgerAccountTextDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformGeneralLedgerAccountTextDatum slice")
	}

	return nil
}

var mySQLDataPlatformGeneralLedgerAccountTextDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformGeneralLedgerAccountTextDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_general_ledger_account_text_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformGeneralLedgerAccountTextDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformGeneralLedgerAccountTextDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformGeneralLedgerAccountTextDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformGeneralLedgerAccountTextDatumUpsertCache[key]
	dataPlatformGeneralLedgerAccountTextDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformGeneralLedgerAccountTextDatumAllColumns,
			dataPlatformGeneralLedgerAccountTextDatumColumnsWithDefault,
			dataPlatformGeneralLedgerAccountTextDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformGeneralLedgerAccountTextDatumAllColumns,
			dataPlatformGeneralLedgerAccountTextDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_general_ledger_account_text_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_general_ledger_account_text_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_general_ledger_account_text_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformGeneralLedgerAccountTextDatumType, dataPlatformGeneralLedgerAccountTextDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformGeneralLedgerAccountTextDatumType, dataPlatformGeneralLedgerAccountTextDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_general_ledger_account_text_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformGeneralLedgerAccountTextDatumType, dataPlatformGeneralLedgerAccountTextDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_general_ledger_account_text_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_general_ledger_account_text_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformGeneralLedgerAccountTextDatumUpsertCacheMut.Lock()
		dataPlatformGeneralLedgerAccountTextDatumUpsertCache[key] = cache
		dataPlatformGeneralLedgerAccountTextDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformGeneralLedgerAccountTextDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformGeneralLedgerAccountTextDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformGeneralLedgerAccountTextDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformGeneralLedgerAccountTextDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_general_ledger_account_text_data` WHERE `ChartOfAccounts`=? AND `GLAccount`=? AND `Language`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_general_ledger_account_text_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformGeneralLedgerAccountTextDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformGeneralLedgerAccountTextDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_general_ledger_account_text_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformGeneralLedgerAccountTextDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformGeneralLedgerAccountTextDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_general_ledger_account_text_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformGeneralLedgerAccountTextDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformGeneralLedgerAccountTextDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformGeneralLedgerAccountTextDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformGeneralLedgerAccountTextDatum(ctx, exec, o.ChartOfAccounts, o.GLAccount, o.Language)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformGeneralLedgerAccountTextDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformGeneralLedgerAccountTextDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformGeneralLedgerAccountTextDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_general_ledger_account_text_data`.* FROM `data_platform_general_ledger_account_text_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformGeneralLedgerAccountTextDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformGeneralLedgerAccountTextDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformGeneralLedgerAccountTextDatumExists checks if the DataPlatformGeneralLedgerAccountTextDatum row exists.
func DataPlatformGeneralLedgerAccountTextDatumExists(ctx context.Context, exec boil.ContextExecutor, chartOfAccounts string, gLAccount string, language string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_general_ledger_account_text_data` where `ChartOfAccounts`=? AND `GLAccount`=? AND `Language`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, chartOfAccounts, gLAccount, language)
	}
	row := exec.QueryRowContext(ctx, sql, chartOfAccounts, gLAccount, language)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_general_ledger_account_text_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformGeneralLedgerAccountTextDatum row exists.
func (o *DataPlatformGeneralLedgerAccountTextDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformGeneralLedgerAccountTextDatumExists(ctx, exec, o.ChartOfAccounts, o.GLAccount, o.Language)
}
