// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformProductionOrderItemOperationCostingDatum is an object representing the database table.
type DataPlatformProductionOrderItemOperationCostingDatum struct {
	ProductionOrder     int       `boil:"ProductionOrder" json:"ProductionOrder" toml:"ProductionOrder" yaml:"ProductionOrder"`
	ProductionOrderItem int       `boil:"ProductionOrderItem" json:"ProductionOrderItem" toml:"ProductionOrderItem" yaml:"ProductionOrderItem"`
	Operations          int       `boil:"Operations" json:"Operations" toml:"Operations" yaml:"Operations"`
	OperationsItem      int       `boil:"OperationsItem" json:"OperationsItem" toml:"OperationsItem" yaml:"OperationsItem"`
	OperationID         int       `boil:"OperationID" json:"OperationID" toml:"OperationID" yaml:"OperationID"`
	Currency            string    `boil:"Currency" json:"Currency" toml:"Currency" yaml:"Currency"`
	CostingAmount       float32   `boil:"CostingAmount" json:"CostingAmount" toml:"CostingAmount" yaml:"CostingAmount"`
	CreationDate        string    `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	CreationTime        string    `boil:"CreationTime" json:"CreationTime" toml:"CreationTime" yaml:"CreationTime"`
	LastChangeDate      string    `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	LastChangeTime      string    `boil:"LastChangeTime" json:"LastChangeTime" toml:"LastChangeTime" yaml:"LastChangeTime"`
	IsReleased          null.Bool `boil:"IsReleased" json:"IsReleased,omitempty" toml:"IsReleased" yaml:"IsReleased,omitempty"`
	IsLocked            null.Bool `boil:"IsLocked" json:"IsLocked,omitempty" toml:"IsLocked" yaml:"IsLocked,omitempty"`
	IsCancelled         null.Bool `boil:"IsCancelled" json:"IsCancelled,omitempty" toml:"IsCancelled" yaml:"IsCancelled,omitempty"`
	IsMarkedForDeletion null.Bool `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformProductionOrderItemOperationCostingDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformProductionOrderItemOperationCostingDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformProductionOrderItemOperationCostingDatumColumns = struct {
	ProductionOrder     string
	ProductionOrderItem string
	Operations          string
	OperationsItem      string
	OperationID         string
	Currency            string
	CostingAmount       string
	CreationDate        string
	CreationTime        string
	LastChangeDate      string
	LastChangeTime      string
	IsReleased          string
	IsLocked            string
	IsCancelled         string
	IsMarkedForDeletion string
}{
	ProductionOrder:     "ProductionOrder",
	ProductionOrderItem: "ProductionOrderItem",
	Operations:          "Operations",
	OperationsItem:      "OperationsItem",
	OperationID:         "OperationID",
	Currency:            "Currency",
	CostingAmount:       "CostingAmount",
	CreationDate:        "CreationDate",
	CreationTime:        "CreationTime",
	LastChangeDate:      "LastChangeDate",
	LastChangeTime:      "LastChangeTime",
	IsReleased:          "IsReleased",
	IsLocked:            "IsLocked",
	IsCancelled:         "IsCancelled",
	IsMarkedForDeletion: "IsMarkedForDeletion",
}

var DataPlatformProductionOrderItemOperationCostingDatumTableColumns = struct {
	ProductionOrder     string
	ProductionOrderItem string
	Operations          string
	OperationsItem      string
	OperationID         string
	Currency            string
	CostingAmount       string
	CreationDate        string
	CreationTime        string
	LastChangeDate      string
	LastChangeTime      string
	IsReleased          string
	IsLocked            string
	IsCancelled         string
	IsMarkedForDeletion string
}{
	ProductionOrder:     "data_platform_production_order_item_operation_costing_data.ProductionOrder",
	ProductionOrderItem: "data_platform_production_order_item_operation_costing_data.ProductionOrderItem",
	Operations:          "data_platform_production_order_item_operation_costing_data.Operations",
	OperationsItem:      "data_platform_production_order_item_operation_costing_data.OperationsItem",
	OperationID:         "data_platform_production_order_item_operation_costing_data.OperationID",
	Currency:            "data_platform_production_order_item_operation_costing_data.Currency",
	CostingAmount:       "data_platform_production_order_item_operation_costing_data.CostingAmount",
	CreationDate:        "data_platform_production_order_item_operation_costing_data.CreationDate",
	CreationTime:        "data_platform_production_order_item_operation_costing_data.CreationTime",
	LastChangeDate:      "data_platform_production_order_item_operation_costing_data.LastChangeDate",
	LastChangeTime:      "data_platform_production_order_item_operation_costing_data.LastChangeTime",
	IsReleased:          "data_platform_production_order_item_operation_costing_data.IsReleased",
	IsLocked:            "data_platform_production_order_item_operation_costing_data.IsLocked",
	IsCancelled:         "data_platform_production_order_item_operation_costing_data.IsCancelled",
	IsMarkedForDeletion: "data_platform_production_order_item_operation_costing_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformProductionOrderItemOperationCostingDatumWhere = struct {
	ProductionOrder     whereHelperint
	ProductionOrderItem whereHelperint
	Operations          whereHelperint
	OperationsItem      whereHelperint
	OperationID         whereHelperint
	Currency            whereHelperstring
	CostingAmount       whereHelperfloat32
	CreationDate        whereHelperstring
	CreationTime        whereHelperstring
	LastChangeDate      whereHelperstring
	LastChangeTime      whereHelperstring
	IsReleased          whereHelpernull_Bool
	IsLocked            whereHelpernull_Bool
	IsCancelled         whereHelpernull_Bool
	IsMarkedForDeletion whereHelpernull_Bool
}{
	ProductionOrder:     whereHelperint{field: "`data_platform_production_order_item_operation_costing_data`.`ProductionOrder`"},
	ProductionOrderItem: whereHelperint{field: "`data_platform_production_order_item_operation_costing_data`.`ProductionOrderItem`"},
	Operations:          whereHelperint{field: "`data_platform_production_order_item_operation_costing_data`.`Operations`"},
	OperationsItem:      whereHelperint{field: "`data_platform_production_order_item_operation_costing_data`.`OperationsItem`"},
	OperationID:         whereHelperint{field: "`data_platform_production_order_item_operation_costing_data`.`OperationID`"},
	Currency:            whereHelperstring{field: "`data_platform_production_order_item_operation_costing_data`.`Currency`"},
	CostingAmount:       whereHelperfloat32{field: "`data_platform_production_order_item_operation_costing_data`.`CostingAmount`"},
	CreationDate:        whereHelperstring{field: "`data_platform_production_order_item_operation_costing_data`.`CreationDate`"},
	CreationTime:        whereHelperstring{field: "`data_platform_production_order_item_operation_costing_data`.`CreationTime`"},
	LastChangeDate:      whereHelperstring{field: "`data_platform_production_order_item_operation_costing_data`.`LastChangeDate`"},
	LastChangeTime:      whereHelperstring{field: "`data_platform_production_order_item_operation_costing_data`.`LastChangeTime`"},
	IsReleased:          whereHelpernull_Bool{field: "`data_platform_production_order_item_operation_costing_data`.`IsReleased`"},
	IsLocked:            whereHelpernull_Bool{field: "`data_platform_production_order_item_operation_costing_data`.`IsLocked`"},
	IsCancelled:         whereHelpernull_Bool{field: "`data_platform_production_order_item_operation_costing_data`.`IsCancelled`"},
	IsMarkedForDeletion: whereHelpernull_Bool{field: "`data_platform_production_order_item_operation_costing_data`.`IsMarkedForDeletion`"},
}

// DataPlatformProductionOrderItemOperationCostingDatumRels is where relationship names are stored.
var DataPlatformProductionOrderItemOperationCostingDatumRels = struct {
	CurrencyDataPlatformCurrencyCurrencyDatum                string
	OperationIDDataPlatformProductionOrderItemOperationDatum string
}{
	CurrencyDataPlatformCurrencyCurrencyDatum:                "CurrencyDataPlatformCurrencyCurrencyDatum",
	OperationIDDataPlatformProductionOrderItemOperationDatum: "OperationIDDataPlatformProductionOrderItemOperationDatum",
}

// dataPlatformProductionOrderItemOperationCostingDatumR is where relationships are stored.
type dataPlatformProductionOrderItemOperationCostingDatumR struct {
	CurrencyDataPlatformCurrencyCurrencyDatum                *DataPlatformCurrencyCurrencyDatum             `boil:"CurrencyDataPlatformCurrencyCurrencyDatum" json:"CurrencyDataPlatformCurrencyCurrencyDatum" toml:"CurrencyDataPlatformCurrencyCurrencyDatum" yaml:"CurrencyDataPlatformCurrencyCurrencyDatum"`
	OperationIDDataPlatformProductionOrderItemOperationDatum *DataPlatformProductionOrderItemOperationDatum `boil:"OperationIDDataPlatformProductionOrderItemOperationDatum" json:"OperationIDDataPlatformProductionOrderItemOperationDatum" toml:"OperationIDDataPlatformProductionOrderItemOperationDatum" yaml:"OperationIDDataPlatformProductionOrderItemOperationDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformProductionOrderItemOperationCostingDatumR) NewStruct() *dataPlatformProductionOrderItemOperationCostingDatumR {
	return &dataPlatformProductionOrderItemOperationCostingDatumR{}
}

func (r *dataPlatformProductionOrderItemOperationCostingDatumR) GetCurrencyDataPlatformCurrencyCurrencyDatum() *DataPlatformCurrencyCurrencyDatum {
	if r == nil {
		return nil
	}
	return r.CurrencyDataPlatformCurrencyCurrencyDatum
}

func (r *dataPlatformProductionOrderItemOperationCostingDatumR) GetOperationIDDataPlatformProductionOrderItemOperationDatum() *DataPlatformProductionOrderItemOperationDatum {
	if r == nil {
		return nil
	}
	return r.OperationIDDataPlatformProductionOrderItemOperationDatum
}

// dataPlatformProductionOrderItemOperationCostingDatumL is where Load methods for each relationship are stored.
type dataPlatformProductionOrderItemOperationCostingDatumL struct{}

var (
	dataPlatformProductionOrderItemOperationCostingDatumAllColumns            = []string{"ProductionOrder", "ProductionOrderItem", "Operations", "OperationsItem", "OperationID", "Currency", "CostingAmount", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsReleased", "IsLocked", "IsCancelled", "IsMarkedForDeletion"}
	dataPlatformProductionOrderItemOperationCostingDatumColumnsWithoutDefault = []string{"ProductionOrder", "ProductionOrderItem", "Operations", "OperationsItem", "OperationID", "Currency", "CostingAmount", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsReleased", "IsLocked", "IsCancelled", "IsMarkedForDeletion"}
	dataPlatformProductionOrderItemOperationCostingDatumColumnsWithDefault    = []string{}
	dataPlatformProductionOrderItemOperationCostingDatumPrimaryKeyColumns     = []string{"ProductionOrder", "ProductionOrderItem", "Operations", "OperationsItem", "OperationID"}
	dataPlatformProductionOrderItemOperationCostingDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformProductionOrderItemOperationCostingDatumSlice is an alias for a slice of pointers to DataPlatformProductionOrderItemOperationCostingDatum.
	// This should almost always be used instead of []DataPlatformProductionOrderItemOperationCostingDatum.
	DataPlatformProductionOrderItemOperationCostingDatumSlice []*DataPlatformProductionOrderItemOperationCostingDatum

	dataPlatformProductionOrderItemOperationCostingDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformProductionOrderItemOperationCostingDatumType                 = reflect.TypeOf(&DataPlatformProductionOrderItemOperationCostingDatum{})
	dataPlatformProductionOrderItemOperationCostingDatumMapping              = queries.MakeStructMapping(dataPlatformProductionOrderItemOperationCostingDatumType)
	dataPlatformProductionOrderItemOperationCostingDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformProductionOrderItemOperationCostingDatumType, dataPlatformProductionOrderItemOperationCostingDatumMapping, dataPlatformProductionOrderItemOperationCostingDatumPrimaryKeyColumns)
	dataPlatformProductionOrderItemOperationCostingDatumInsertCacheMut       sync.RWMutex
	dataPlatformProductionOrderItemOperationCostingDatumInsertCache          = make(map[string]insertCache)
	dataPlatformProductionOrderItemOperationCostingDatumUpdateCacheMut       sync.RWMutex
	dataPlatformProductionOrderItemOperationCostingDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformProductionOrderItemOperationCostingDatumUpsertCacheMut       sync.RWMutex
	dataPlatformProductionOrderItemOperationCostingDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformProductionOrderItemOperationCostingDatum record from the query.
func (q dataPlatformProductionOrderItemOperationCostingDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformProductionOrderItemOperationCostingDatum, error) {
	o := &DataPlatformProductionOrderItemOperationCostingDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_production_order_item_operation_costing_data")
	}

	return o, nil
}

// All returns all DataPlatformProductionOrderItemOperationCostingDatum records from the query.
func (q dataPlatformProductionOrderItemOperationCostingDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformProductionOrderItemOperationCostingDatumSlice, error) {
	var o []*DataPlatformProductionOrderItemOperationCostingDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformProductionOrderItemOperationCostingDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformProductionOrderItemOperationCostingDatum records in the query.
func (q dataPlatformProductionOrderItemOperationCostingDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_production_order_item_operation_costing_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformProductionOrderItemOperationCostingDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_production_order_item_operation_costing_data exists")
	}

	return count > 0, nil
}

// CurrencyDataPlatformCurrencyCurrencyDatum pointed to by the foreign key.
func (o *DataPlatformProductionOrderItemOperationCostingDatum) CurrencyDataPlatformCurrencyCurrencyDatum(mods ...qm.QueryMod) dataPlatformCurrencyCurrencyDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Currency` = ?", o.Currency),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformCurrencyCurrencyData(queryMods...)
}

// OperationIDDataPlatformProductionOrderItemOperationDatum pointed to by the foreign key.
func (o *DataPlatformProductionOrderItemOperationCostingDatum) OperationIDDataPlatformProductionOrderItemOperationDatum(mods ...qm.QueryMod) dataPlatformProductionOrderItemOperationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`OperationID` = ?", o.OperationID),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformProductionOrderItemOperationData(queryMods...)
}

// LoadCurrencyDataPlatformCurrencyCurrencyDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductionOrderItemOperationCostingDatumL) LoadCurrencyDataPlatformCurrencyCurrencyDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderItemOperationCostingDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderItemOperationCostingDatum
	var object *DataPlatformProductionOrderItemOperationCostingDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderItemOperationCostingDatum.(*DataPlatformProductionOrderItemOperationCostingDatum)
		if !ok {
			object = new(DataPlatformProductionOrderItemOperationCostingDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderItemOperationCostingDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderItemOperationCostingDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderItemOperationCostingDatum.(*[]*DataPlatformProductionOrderItemOperationCostingDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderItemOperationCostingDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderItemOperationCostingDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderItemOperationCostingDatumR{}
		}
		args = append(args, object.Currency)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderItemOperationCostingDatumR{}
			}

			for _, a := range args {
				if a == obj.Currency {
					continue Outer
				}
			}

			args = append(args, obj.Currency)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_currency_currency_data`),
		qm.WhereIn(`data_platform_currency_currency_data.Currency in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformCurrencyCurrencyDatum")
	}

	var resultSlice []*DataPlatformCurrencyCurrencyDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformCurrencyCurrencyDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_currency_currency_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_currency_currency_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CurrencyDataPlatformCurrencyCurrencyDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Currency == foreign.Currency {
				local.R.CurrencyDataPlatformCurrencyCurrencyDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadOperationIDDataPlatformProductionOrderItemOperationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductionOrderItemOperationCostingDatumL) LoadOperationIDDataPlatformProductionOrderItemOperationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderItemOperationCostingDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderItemOperationCostingDatum
	var object *DataPlatformProductionOrderItemOperationCostingDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderItemOperationCostingDatum.(*DataPlatformProductionOrderItemOperationCostingDatum)
		if !ok {
			object = new(DataPlatformProductionOrderItemOperationCostingDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderItemOperationCostingDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderItemOperationCostingDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderItemOperationCostingDatum.(*[]*DataPlatformProductionOrderItemOperationCostingDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderItemOperationCostingDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderItemOperationCostingDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderItemOperationCostingDatumR{}
		}
		args = append(args, object.OperationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderItemOperationCostingDatumR{}
			}

			for _, a := range args {
				if a == obj.OperationID {
					continue Outer
				}
			}

			args = append(args, obj.OperationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_item_operation_data`),
		qm.WhereIn(`data_platform_production_order_item_operation_data.OperationID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformProductionOrderItemOperationDatum")
	}

	var resultSlice []*DataPlatformProductionOrderItemOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformProductionOrderItemOperationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_production_order_item_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_item_operation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OperationIDDataPlatformProductionOrderItemOperationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OperationID == foreign.OperationID {
				local.R.OperationIDDataPlatformProductionOrderItemOperationDatum = foreign
				break
			}
		}
	}

	return nil
}

// SetCurrencyDataPlatformCurrencyCurrencyDatum of the dataPlatformProductionOrderItemOperationCostingDatum to the related item.
// Sets o.R.CurrencyDataPlatformCurrencyCurrencyDatum to related.
func (o *DataPlatformProductionOrderItemOperationCostingDatum) SetCurrencyDataPlatformCurrencyCurrencyDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformCurrencyCurrencyDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_production_order_item_operation_costing_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Currency"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemOperationCostingDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Currency, o.ProductionOrder, o.ProductionOrderItem, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Currency = related.Currency
	if o.R == nil {
		o.R = &dataPlatformProductionOrderItemOperationCostingDatumR{
			CurrencyDataPlatformCurrencyCurrencyDatum: related,
		}
	} else {
		o.R.CurrencyDataPlatformCurrencyCurrencyDatum = related
	}

	return nil
}

// SetOperationIDDataPlatformProductionOrderItemOperationDatum of the dataPlatformProductionOrderItemOperationCostingDatum to the related item.
// Sets o.R.OperationIDDataPlatformProductionOrderItemOperationDatum to related.
func (o *DataPlatformProductionOrderItemOperationCostingDatum) SetOperationIDDataPlatformProductionOrderItemOperationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformProductionOrderItemOperationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_production_order_item_operation_costing_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"OperationID"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemOperationCostingDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.OperationID, o.ProductionOrder, o.ProductionOrderItem, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OperationID = related.OperationID
	if o.R == nil {
		o.R = &dataPlatformProductionOrderItemOperationCostingDatumR{
			OperationIDDataPlatformProductionOrderItemOperationDatum: related,
		}
	} else {
		o.R.OperationIDDataPlatformProductionOrderItemOperationDatum = related
	}

	return nil
}

// DataPlatformProductionOrderItemOperationCostingData retrieves all the records using an executor.
func DataPlatformProductionOrderItemOperationCostingData(mods ...qm.QueryMod) dataPlatformProductionOrderItemOperationCostingDatumQuery {
	mods = append(mods, qm.From("`data_platform_production_order_item_operation_costing_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_production_order_item_operation_costing_data`.*"})
	}

	return dataPlatformProductionOrderItemOperationCostingDatumQuery{q}
}

// FindDataPlatformProductionOrderItemOperationCostingDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformProductionOrderItemOperationCostingDatum(ctx context.Context, exec boil.ContextExecutor, productionOrder int, productionOrderItem int, operations int, operationsItem int, operationID int, selectCols ...string) (*DataPlatformProductionOrderItemOperationCostingDatum, error) {
	dataPlatformProductionOrderItemOperationCostingDatumObj := &DataPlatformProductionOrderItemOperationCostingDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_production_order_item_operation_costing_data` where `ProductionOrder`=? AND `ProductionOrderItem`=? AND `Operations`=? AND `OperationsItem`=? AND `OperationID`=?", sel,
	)

	q := queries.Raw(query, productionOrder, productionOrderItem, operations, operationsItem, operationID)

	err := q.Bind(ctx, exec, dataPlatformProductionOrderItemOperationCostingDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_production_order_item_operation_costing_data")
	}

	return dataPlatformProductionOrderItemOperationCostingDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformProductionOrderItemOperationCostingDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_production_order_item_operation_costing_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductionOrderItemOperationCostingDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformProductionOrderItemOperationCostingDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformProductionOrderItemOperationCostingDatumInsertCache[key]
	dataPlatformProductionOrderItemOperationCostingDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformProductionOrderItemOperationCostingDatumAllColumns,
			dataPlatformProductionOrderItemOperationCostingDatumColumnsWithDefault,
			dataPlatformProductionOrderItemOperationCostingDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionOrderItemOperationCostingDatumType, dataPlatformProductionOrderItemOperationCostingDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformProductionOrderItemOperationCostingDatumType, dataPlatformProductionOrderItemOperationCostingDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_production_order_item_operation_costing_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_production_order_item_operation_costing_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_production_order_item_operation_costing_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemOperationCostingDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_production_order_item_operation_costing_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ProductionOrder,
		o.ProductionOrderItem,
		o.Operations,
		o.OperationsItem,
		o.OperationID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_production_order_item_operation_costing_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductionOrderItemOperationCostingDatumInsertCacheMut.Lock()
		dataPlatformProductionOrderItemOperationCostingDatumInsertCache[key] = cache
		dataPlatformProductionOrderItemOperationCostingDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformProductionOrderItemOperationCostingDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformProductionOrderItemOperationCostingDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformProductionOrderItemOperationCostingDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformProductionOrderItemOperationCostingDatumUpdateCache[key]
	dataPlatformProductionOrderItemOperationCostingDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformProductionOrderItemOperationCostingDatumAllColumns,
			dataPlatformProductionOrderItemOperationCostingDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_production_order_item_operation_costing_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_production_order_item_operation_costing_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemOperationCostingDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionOrderItemOperationCostingDatumType, dataPlatformProductionOrderItemOperationCostingDatumMapping, append(wl, dataPlatformProductionOrderItemOperationCostingDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_production_order_item_operation_costing_data row")
	}

	if !cached {
		dataPlatformProductionOrderItemOperationCostingDatumUpdateCacheMut.Lock()
		dataPlatformProductionOrderItemOperationCostingDatumUpdateCache[key] = cache
		dataPlatformProductionOrderItemOperationCostingDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformProductionOrderItemOperationCostingDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_production_order_item_operation_costing_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformProductionOrderItemOperationCostingDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionOrderItemOperationCostingDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_production_order_item_operation_costing_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionOrderItemOperationCostingDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformProductionOrderItemOperationCostingDatum slice")
	}

	return nil
}

var mySQLDataPlatformProductionOrderItemOperationCostingDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformProductionOrderItemOperationCostingDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_production_order_item_operation_costing_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductionOrderItemOperationCostingDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformProductionOrderItemOperationCostingDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformProductionOrderItemOperationCostingDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformProductionOrderItemOperationCostingDatumUpsertCache[key]
	dataPlatformProductionOrderItemOperationCostingDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformProductionOrderItemOperationCostingDatumAllColumns,
			dataPlatformProductionOrderItemOperationCostingDatumColumnsWithDefault,
			dataPlatformProductionOrderItemOperationCostingDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformProductionOrderItemOperationCostingDatumAllColumns,
			dataPlatformProductionOrderItemOperationCostingDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_production_order_item_operation_costing_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_production_order_item_operation_costing_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_production_order_item_operation_costing_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionOrderItemOperationCostingDatumType, dataPlatformProductionOrderItemOperationCostingDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformProductionOrderItemOperationCostingDatumType, dataPlatformProductionOrderItemOperationCostingDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_production_order_item_operation_costing_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformProductionOrderItemOperationCostingDatumType, dataPlatformProductionOrderItemOperationCostingDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_production_order_item_operation_costing_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_production_order_item_operation_costing_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductionOrderItemOperationCostingDatumUpsertCacheMut.Lock()
		dataPlatformProductionOrderItemOperationCostingDatumUpsertCache[key] = cache
		dataPlatformProductionOrderItemOperationCostingDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformProductionOrderItemOperationCostingDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformProductionOrderItemOperationCostingDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformProductionOrderItemOperationCostingDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformProductionOrderItemOperationCostingDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_production_order_item_operation_costing_data` WHERE `ProductionOrder`=? AND `ProductionOrderItem`=? AND `Operations`=? AND `OperationsItem`=? AND `OperationID`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_production_order_item_operation_costing_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformProductionOrderItemOperationCostingDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformProductionOrderItemOperationCostingDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_production_order_item_operation_costing_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformProductionOrderItemOperationCostingDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionOrderItemOperationCostingDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_production_order_item_operation_costing_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionOrderItemOperationCostingDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformProductionOrderItemOperationCostingDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformProductionOrderItemOperationCostingDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformProductionOrderItemOperationCostingDatum(ctx, exec, o.ProductionOrder, o.ProductionOrderItem, o.Operations, o.OperationsItem, o.OperationID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformProductionOrderItemOperationCostingDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformProductionOrderItemOperationCostingDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionOrderItemOperationCostingDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_production_order_item_operation_costing_data`.* FROM `data_platform_production_order_item_operation_costing_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionOrderItemOperationCostingDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformProductionOrderItemOperationCostingDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformProductionOrderItemOperationCostingDatumExists checks if the DataPlatformProductionOrderItemOperationCostingDatum row exists.
func DataPlatformProductionOrderItemOperationCostingDatumExists(ctx context.Context, exec boil.ContextExecutor, productionOrder int, productionOrderItem int, operations int, operationsItem int, operationID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_production_order_item_operation_costing_data` where `ProductionOrder`=? AND `ProductionOrderItem`=? AND `Operations`=? AND `OperationsItem`=? AND `OperationID`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, productionOrder, productionOrderItem, operations, operationsItem, operationID)
	}
	row := exec.QueryRowContext(ctx, sql, productionOrder, productionOrderItem, operations, operationsItem, operationID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_production_order_item_operation_costing_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformProductionOrderItemOperationCostingDatum row exists.
func (o *DataPlatformProductionOrderItemOperationCostingDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformProductionOrderItemOperationCostingDatumExists(ctx, exec, o.ProductionOrder, o.ProductionOrderItem, o.Operations, o.OperationsItem, o.OperationID)
}
