// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformPaymentMethodTextDatum is an object representing the database table.
type DataPlatformPaymentMethodTextDatum struct {
	PaymentMethod     string `boil:"PaymentMethod" json:"PaymentMethod" toml:"PaymentMethod" yaml:"PaymentMethod"`
	Language          string `boil:"Language" json:"Language" toml:"Language" yaml:"Language"`
	PaymentMethodName string `boil:"PaymentMethodName" json:"PaymentMethodName" toml:"PaymentMethodName" yaml:"PaymentMethodName"`

	R *dataPlatformPaymentMethodTextDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformPaymentMethodTextDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformPaymentMethodTextDatumColumns = struct {
	PaymentMethod     string
	Language          string
	PaymentMethodName string
}{
	PaymentMethod:     "PaymentMethod",
	Language:          "Language",
	PaymentMethodName: "PaymentMethodName",
}

var DataPlatformPaymentMethodTextDatumTableColumns = struct {
	PaymentMethod     string
	Language          string
	PaymentMethodName string
}{
	PaymentMethod:     "data_platform_payment_method_text_data.PaymentMethod",
	Language:          "data_platform_payment_method_text_data.Language",
	PaymentMethodName: "data_platform_payment_method_text_data.PaymentMethodName",
}

// Generated where

var DataPlatformPaymentMethodTextDatumWhere = struct {
	PaymentMethod     whereHelperstring
	Language          whereHelperstring
	PaymentMethodName whereHelperstring
}{
	PaymentMethod:     whereHelperstring{field: "`data_platform_payment_method_text_data`.`PaymentMethod`"},
	Language:          whereHelperstring{field: "`data_platform_payment_method_text_data`.`Language`"},
	PaymentMethodName: whereHelperstring{field: "`data_platform_payment_method_text_data`.`PaymentMethodName`"},
}

// DataPlatformPaymentMethodTextDatumRels is where relationship names are stored.
var DataPlatformPaymentMethodTextDatumRels = struct {
	PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum string
}{
	PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum: "PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum",
}

// dataPlatformPaymentMethodTextDatumR is where relationships are stored.
type dataPlatformPaymentMethodTextDatumR struct {
	PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum *DataPlatformPaymentMethodPaymentMethodDatum `boil:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum" json:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum" toml:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum" yaml:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformPaymentMethodTextDatumR) NewStruct() *dataPlatformPaymentMethodTextDatumR {
	return &dataPlatformPaymentMethodTextDatumR{}
}

func (r *dataPlatformPaymentMethodTextDatumR) GetPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum() *DataPlatformPaymentMethodPaymentMethodDatum {
	if r == nil {
		return nil
	}
	return r.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum
}

// dataPlatformPaymentMethodTextDatumL is where Load methods for each relationship are stored.
type dataPlatformPaymentMethodTextDatumL struct{}

var (
	dataPlatformPaymentMethodTextDatumAllColumns            = []string{"PaymentMethod", "Language", "PaymentMethodName"}
	dataPlatformPaymentMethodTextDatumColumnsWithoutDefault = []string{"PaymentMethod", "Language", "PaymentMethodName"}
	dataPlatformPaymentMethodTextDatumColumnsWithDefault    = []string{}
	dataPlatformPaymentMethodTextDatumPrimaryKeyColumns     = []string{"PaymentMethod", "Language"}
	dataPlatformPaymentMethodTextDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformPaymentMethodTextDatumSlice is an alias for a slice of pointers to DataPlatformPaymentMethodTextDatum.
	// This should almost always be used instead of []DataPlatformPaymentMethodTextDatum.
	DataPlatformPaymentMethodTextDatumSlice []*DataPlatformPaymentMethodTextDatum
	// DataPlatformPaymentMethodTextDatumHook is the signature for custom DataPlatformPaymentMethodTextDatum hook methods
	DataPlatformPaymentMethodTextDatumHook func(context.Context, boil.ContextExecutor, *DataPlatformPaymentMethodTextDatum) error

	dataPlatformPaymentMethodTextDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformPaymentMethodTextDatumType                 = reflect.TypeOf(&DataPlatformPaymentMethodTextDatum{})
	dataPlatformPaymentMethodTextDatumMapping              = queries.MakeStructMapping(dataPlatformPaymentMethodTextDatumType)
	dataPlatformPaymentMethodTextDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformPaymentMethodTextDatumType, dataPlatformPaymentMethodTextDatumMapping, dataPlatformPaymentMethodTextDatumPrimaryKeyColumns)
	dataPlatformPaymentMethodTextDatumInsertCacheMut       sync.RWMutex
	dataPlatformPaymentMethodTextDatumInsertCache          = make(map[string]insertCache)
	dataPlatformPaymentMethodTextDatumUpdateCacheMut       sync.RWMutex
	dataPlatformPaymentMethodTextDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformPaymentMethodTextDatumUpsertCacheMut       sync.RWMutex
	dataPlatformPaymentMethodTextDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dataPlatformPaymentMethodTextDatumAfterSelectHooks []DataPlatformPaymentMethodTextDatumHook

var dataPlatformPaymentMethodTextDatumBeforeInsertHooks []DataPlatformPaymentMethodTextDatumHook
var dataPlatformPaymentMethodTextDatumAfterInsertHooks []DataPlatformPaymentMethodTextDatumHook

var dataPlatformPaymentMethodTextDatumBeforeUpdateHooks []DataPlatformPaymentMethodTextDatumHook
var dataPlatformPaymentMethodTextDatumAfterUpdateHooks []DataPlatformPaymentMethodTextDatumHook

var dataPlatformPaymentMethodTextDatumBeforeDeleteHooks []DataPlatformPaymentMethodTextDatumHook
var dataPlatformPaymentMethodTextDatumAfterDeleteHooks []DataPlatformPaymentMethodTextDatumHook

var dataPlatformPaymentMethodTextDatumBeforeUpsertHooks []DataPlatformPaymentMethodTextDatumHook
var dataPlatformPaymentMethodTextDatumAfterUpsertHooks []DataPlatformPaymentMethodTextDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DataPlatformPaymentMethodTextDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformPaymentMethodTextDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DataPlatformPaymentMethodTextDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformPaymentMethodTextDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DataPlatformPaymentMethodTextDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformPaymentMethodTextDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DataPlatformPaymentMethodTextDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformPaymentMethodTextDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DataPlatformPaymentMethodTextDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformPaymentMethodTextDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DataPlatformPaymentMethodTextDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformPaymentMethodTextDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DataPlatformPaymentMethodTextDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformPaymentMethodTextDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DataPlatformPaymentMethodTextDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformPaymentMethodTextDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DataPlatformPaymentMethodTextDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformPaymentMethodTextDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDataPlatformPaymentMethodTextDatumHook registers your hook function for all future operations.
func AddDataPlatformPaymentMethodTextDatumHook(hookPoint boil.HookPoint, dataPlatformPaymentMethodTextDatumHook DataPlatformPaymentMethodTextDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dataPlatformPaymentMethodTextDatumAfterSelectHooks = append(dataPlatformPaymentMethodTextDatumAfterSelectHooks, dataPlatformPaymentMethodTextDatumHook)
	case boil.BeforeInsertHook:
		dataPlatformPaymentMethodTextDatumBeforeInsertHooks = append(dataPlatformPaymentMethodTextDatumBeforeInsertHooks, dataPlatformPaymentMethodTextDatumHook)
	case boil.AfterInsertHook:
		dataPlatformPaymentMethodTextDatumAfterInsertHooks = append(dataPlatformPaymentMethodTextDatumAfterInsertHooks, dataPlatformPaymentMethodTextDatumHook)
	case boil.BeforeUpdateHook:
		dataPlatformPaymentMethodTextDatumBeforeUpdateHooks = append(dataPlatformPaymentMethodTextDatumBeforeUpdateHooks, dataPlatformPaymentMethodTextDatumHook)
	case boil.AfterUpdateHook:
		dataPlatformPaymentMethodTextDatumAfterUpdateHooks = append(dataPlatformPaymentMethodTextDatumAfterUpdateHooks, dataPlatformPaymentMethodTextDatumHook)
	case boil.BeforeDeleteHook:
		dataPlatformPaymentMethodTextDatumBeforeDeleteHooks = append(dataPlatformPaymentMethodTextDatumBeforeDeleteHooks, dataPlatformPaymentMethodTextDatumHook)
	case boil.AfterDeleteHook:
		dataPlatformPaymentMethodTextDatumAfterDeleteHooks = append(dataPlatformPaymentMethodTextDatumAfterDeleteHooks, dataPlatformPaymentMethodTextDatumHook)
	case boil.BeforeUpsertHook:
		dataPlatformPaymentMethodTextDatumBeforeUpsertHooks = append(dataPlatformPaymentMethodTextDatumBeforeUpsertHooks, dataPlatformPaymentMethodTextDatumHook)
	case boil.AfterUpsertHook:
		dataPlatformPaymentMethodTextDatumAfterUpsertHooks = append(dataPlatformPaymentMethodTextDatumAfterUpsertHooks, dataPlatformPaymentMethodTextDatumHook)
	}
}

// One returns a single dataPlatformPaymentMethodTextDatum record from the query.
func (q dataPlatformPaymentMethodTextDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformPaymentMethodTextDatum, error) {
	o := &DataPlatformPaymentMethodTextDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_payment_method_text_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DataPlatformPaymentMethodTextDatum records from the query.
func (q dataPlatformPaymentMethodTextDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformPaymentMethodTextDatumSlice, error) {
	var o []*DataPlatformPaymentMethodTextDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformPaymentMethodTextDatum slice")
	}

	if len(dataPlatformPaymentMethodTextDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DataPlatformPaymentMethodTextDatum records in the query.
func (q dataPlatformPaymentMethodTextDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_payment_method_text_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformPaymentMethodTextDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_payment_method_text_data exists")
	}

	return count > 0, nil
}

// PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum pointed to by the foreign key.
func (o *DataPlatformPaymentMethodTextDatum) PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum(mods ...qm.QueryMod) dataPlatformPaymentMethodPaymentMethodDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PaymentMethod` = ?", o.PaymentMethod),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPaymentMethodPaymentMethodData(queryMods...)
}

// LoadPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPaymentMethodTextDatumL) LoadPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPaymentMethodTextDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPaymentMethodTextDatum
	var object *DataPlatformPaymentMethodTextDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPaymentMethodTextDatum.(*DataPlatformPaymentMethodTextDatum)
		if !ok {
			object = new(DataPlatformPaymentMethodTextDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPaymentMethodTextDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPaymentMethodTextDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPaymentMethodTextDatum.(*[]*DataPlatformPaymentMethodTextDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPaymentMethodTextDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPaymentMethodTextDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPaymentMethodTextDatumR{}
		}
		args = append(args, object.PaymentMethod)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPaymentMethodTextDatumR{}
			}

			for _, a := range args {
				if a == obj.PaymentMethod {
					continue Outer
				}
			}

			args = append(args, obj.PaymentMethod)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_payment_method_payment_method_data`),
		qm.WhereIn(`data_platform_payment_method_payment_method_data.PaymentMethod in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPaymentMethodPaymentMethodDatum")
	}

	var resultSlice []*DataPlatformPaymentMethodPaymentMethodDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPaymentMethodPaymentMethodDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_payment_method_payment_method_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_payment_method_payment_method_data")
	}

	if len(dataPlatformPaymentMethodPaymentMethodDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformPaymentMethodPaymentMethodDatumR{}
		}
		foreign.R.PaymentMethodDataPlatformPaymentMethodTextData = append(foreign.R.PaymentMethodDataPlatformPaymentMethodTextData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PaymentMethod == foreign.PaymentMethod {
				local.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformPaymentMethodPaymentMethodDatumR{}
				}
				foreign.R.PaymentMethodDataPlatformPaymentMethodTextData = append(foreign.R.PaymentMethodDataPlatformPaymentMethodTextData, local)
				break
			}
		}
	}

	return nil
}

// SetPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum of the dataPlatformPaymentMethodTextDatum to the related item.
// Sets o.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum to related.
// Adds o to related.R.PaymentMethodDataPlatformPaymentMethodTextData.
func (o *DataPlatformPaymentMethodTextDatum) SetPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPaymentMethodPaymentMethodDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_payment_method_text_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PaymentMethod"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPaymentMethodTextDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PaymentMethod, o.PaymentMethod, o.Language}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PaymentMethod = related.PaymentMethod
	if o.R == nil {
		o.R = &dataPlatformPaymentMethodTextDatumR{
			PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum: related,
		}
	} else {
		o.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformPaymentMethodPaymentMethodDatumR{
			PaymentMethodDataPlatformPaymentMethodTextData: DataPlatformPaymentMethodTextDatumSlice{o},
		}
	} else {
		related.R.PaymentMethodDataPlatformPaymentMethodTextData = append(related.R.PaymentMethodDataPlatformPaymentMethodTextData, o)
	}

	return nil
}

// DataPlatformPaymentMethodTextData retrieves all the records using an executor.
func DataPlatformPaymentMethodTextData(mods ...qm.QueryMod) dataPlatformPaymentMethodTextDatumQuery {
	mods = append(mods, qm.From("`data_platform_payment_method_text_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_payment_method_text_data`.*"})
	}

	return dataPlatformPaymentMethodTextDatumQuery{q}
}

// FindDataPlatformPaymentMethodTextDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformPaymentMethodTextDatum(ctx context.Context, exec boil.ContextExecutor, paymentMethod string, language string, selectCols ...string) (*DataPlatformPaymentMethodTextDatum, error) {
	dataPlatformPaymentMethodTextDatumObj := &DataPlatformPaymentMethodTextDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_payment_method_text_data` where `PaymentMethod`=? AND `Language`=?", sel,
	)

	q := queries.Raw(query, paymentMethod, language)

	err := q.Bind(ctx, exec, dataPlatformPaymentMethodTextDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_payment_method_text_data")
	}

	if err = dataPlatformPaymentMethodTextDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dataPlatformPaymentMethodTextDatumObj, err
	}

	return dataPlatformPaymentMethodTextDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformPaymentMethodTextDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_payment_method_text_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPaymentMethodTextDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformPaymentMethodTextDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformPaymentMethodTextDatumInsertCache[key]
	dataPlatformPaymentMethodTextDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformPaymentMethodTextDatumAllColumns,
			dataPlatformPaymentMethodTextDatumColumnsWithDefault,
			dataPlatformPaymentMethodTextDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPaymentMethodTextDatumType, dataPlatformPaymentMethodTextDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformPaymentMethodTextDatumType, dataPlatformPaymentMethodTextDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_payment_method_text_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_payment_method_text_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_payment_method_text_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformPaymentMethodTextDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_payment_method_text_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PaymentMethod,
		o.Language,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_payment_method_text_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPaymentMethodTextDatumInsertCacheMut.Lock()
		dataPlatformPaymentMethodTextDatumInsertCache[key] = cache
		dataPlatformPaymentMethodTextDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DataPlatformPaymentMethodTextDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformPaymentMethodTextDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dataPlatformPaymentMethodTextDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformPaymentMethodTextDatumUpdateCache[key]
	dataPlatformPaymentMethodTextDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformPaymentMethodTextDatumAllColumns,
			dataPlatformPaymentMethodTextDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update data_platform_payment_method_text_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_payment_method_text_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformPaymentMethodTextDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformPaymentMethodTextDatumType, dataPlatformPaymentMethodTextDatumMapping, append(wl, dataPlatformPaymentMethodTextDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update data_platform_payment_method_text_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for data_platform_payment_method_text_data")
	}

	if !cached {
		dataPlatformPaymentMethodTextDatumUpdateCacheMut.Lock()
		dataPlatformPaymentMethodTextDatumUpdateCache[key] = cache
		dataPlatformPaymentMethodTextDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformPaymentMethodTextDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for data_platform_payment_method_text_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for data_platform_payment_method_text_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformPaymentMethodTextDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPaymentMethodTextDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_payment_method_text_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPaymentMethodTextDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dataPlatformPaymentMethodTextDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dataPlatformPaymentMethodTextDatum")
	}
	return rowsAff, nil
}

var mySQLDataPlatformPaymentMethodTextDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformPaymentMethodTextDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_payment_method_text_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPaymentMethodTextDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformPaymentMethodTextDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformPaymentMethodTextDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformPaymentMethodTextDatumUpsertCache[key]
	dataPlatformPaymentMethodTextDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformPaymentMethodTextDatumAllColumns,
			dataPlatformPaymentMethodTextDatumColumnsWithDefault,
			dataPlatformPaymentMethodTextDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformPaymentMethodTextDatumAllColumns,
			dataPlatformPaymentMethodTextDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_payment_method_text_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_payment_method_text_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_payment_method_text_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPaymentMethodTextDatumType, dataPlatformPaymentMethodTextDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformPaymentMethodTextDatumType, dataPlatformPaymentMethodTextDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_payment_method_text_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformPaymentMethodTextDatumType, dataPlatformPaymentMethodTextDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_payment_method_text_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_payment_method_text_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPaymentMethodTextDatumUpsertCacheMut.Lock()
		dataPlatformPaymentMethodTextDatumUpsertCache[key] = cache
		dataPlatformPaymentMethodTextDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DataPlatformPaymentMethodTextDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformPaymentMethodTextDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DataPlatformPaymentMethodTextDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformPaymentMethodTextDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_payment_method_text_data` WHERE `PaymentMethod`=? AND `Language`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from data_platform_payment_method_text_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for data_platform_payment_method_text_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformPaymentMethodTextDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dataPlatformPaymentMethodTextDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from data_platform_payment_method_text_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_payment_method_text_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformPaymentMethodTextDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dataPlatformPaymentMethodTextDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPaymentMethodTextDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_payment_method_text_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPaymentMethodTextDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dataPlatformPaymentMethodTextDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_payment_method_text_data")
	}

	if len(dataPlatformPaymentMethodTextDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformPaymentMethodTextDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformPaymentMethodTextDatum(ctx, exec, o.PaymentMethod, o.Language)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformPaymentMethodTextDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformPaymentMethodTextDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPaymentMethodTextDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_payment_method_text_data`.* FROM `data_platform_payment_method_text_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPaymentMethodTextDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformPaymentMethodTextDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformPaymentMethodTextDatumExists checks if the DataPlatformPaymentMethodTextDatum row exists.
func DataPlatformPaymentMethodTextDatumExists(ctx context.Context, exec boil.ContextExecutor, paymentMethod string, language string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_payment_method_text_data` where `PaymentMethod`=? AND `Language`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, paymentMethod, language)
	}
	row := exec.QueryRowContext(ctx, sql, paymentMethod, language)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_payment_method_text_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformPaymentMethodTextDatum row exists.
func (o *DataPlatformPaymentMethodTextDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformPaymentMethodTextDatumExists(ctx, exec, o.PaymentMethod, o.Language)
}
