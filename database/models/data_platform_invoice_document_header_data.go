// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformInvoiceDocumentHeaderDatum is an object representing the database table.
type DataPlatformInvoiceDocumentHeaderDatum struct {
	InvoiceDocument                   int          `boil:"InvoiceDocument" json:"InvoiceDocument" toml:"InvoiceDocument" yaml:"InvoiceDocument"`
	CreationDate                      string       `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	CreationTime                      string       `boil:"CreationTime" json:"CreationTime" toml:"CreationTime" yaml:"CreationTime"`
	LastChangeDate                    string       `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	LastChangeTime                    string       `boil:"LastChangeTime" json:"LastChangeTime" toml:"LastChangeTime" yaml:"LastChangeTime"`
	SupplyChainRelationshipID         int          `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipBillingID  int          `boil:"SupplyChainRelationshipBillingID" json:"SupplyChainRelationshipBillingID" toml:"SupplyChainRelationshipBillingID" yaml:"SupplyChainRelationshipBillingID"`
	SupplyChainRelationshipPaymentID  int          `boil:"SupplyChainRelationshipPaymentID" json:"SupplyChainRelationshipPaymentID" toml:"SupplyChainRelationshipPaymentID" yaml:"SupplyChainRelationshipPaymentID"`
	BillToParty                       int          `boil:"BillToParty" json:"BillToParty" toml:"BillToParty" yaml:"BillToParty"`
	BillFromParty                     int          `boil:"BillFromParty" json:"BillFromParty" toml:"BillFromParty" yaml:"BillFromParty"`
	BillToCountry                     string       `boil:"BillToCountry" json:"BillToCountry" toml:"BillToCountry" yaml:"BillToCountry"`
	BillFromCountry                   string       `boil:"BillFromCountry" json:"BillFromCountry" toml:"BillFromCountry" yaml:"BillFromCountry"`
	Payer                             int          `boil:"Payer" json:"Payer" toml:"Payer" yaml:"Payer"`
	Payee                             int          `boil:"Payee" json:"Payee" toml:"Payee" yaml:"Payee"`
	InvoiceDocumentDate               string       `boil:"InvoiceDocumentDate" json:"InvoiceDocumentDate" toml:"InvoiceDocumentDate" yaml:"InvoiceDocumentDate"`
	InvoiceDocumentTime               string       `boil:"InvoiceDocumentTime" json:"InvoiceDocumentTime" toml:"InvoiceDocumentTime" yaml:"InvoiceDocumentTime"`
	InvoicePeriodStartDate            string       `boil:"InvoicePeriodStartDate" json:"InvoicePeriodStartDate" toml:"InvoicePeriodStartDate" yaml:"InvoicePeriodStartDate"`
	InvoicePeriodEndDate              string       `boil:"InvoicePeriodEndDate" json:"InvoicePeriodEndDate" toml:"InvoicePeriodEndDate" yaml:"InvoicePeriodEndDate"`
	AccountingPostingDate             null.String  `boil:"AccountingPostingDate" json:"AccountingPostingDate,omitempty" toml:"AccountingPostingDate" yaml:"AccountingPostingDate,omitempty"`
	IsExportImport                    null.Bool    `boil:"IsExportImport" json:"IsExportImport,omitempty" toml:"IsExportImport" yaml:"IsExportImport,omitempty"`
	HeaderBillingIsConfirmed          null.Bool    `boil:"HeaderBillingIsConfirmed" json:"HeaderBillingIsConfirmed,omitempty" toml:"HeaderBillingIsConfirmed" yaml:"HeaderBillingIsConfirmed,omitempty"`
	HeaderBillingConfStatus           null.String  `boil:"HeaderBillingConfStatus" json:"HeaderBillingConfStatus,omitempty" toml:"HeaderBillingConfStatus" yaml:"HeaderBillingConfStatus,omitempty"`
	TotalNetAmount                    null.Float32 `boil:"TotalNetAmount" json:"TotalNetAmount,omitempty" toml:"TotalNetAmount" yaml:"TotalNetAmount,omitempty"`
	TotalTaxAmount                    null.Float32 `boil:"TotalTaxAmount" json:"TotalTaxAmount,omitempty" toml:"TotalTaxAmount" yaml:"TotalTaxAmount,omitempty"`
	TotalGrossAmount                  null.Float32 `boil:"TotalGrossAmount" json:"TotalGrossAmount,omitempty" toml:"TotalGrossAmount" yaml:"TotalGrossAmount,omitempty"`
	TransactionCurrency               null.String  `boil:"TransactionCurrency" json:"TransactionCurrency,omitempty" toml:"TransactionCurrency" yaml:"TransactionCurrency,omitempty"`
	Incoterms                         null.String  `boil:"Incoterms" json:"Incoterms,omitempty" toml:"Incoterms" yaml:"Incoterms,omitempty"`
	PaymentTerms                      null.String  `boil:"PaymentTerms" json:"PaymentTerms,omitempty" toml:"PaymentTerms" yaml:"PaymentTerms,omitempty"`
	DueCalculationBaseDate            null.String  `boil:"DueCalculationBaseDate" json:"DueCalculationBaseDate,omitempty" toml:"DueCalculationBaseDate" yaml:"DueCalculationBaseDate,omitempty"`
	PaymentDueDate                    null.String  `boil:"PaymentDueDate" json:"PaymentDueDate,omitempty" toml:"PaymentDueDate" yaml:"PaymentDueDate,omitempty"`
	NetPaymentDays                    null.Int     `boil:"NetPaymentDays" json:"NetPaymentDays,omitempty" toml:"NetPaymentDays" yaml:"NetPaymentDays,omitempty"`
	PaymentMethod                     null.String  `boil:"PaymentMethod" json:"PaymentMethod,omitempty" toml:"PaymentMethod" yaml:"PaymentMethod,omitempty"`
	ExternalReferenceDocument         null.String  `boil:"ExternalReferenceDocument" json:"ExternalReferenceDocument,omitempty" toml:"ExternalReferenceDocument" yaml:"ExternalReferenceDocument,omitempty"`
	DocumentHeaderText                null.String  `boil:"DocumentHeaderText" json:"DocumentHeaderText,omitempty" toml:"DocumentHeaderText" yaml:"DocumentHeaderText,omitempty"`
	HeaderIsCleared                   null.Bool    `boil:"HeaderIsCleared" json:"HeaderIsCleared,omitempty" toml:"HeaderIsCleared" yaml:"HeaderIsCleared,omitempty"`
	HeaderPaymentBlockStatus          null.Bool    `boil:"HeaderPaymentBlockStatus" json:"HeaderPaymentBlockStatus,omitempty" toml:"HeaderPaymentBlockStatus" yaml:"HeaderPaymentBlockStatus,omitempty"`
	HeaderPaymentRequisitionIsCreated null.Bool    `boil:"HeaderPaymentRequisitionIsCreated" json:"HeaderPaymentRequisitionIsCreated,omitempty" toml:"HeaderPaymentRequisitionIsCreated" yaml:"HeaderPaymentRequisitionIsCreated,omitempty"`
	IsCancelled                       null.Bool    `boil:"IsCancelled" json:"IsCancelled,omitempty" toml:"IsCancelled" yaml:"IsCancelled,omitempty"`

	R *dataPlatformInvoiceDocumentHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformInvoiceDocumentHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformInvoiceDocumentHeaderDatumColumns = struct {
	InvoiceDocument                   string
	CreationDate                      string
	CreationTime                      string
	LastChangeDate                    string
	LastChangeTime                    string
	SupplyChainRelationshipID         string
	SupplyChainRelationshipBillingID  string
	SupplyChainRelationshipPaymentID  string
	BillToParty                       string
	BillFromParty                     string
	BillToCountry                     string
	BillFromCountry                   string
	Payer                             string
	Payee                             string
	InvoiceDocumentDate               string
	InvoiceDocumentTime               string
	InvoicePeriodStartDate            string
	InvoicePeriodEndDate              string
	AccountingPostingDate             string
	IsExportImport                    string
	HeaderBillingIsConfirmed          string
	HeaderBillingConfStatus           string
	TotalNetAmount                    string
	TotalTaxAmount                    string
	TotalGrossAmount                  string
	TransactionCurrency               string
	Incoterms                         string
	PaymentTerms                      string
	DueCalculationBaseDate            string
	PaymentDueDate                    string
	NetPaymentDays                    string
	PaymentMethod                     string
	ExternalReferenceDocument         string
	DocumentHeaderText                string
	HeaderIsCleared                   string
	HeaderPaymentBlockStatus          string
	HeaderPaymentRequisitionIsCreated string
	IsCancelled                       string
}{
	InvoiceDocument:                   "InvoiceDocument",
	CreationDate:                      "CreationDate",
	CreationTime:                      "CreationTime",
	LastChangeDate:                    "LastChangeDate",
	LastChangeTime:                    "LastChangeTime",
	SupplyChainRelationshipID:         "SupplyChainRelationshipID",
	SupplyChainRelationshipBillingID:  "SupplyChainRelationshipBillingID",
	SupplyChainRelationshipPaymentID:  "SupplyChainRelationshipPaymentID",
	BillToParty:                       "BillToParty",
	BillFromParty:                     "BillFromParty",
	BillToCountry:                     "BillToCountry",
	BillFromCountry:                   "BillFromCountry",
	Payer:                             "Payer",
	Payee:                             "Payee",
	InvoiceDocumentDate:               "InvoiceDocumentDate",
	InvoiceDocumentTime:               "InvoiceDocumentTime",
	InvoicePeriodStartDate:            "InvoicePeriodStartDate",
	InvoicePeriodEndDate:              "InvoicePeriodEndDate",
	AccountingPostingDate:             "AccountingPostingDate",
	IsExportImport:                    "IsExportImport",
	HeaderBillingIsConfirmed:          "HeaderBillingIsConfirmed",
	HeaderBillingConfStatus:           "HeaderBillingConfStatus",
	TotalNetAmount:                    "TotalNetAmount",
	TotalTaxAmount:                    "TotalTaxAmount",
	TotalGrossAmount:                  "TotalGrossAmount",
	TransactionCurrency:               "TransactionCurrency",
	Incoterms:                         "Incoterms",
	PaymentTerms:                      "PaymentTerms",
	DueCalculationBaseDate:            "DueCalculationBaseDate",
	PaymentDueDate:                    "PaymentDueDate",
	NetPaymentDays:                    "NetPaymentDays",
	PaymentMethod:                     "PaymentMethod",
	ExternalReferenceDocument:         "ExternalReferenceDocument",
	DocumentHeaderText:                "DocumentHeaderText",
	HeaderIsCleared:                   "HeaderIsCleared",
	HeaderPaymentBlockStatus:          "HeaderPaymentBlockStatus",
	HeaderPaymentRequisitionIsCreated: "HeaderPaymentRequisitionIsCreated",
	IsCancelled:                       "IsCancelled",
}

var DataPlatformInvoiceDocumentHeaderDatumTableColumns = struct {
	InvoiceDocument                   string
	CreationDate                      string
	CreationTime                      string
	LastChangeDate                    string
	LastChangeTime                    string
	SupplyChainRelationshipID         string
	SupplyChainRelationshipBillingID  string
	SupplyChainRelationshipPaymentID  string
	BillToParty                       string
	BillFromParty                     string
	BillToCountry                     string
	BillFromCountry                   string
	Payer                             string
	Payee                             string
	InvoiceDocumentDate               string
	InvoiceDocumentTime               string
	InvoicePeriodStartDate            string
	InvoicePeriodEndDate              string
	AccountingPostingDate             string
	IsExportImport                    string
	HeaderBillingIsConfirmed          string
	HeaderBillingConfStatus           string
	TotalNetAmount                    string
	TotalTaxAmount                    string
	TotalGrossAmount                  string
	TransactionCurrency               string
	Incoterms                         string
	PaymentTerms                      string
	DueCalculationBaseDate            string
	PaymentDueDate                    string
	NetPaymentDays                    string
	PaymentMethod                     string
	ExternalReferenceDocument         string
	DocumentHeaderText                string
	HeaderIsCleared                   string
	HeaderPaymentBlockStatus          string
	HeaderPaymentRequisitionIsCreated string
	IsCancelled                       string
}{
	InvoiceDocument:                   "data_platform_invoice_document_header_data.InvoiceDocument",
	CreationDate:                      "data_platform_invoice_document_header_data.CreationDate",
	CreationTime:                      "data_platform_invoice_document_header_data.CreationTime",
	LastChangeDate:                    "data_platform_invoice_document_header_data.LastChangeDate",
	LastChangeTime:                    "data_platform_invoice_document_header_data.LastChangeTime",
	SupplyChainRelationshipID:         "data_platform_invoice_document_header_data.SupplyChainRelationshipID",
	SupplyChainRelationshipBillingID:  "data_platform_invoice_document_header_data.SupplyChainRelationshipBillingID",
	SupplyChainRelationshipPaymentID:  "data_platform_invoice_document_header_data.SupplyChainRelationshipPaymentID",
	BillToParty:                       "data_platform_invoice_document_header_data.BillToParty",
	BillFromParty:                     "data_platform_invoice_document_header_data.BillFromParty",
	BillToCountry:                     "data_platform_invoice_document_header_data.BillToCountry",
	BillFromCountry:                   "data_platform_invoice_document_header_data.BillFromCountry",
	Payer:                             "data_platform_invoice_document_header_data.Payer",
	Payee:                             "data_platform_invoice_document_header_data.Payee",
	InvoiceDocumentDate:               "data_platform_invoice_document_header_data.InvoiceDocumentDate",
	InvoiceDocumentTime:               "data_platform_invoice_document_header_data.InvoiceDocumentTime",
	InvoicePeriodStartDate:            "data_platform_invoice_document_header_data.InvoicePeriodStartDate",
	InvoicePeriodEndDate:              "data_platform_invoice_document_header_data.InvoicePeriodEndDate",
	AccountingPostingDate:             "data_platform_invoice_document_header_data.AccountingPostingDate",
	IsExportImport:                    "data_platform_invoice_document_header_data.IsExportImport",
	HeaderBillingIsConfirmed:          "data_platform_invoice_document_header_data.HeaderBillingIsConfirmed",
	HeaderBillingConfStatus:           "data_platform_invoice_document_header_data.HeaderBillingConfStatus",
	TotalNetAmount:                    "data_platform_invoice_document_header_data.TotalNetAmount",
	TotalTaxAmount:                    "data_platform_invoice_document_header_data.TotalTaxAmount",
	TotalGrossAmount:                  "data_platform_invoice_document_header_data.TotalGrossAmount",
	TransactionCurrency:               "data_platform_invoice_document_header_data.TransactionCurrency",
	Incoterms:                         "data_platform_invoice_document_header_data.Incoterms",
	PaymentTerms:                      "data_platform_invoice_document_header_data.PaymentTerms",
	DueCalculationBaseDate:            "data_platform_invoice_document_header_data.DueCalculationBaseDate",
	PaymentDueDate:                    "data_platform_invoice_document_header_data.PaymentDueDate",
	NetPaymentDays:                    "data_platform_invoice_document_header_data.NetPaymentDays",
	PaymentMethod:                     "data_platform_invoice_document_header_data.PaymentMethod",
	ExternalReferenceDocument:         "data_platform_invoice_document_header_data.ExternalReferenceDocument",
	DocumentHeaderText:                "data_platform_invoice_document_header_data.DocumentHeaderText",
	HeaderIsCleared:                   "data_platform_invoice_document_header_data.HeaderIsCleared",
	HeaderPaymentBlockStatus:          "data_platform_invoice_document_header_data.HeaderPaymentBlockStatus",
	HeaderPaymentRequisitionIsCreated: "data_platform_invoice_document_header_data.HeaderPaymentRequisitionIsCreated",
	IsCancelled:                       "data_platform_invoice_document_header_data.IsCancelled",
}

// Generated where

var DataPlatformInvoiceDocumentHeaderDatumWhere = struct {
	InvoiceDocument                   whereHelperint
	CreationDate                      whereHelperstring
	CreationTime                      whereHelperstring
	LastChangeDate                    whereHelperstring
	LastChangeTime                    whereHelperstring
	SupplyChainRelationshipID         whereHelperint
	SupplyChainRelationshipBillingID  whereHelperint
	SupplyChainRelationshipPaymentID  whereHelperint
	BillToParty                       whereHelperint
	BillFromParty                     whereHelperint
	BillToCountry                     whereHelperstring
	BillFromCountry                   whereHelperstring
	Payer                             whereHelperint
	Payee                             whereHelperint
	InvoiceDocumentDate               whereHelperstring
	InvoiceDocumentTime               whereHelperstring
	InvoicePeriodStartDate            whereHelperstring
	InvoicePeriodEndDate              whereHelperstring
	AccountingPostingDate             whereHelpernull_String
	IsExportImport                    whereHelpernull_Bool
	HeaderBillingIsConfirmed          whereHelpernull_Bool
	HeaderBillingConfStatus           whereHelpernull_String
	TotalNetAmount                    whereHelpernull_Float32
	TotalTaxAmount                    whereHelpernull_Float32
	TotalGrossAmount                  whereHelpernull_Float32
	TransactionCurrency               whereHelpernull_String
	Incoterms                         whereHelpernull_String
	PaymentTerms                      whereHelpernull_String
	DueCalculationBaseDate            whereHelpernull_String
	PaymentDueDate                    whereHelpernull_String
	NetPaymentDays                    whereHelpernull_Int
	PaymentMethod                     whereHelpernull_String
	ExternalReferenceDocument         whereHelpernull_String
	DocumentHeaderText                whereHelpernull_String
	HeaderIsCleared                   whereHelpernull_Bool
	HeaderPaymentBlockStatus          whereHelpernull_Bool
	HeaderPaymentRequisitionIsCreated whereHelpernull_Bool
	IsCancelled                       whereHelpernull_Bool
}{
	InvoiceDocument:                   whereHelperint{field: "`data_platform_invoice_document_header_data`.`InvoiceDocument`"},
	CreationDate:                      whereHelperstring{field: "`data_platform_invoice_document_header_data`.`CreationDate`"},
	CreationTime:                      whereHelperstring{field: "`data_platform_invoice_document_header_data`.`CreationTime`"},
	LastChangeDate:                    whereHelperstring{field: "`data_platform_invoice_document_header_data`.`LastChangeDate`"},
	LastChangeTime:                    whereHelperstring{field: "`data_platform_invoice_document_header_data`.`LastChangeTime`"},
	SupplyChainRelationshipID:         whereHelperint{field: "`data_platform_invoice_document_header_data`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipBillingID:  whereHelperint{field: "`data_platform_invoice_document_header_data`.`SupplyChainRelationshipBillingID`"},
	SupplyChainRelationshipPaymentID:  whereHelperint{field: "`data_platform_invoice_document_header_data`.`SupplyChainRelationshipPaymentID`"},
	BillToParty:                       whereHelperint{field: "`data_platform_invoice_document_header_data`.`BillToParty`"},
	BillFromParty:                     whereHelperint{field: "`data_platform_invoice_document_header_data`.`BillFromParty`"},
	BillToCountry:                     whereHelperstring{field: "`data_platform_invoice_document_header_data`.`BillToCountry`"},
	BillFromCountry:                   whereHelperstring{field: "`data_platform_invoice_document_header_data`.`BillFromCountry`"},
	Payer:                             whereHelperint{field: "`data_platform_invoice_document_header_data`.`Payer`"},
	Payee:                             whereHelperint{field: "`data_platform_invoice_document_header_data`.`Payee`"},
	InvoiceDocumentDate:               whereHelperstring{field: "`data_platform_invoice_document_header_data`.`InvoiceDocumentDate`"},
	InvoiceDocumentTime:               whereHelperstring{field: "`data_platform_invoice_document_header_data`.`InvoiceDocumentTime`"},
	InvoicePeriodStartDate:            whereHelperstring{field: "`data_platform_invoice_document_header_data`.`InvoicePeriodStartDate`"},
	InvoicePeriodEndDate:              whereHelperstring{field: "`data_platform_invoice_document_header_data`.`InvoicePeriodEndDate`"},
	AccountingPostingDate:             whereHelpernull_String{field: "`data_platform_invoice_document_header_data`.`AccountingPostingDate`"},
	IsExportImport:                    whereHelpernull_Bool{field: "`data_platform_invoice_document_header_data`.`IsExportImport`"},
	HeaderBillingIsConfirmed:          whereHelpernull_Bool{field: "`data_platform_invoice_document_header_data`.`HeaderBillingIsConfirmed`"},
	HeaderBillingConfStatus:           whereHelpernull_String{field: "`data_platform_invoice_document_header_data`.`HeaderBillingConfStatus`"},
	TotalNetAmount:                    whereHelpernull_Float32{field: "`data_platform_invoice_document_header_data`.`TotalNetAmount`"},
	TotalTaxAmount:                    whereHelpernull_Float32{field: "`data_platform_invoice_document_header_data`.`TotalTaxAmount`"},
	TotalGrossAmount:                  whereHelpernull_Float32{field: "`data_platform_invoice_document_header_data`.`TotalGrossAmount`"},
	TransactionCurrency:               whereHelpernull_String{field: "`data_platform_invoice_document_header_data`.`TransactionCurrency`"},
	Incoterms:                         whereHelpernull_String{field: "`data_platform_invoice_document_header_data`.`Incoterms`"},
	PaymentTerms:                      whereHelpernull_String{field: "`data_platform_invoice_document_header_data`.`PaymentTerms`"},
	DueCalculationBaseDate:            whereHelpernull_String{field: "`data_platform_invoice_document_header_data`.`DueCalculationBaseDate`"},
	PaymentDueDate:                    whereHelpernull_String{field: "`data_platform_invoice_document_header_data`.`PaymentDueDate`"},
	NetPaymentDays:                    whereHelpernull_Int{field: "`data_platform_invoice_document_header_data`.`NetPaymentDays`"},
	PaymentMethod:                     whereHelpernull_String{field: "`data_platform_invoice_document_header_data`.`PaymentMethod`"},
	ExternalReferenceDocument:         whereHelpernull_String{field: "`data_platform_invoice_document_header_data`.`ExternalReferenceDocument`"},
	DocumentHeaderText:                whereHelpernull_String{field: "`data_platform_invoice_document_header_data`.`DocumentHeaderText`"},
	HeaderIsCleared:                   whereHelpernull_Bool{field: "`data_platform_invoice_document_header_data`.`HeaderIsCleared`"},
	HeaderPaymentBlockStatus:          whereHelpernull_Bool{field: "`data_platform_invoice_document_header_data`.`HeaderPaymentBlockStatus`"},
	HeaderPaymentRequisitionIsCreated: whereHelpernull_Bool{field: "`data_platform_invoice_document_header_data`.`HeaderPaymentRequisitionIsCreated`"},
	IsCancelled:                       whereHelpernull_Bool{field: "`data_platform_invoice_document_header_data`.`IsCancelled`"},
}

// DataPlatformInvoiceDocumentHeaderDatumRels is where relationship names are stored.
var DataPlatformInvoiceDocumentHeaderDatumRels = struct {
}{}

// dataPlatformInvoiceDocumentHeaderDatumR is where relationships are stored.
type dataPlatformInvoiceDocumentHeaderDatumR struct {
}

// NewStruct creates a new relationship struct
func (*dataPlatformInvoiceDocumentHeaderDatumR) NewStruct() *dataPlatformInvoiceDocumentHeaderDatumR {
	return &dataPlatformInvoiceDocumentHeaderDatumR{}
}

// dataPlatformInvoiceDocumentHeaderDatumL is where Load methods for each relationship are stored.
type dataPlatformInvoiceDocumentHeaderDatumL struct{}

var (
	dataPlatformInvoiceDocumentHeaderDatumAllColumns            = []string{"InvoiceDocument", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "SupplyChainRelationshipID", "SupplyChainRelationshipBillingID", "SupplyChainRelationshipPaymentID", "BillToParty", "BillFromParty", "BillToCountry", "BillFromCountry", "Payer", "Payee", "InvoiceDocumentDate", "InvoiceDocumentTime", "InvoicePeriodStartDate", "InvoicePeriodEndDate", "AccountingPostingDate", "IsExportImport", "HeaderBillingIsConfirmed", "HeaderBillingConfStatus", "TotalNetAmount", "TotalTaxAmount", "TotalGrossAmount", "TransactionCurrency", "Incoterms", "PaymentTerms", "DueCalculationBaseDate", "PaymentDueDate", "NetPaymentDays", "PaymentMethod", "ExternalReferenceDocument", "DocumentHeaderText", "HeaderIsCleared", "HeaderPaymentBlockStatus", "HeaderPaymentRequisitionIsCreated", "IsCancelled"}
	dataPlatformInvoiceDocumentHeaderDatumColumnsWithoutDefault = []string{"InvoiceDocument", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "SupplyChainRelationshipID", "SupplyChainRelationshipBillingID", "SupplyChainRelationshipPaymentID", "BillToParty", "BillFromParty", "BillToCountry", "BillFromCountry", "Payer", "Payee", "InvoiceDocumentDate", "InvoiceDocumentTime", "InvoicePeriodStartDate", "InvoicePeriodEndDate", "AccountingPostingDate", "IsExportImport", "HeaderBillingIsConfirmed", "HeaderBillingConfStatus", "TotalNetAmount", "TotalTaxAmount", "TotalGrossAmount", "TransactionCurrency", "Incoterms", "PaymentTerms", "DueCalculationBaseDate", "PaymentDueDate", "NetPaymentDays", "PaymentMethod", "ExternalReferenceDocument", "DocumentHeaderText", "HeaderIsCleared", "HeaderPaymentBlockStatus", "HeaderPaymentRequisitionIsCreated", "IsCancelled"}
	dataPlatformInvoiceDocumentHeaderDatumColumnsWithDefault    = []string{}
	dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyColumns     = []string{"InvoiceDocument"}
	dataPlatformInvoiceDocumentHeaderDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformInvoiceDocumentHeaderDatumSlice is an alias for a slice of pointers to DataPlatformInvoiceDocumentHeaderDatum.
	// This should almost always be used instead of []DataPlatformInvoiceDocumentHeaderDatum.
	DataPlatformInvoiceDocumentHeaderDatumSlice []*DataPlatformInvoiceDocumentHeaderDatum

	dataPlatformInvoiceDocumentHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformInvoiceDocumentHeaderDatumType                 = reflect.TypeOf(&DataPlatformInvoiceDocumentHeaderDatum{})
	dataPlatformInvoiceDocumentHeaderDatumMapping              = queries.MakeStructMapping(dataPlatformInvoiceDocumentHeaderDatumType)
	dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformInvoiceDocumentHeaderDatumType, dataPlatformInvoiceDocumentHeaderDatumMapping, dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyColumns)
	dataPlatformInvoiceDocumentHeaderDatumInsertCacheMut       sync.RWMutex
	dataPlatformInvoiceDocumentHeaderDatumInsertCache          = make(map[string]insertCache)
	dataPlatformInvoiceDocumentHeaderDatumUpdateCacheMut       sync.RWMutex
	dataPlatformInvoiceDocumentHeaderDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformInvoiceDocumentHeaderDatumUpsertCacheMut       sync.RWMutex
	dataPlatformInvoiceDocumentHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformInvoiceDocumentHeaderDatum record from the query.
func (q dataPlatformInvoiceDocumentHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformInvoiceDocumentHeaderDatum, error) {
	o := &DataPlatformInvoiceDocumentHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_invoice_document_header_data")
	}

	return o, nil
}

// All returns all DataPlatformInvoiceDocumentHeaderDatum records from the query.
func (q dataPlatformInvoiceDocumentHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformInvoiceDocumentHeaderDatumSlice, error) {
	var o []*DataPlatformInvoiceDocumentHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformInvoiceDocumentHeaderDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformInvoiceDocumentHeaderDatum records in the query.
func (q dataPlatformInvoiceDocumentHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_invoice_document_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformInvoiceDocumentHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_invoice_document_header_data exists")
	}

	return count > 0, nil
}

// DataPlatformInvoiceDocumentHeaderData retrieves all the records using an executor.
func DataPlatformInvoiceDocumentHeaderData(mods ...qm.QueryMod) dataPlatformInvoiceDocumentHeaderDatumQuery {
	mods = append(mods, qm.From("`data_platform_invoice_document_header_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_invoice_document_header_data`.*"})
	}

	return dataPlatformInvoiceDocumentHeaderDatumQuery{q}
}

// FindDataPlatformInvoiceDocumentHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformInvoiceDocumentHeaderDatum(ctx context.Context, exec boil.ContextExecutor, invoiceDocument int, selectCols ...string) (*DataPlatformInvoiceDocumentHeaderDatum, error) {
	dataPlatformInvoiceDocumentHeaderDatumObj := &DataPlatformInvoiceDocumentHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_invoice_document_header_data` where `InvoiceDocument`=?", sel,
	)

	q := queries.Raw(query, invoiceDocument)

	err := q.Bind(ctx, exec, dataPlatformInvoiceDocumentHeaderDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_invoice_document_header_data")
	}

	return dataPlatformInvoiceDocumentHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformInvoiceDocumentHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_invoice_document_header_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformInvoiceDocumentHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformInvoiceDocumentHeaderDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformInvoiceDocumentHeaderDatumInsertCache[key]
	dataPlatformInvoiceDocumentHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformInvoiceDocumentHeaderDatumAllColumns,
			dataPlatformInvoiceDocumentHeaderDatumColumnsWithDefault,
			dataPlatformInvoiceDocumentHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformInvoiceDocumentHeaderDatumType, dataPlatformInvoiceDocumentHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformInvoiceDocumentHeaderDatumType, dataPlatformInvoiceDocumentHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_invoice_document_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_invoice_document_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_invoice_document_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_invoice_document_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.InvoiceDocument,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_invoice_document_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformInvoiceDocumentHeaderDatumInsertCacheMut.Lock()
		dataPlatformInvoiceDocumentHeaderDatumInsertCache[key] = cache
		dataPlatformInvoiceDocumentHeaderDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformInvoiceDocumentHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformInvoiceDocumentHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformInvoiceDocumentHeaderDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformInvoiceDocumentHeaderDatumUpdateCache[key]
	dataPlatformInvoiceDocumentHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformInvoiceDocumentHeaderDatumAllColumns,
			dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_invoice_document_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_invoice_document_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformInvoiceDocumentHeaderDatumType, dataPlatformInvoiceDocumentHeaderDatumMapping, append(wl, dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_invoice_document_header_data row")
	}

	if !cached {
		dataPlatformInvoiceDocumentHeaderDatumUpdateCacheMut.Lock()
		dataPlatformInvoiceDocumentHeaderDatumUpdateCache[key] = cache
		dataPlatformInvoiceDocumentHeaderDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformInvoiceDocumentHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_invoice_document_header_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformInvoiceDocumentHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_invoice_document_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformInvoiceDocumentHeaderDatum slice")
	}

	return nil
}

var mySQLDataPlatformInvoiceDocumentHeaderDatumUniqueColumns = []string{
	"InvoiceDocument",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformInvoiceDocumentHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_invoice_document_header_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformInvoiceDocumentHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformInvoiceDocumentHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformInvoiceDocumentHeaderDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformInvoiceDocumentHeaderDatumUpsertCache[key]
	dataPlatformInvoiceDocumentHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformInvoiceDocumentHeaderDatumAllColumns,
			dataPlatformInvoiceDocumentHeaderDatumColumnsWithDefault,
			dataPlatformInvoiceDocumentHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformInvoiceDocumentHeaderDatumAllColumns,
			dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_invoice_document_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_invoice_document_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_invoice_document_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformInvoiceDocumentHeaderDatumType, dataPlatformInvoiceDocumentHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformInvoiceDocumentHeaderDatumType, dataPlatformInvoiceDocumentHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_invoice_document_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformInvoiceDocumentHeaderDatumType, dataPlatformInvoiceDocumentHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_invoice_document_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_invoice_document_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformInvoiceDocumentHeaderDatumUpsertCacheMut.Lock()
		dataPlatformInvoiceDocumentHeaderDatumUpsertCache[key] = cache
		dataPlatformInvoiceDocumentHeaderDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformInvoiceDocumentHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformInvoiceDocumentHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformInvoiceDocumentHeaderDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_invoice_document_header_data` WHERE `InvoiceDocument`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_invoice_document_header_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformInvoiceDocumentHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformInvoiceDocumentHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_invoice_document_header_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformInvoiceDocumentHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_invoice_document_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformInvoiceDocumentHeaderDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformInvoiceDocumentHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformInvoiceDocumentHeaderDatum(ctx, exec, o.InvoiceDocument)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformInvoiceDocumentHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformInvoiceDocumentHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_invoice_document_header_data`.* FROM `data_platform_invoice_document_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformInvoiceDocumentHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformInvoiceDocumentHeaderDatumExists checks if the DataPlatformInvoiceDocumentHeaderDatum row exists.
func DataPlatformInvoiceDocumentHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, invoiceDocument int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_invoice_document_header_data` where `InvoiceDocument`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, invoiceDocument)
	}
	row := exec.QueryRowContext(ctx, sql, invoiceDocument)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_invoice_document_header_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformInvoiceDocumentHeaderDatum row exists.
func (o *DataPlatformInvoiceDocumentHeaderDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformInvoiceDocumentHeaderDatumExists(ctx, exec, o.InvoiceDocument)
}
