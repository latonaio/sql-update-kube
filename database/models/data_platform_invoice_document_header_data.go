// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformInvoiceDocumentHeaderDatum is an object representing the database table.
type DataPlatformInvoiceDocumentHeaderDatum struct {
	InvoiceDocument                   int         `boil:"InvoiceDocument" json:"InvoiceDocument" toml:"InvoiceDocument" yaml:"InvoiceDocument"`
	SupplyChainRelationshipID         int         `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipBillingID  int         `boil:"SupplyChainRelationshipBillingID" json:"SupplyChainRelationshipBillingID" toml:"SupplyChainRelationshipBillingID" yaml:"SupplyChainRelationshipBillingID"`
	SupplyChainRelationshipPaymentID  int         `boil:"SupplyChainRelationshipPaymentID" json:"SupplyChainRelationshipPaymentID" toml:"SupplyChainRelationshipPaymentID" yaml:"SupplyChainRelationshipPaymentID"`
	Buyer                             int         `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                            int         `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	BillToParty                       int         `boil:"BillToParty" json:"BillToParty" toml:"BillToParty" yaml:"BillToParty"`
	BillFromParty                     int         `boil:"BillFromParty" json:"BillFromParty" toml:"BillFromParty" yaml:"BillFromParty"`
	BillToCountry                     string      `boil:"BillToCountry" json:"BillToCountry" toml:"BillToCountry" yaml:"BillToCountry"`
	BillFromCountry                   string      `boil:"BillFromCountry" json:"BillFromCountry" toml:"BillFromCountry" yaml:"BillFromCountry"`
	Payer                             int         `boil:"Payer" json:"Payer" toml:"Payer" yaml:"Payer"`
	Payee                             int         `boil:"Payee" json:"Payee" toml:"Payee" yaml:"Payee"`
	InvoiceDocumentDate               string      `boil:"InvoiceDocumentDate" json:"InvoiceDocumentDate" toml:"InvoiceDocumentDate" yaml:"InvoiceDocumentDate"`
	InvoiceDocumentTime               string      `boil:"InvoiceDocumentTime" json:"InvoiceDocumentTime" toml:"InvoiceDocumentTime" yaml:"InvoiceDocumentTime"`
	InvoicePeriodStartDate            string      `boil:"InvoicePeriodStartDate" json:"InvoicePeriodStartDate" toml:"InvoicePeriodStartDate" yaml:"InvoicePeriodStartDate"`
	InvoicePeriodEndDate              string      `boil:"InvoicePeriodEndDate" json:"InvoicePeriodEndDate" toml:"InvoicePeriodEndDate" yaml:"InvoicePeriodEndDate"`
	AccountingPostingDate             null.String `boil:"AccountingPostingDate" json:"AccountingPostingDate,omitempty" toml:"AccountingPostingDate" yaml:"AccountingPostingDate,omitempty"`
	IsExportImport                    null.Bool   `boil:"IsExportImport" json:"IsExportImport,omitempty" toml:"IsExportImport" yaml:"IsExportImport,omitempty"`
	HeaderBillingIsConfirmed          null.Bool   `boil:"HeaderBillingIsConfirmed" json:"HeaderBillingIsConfirmed,omitempty" toml:"HeaderBillingIsConfirmed" yaml:"HeaderBillingIsConfirmed,omitempty"`
	HeaderBillingConfStatus           null.String `boil:"HeaderBillingConfStatus" json:"HeaderBillingConfStatus,omitempty" toml:"HeaderBillingConfStatus" yaml:"HeaderBillingConfStatus,omitempty"`
	TotalNetAmount                    float32     `boil:"TotalNetAmount" json:"TotalNetAmount" toml:"TotalNetAmount" yaml:"TotalNetAmount"`
	TotalTaxAmount                    float32     `boil:"TotalTaxAmount" json:"TotalTaxAmount" toml:"TotalTaxAmount" yaml:"TotalTaxAmount"`
	TotalGrossAmount                  float32     `boil:"TotalGrossAmount" json:"TotalGrossAmount" toml:"TotalGrossAmount" yaml:"TotalGrossAmount"`
	TransactionCurrency               string      `boil:"TransactionCurrency" json:"TransactionCurrency" toml:"TransactionCurrency" yaml:"TransactionCurrency"`
	Incoterms                         null.String `boil:"Incoterms" json:"Incoterms,omitempty" toml:"Incoterms" yaml:"Incoterms,omitempty"`
	PaymentTerms                      string      `boil:"PaymentTerms" json:"PaymentTerms" toml:"PaymentTerms" yaml:"PaymentTerms"`
	DueCalculationBaseDate            null.String `boil:"DueCalculationBaseDate" json:"DueCalculationBaseDate,omitempty" toml:"DueCalculationBaseDate" yaml:"DueCalculationBaseDate,omitempty"`
	PaymentDueDate                    null.String `boil:"PaymentDueDate" json:"PaymentDueDate,omitempty" toml:"PaymentDueDate" yaml:"PaymentDueDate,omitempty"`
	NetPaymentDays                    null.Int    `boil:"NetPaymentDays" json:"NetPaymentDays,omitempty" toml:"NetPaymentDays" yaml:"NetPaymentDays,omitempty"`
	PaymentMethod                     string      `boil:"PaymentMethod" json:"PaymentMethod" toml:"PaymentMethod" yaml:"PaymentMethod"`
	ExternalReferenceDocument         null.String `boil:"ExternalReferenceDocument" json:"ExternalReferenceDocument,omitempty" toml:"ExternalReferenceDocument" yaml:"ExternalReferenceDocument,omitempty"`
	DocumentHeaderText                null.String `boil:"DocumentHeaderText" json:"DocumentHeaderText,omitempty" toml:"DocumentHeaderText" yaml:"DocumentHeaderText,omitempty"`
	HeaderIsCleared                   null.Bool   `boil:"HeaderIsCleared" json:"HeaderIsCleared,omitempty" toml:"HeaderIsCleared" yaml:"HeaderIsCleared,omitempty"`
	HeaderPaymentBlockStatus          null.Bool   `boil:"HeaderPaymentBlockStatus" json:"HeaderPaymentBlockStatus,omitempty" toml:"HeaderPaymentBlockStatus" yaml:"HeaderPaymentBlockStatus,omitempty"`
	HeaderPaymentRequisitionIsCreated null.Bool   `boil:"HeaderPaymentRequisitionIsCreated" json:"HeaderPaymentRequisitionIsCreated,omitempty" toml:"HeaderPaymentRequisitionIsCreated" yaml:"HeaderPaymentRequisitionIsCreated,omitempty"`
	CreationDate                      string      `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	CreationTime                      string      `boil:"CreationTime" json:"CreationTime" toml:"CreationTime" yaml:"CreationTime"`
	LastChangeDate                    string      `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	LastChangeTime                    string      `boil:"LastChangeTime" json:"LastChangeTime" toml:"LastChangeTime" yaml:"LastChangeTime"`
	IsCancelled                       null.Bool   `boil:"IsCancelled" json:"IsCancelled,omitempty" toml:"IsCancelled" yaml:"IsCancelled,omitempty"`

	R *dataPlatformInvoiceDocumentHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformInvoiceDocumentHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformInvoiceDocumentHeaderDatumColumns = struct {
	InvoiceDocument                   string
	SupplyChainRelationshipID         string
	SupplyChainRelationshipBillingID  string
	SupplyChainRelationshipPaymentID  string
	Buyer                             string
	Seller                            string
	BillToParty                       string
	BillFromParty                     string
	BillToCountry                     string
	BillFromCountry                   string
	Payer                             string
	Payee                             string
	InvoiceDocumentDate               string
	InvoiceDocumentTime               string
	InvoicePeriodStartDate            string
	InvoicePeriodEndDate              string
	AccountingPostingDate             string
	IsExportImport                    string
	HeaderBillingIsConfirmed          string
	HeaderBillingConfStatus           string
	TotalNetAmount                    string
	TotalTaxAmount                    string
	TotalGrossAmount                  string
	TransactionCurrency               string
	Incoterms                         string
	PaymentTerms                      string
	DueCalculationBaseDate            string
	PaymentDueDate                    string
	NetPaymentDays                    string
	PaymentMethod                     string
	ExternalReferenceDocument         string
	DocumentHeaderText                string
	HeaderIsCleared                   string
	HeaderPaymentBlockStatus          string
	HeaderPaymentRequisitionIsCreated string
	CreationDate                      string
	CreationTime                      string
	LastChangeDate                    string
	LastChangeTime                    string
	IsCancelled                       string
}{
	InvoiceDocument:                   "InvoiceDocument",
	SupplyChainRelationshipID:         "SupplyChainRelationshipID",
	SupplyChainRelationshipBillingID:  "SupplyChainRelationshipBillingID",
	SupplyChainRelationshipPaymentID:  "SupplyChainRelationshipPaymentID",
	Buyer:                             "Buyer",
	Seller:                            "Seller",
	BillToParty:                       "BillToParty",
	BillFromParty:                     "BillFromParty",
	BillToCountry:                     "BillToCountry",
	BillFromCountry:                   "BillFromCountry",
	Payer:                             "Payer",
	Payee:                             "Payee",
	InvoiceDocumentDate:               "InvoiceDocumentDate",
	InvoiceDocumentTime:               "InvoiceDocumentTime",
	InvoicePeriodStartDate:            "InvoicePeriodStartDate",
	InvoicePeriodEndDate:              "InvoicePeriodEndDate",
	AccountingPostingDate:             "AccountingPostingDate",
	IsExportImport:                    "IsExportImport",
	HeaderBillingIsConfirmed:          "HeaderBillingIsConfirmed",
	HeaderBillingConfStatus:           "HeaderBillingConfStatus",
	TotalNetAmount:                    "TotalNetAmount",
	TotalTaxAmount:                    "TotalTaxAmount",
	TotalGrossAmount:                  "TotalGrossAmount",
	TransactionCurrency:               "TransactionCurrency",
	Incoterms:                         "Incoterms",
	PaymentTerms:                      "PaymentTerms",
	DueCalculationBaseDate:            "DueCalculationBaseDate",
	PaymentDueDate:                    "PaymentDueDate",
	NetPaymentDays:                    "NetPaymentDays",
	PaymentMethod:                     "PaymentMethod",
	ExternalReferenceDocument:         "ExternalReferenceDocument",
	DocumentHeaderText:                "DocumentHeaderText",
	HeaderIsCleared:                   "HeaderIsCleared",
	HeaderPaymentBlockStatus:          "HeaderPaymentBlockStatus",
	HeaderPaymentRequisitionIsCreated: "HeaderPaymentRequisitionIsCreated",
	CreationDate:                      "CreationDate",
	CreationTime:                      "CreationTime",
	LastChangeDate:                    "LastChangeDate",
	LastChangeTime:                    "LastChangeTime",
	IsCancelled:                       "IsCancelled",
}

var DataPlatformInvoiceDocumentHeaderDatumTableColumns = struct {
	InvoiceDocument                   string
	SupplyChainRelationshipID         string
	SupplyChainRelationshipBillingID  string
	SupplyChainRelationshipPaymentID  string
	Buyer                             string
	Seller                            string
	BillToParty                       string
	BillFromParty                     string
	BillToCountry                     string
	BillFromCountry                   string
	Payer                             string
	Payee                             string
	InvoiceDocumentDate               string
	InvoiceDocumentTime               string
	InvoicePeriodStartDate            string
	InvoicePeriodEndDate              string
	AccountingPostingDate             string
	IsExportImport                    string
	HeaderBillingIsConfirmed          string
	HeaderBillingConfStatus           string
	TotalNetAmount                    string
	TotalTaxAmount                    string
	TotalGrossAmount                  string
	TransactionCurrency               string
	Incoterms                         string
	PaymentTerms                      string
	DueCalculationBaseDate            string
	PaymentDueDate                    string
	NetPaymentDays                    string
	PaymentMethod                     string
	ExternalReferenceDocument         string
	DocumentHeaderText                string
	HeaderIsCleared                   string
	HeaderPaymentBlockStatus          string
	HeaderPaymentRequisitionIsCreated string
	CreationDate                      string
	CreationTime                      string
	LastChangeDate                    string
	LastChangeTime                    string
	IsCancelled                       string
}{
	InvoiceDocument:                   "data_platform_invoice_document_header_data.InvoiceDocument",
	SupplyChainRelationshipID:         "data_platform_invoice_document_header_data.SupplyChainRelationshipID",
	SupplyChainRelationshipBillingID:  "data_platform_invoice_document_header_data.SupplyChainRelationshipBillingID",
	SupplyChainRelationshipPaymentID:  "data_platform_invoice_document_header_data.SupplyChainRelationshipPaymentID",
	Buyer:                             "data_platform_invoice_document_header_data.Buyer",
	Seller:                            "data_platform_invoice_document_header_data.Seller",
	BillToParty:                       "data_platform_invoice_document_header_data.BillToParty",
	BillFromParty:                     "data_platform_invoice_document_header_data.BillFromParty",
	BillToCountry:                     "data_platform_invoice_document_header_data.BillToCountry",
	BillFromCountry:                   "data_platform_invoice_document_header_data.BillFromCountry",
	Payer:                             "data_platform_invoice_document_header_data.Payer",
	Payee:                             "data_platform_invoice_document_header_data.Payee",
	InvoiceDocumentDate:               "data_platform_invoice_document_header_data.InvoiceDocumentDate",
	InvoiceDocumentTime:               "data_platform_invoice_document_header_data.InvoiceDocumentTime",
	InvoicePeriodStartDate:            "data_platform_invoice_document_header_data.InvoicePeriodStartDate",
	InvoicePeriodEndDate:              "data_platform_invoice_document_header_data.InvoicePeriodEndDate",
	AccountingPostingDate:             "data_platform_invoice_document_header_data.AccountingPostingDate",
	IsExportImport:                    "data_platform_invoice_document_header_data.IsExportImport",
	HeaderBillingIsConfirmed:          "data_platform_invoice_document_header_data.HeaderBillingIsConfirmed",
	HeaderBillingConfStatus:           "data_platform_invoice_document_header_data.HeaderBillingConfStatus",
	TotalNetAmount:                    "data_platform_invoice_document_header_data.TotalNetAmount",
	TotalTaxAmount:                    "data_platform_invoice_document_header_data.TotalTaxAmount",
	TotalGrossAmount:                  "data_platform_invoice_document_header_data.TotalGrossAmount",
	TransactionCurrency:               "data_platform_invoice_document_header_data.TransactionCurrency",
	Incoterms:                         "data_platform_invoice_document_header_data.Incoterms",
	PaymentTerms:                      "data_platform_invoice_document_header_data.PaymentTerms",
	DueCalculationBaseDate:            "data_platform_invoice_document_header_data.DueCalculationBaseDate",
	PaymentDueDate:                    "data_platform_invoice_document_header_data.PaymentDueDate",
	NetPaymentDays:                    "data_platform_invoice_document_header_data.NetPaymentDays",
	PaymentMethod:                     "data_platform_invoice_document_header_data.PaymentMethod",
	ExternalReferenceDocument:         "data_platform_invoice_document_header_data.ExternalReferenceDocument",
	DocumentHeaderText:                "data_platform_invoice_document_header_data.DocumentHeaderText",
	HeaderIsCleared:                   "data_platform_invoice_document_header_data.HeaderIsCleared",
	HeaderPaymentBlockStatus:          "data_platform_invoice_document_header_data.HeaderPaymentBlockStatus",
	HeaderPaymentRequisitionIsCreated: "data_platform_invoice_document_header_data.HeaderPaymentRequisitionIsCreated",
	CreationDate:                      "data_platform_invoice_document_header_data.CreationDate",
	CreationTime:                      "data_platform_invoice_document_header_data.CreationTime",
	LastChangeDate:                    "data_platform_invoice_document_header_data.LastChangeDate",
	LastChangeTime:                    "data_platform_invoice_document_header_data.LastChangeTime",
	IsCancelled:                       "data_platform_invoice_document_header_data.IsCancelled",
}

// Generated where

var DataPlatformInvoiceDocumentHeaderDatumWhere = struct {
	InvoiceDocument                   whereHelperint
	SupplyChainRelationshipID         whereHelperint
	SupplyChainRelationshipBillingID  whereHelperint
	SupplyChainRelationshipPaymentID  whereHelperint
	Buyer                             whereHelperint
	Seller                            whereHelperint
	BillToParty                       whereHelperint
	BillFromParty                     whereHelperint
	BillToCountry                     whereHelperstring
	BillFromCountry                   whereHelperstring
	Payer                             whereHelperint
	Payee                             whereHelperint
	InvoiceDocumentDate               whereHelperstring
	InvoiceDocumentTime               whereHelperstring
	InvoicePeriodStartDate            whereHelperstring
	InvoicePeriodEndDate              whereHelperstring
	AccountingPostingDate             whereHelpernull_String
	IsExportImport                    whereHelpernull_Bool
	HeaderBillingIsConfirmed          whereHelpernull_Bool
	HeaderBillingConfStatus           whereHelpernull_String
	TotalNetAmount                    whereHelperfloat32
	TotalTaxAmount                    whereHelperfloat32
	TotalGrossAmount                  whereHelperfloat32
	TransactionCurrency               whereHelperstring
	Incoterms                         whereHelpernull_String
	PaymentTerms                      whereHelperstring
	DueCalculationBaseDate            whereHelpernull_String
	PaymentDueDate                    whereHelpernull_String
	NetPaymentDays                    whereHelpernull_Int
	PaymentMethod                     whereHelperstring
	ExternalReferenceDocument         whereHelpernull_String
	DocumentHeaderText                whereHelpernull_String
	HeaderIsCleared                   whereHelpernull_Bool
	HeaderPaymentBlockStatus          whereHelpernull_Bool
	HeaderPaymentRequisitionIsCreated whereHelpernull_Bool
	CreationDate                      whereHelperstring
	CreationTime                      whereHelperstring
	LastChangeDate                    whereHelperstring
	LastChangeTime                    whereHelperstring
	IsCancelled                       whereHelpernull_Bool
}{
	InvoiceDocument:                   whereHelperint{field: "`data_platform_invoice_document_header_data`.`InvoiceDocument`"},
	SupplyChainRelationshipID:         whereHelperint{field: "`data_platform_invoice_document_header_data`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipBillingID:  whereHelperint{field: "`data_platform_invoice_document_header_data`.`SupplyChainRelationshipBillingID`"},
	SupplyChainRelationshipPaymentID:  whereHelperint{field: "`data_platform_invoice_document_header_data`.`SupplyChainRelationshipPaymentID`"},
	Buyer:                             whereHelperint{field: "`data_platform_invoice_document_header_data`.`Buyer`"},
	Seller:                            whereHelperint{field: "`data_platform_invoice_document_header_data`.`Seller`"},
	BillToParty:                       whereHelperint{field: "`data_platform_invoice_document_header_data`.`BillToParty`"},
	BillFromParty:                     whereHelperint{field: "`data_platform_invoice_document_header_data`.`BillFromParty`"},
	BillToCountry:                     whereHelperstring{field: "`data_platform_invoice_document_header_data`.`BillToCountry`"},
	BillFromCountry:                   whereHelperstring{field: "`data_platform_invoice_document_header_data`.`BillFromCountry`"},
	Payer:                             whereHelperint{field: "`data_platform_invoice_document_header_data`.`Payer`"},
	Payee:                             whereHelperint{field: "`data_platform_invoice_document_header_data`.`Payee`"},
	InvoiceDocumentDate:               whereHelperstring{field: "`data_platform_invoice_document_header_data`.`InvoiceDocumentDate`"},
	InvoiceDocumentTime:               whereHelperstring{field: "`data_platform_invoice_document_header_data`.`InvoiceDocumentTime`"},
	InvoicePeriodStartDate:            whereHelperstring{field: "`data_platform_invoice_document_header_data`.`InvoicePeriodStartDate`"},
	InvoicePeriodEndDate:              whereHelperstring{field: "`data_platform_invoice_document_header_data`.`InvoicePeriodEndDate`"},
	AccountingPostingDate:             whereHelpernull_String{field: "`data_platform_invoice_document_header_data`.`AccountingPostingDate`"},
	IsExportImport:                    whereHelpernull_Bool{field: "`data_platform_invoice_document_header_data`.`IsExportImport`"},
	HeaderBillingIsConfirmed:          whereHelpernull_Bool{field: "`data_platform_invoice_document_header_data`.`HeaderBillingIsConfirmed`"},
	HeaderBillingConfStatus:           whereHelpernull_String{field: "`data_platform_invoice_document_header_data`.`HeaderBillingConfStatus`"},
	TotalNetAmount:                    whereHelperfloat32{field: "`data_platform_invoice_document_header_data`.`TotalNetAmount`"},
	TotalTaxAmount:                    whereHelperfloat32{field: "`data_platform_invoice_document_header_data`.`TotalTaxAmount`"},
	TotalGrossAmount:                  whereHelperfloat32{field: "`data_platform_invoice_document_header_data`.`TotalGrossAmount`"},
	TransactionCurrency:               whereHelperstring{field: "`data_platform_invoice_document_header_data`.`TransactionCurrency`"},
	Incoterms:                         whereHelpernull_String{field: "`data_platform_invoice_document_header_data`.`Incoterms`"},
	PaymentTerms:                      whereHelperstring{field: "`data_platform_invoice_document_header_data`.`PaymentTerms`"},
	DueCalculationBaseDate:            whereHelpernull_String{field: "`data_platform_invoice_document_header_data`.`DueCalculationBaseDate`"},
	PaymentDueDate:                    whereHelpernull_String{field: "`data_platform_invoice_document_header_data`.`PaymentDueDate`"},
	NetPaymentDays:                    whereHelpernull_Int{field: "`data_platform_invoice_document_header_data`.`NetPaymentDays`"},
	PaymentMethod:                     whereHelperstring{field: "`data_platform_invoice_document_header_data`.`PaymentMethod`"},
	ExternalReferenceDocument:         whereHelpernull_String{field: "`data_platform_invoice_document_header_data`.`ExternalReferenceDocument`"},
	DocumentHeaderText:                whereHelpernull_String{field: "`data_platform_invoice_document_header_data`.`DocumentHeaderText`"},
	HeaderIsCleared:                   whereHelpernull_Bool{field: "`data_platform_invoice_document_header_data`.`HeaderIsCleared`"},
	HeaderPaymentBlockStatus:          whereHelpernull_Bool{field: "`data_platform_invoice_document_header_data`.`HeaderPaymentBlockStatus`"},
	HeaderPaymentRequisitionIsCreated: whereHelpernull_Bool{field: "`data_platform_invoice_document_header_data`.`HeaderPaymentRequisitionIsCreated`"},
	CreationDate:                      whereHelperstring{field: "`data_platform_invoice_document_header_data`.`CreationDate`"},
	CreationTime:                      whereHelperstring{field: "`data_platform_invoice_document_header_data`.`CreationTime`"},
	LastChangeDate:                    whereHelperstring{field: "`data_platform_invoice_document_header_data`.`LastChangeDate`"},
	LastChangeTime:                    whereHelperstring{field: "`data_platform_invoice_document_header_data`.`LastChangeTime`"},
	IsCancelled:                       whereHelpernull_Bool{field: "`data_platform_invoice_document_header_data`.`IsCancelled`"},
}

// DataPlatformInvoiceDocumentHeaderDatumRels is where relationship names are stored.
var DataPlatformInvoiceDocumentHeaderDatumRels = struct {
	BillFromCountryDataPlatformCountryCountryDatum           string
	BillToCountryDataPlatformCountryCountryDatum             string
	Incoterm                                                 string
	PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum string
	PaymentTerm                                              string
	BillFromPartyDataPlatformSCRBillingRelationDatum         string
	BillFromPartyDataPlatformSCRPaymentRelationDatum         string
	TransactionCurrencyDataPlatformCurrencyCurrencyDatum     string
	InvoiceDocumentDataPlatformInvoiceDocumentAddressData    string
	InvoiceDocumentDataPlatformInvoiceDocumentHeaderDocData  string
	InvoiceDocumentDataPlatformInvoiceDocumentItemData       string
	InvoiceDocumentDataPlatformInvoiceDocumentPartnerData    string
}{
	BillFromCountryDataPlatformCountryCountryDatum: "BillFromCountryDataPlatformCountryCountryDatum",
	BillToCountryDataPlatformCountryCountryDatum:   "BillToCountryDataPlatformCountryCountryDatum",
	Incoterm: "Incoterm",
	PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum: "PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum",
	PaymentTerm: "PaymentTerm",
	BillFromPartyDataPlatformSCRBillingRelationDatum:        "BillFromPartyDataPlatformSCRBillingRelationDatum",
	BillFromPartyDataPlatformSCRPaymentRelationDatum:        "BillFromPartyDataPlatformSCRPaymentRelationDatum",
	TransactionCurrencyDataPlatformCurrencyCurrencyDatum:    "TransactionCurrencyDataPlatformCurrencyCurrencyDatum",
	InvoiceDocumentDataPlatformInvoiceDocumentAddressData:   "InvoiceDocumentDataPlatformInvoiceDocumentAddressData",
	InvoiceDocumentDataPlatformInvoiceDocumentHeaderDocData: "InvoiceDocumentDataPlatformInvoiceDocumentHeaderDocData",
	InvoiceDocumentDataPlatformInvoiceDocumentItemData:      "InvoiceDocumentDataPlatformInvoiceDocumentItemData",
	InvoiceDocumentDataPlatformInvoiceDocumentPartnerData:   "InvoiceDocumentDataPlatformInvoiceDocumentPartnerData",
}

// dataPlatformInvoiceDocumentHeaderDatumR is where relationships are stored.
type dataPlatformInvoiceDocumentHeaderDatumR struct {
	BillFromCountryDataPlatformCountryCountryDatum           *DataPlatformCountryCountryDatum               `boil:"BillFromCountryDataPlatformCountryCountryDatum" json:"BillFromCountryDataPlatformCountryCountryDatum" toml:"BillFromCountryDataPlatformCountryCountryDatum" yaml:"BillFromCountryDataPlatformCountryCountryDatum"`
	BillToCountryDataPlatformCountryCountryDatum             *DataPlatformCountryCountryDatum               `boil:"BillToCountryDataPlatformCountryCountryDatum" json:"BillToCountryDataPlatformCountryCountryDatum" toml:"BillToCountryDataPlatformCountryCountryDatum" yaml:"BillToCountryDataPlatformCountryCountryDatum"`
	Incoterm                                                 *DataPlatformIncotermsIncotermsDatum           `boil:"Incoterm" json:"Incoterm" toml:"Incoterm" yaml:"Incoterm"`
	PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum *DataPlatformPaymentMethodPaymentMethodDatum   `boil:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum" json:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum" toml:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum" yaml:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum"`
	PaymentTerm                                              *DataPlatformPaymentTermsPaymentTermsDatum     `boil:"PaymentTerm" json:"PaymentTerm" toml:"PaymentTerm" yaml:"PaymentTerm"`
	BillFromPartyDataPlatformSCRBillingRelationDatum         *DataPlatformSCRBillingRelationDatum           `boil:"BillFromPartyDataPlatformSCRBillingRelationDatum" json:"BillFromPartyDataPlatformSCRBillingRelationDatum" toml:"BillFromPartyDataPlatformSCRBillingRelationDatum" yaml:"BillFromPartyDataPlatformSCRBillingRelationDatum"`
	BillFromPartyDataPlatformSCRPaymentRelationDatum         *DataPlatformSCRPaymentRelationDatum           `boil:"BillFromPartyDataPlatformSCRPaymentRelationDatum" json:"BillFromPartyDataPlatformSCRPaymentRelationDatum" toml:"BillFromPartyDataPlatformSCRPaymentRelationDatum" yaml:"BillFromPartyDataPlatformSCRPaymentRelationDatum"`
	TransactionCurrencyDataPlatformCurrencyCurrencyDatum     *DataPlatformCurrencyCurrencyDatum             `boil:"TransactionCurrencyDataPlatformCurrencyCurrencyDatum" json:"TransactionCurrencyDataPlatformCurrencyCurrencyDatum" toml:"TransactionCurrencyDataPlatformCurrencyCurrencyDatum" yaml:"TransactionCurrencyDataPlatformCurrencyCurrencyDatum"`
	InvoiceDocumentDataPlatformInvoiceDocumentAddressData    DataPlatformInvoiceDocumentAddressDatumSlice   `boil:"InvoiceDocumentDataPlatformInvoiceDocumentAddressData" json:"InvoiceDocumentDataPlatformInvoiceDocumentAddressData" toml:"InvoiceDocumentDataPlatformInvoiceDocumentAddressData" yaml:"InvoiceDocumentDataPlatformInvoiceDocumentAddressData"`
	InvoiceDocumentDataPlatformInvoiceDocumentHeaderDocData  DataPlatformInvoiceDocumentHeaderDocDatumSlice `boil:"InvoiceDocumentDataPlatformInvoiceDocumentHeaderDocData" json:"InvoiceDocumentDataPlatformInvoiceDocumentHeaderDocData" toml:"InvoiceDocumentDataPlatformInvoiceDocumentHeaderDocData" yaml:"InvoiceDocumentDataPlatformInvoiceDocumentHeaderDocData"`
	InvoiceDocumentDataPlatformInvoiceDocumentItemData       DataPlatformInvoiceDocumentItemDatumSlice      `boil:"InvoiceDocumentDataPlatformInvoiceDocumentItemData" json:"InvoiceDocumentDataPlatformInvoiceDocumentItemData" toml:"InvoiceDocumentDataPlatformInvoiceDocumentItemData" yaml:"InvoiceDocumentDataPlatformInvoiceDocumentItemData"`
	InvoiceDocumentDataPlatformInvoiceDocumentPartnerData    DataPlatformInvoiceDocumentPartnerDatumSlice   `boil:"InvoiceDocumentDataPlatformInvoiceDocumentPartnerData" json:"InvoiceDocumentDataPlatformInvoiceDocumentPartnerData" toml:"InvoiceDocumentDataPlatformInvoiceDocumentPartnerData" yaml:"InvoiceDocumentDataPlatformInvoiceDocumentPartnerData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformInvoiceDocumentHeaderDatumR) NewStruct() *dataPlatformInvoiceDocumentHeaderDatumR {
	return &dataPlatformInvoiceDocumentHeaderDatumR{}
}

func (r *dataPlatformInvoiceDocumentHeaderDatumR) GetBillFromCountryDataPlatformCountryCountryDatum() *DataPlatformCountryCountryDatum {
	if r == nil {
		return nil
	}
	return r.BillFromCountryDataPlatformCountryCountryDatum
}

func (r *dataPlatformInvoiceDocumentHeaderDatumR) GetBillToCountryDataPlatformCountryCountryDatum() *DataPlatformCountryCountryDatum {
	if r == nil {
		return nil
	}
	return r.BillToCountryDataPlatformCountryCountryDatum
}

func (r *dataPlatformInvoiceDocumentHeaderDatumR) GetIncoterm() *DataPlatformIncotermsIncotermsDatum {
	if r == nil {
		return nil
	}
	return r.Incoterm
}

func (r *dataPlatformInvoiceDocumentHeaderDatumR) GetPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum() *DataPlatformPaymentMethodPaymentMethodDatum {
	if r == nil {
		return nil
	}
	return r.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum
}

func (r *dataPlatformInvoiceDocumentHeaderDatumR) GetPaymentTerm() *DataPlatformPaymentTermsPaymentTermsDatum {
	if r == nil {
		return nil
	}
	return r.PaymentTerm
}

func (r *dataPlatformInvoiceDocumentHeaderDatumR) GetBillFromPartyDataPlatformSCRBillingRelationDatum() *DataPlatformSCRBillingRelationDatum {
	if r == nil {
		return nil
	}
	return r.BillFromPartyDataPlatformSCRBillingRelationDatum
}

func (r *dataPlatformInvoiceDocumentHeaderDatumR) GetBillFromPartyDataPlatformSCRPaymentRelationDatum() *DataPlatformSCRPaymentRelationDatum {
	if r == nil {
		return nil
	}
	return r.BillFromPartyDataPlatformSCRPaymentRelationDatum
}

func (r *dataPlatformInvoiceDocumentHeaderDatumR) GetTransactionCurrencyDataPlatformCurrencyCurrencyDatum() *DataPlatformCurrencyCurrencyDatum {
	if r == nil {
		return nil
	}
	return r.TransactionCurrencyDataPlatformCurrencyCurrencyDatum
}

func (r *dataPlatformInvoiceDocumentHeaderDatumR) GetInvoiceDocumentDataPlatformInvoiceDocumentAddressData() DataPlatformInvoiceDocumentAddressDatumSlice {
	if r == nil {
		return nil
	}
	return r.InvoiceDocumentDataPlatformInvoiceDocumentAddressData
}

func (r *dataPlatformInvoiceDocumentHeaderDatumR) GetInvoiceDocumentDataPlatformInvoiceDocumentHeaderDocData() DataPlatformInvoiceDocumentHeaderDocDatumSlice {
	if r == nil {
		return nil
	}
	return r.InvoiceDocumentDataPlatformInvoiceDocumentHeaderDocData
}

func (r *dataPlatformInvoiceDocumentHeaderDatumR) GetInvoiceDocumentDataPlatformInvoiceDocumentItemData() DataPlatformInvoiceDocumentItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.InvoiceDocumentDataPlatformInvoiceDocumentItemData
}

func (r *dataPlatformInvoiceDocumentHeaderDatumR) GetInvoiceDocumentDataPlatformInvoiceDocumentPartnerData() DataPlatformInvoiceDocumentPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.InvoiceDocumentDataPlatformInvoiceDocumentPartnerData
}

// dataPlatformInvoiceDocumentHeaderDatumL is where Load methods for each relationship are stored.
type dataPlatformInvoiceDocumentHeaderDatumL struct{}

var (
	dataPlatformInvoiceDocumentHeaderDatumAllColumns            = []string{"InvoiceDocument", "SupplyChainRelationshipID", "SupplyChainRelationshipBillingID", "SupplyChainRelationshipPaymentID", "Buyer", "Seller", "BillToParty", "BillFromParty", "BillToCountry", "BillFromCountry", "Payer", "Payee", "InvoiceDocumentDate", "InvoiceDocumentTime", "InvoicePeriodStartDate", "InvoicePeriodEndDate", "AccountingPostingDate", "IsExportImport", "HeaderBillingIsConfirmed", "HeaderBillingConfStatus", "TotalNetAmount", "TotalTaxAmount", "TotalGrossAmount", "TransactionCurrency", "Incoterms", "PaymentTerms", "DueCalculationBaseDate", "PaymentDueDate", "NetPaymentDays", "PaymentMethod", "ExternalReferenceDocument", "DocumentHeaderText", "HeaderIsCleared", "HeaderPaymentBlockStatus", "HeaderPaymentRequisitionIsCreated", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsCancelled"}
	dataPlatformInvoiceDocumentHeaderDatumColumnsWithoutDefault = []string{"InvoiceDocument", "SupplyChainRelationshipID", "SupplyChainRelationshipBillingID", "SupplyChainRelationshipPaymentID", "Buyer", "Seller", "BillToParty", "BillFromParty", "BillToCountry", "BillFromCountry", "Payer", "Payee", "InvoiceDocumentDate", "InvoiceDocumentTime", "InvoicePeriodStartDate", "InvoicePeriodEndDate", "AccountingPostingDate", "IsExportImport", "HeaderBillingIsConfirmed", "HeaderBillingConfStatus", "TotalNetAmount", "TotalTaxAmount", "TotalGrossAmount", "TransactionCurrency", "Incoterms", "PaymentTerms", "DueCalculationBaseDate", "PaymentDueDate", "NetPaymentDays", "PaymentMethod", "ExternalReferenceDocument", "DocumentHeaderText", "HeaderIsCleared", "HeaderPaymentBlockStatus", "HeaderPaymentRequisitionIsCreated", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsCancelled"}
	dataPlatformInvoiceDocumentHeaderDatumColumnsWithDefault    = []string{}
	dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyColumns     = []string{"InvoiceDocument"}
	dataPlatformInvoiceDocumentHeaderDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformInvoiceDocumentHeaderDatumSlice is an alias for a slice of pointers to DataPlatformInvoiceDocumentHeaderDatum.
	// This should almost always be used instead of []DataPlatformInvoiceDocumentHeaderDatum.
	DataPlatformInvoiceDocumentHeaderDatumSlice []*DataPlatformInvoiceDocumentHeaderDatum

	dataPlatformInvoiceDocumentHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformInvoiceDocumentHeaderDatumType                 = reflect.TypeOf(&DataPlatformInvoiceDocumentHeaderDatum{})
	dataPlatformInvoiceDocumentHeaderDatumMapping              = queries.MakeStructMapping(dataPlatformInvoiceDocumentHeaderDatumType)
	dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformInvoiceDocumentHeaderDatumType, dataPlatformInvoiceDocumentHeaderDatumMapping, dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyColumns)
	dataPlatformInvoiceDocumentHeaderDatumInsertCacheMut       sync.RWMutex
	dataPlatformInvoiceDocumentHeaderDatumInsertCache          = make(map[string]insertCache)
	dataPlatformInvoiceDocumentHeaderDatumUpdateCacheMut       sync.RWMutex
	dataPlatformInvoiceDocumentHeaderDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformInvoiceDocumentHeaderDatumUpsertCacheMut       sync.RWMutex
	dataPlatformInvoiceDocumentHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformInvoiceDocumentHeaderDatum record from the query.
func (q dataPlatformInvoiceDocumentHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformInvoiceDocumentHeaderDatum, error) {
	o := &DataPlatformInvoiceDocumentHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_invoice_document_header_data")
	}

	return o, nil
}

// All returns all DataPlatformInvoiceDocumentHeaderDatum records from the query.
func (q dataPlatformInvoiceDocumentHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformInvoiceDocumentHeaderDatumSlice, error) {
	var o []*DataPlatformInvoiceDocumentHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformInvoiceDocumentHeaderDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformInvoiceDocumentHeaderDatum records in the query.
func (q dataPlatformInvoiceDocumentHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_invoice_document_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformInvoiceDocumentHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_invoice_document_header_data exists")
	}

	return count > 0, nil
}

// BillFromCountryDataPlatformCountryCountryDatum pointed to by the foreign key.
func (o *DataPlatformInvoiceDocumentHeaderDatum) BillFromCountryDataPlatformCountryCountryDatum(mods ...qm.QueryMod) dataPlatformCountryCountryDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Country` = ?", o.BillFromCountry),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformCountryCountryData(queryMods...)
}

// BillToCountryDataPlatformCountryCountryDatum pointed to by the foreign key.
func (o *DataPlatformInvoiceDocumentHeaderDatum) BillToCountryDataPlatformCountryCountryDatum(mods ...qm.QueryMod) dataPlatformCountryCountryDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Country` = ?", o.BillToCountry),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformCountryCountryData(queryMods...)
}

// Incoterm pointed to by the foreign key.
func (o *DataPlatformInvoiceDocumentHeaderDatum) Incoterm(mods ...qm.QueryMod) dataPlatformIncotermsIncotermsDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Incoterms` = ?", o.Incoterms),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformIncotermsIncotermsData(queryMods...)
}

// PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum pointed to by the foreign key.
func (o *DataPlatformInvoiceDocumentHeaderDatum) PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum(mods ...qm.QueryMod) dataPlatformPaymentMethodPaymentMethodDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PaymentMethod` = ?", o.PaymentMethod),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPaymentMethodPaymentMethodData(queryMods...)
}

// PaymentTerm pointed to by the foreign key.
func (o *DataPlatformInvoiceDocumentHeaderDatum) PaymentTerm(mods ...qm.QueryMod) dataPlatformPaymentTermsPaymentTermsDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PaymentTerms` = ?", o.PaymentTerms),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPaymentTermsPaymentTermsData(queryMods...)
}

// BillFromPartyDataPlatformSCRBillingRelationDatum pointed to by the foreign key.
func (o *DataPlatformInvoiceDocumentHeaderDatum) BillFromPartyDataPlatformSCRBillingRelationDatum(mods ...qm.QueryMod) dataPlatformSCRBillingRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BillFromParty` = ?", o.BillFromParty),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRBillingRelationData(queryMods...)
}

// BillFromPartyDataPlatformSCRPaymentRelationDatum pointed to by the foreign key.
func (o *DataPlatformInvoiceDocumentHeaderDatum) BillFromPartyDataPlatformSCRPaymentRelationDatum(mods ...qm.QueryMod) dataPlatformSCRPaymentRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BillFromParty` = ?", o.BillFromParty),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRPaymentRelationData(queryMods...)
}

// TransactionCurrencyDataPlatformCurrencyCurrencyDatum pointed to by the foreign key.
func (o *DataPlatformInvoiceDocumentHeaderDatum) TransactionCurrencyDataPlatformCurrencyCurrencyDatum(mods ...qm.QueryMod) dataPlatformCurrencyCurrencyDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Currency` = ?", o.TransactionCurrency),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformCurrencyCurrencyData(queryMods...)
}

// InvoiceDocumentDataPlatformInvoiceDocumentAddressData retrieves all the data_platform_invoice_document_address_datum's DataPlatformInvoiceDocumentAddressData with an executor via InvoiceDocument column.
func (o *DataPlatformInvoiceDocumentHeaderDatum) InvoiceDocumentDataPlatformInvoiceDocumentAddressData(mods ...qm.QueryMod) dataPlatformInvoiceDocumentAddressDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_invoice_document_address_data`.`InvoiceDocument`=?", o.InvoiceDocument),
	)

	return DataPlatformInvoiceDocumentAddressData(queryMods...)
}

// InvoiceDocumentDataPlatformInvoiceDocumentHeaderDocData retrieves all the data_platform_invoice_document_header_doc_datum's DataPlatformInvoiceDocumentHeaderDocData with an executor via InvoiceDocument column.
func (o *DataPlatformInvoiceDocumentHeaderDatum) InvoiceDocumentDataPlatformInvoiceDocumentHeaderDocData(mods ...qm.QueryMod) dataPlatformInvoiceDocumentHeaderDocDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_invoice_document_header_doc_data`.`InvoiceDocument`=?", o.InvoiceDocument),
	)

	return DataPlatformInvoiceDocumentHeaderDocData(queryMods...)
}

// InvoiceDocumentDataPlatformInvoiceDocumentItemData retrieves all the data_platform_invoice_document_item_datum's DataPlatformInvoiceDocumentItemData with an executor via InvoiceDocument column.
func (o *DataPlatformInvoiceDocumentHeaderDatum) InvoiceDocumentDataPlatformInvoiceDocumentItemData(mods ...qm.QueryMod) dataPlatformInvoiceDocumentItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_invoice_document_item_data`.`InvoiceDocument`=?", o.InvoiceDocument),
	)

	return DataPlatformInvoiceDocumentItemData(queryMods...)
}

// InvoiceDocumentDataPlatformInvoiceDocumentPartnerData retrieves all the data_platform_invoice_document_partner_datum's DataPlatformInvoiceDocumentPartnerData with an executor via InvoiceDocument column.
func (o *DataPlatformInvoiceDocumentHeaderDatum) InvoiceDocumentDataPlatformInvoiceDocumentPartnerData(mods ...qm.QueryMod) dataPlatformInvoiceDocumentPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_invoice_document_partner_data`.`InvoiceDocument`=?", o.InvoiceDocument),
	)

	return DataPlatformInvoiceDocumentPartnerData(queryMods...)
}

// LoadBillFromCountryDataPlatformCountryCountryDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInvoiceDocumentHeaderDatumL) LoadBillFromCountryDataPlatformCountryCountryDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInvoiceDocumentHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInvoiceDocumentHeaderDatum
	var object *DataPlatformInvoiceDocumentHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInvoiceDocumentHeaderDatum.(*DataPlatformInvoiceDocumentHeaderDatum)
		if !ok {
			object = new(DataPlatformInvoiceDocumentHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInvoiceDocumentHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInvoiceDocumentHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInvoiceDocumentHeaderDatum.(*[]*DataPlatformInvoiceDocumentHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInvoiceDocumentHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInvoiceDocumentHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInvoiceDocumentHeaderDatumR{}
		}
		args = append(args, object.BillFromCountry)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInvoiceDocumentHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.BillFromCountry {
					continue Outer
				}
			}

			args = append(args, obj.BillFromCountry)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_country_country_data`),
		qm.WhereIn(`data_platform_country_country_data.Country in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformCountryCountryDatum")
	}

	var resultSlice []*DataPlatformCountryCountryDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformCountryCountryDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_country_country_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_country_country_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillFromCountryDataPlatformCountryCountryDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BillFromCountry == foreign.Country {
				local.R.BillFromCountryDataPlatformCountryCountryDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBillToCountryDataPlatformCountryCountryDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInvoiceDocumentHeaderDatumL) LoadBillToCountryDataPlatformCountryCountryDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInvoiceDocumentHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInvoiceDocumentHeaderDatum
	var object *DataPlatformInvoiceDocumentHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInvoiceDocumentHeaderDatum.(*DataPlatformInvoiceDocumentHeaderDatum)
		if !ok {
			object = new(DataPlatformInvoiceDocumentHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInvoiceDocumentHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInvoiceDocumentHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInvoiceDocumentHeaderDatum.(*[]*DataPlatformInvoiceDocumentHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInvoiceDocumentHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInvoiceDocumentHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInvoiceDocumentHeaderDatumR{}
		}
		args = append(args, object.BillToCountry)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInvoiceDocumentHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.BillToCountry {
					continue Outer
				}
			}

			args = append(args, obj.BillToCountry)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_country_country_data`),
		qm.WhereIn(`data_platform_country_country_data.Country in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformCountryCountryDatum")
	}

	var resultSlice []*DataPlatformCountryCountryDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformCountryCountryDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_country_country_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_country_country_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillToCountryDataPlatformCountryCountryDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BillToCountry == foreign.Country {
				local.R.BillToCountryDataPlatformCountryCountryDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadIncoterm allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInvoiceDocumentHeaderDatumL) LoadIncoterm(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInvoiceDocumentHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInvoiceDocumentHeaderDatum
	var object *DataPlatformInvoiceDocumentHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInvoiceDocumentHeaderDatum.(*DataPlatformInvoiceDocumentHeaderDatum)
		if !ok {
			object = new(DataPlatformInvoiceDocumentHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInvoiceDocumentHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInvoiceDocumentHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInvoiceDocumentHeaderDatum.(*[]*DataPlatformInvoiceDocumentHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInvoiceDocumentHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInvoiceDocumentHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInvoiceDocumentHeaderDatumR{}
		}
		if !queries.IsNil(object.Incoterms) {
			args = append(args, object.Incoterms)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInvoiceDocumentHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Incoterms) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Incoterms) {
				args = append(args, obj.Incoterms)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_incoterms_incoterms_data`),
		qm.WhereIn(`data_platform_incoterms_incoterms_data.Incoterms in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformIncotermsIncotermsDatum")
	}

	var resultSlice []*DataPlatformIncotermsIncotermsDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformIncotermsIncotermsDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_incoterms_incoterms_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_incoterms_incoterms_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Incoterm = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Incoterms, foreign.Incoterms) {
				local.R.Incoterm = foreign
				break
			}
		}
	}

	return nil
}

// LoadPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInvoiceDocumentHeaderDatumL) LoadPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInvoiceDocumentHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInvoiceDocumentHeaderDatum
	var object *DataPlatformInvoiceDocumentHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInvoiceDocumentHeaderDatum.(*DataPlatformInvoiceDocumentHeaderDatum)
		if !ok {
			object = new(DataPlatformInvoiceDocumentHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInvoiceDocumentHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInvoiceDocumentHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInvoiceDocumentHeaderDatum.(*[]*DataPlatformInvoiceDocumentHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInvoiceDocumentHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInvoiceDocumentHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInvoiceDocumentHeaderDatumR{}
		}
		args = append(args, object.PaymentMethod)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInvoiceDocumentHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.PaymentMethod {
					continue Outer
				}
			}

			args = append(args, obj.PaymentMethod)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_payment_method_payment_method_data`),
		qm.WhereIn(`data_platform_payment_method_payment_method_data.PaymentMethod in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPaymentMethodPaymentMethodDatum")
	}

	var resultSlice []*DataPlatformPaymentMethodPaymentMethodDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPaymentMethodPaymentMethodDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_payment_method_payment_method_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_payment_method_payment_method_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PaymentMethod == foreign.PaymentMethod {
				local.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadPaymentTerm allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInvoiceDocumentHeaderDatumL) LoadPaymentTerm(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInvoiceDocumentHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInvoiceDocumentHeaderDatum
	var object *DataPlatformInvoiceDocumentHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInvoiceDocumentHeaderDatum.(*DataPlatformInvoiceDocumentHeaderDatum)
		if !ok {
			object = new(DataPlatformInvoiceDocumentHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInvoiceDocumentHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInvoiceDocumentHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInvoiceDocumentHeaderDatum.(*[]*DataPlatformInvoiceDocumentHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInvoiceDocumentHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInvoiceDocumentHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInvoiceDocumentHeaderDatumR{}
		}
		args = append(args, object.PaymentTerms)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInvoiceDocumentHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.PaymentTerms {
					continue Outer
				}
			}

			args = append(args, obj.PaymentTerms)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_payment_terms_payment_terms_data`),
		qm.WhereIn(`data_platform_payment_terms_payment_terms_data.PaymentTerms in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPaymentTermsPaymentTermsDatum")
	}

	var resultSlice []*DataPlatformPaymentTermsPaymentTermsDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPaymentTermsPaymentTermsDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_payment_terms_payment_terms_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_payment_terms_payment_terms_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PaymentTerm = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PaymentTerms == foreign.PaymentTerms {
				local.R.PaymentTerm = foreign
				break
			}
		}
	}

	return nil
}

// LoadBillFromPartyDataPlatformSCRBillingRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInvoiceDocumentHeaderDatumL) LoadBillFromPartyDataPlatformSCRBillingRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInvoiceDocumentHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInvoiceDocumentHeaderDatum
	var object *DataPlatformInvoiceDocumentHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInvoiceDocumentHeaderDatum.(*DataPlatformInvoiceDocumentHeaderDatum)
		if !ok {
			object = new(DataPlatformInvoiceDocumentHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInvoiceDocumentHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInvoiceDocumentHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInvoiceDocumentHeaderDatum.(*[]*DataPlatformInvoiceDocumentHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInvoiceDocumentHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInvoiceDocumentHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInvoiceDocumentHeaderDatumR{}
		}
		args = append(args, object.BillFromParty)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInvoiceDocumentHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.BillFromParty {
					continue Outer
				}
			}

			args = append(args, obj.BillFromParty)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_billing_relation_data`),
		qm.WhereIn(`data_platform_scr_billing_relation_data.BillFromParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRBillingRelationDatum")
	}

	var resultSlice []*DataPlatformSCRBillingRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRBillingRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_billing_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_billing_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillFromPartyDataPlatformSCRBillingRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BillFromParty == foreign.BillFromParty {
				local.R.BillFromPartyDataPlatformSCRBillingRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBillFromPartyDataPlatformSCRPaymentRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInvoiceDocumentHeaderDatumL) LoadBillFromPartyDataPlatformSCRPaymentRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInvoiceDocumentHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInvoiceDocumentHeaderDatum
	var object *DataPlatformInvoiceDocumentHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInvoiceDocumentHeaderDatum.(*DataPlatformInvoiceDocumentHeaderDatum)
		if !ok {
			object = new(DataPlatformInvoiceDocumentHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInvoiceDocumentHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInvoiceDocumentHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInvoiceDocumentHeaderDatum.(*[]*DataPlatformInvoiceDocumentHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInvoiceDocumentHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInvoiceDocumentHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInvoiceDocumentHeaderDatumR{}
		}
		args = append(args, object.BillFromParty)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInvoiceDocumentHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.BillFromParty {
					continue Outer
				}
			}

			args = append(args, obj.BillFromParty)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_payment_relation_data`),
		qm.WhereIn(`data_platform_scr_payment_relation_data.BillFromParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRPaymentRelationDatum")
	}

	var resultSlice []*DataPlatformSCRPaymentRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRPaymentRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_payment_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_payment_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillFromPartyDataPlatformSCRPaymentRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BillFromParty == foreign.BillFromParty {
				local.R.BillFromPartyDataPlatformSCRPaymentRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadTransactionCurrencyDataPlatformCurrencyCurrencyDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInvoiceDocumentHeaderDatumL) LoadTransactionCurrencyDataPlatformCurrencyCurrencyDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInvoiceDocumentHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInvoiceDocumentHeaderDatum
	var object *DataPlatformInvoiceDocumentHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInvoiceDocumentHeaderDatum.(*DataPlatformInvoiceDocumentHeaderDatum)
		if !ok {
			object = new(DataPlatformInvoiceDocumentHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInvoiceDocumentHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInvoiceDocumentHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInvoiceDocumentHeaderDatum.(*[]*DataPlatformInvoiceDocumentHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInvoiceDocumentHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInvoiceDocumentHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInvoiceDocumentHeaderDatumR{}
		}
		args = append(args, object.TransactionCurrency)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInvoiceDocumentHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.TransactionCurrency {
					continue Outer
				}
			}

			args = append(args, obj.TransactionCurrency)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_currency_currency_data`),
		qm.WhereIn(`data_platform_currency_currency_data.Currency in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformCurrencyCurrencyDatum")
	}

	var resultSlice []*DataPlatformCurrencyCurrencyDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformCurrencyCurrencyDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_currency_currency_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_currency_currency_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TransactionCurrencyDataPlatformCurrencyCurrencyDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TransactionCurrency == foreign.Currency {
				local.R.TransactionCurrencyDataPlatformCurrencyCurrencyDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadInvoiceDocumentDataPlatformInvoiceDocumentAddressData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformInvoiceDocumentHeaderDatumL) LoadInvoiceDocumentDataPlatformInvoiceDocumentAddressData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInvoiceDocumentHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInvoiceDocumentHeaderDatum
	var object *DataPlatformInvoiceDocumentHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInvoiceDocumentHeaderDatum.(*DataPlatformInvoiceDocumentHeaderDatum)
		if !ok {
			object = new(DataPlatformInvoiceDocumentHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInvoiceDocumentHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInvoiceDocumentHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInvoiceDocumentHeaderDatum.(*[]*DataPlatformInvoiceDocumentHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInvoiceDocumentHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInvoiceDocumentHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInvoiceDocumentHeaderDatumR{}
		}
		args = append(args, object.InvoiceDocument)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInvoiceDocumentHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.InvoiceDocument {
					continue Outer
				}
			}

			args = append(args, obj.InvoiceDocument)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_invoice_document_address_data`),
		qm.WhereIn(`data_platform_invoice_document_address_data.InvoiceDocument in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_invoice_document_address_data")
	}

	var resultSlice []*DataPlatformInvoiceDocumentAddressDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_invoice_document_address_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_invoice_document_address_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_invoice_document_address_data")
	}

	if singular {
		object.R.InvoiceDocumentDataPlatformInvoiceDocumentAddressData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.InvoiceDocument == foreign.InvoiceDocument {
				local.R.InvoiceDocumentDataPlatformInvoiceDocumentAddressData = append(local.R.InvoiceDocumentDataPlatformInvoiceDocumentAddressData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadInvoiceDocumentDataPlatformInvoiceDocumentHeaderDocData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformInvoiceDocumentHeaderDatumL) LoadInvoiceDocumentDataPlatformInvoiceDocumentHeaderDocData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInvoiceDocumentHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInvoiceDocumentHeaderDatum
	var object *DataPlatformInvoiceDocumentHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInvoiceDocumentHeaderDatum.(*DataPlatformInvoiceDocumentHeaderDatum)
		if !ok {
			object = new(DataPlatformInvoiceDocumentHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInvoiceDocumentHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInvoiceDocumentHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInvoiceDocumentHeaderDatum.(*[]*DataPlatformInvoiceDocumentHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInvoiceDocumentHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInvoiceDocumentHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInvoiceDocumentHeaderDatumR{}
		}
		args = append(args, object.InvoiceDocument)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInvoiceDocumentHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.InvoiceDocument {
					continue Outer
				}
			}

			args = append(args, obj.InvoiceDocument)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_invoice_document_header_doc_data`),
		qm.WhereIn(`data_platform_invoice_document_header_doc_data.InvoiceDocument in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_invoice_document_header_doc_data")
	}

	var resultSlice []*DataPlatformInvoiceDocumentHeaderDocDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_invoice_document_header_doc_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_invoice_document_header_doc_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_invoice_document_header_doc_data")
	}

	if singular {
		object.R.InvoiceDocumentDataPlatformInvoiceDocumentHeaderDocData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.InvoiceDocument == foreign.InvoiceDocument {
				local.R.InvoiceDocumentDataPlatformInvoiceDocumentHeaderDocData = append(local.R.InvoiceDocumentDataPlatformInvoiceDocumentHeaderDocData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadInvoiceDocumentDataPlatformInvoiceDocumentItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformInvoiceDocumentHeaderDatumL) LoadInvoiceDocumentDataPlatformInvoiceDocumentItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInvoiceDocumentHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInvoiceDocumentHeaderDatum
	var object *DataPlatformInvoiceDocumentHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInvoiceDocumentHeaderDatum.(*DataPlatformInvoiceDocumentHeaderDatum)
		if !ok {
			object = new(DataPlatformInvoiceDocumentHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInvoiceDocumentHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInvoiceDocumentHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInvoiceDocumentHeaderDatum.(*[]*DataPlatformInvoiceDocumentHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInvoiceDocumentHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInvoiceDocumentHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInvoiceDocumentHeaderDatumR{}
		}
		args = append(args, object.InvoiceDocument)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInvoiceDocumentHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.InvoiceDocument {
					continue Outer
				}
			}

			args = append(args, obj.InvoiceDocument)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_invoice_document_item_data`),
		qm.WhereIn(`data_platform_invoice_document_item_data.InvoiceDocument in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_invoice_document_item_data")
	}

	var resultSlice []*DataPlatformInvoiceDocumentItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_invoice_document_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_invoice_document_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_invoice_document_item_data")
	}

	if singular {
		object.R.InvoiceDocumentDataPlatformInvoiceDocumentItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.InvoiceDocument == foreign.InvoiceDocument {
				local.R.InvoiceDocumentDataPlatformInvoiceDocumentItemData = append(local.R.InvoiceDocumentDataPlatformInvoiceDocumentItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadInvoiceDocumentDataPlatformInvoiceDocumentPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformInvoiceDocumentHeaderDatumL) LoadInvoiceDocumentDataPlatformInvoiceDocumentPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInvoiceDocumentHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInvoiceDocumentHeaderDatum
	var object *DataPlatformInvoiceDocumentHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInvoiceDocumentHeaderDatum.(*DataPlatformInvoiceDocumentHeaderDatum)
		if !ok {
			object = new(DataPlatformInvoiceDocumentHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInvoiceDocumentHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInvoiceDocumentHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInvoiceDocumentHeaderDatum.(*[]*DataPlatformInvoiceDocumentHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInvoiceDocumentHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInvoiceDocumentHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInvoiceDocumentHeaderDatumR{}
		}
		args = append(args, object.InvoiceDocument)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInvoiceDocumentHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.InvoiceDocument {
					continue Outer
				}
			}

			args = append(args, obj.InvoiceDocument)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_invoice_document_partner_data`),
		qm.WhereIn(`data_platform_invoice_document_partner_data.InvoiceDocument in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_invoice_document_partner_data")
	}

	var resultSlice []*DataPlatformInvoiceDocumentPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_invoice_document_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_invoice_document_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_invoice_document_partner_data")
	}

	if singular {
		object.R.InvoiceDocumentDataPlatformInvoiceDocumentPartnerData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.InvoiceDocument == foreign.InvoiceDocument {
				local.R.InvoiceDocumentDataPlatformInvoiceDocumentPartnerData = append(local.R.InvoiceDocumentDataPlatformInvoiceDocumentPartnerData, foreign)
				break
			}
		}
	}

	return nil
}

// SetBillFromCountryDataPlatformCountryCountryDatum of the dataPlatformInvoiceDocumentHeaderDatum to the related item.
// Sets o.R.BillFromCountryDataPlatformCountryCountryDatum to related.
func (o *DataPlatformInvoiceDocumentHeaderDatum) SetBillFromCountryDataPlatformCountryCountryDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformCountryCountryDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_invoice_document_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BillFromCountry"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Country, o.InvoiceDocument}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BillFromCountry = related.Country
	if o.R == nil {
		o.R = &dataPlatformInvoiceDocumentHeaderDatumR{
			BillFromCountryDataPlatformCountryCountryDatum: related,
		}
	} else {
		o.R.BillFromCountryDataPlatformCountryCountryDatum = related
	}

	return nil
}

// SetBillToCountryDataPlatformCountryCountryDatum of the dataPlatformInvoiceDocumentHeaderDatum to the related item.
// Sets o.R.BillToCountryDataPlatformCountryCountryDatum to related.
func (o *DataPlatformInvoiceDocumentHeaderDatum) SetBillToCountryDataPlatformCountryCountryDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformCountryCountryDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_invoice_document_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BillToCountry"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Country, o.InvoiceDocument}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BillToCountry = related.Country
	if o.R == nil {
		o.R = &dataPlatformInvoiceDocumentHeaderDatumR{
			BillToCountryDataPlatformCountryCountryDatum: related,
		}
	} else {
		o.R.BillToCountryDataPlatformCountryCountryDatum = related
	}

	return nil
}

// SetIncoterm of the dataPlatformInvoiceDocumentHeaderDatum to the related item.
// Sets o.R.Incoterm to related.
func (o *DataPlatformInvoiceDocumentHeaderDatum) SetIncoterm(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformIncotermsIncotermsDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_invoice_document_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Incoterms"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Incoterms, o.InvoiceDocument}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Incoterms, related.Incoterms)
	if o.R == nil {
		o.R = &dataPlatformInvoiceDocumentHeaderDatumR{
			Incoterm: related,
		}
	} else {
		o.R.Incoterm = related
	}

	return nil
}

// RemoveIncoterm relationship.
// Sets o.R.Incoterm to nil.
func (o *DataPlatformInvoiceDocumentHeaderDatum) RemoveIncoterm(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformIncotermsIncotermsDatum) error {
	var err error

	queries.SetScanner(&o.Incoterms, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("Incoterms")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Incoterm = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum of the dataPlatformInvoiceDocumentHeaderDatum to the related item.
// Sets o.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum to related.
func (o *DataPlatformInvoiceDocumentHeaderDatum) SetPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPaymentMethodPaymentMethodDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_invoice_document_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PaymentMethod"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PaymentMethod, o.InvoiceDocument}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PaymentMethod = related.PaymentMethod
	if o.R == nil {
		o.R = &dataPlatformInvoiceDocumentHeaderDatumR{
			PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum: related,
		}
	} else {
		o.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = related
	}

	return nil
}

// SetPaymentTerm of the dataPlatformInvoiceDocumentHeaderDatum to the related item.
// Sets o.R.PaymentTerm to related.
func (o *DataPlatformInvoiceDocumentHeaderDatum) SetPaymentTerm(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPaymentTermsPaymentTermsDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_invoice_document_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PaymentTerms"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PaymentTerms, o.InvoiceDocument}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PaymentTerms = related.PaymentTerms
	if o.R == nil {
		o.R = &dataPlatformInvoiceDocumentHeaderDatumR{
			PaymentTerm: related,
		}
	} else {
		o.R.PaymentTerm = related
	}

	return nil
}

// SetBillFromPartyDataPlatformSCRBillingRelationDatum of the dataPlatformInvoiceDocumentHeaderDatum to the related item.
// Sets o.R.BillFromPartyDataPlatformSCRBillingRelationDatum to related.
func (o *DataPlatformInvoiceDocumentHeaderDatum) SetBillFromPartyDataPlatformSCRBillingRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRBillingRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_invoice_document_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BillFromParty"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BillFromParty, o.InvoiceDocument}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BillFromParty = related.BillFromParty
	if o.R == nil {
		o.R = &dataPlatformInvoiceDocumentHeaderDatumR{
			BillFromPartyDataPlatformSCRBillingRelationDatum: related,
		}
	} else {
		o.R.BillFromPartyDataPlatformSCRBillingRelationDatum = related
	}

	return nil
}

// SetBillFromPartyDataPlatformSCRPaymentRelationDatum of the dataPlatformInvoiceDocumentHeaderDatum to the related item.
// Sets o.R.BillFromPartyDataPlatformSCRPaymentRelationDatum to related.
func (o *DataPlatformInvoiceDocumentHeaderDatum) SetBillFromPartyDataPlatformSCRPaymentRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRPaymentRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_invoice_document_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BillFromParty"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BillFromParty, o.InvoiceDocument}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BillFromParty = related.BillFromParty
	if o.R == nil {
		o.R = &dataPlatformInvoiceDocumentHeaderDatumR{
			BillFromPartyDataPlatformSCRPaymentRelationDatum: related,
		}
	} else {
		o.R.BillFromPartyDataPlatformSCRPaymentRelationDatum = related
	}

	return nil
}

// SetTransactionCurrencyDataPlatformCurrencyCurrencyDatum of the dataPlatformInvoiceDocumentHeaderDatum to the related item.
// Sets o.R.TransactionCurrencyDataPlatformCurrencyCurrencyDatum to related.
func (o *DataPlatformInvoiceDocumentHeaderDatum) SetTransactionCurrencyDataPlatformCurrencyCurrencyDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformCurrencyCurrencyDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_invoice_document_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"TransactionCurrency"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Currency, o.InvoiceDocument}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TransactionCurrency = related.Currency
	if o.R == nil {
		o.R = &dataPlatformInvoiceDocumentHeaderDatumR{
			TransactionCurrencyDataPlatformCurrencyCurrencyDatum: related,
		}
	} else {
		o.R.TransactionCurrencyDataPlatformCurrencyCurrencyDatum = related
	}

	return nil
}

// AddInvoiceDocumentDataPlatformInvoiceDocumentAddressData adds the given related objects to the existing relationships
// of the data_platform_invoice_document_header_datum, optionally inserting them as new records.
// Appends related to o.R.InvoiceDocumentDataPlatformInvoiceDocumentAddressData.
func (o *DataPlatformInvoiceDocumentHeaderDatum) AddInvoiceDocumentDataPlatformInvoiceDocumentAddressData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInvoiceDocumentAddressDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InvoiceDocument = o.InvoiceDocument
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_invoice_document_address_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"InvoiceDocument"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentAddressDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.InvoiceDocument, rel.InvoiceDocument, rel.AddressID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InvoiceDocument = o.InvoiceDocument
		}
	}

	if o.R == nil {
		o.R = &dataPlatformInvoiceDocumentHeaderDatumR{
			InvoiceDocumentDataPlatformInvoiceDocumentAddressData: related,
		}
	} else {
		o.R.InvoiceDocumentDataPlatformInvoiceDocumentAddressData = append(o.R.InvoiceDocumentDataPlatformInvoiceDocumentAddressData, related...)
	}

	return nil
}

// AddInvoiceDocumentDataPlatformInvoiceDocumentHeaderDocData adds the given related objects to the existing relationships
// of the data_platform_invoice_document_header_datum, optionally inserting them as new records.
// Appends related to o.R.InvoiceDocumentDataPlatformInvoiceDocumentHeaderDocData.
func (o *DataPlatformInvoiceDocumentHeaderDatum) AddInvoiceDocumentDataPlatformInvoiceDocumentHeaderDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInvoiceDocumentHeaderDocDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InvoiceDocument = o.InvoiceDocument
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_invoice_document_header_doc_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"InvoiceDocument"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentHeaderDocDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.InvoiceDocument, rel.InvoiceDocument, rel.DocType, rel.DocVersionID, rel.DocID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InvoiceDocument = o.InvoiceDocument
		}
	}

	if o.R == nil {
		o.R = &dataPlatformInvoiceDocumentHeaderDatumR{
			InvoiceDocumentDataPlatformInvoiceDocumentHeaderDocData: related,
		}
	} else {
		o.R.InvoiceDocumentDataPlatformInvoiceDocumentHeaderDocData = append(o.R.InvoiceDocumentDataPlatformInvoiceDocumentHeaderDocData, related...)
	}

	return nil
}

// AddInvoiceDocumentDataPlatformInvoiceDocumentItemData adds the given related objects to the existing relationships
// of the data_platform_invoice_document_header_datum, optionally inserting them as new records.
// Appends related to o.R.InvoiceDocumentDataPlatformInvoiceDocumentItemData.
func (o *DataPlatformInvoiceDocumentHeaderDatum) AddInvoiceDocumentDataPlatformInvoiceDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInvoiceDocumentItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InvoiceDocument = o.InvoiceDocument
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_invoice_document_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"InvoiceDocument"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.InvoiceDocument, rel.InvoiceDocument, rel.InvoiceDocumentItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InvoiceDocument = o.InvoiceDocument
		}
	}

	if o.R == nil {
		o.R = &dataPlatformInvoiceDocumentHeaderDatumR{
			InvoiceDocumentDataPlatformInvoiceDocumentItemData: related,
		}
	} else {
		o.R.InvoiceDocumentDataPlatformInvoiceDocumentItemData = append(o.R.InvoiceDocumentDataPlatformInvoiceDocumentItemData, related...)
	}

	return nil
}

// AddInvoiceDocumentDataPlatformInvoiceDocumentPartnerData adds the given related objects to the existing relationships
// of the data_platform_invoice_document_header_datum, optionally inserting them as new records.
// Appends related to o.R.InvoiceDocumentDataPlatformInvoiceDocumentPartnerData.
func (o *DataPlatformInvoiceDocumentHeaderDatum) AddInvoiceDocumentDataPlatformInvoiceDocumentPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInvoiceDocumentPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InvoiceDocument = o.InvoiceDocument
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_invoice_document_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"InvoiceDocument"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.InvoiceDocument, rel.InvoiceDocument, rel.PartnerFunction, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InvoiceDocument = o.InvoiceDocument
		}
	}

	if o.R == nil {
		o.R = &dataPlatformInvoiceDocumentHeaderDatumR{
			InvoiceDocumentDataPlatformInvoiceDocumentPartnerData: related,
		}
	} else {
		o.R.InvoiceDocumentDataPlatformInvoiceDocumentPartnerData = append(o.R.InvoiceDocumentDataPlatformInvoiceDocumentPartnerData, related...)
	}

	return nil
}

// DataPlatformInvoiceDocumentHeaderData retrieves all the records using an executor.
func DataPlatformInvoiceDocumentHeaderData(mods ...qm.QueryMod) dataPlatformInvoiceDocumentHeaderDatumQuery {
	mods = append(mods, qm.From("`data_platform_invoice_document_header_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_invoice_document_header_data`.*"})
	}

	return dataPlatformInvoiceDocumentHeaderDatumQuery{q}
}

// FindDataPlatformInvoiceDocumentHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformInvoiceDocumentHeaderDatum(ctx context.Context, exec boil.ContextExecutor, invoiceDocument int, selectCols ...string) (*DataPlatformInvoiceDocumentHeaderDatum, error) {
	dataPlatformInvoiceDocumentHeaderDatumObj := &DataPlatformInvoiceDocumentHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_invoice_document_header_data` where `InvoiceDocument`=?", sel,
	)

	q := queries.Raw(query, invoiceDocument)

	err := q.Bind(ctx, exec, dataPlatformInvoiceDocumentHeaderDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_invoice_document_header_data")
	}

	return dataPlatformInvoiceDocumentHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformInvoiceDocumentHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_invoice_document_header_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformInvoiceDocumentHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformInvoiceDocumentHeaderDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformInvoiceDocumentHeaderDatumInsertCache[key]
	dataPlatformInvoiceDocumentHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformInvoiceDocumentHeaderDatumAllColumns,
			dataPlatformInvoiceDocumentHeaderDatumColumnsWithDefault,
			dataPlatformInvoiceDocumentHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformInvoiceDocumentHeaderDatumType, dataPlatformInvoiceDocumentHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformInvoiceDocumentHeaderDatumType, dataPlatformInvoiceDocumentHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_invoice_document_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_invoice_document_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_invoice_document_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_invoice_document_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.InvoiceDocument,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_invoice_document_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformInvoiceDocumentHeaderDatumInsertCacheMut.Lock()
		dataPlatformInvoiceDocumentHeaderDatumInsertCache[key] = cache
		dataPlatformInvoiceDocumentHeaderDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformInvoiceDocumentHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformInvoiceDocumentHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformInvoiceDocumentHeaderDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformInvoiceDocumentHeaderDatumUpdateCache[key]
	dataPlatformInvoiceDocumentHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformInvoiceDocumentHeaderDatumAllColumns,
			dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_invoice_document_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_invoice_document_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformInvoiceDocumentHeaderDatumType, dataPlatformInvoiceDocumentHeaderDatumMapping, append(wl, dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_invoice_document_header_data row")
	}

	if !cached {
		dataPlatformInvoiceDocumentHeaderDatumUpdateCacheMut.Lock()
		dataPlatformInvoiceDocumentHeaderDatumUpdateCache[key] = cache
		dataPlatformInvoiceDocumentHeaderDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformInvoiceDocumentHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_invoice_document_header_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformInvoiceDocumentHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_invoice_document_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformInvoiceDocumentHeaderDatum slice")
	}

	return nil
}

var mySQLDataPlatformInvoiceDocumentHeaderDatumUniqueColumns = []string{
	"InvoiceDocument",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformInvoiceDocumentHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_invoice_document_header_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformInvoiceDocumentHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformInvoiceDocumentHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformInvoiceDocumentHeaderDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformInvoiceDocumentHeaderDatumUpsertCache[key]
	dataPlatformInvoiceDocumentHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformInvoiceDocumentHeaderDatumAllColumns,
			dataPlatformInvoiceDocumentHeaderDatumColumnsWithDefault,
			dataPlatformInvoiceDocumentHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformInvoiceDocumentHeaderDatumAllColumns,
			dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_invoice_document_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_invoice_document_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_invoice_document_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformInvoiceDocumentHeaderDatumType, dataPlatformInvoiceDocumentHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformInvoiceDocumentHeaderDatumType, dataPlatformInvoiceDocumentHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_invoice_document_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformInvoiceDocumentHeaderDatumType, dataPlatformInvoiceDocumentHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_invoice_document_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_invoice_document_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformInvoiceDocumentHeaderDatumUpsertCacheMut.Lock()
		dataPlatformInvoiceDocumentHeaderDatumUpsertCache[key] = cache
		dataPlatformInvoiceDocumentHeaderDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformInvoiceDocumentHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformInvoiceDocumentHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformInvoiceDocumentHeaderDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_invoice_document_header_data` WHERE `InvoiceDocument`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_invoice_document_header_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformInvoiceDocumentHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformInvoiceDocumentHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_invoice_document_header_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformInvoiceDocumentHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_invoice_document_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformInvoiceDocumentHeaderDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformInvoiceDocumentHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformInvoiceDocumentHeaderDatum(ctx, exec, o.InvoiceDocument)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformInvoiceDocumentHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformInvoiceDocumentHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_invoice_document_header_data`.* FROM `data_platform_invoice_document_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformInvoiceDocumentHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformInvoiceDocumentHeaderDatumExists checks if the DataPlatformInvoiceDocumentHeaderDatum row exists.
func DataPlatformInvoiceDocumentHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, invoiceDocument int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_invoice_document_header_data` where `InvoiceDocument`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, invoiceDocument)
	}
	row := exec.QueryRowContext(ctx, sql, invoiceDocument)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_invoice_document_header_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformInvoiceDocumentHeaderDatum row exists.
func (o *DataPlatformInvoiceDocumentHeaderDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformInvoiceDocumentHeaderDatumExists(ctx, exec, o.InvoiceDocument)
}
