// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformProductionOrderItemComponentCostingDatum is an object representing the database table.
type DataPlatformProductionOrderItemComponentCostingDatum struct {
	ProductionOrder     int          `boil:"ProductionOrder" json:"ProductionOrder" toml:"ProductionOrder" yaml:"ProductionOrder"`
	ProductionOrderItem int          `boil:"ProductionOrderItem" json:"ProductionOrderItem" toml:"ProductionOrderItem" yaml:"ProductionOrderItem"`
	Operations          int          `boil:"Operations" json:"Operations" toml:"Operations" yaml:"Operations"`
	OperationsItem      int          `boil:"OperationsItem" json:"OperationsItem" toml:"OperationsItem" yaml:"OperationsItem"`
	BillOfMaterial      int          `boil:"BillOfMaterial" json:"BillOfMaterial" toml:"BillOfMaterial" yaml:"BillOfMaterial"`
	BillOfMaterialItem  int          `boil:"BillOfMaterialItem" json:"BillOfMaterialItem" toml:"BillOfMaterialItem" yaml:"BillOfMaterialItem"`
	ComponentProduct    string       `boil:"ComponentProduct" json:"ComponentProduct" toml:"ComponentProduct" yaml:"ComponentProduct"`
	Currency            null.String  `boil:"Currency" json:"Currency,omitempty" toml:"Currency" yaml:"Currency,omitempty"`
	CostingAmount       null.Float32 `boil:"CostingAmount" json:"CostingAmount,omitempty" toml:"CostingAmount" yaml:"CostingAmount,omitempty"`
	IsMarkedForDeletion null.Bool    `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformProductionOrderItemComponentCostingDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformProductionOrderItemComponentCostingDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformProductionOrderItemComponentCostingDatumColumns = struct {
	ProductionOrder     string
	ProductionOrderItem string
	Operations          string
	OperationsItem      string
	BillOfMaterial      string
	BillOfMaterialItem  string
	ComponentProduct    string
	Currency            string
	CostingAmount       string
	IsMarkedForDeletion string
}{
	ProductionOrder:     "ProductionOrder",
	ProductionOrderItem: "ProductionOrderItem",
	Operations:          "Operations",
	OperationsItem:      "OperationsItem",
	BillOfMaterial:      "BillOfMaterial",
	BillOfMaterialItem:  "BillOfMaterialItem",
	ComponentProduct:    "ComponentProduct",
	Currency:            "Currency",
	CostingAmount:       "CostingAmount",
	IsMarkedForDeletion: "IsMarkedForDeletion",
}

var DataPlatformProductionOrderItemComponentCostingDatumTableColumns = struct {
	ProductionOrder     string
	ProductionOrderItem string
	Operations          string
	OperationsItem      string
	BillOfMaterial      string
	BillOfMaterialItem  string
	ComponentProduct    string
	Currency            string
	CostingAmount       string
	IsMarkedForDeletion string
}{
	ProductionOrder:     "data_platform_production_order_item_component_costing_data.ProductionOrder",
	ProductionOrderItem: "data_platform_production_order_item_component_costing_data.ProductionOrderItem",
	Operations:          "data_platform_production_order_item_component_costing_data.Operations",
	OperationsItem:      "data_platform_production_order_item_component_costing_data.OperationsItem",
	BillOfMaterial:      "data_platform_production_order_item_component_costing_data.BillOfMaterial",
	BillOfMaterialItem:  "data_platform_production_order_item_component_costing_data.BillOfMaterialItem",
	ComponentProduct:    "data_platform_production_order_item_component_costing_data.ComponentProduct",
	Currency:            "data_platform_production_order_item_component_costing_data.Currency",
	CostingAmount:       "data_platform_production_order_item_component_costing_data.CostingAmount",
	IsMarkedForDeletion: "data_platform_production_order_item_component_costing_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformProductionOrderItemComponentCostingDatumWhere = struct {
	ProductionOrder     whereHelperint
	ProductionOrderItem whereHelperint
	Operations          whereHelperint
	OperationsItem      whereHelperint
	BillOfMaterial      whereHelperint
	BillOfMaterialItem  whereHelperint
	ComponentProduct    whereHelperstring
	Currency            whereHelpernull_String
	CostingAmount       whereHelpernull_Float32
	IsMarkedForDeletion whereHelpernull_Bool
}{
	ProductionOrder:     whereHelperint{field: "`data_platform_production_order_item_component_costing_data`.`ProductionOrder`"},
	ProductionOrderItem: whereHelperint{field: "`data_platform_production_order_item_component_costing_data`.`ProductionOrderItem`"},
	Operations:          whereHelperint{field: "`data_platform_production_order_item_component_costing_data`.`Operations`"},
	OperationsItem:      whereHelperint{field: "`data_platform_production_order_item_component_costing_data`.`OperationsItem`"},
	BillOfMaterial:      whereHelperint{field: "`data_platform_production_order_item_component_costing_data`.`BillOfMaterial`"},
	BillOfMaterialItem:  whereHelperint{field: "`data_platform_production_order_item_component_costing_data`.`BillOfMaterialItem`"},
	ComponentProduct:    whereHelperstring{field: "`data_platform_production_order_item_component_costing_data`.`ComponentProduct`"},
	Currency:            whereHelpernull_String{field: "`data_platform_production_order_item_component_costing_data`.`Currency`"},
	CostingAmount:       whereHelpernull_Float32{field: "`data_platform_production_order_item_component_costing_data`.`CostingAmount`"},
	IsMarkedForDeletion: whereHelpernull_Bool{field: "`data_platform_production_order_item_component_costing_data`.`IsMarkedForDeletion`"},
}

// DataPlatformProductionOrderItemComponentCostingDatumRels is where relationship names are stored.
var DataPlatformProductionOrderItemComponentCostingDatumRels = struct {
}{}

// dataPlatformProductionOrderItemComponentCostingDatumR is where relationships are stored.
type dataPlatformProductionOrderItemComponentCostingDatumR struct {
}

// NewStruct creates a new relationship struct
func (*dataPlatformProductionOrderItemComponentCostingDatumR) NewStruct() *dataPlatformProductionOrderItemComponentCostingDatumR {
	return &dataPlatformProductionOrderItemComponentCostingDatumR{}
}

// dataPlatformProductionOrderItemComponentCostingDatumL is where Load methods for each relationship are stored.
type dataPlatformProductionOrderItemComponentCostingDatumL struct{}

var (
	dataPlatformProductionOrderItemComponentCostingDatumAllColumns            = []string{"ProductionOrder", "ProductionOrderItem", "Operations", "OperationsItem", "BillOfMaterial", "BillOfMaterialItem", "ComponentProduct", "Currency", "CostingAmount", "IsMarkedForDeletion"}
	dataPlatformProductionOrderItemComponentCostingDatumColumnsWithoutDefault = []string{"ProductionOrder", "ProductionOrderItem", "Operations", "OperationsItem", "BillOfMaterial", "BillOfMaterialItem", "ComponentProduct", "Currency", "CostingAmount", "IsMarkedForDeletion"}
	dataPlatformProductionOrderItemComponentCostingDatumColumnsWithDefault    = []string{}
	dataPlatformProductionOrderItemComponentCostingDatumPrimaryKeyColumns     = []string{"ProductionOrder", "ProductionOrderItem", "Operations", "OperationsItem"}
	dataPlatformProductionOrderItemComponentCostingDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformProductionOrderItemComponentCostingDatumSlice is an alias for a slice of pointers to DataPlatformProductionOrderItemComponentCostingDatum.
	// This should almost always be used instead of []DataPlatformProductionOrderItemComponentCostingDatum.
	DataPlatformProductionOrderItemComponentCostingDatumSlice []*DataPlatformProductionOrderItemComponentCostingDatum

	dataPlatformProductionOrderItemComponentCostingDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformProductionOrderItemComponentCostingDatumType                 = reflect.TypeOf(&DataPlatformProductionOrderItemComponentCostingDatum{})
	dataPlatformProductionOrderItemComponentCostingDatumMapping              = queries.MakeStructMapping(dataPlatformProductionOrderItemComponentCostingDatumType)
	dataPlatformProductionOrderItemComponentCostingDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformProductionOrderItemComponentCostingDatumType, dataPlatformProductionOrderItemComponentCostingDatumMapping, dataPlatformProductionOrderItemComponentCostingDatumPrimaryKeyColumns)
	dataPlatformProductionOrderItemComponentCostingDatumInsertCacheMut       sync.RWMutex
	dataPlatformProductionOrderItemComponentCostingDatumInsertCache          = make(map[string]insertCache)
	dataPlatformProductionOrderItemComponentCostingDatumUpdateCacheMut       sync.RWMutex
	dataPlatformProductionOrderItemComponentCostingDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformProductionOrderItemComponentCostingDatumUpsertCacheMut       sync.RWMutex
	dataPlatformProductionOrderItemComponentCostingDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformProductionOrderItemComponentCostingDatum record from the query.
func (q dataPlatformProductionOrderItemComponentCostingDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformProductionOrderItemComponentCostingDatum, error) {
	o := &DataPlatformProductionOrderItemComponentCostingDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_production_order_item_component_costing_data")
	}

	return o, nil
}

// All returns all DataPlatformProductionOrderItemComponentCostingDatum records from the query.
func (q dataPlatformProductionOrderItemComponentCostingDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformProductionOrderItemComponentCostingDatumSlice, error) {
	var o []*DataPlatformProductionOrderItemComponentCostingDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformProductionOrderItemComponentCostingDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformProductionOrderItemComponentCostingDatum records in the query.
func (q dataPlatformProductionOrderItemComponentCostingDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_production_order_item_component_costing_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformProductionOrderItemComponentCostingDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_production_order_item_component_costing_data exists")
	}

	return count > 0, nil
}

// DataPlatformProductionOrderItemComponentCostingData retrieves all the records using an executor.
func DataPlatformProductionOrderItemComponentCostingData(mods ...qm.QueryMod) dataPlatformProductionOrderItemComponentCostingDatumQuery {
	mods = append(mods, qm.From("`data_platform_production_order_item_component_costing_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_production_order_item_component_costing_data`.*"})
	}

	return dataPlatformProductionOrderItemComponentCostingDatumQuery{q}
}

// FindDataPlatformProductionOrderItemComponentCostingDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformProductionOrderItemComponentCostingDatum(ctx context.Context, exec boil.ContextExecutor, productionOrder int, productionOrderItem int, operations int, operationsItem int, selectCols ...string) (*DataPlatformProductionOrderItemComponentCostingDatum, error) {
	dataPlatformProductionOrderItemComponentCostingDatumObj := &DataPlatformProductionOrderItemComponentCostingDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_production_order_item_component_costing_data` where `ProductionOrder`=? AND `ProductionOrderItem`=? AND `Operations`=? AND `OperationsItem`=?", sel,
	)

	q := queries.Raw(query, productionOrder, productionOrderItem, operations, operationsItem)

	err := q.Bind(ctx, exec, dataPlatformProductionOrderItemComponentCostingDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_production_order_item_component_costing_data")
	}

	return dataPlatformProductionOrderItemComponentCostingDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformProductionOrderItemComponentCostingDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_production_order_item_component_costing_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductionOrderItemComponentCostingDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformProductionOrderItemComponentCostingDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformProductionOrderItemComponentCostingDatumInsertCache[key]
	dataPlatformProductionOrderItemComponentCostingDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformProductionOrderItemComponentCostingDatumAllColumns,
			dataPlatformProductionOrderItemComponentCostingDatumColumnsWithDefault,
			dataPlatformProductionOrderItemComponentCostingDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionOrderItemComponentCostingDatumType, dataPlatformProductionOrderItemComponentCostingDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformProductionOrderItemComponentCostingDatumType, dataPlatformProductionOrderItemComponentCostingDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_production_order_item_component_costing_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_production_order_item_component_costing_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_production_order_item_component_costing_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemComponentCostingDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_production_order_item_component_costing_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ProductionOrder,
		o.ProductionOrderItem,
		o.Operations,
		o.OperationsItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_production_order_item_component_costing_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductionOrderItemComponentCostingDatumInsertCacheMut.Lock()
		dataPlatformProductionOrderItemComponentCostingDatumInsertCache[key] = cache
		dataPlatformProductionOrderItemComponentCostingDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformProductionOrderItemComponentCostingDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformProductionOrderItemComponentCostingDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformProductionOrderItemComponentCostingDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformProductionOrderItemComponentCostingDatumUpdateCache[key]
	dataPlatformProductionOrderItemComponentCostingDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformProductionOrderItemComponentCostingDatumAllColumns,
			dataPlatformProductionOrderItemComponentCostingDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_production_order_item_component_costing_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_production_order_item_component_costing_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemComponentCostingDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionOrderItemComponentCostingDatumType, dataPlatformProductionOrderItemComponentCostingDatumMapping, append(wl, dataPlatformProductionOrderItemComponentCostingDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_production_order_item_component_costing_data row")
	}

	if !cached {
		dataPlatformProductionOrderItemComponentCostingDatumUpdateCacheMut.Lock()
		dataPlatformProductionOrderItemComponentCostingDatumUpdateCache[key] = cache
		dataPlatformProductionOrderItemComponentCostingDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformProductionOrderItemComponentCostingDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_production_order_item_component_costing_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformProductionOrderItemComponentCostingDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionOrderItemComponentCostingDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_production_order_item_component_costing_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionOrderItemComponentCostingDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformProductionOrderItemComponentCostingDatum slice")
	}

	return nil
}

var mySQLDataPlatformProductionOrderItemComponentCostingDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformProductionOrderItemComponentCostingDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_production_order_item_component_costing_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductionOrderItemComponentCostingDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformProductionOrderItemComponentCostingDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformProductionOrderItemComponentCostingDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformProductionOrderItemComponentCostingDatumUpsertCache[key]
	dataPlatformProductionOrderItemComponentCostingDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformProductionOrderItemComponentCostingDatumAllColumns,
			dataPlatformProductionOrderItemComponentCostingDatumColumnsWithDefault,
			dataPlatformProductionOrderItemComponentCostingDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformProductionOrderItemComponentCostingDatumAllColumns,
			dataPlatformProductionOrderItemComponentCostingDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_production_order_item_component_costing_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_production_order_item_component_costing_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_production_order_item_component_costing_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionOrderItemComponentCostingDatumType, dataPlatformProductionOrderItemComponentCostingDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformProductionOrderItemComponentCostingDatumType, dataPlatformProductionOrderItemComponentCostingDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_production_order_item_component_costing_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformProductionOrderItemComponentCostingDatumType, dataPlatformProductionOrderItemComponentCostingDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_production_order_item_component_costing_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_production_order_item_component_costing_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductionOrderItemComponentCostingDatumUpsertCacheMut.Lock()
		dataPlatformProductionOrderItemComponentCostingDatumUpsertCache[key] = cache
		dataPlatformProductionOrderItemComponentCostingDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformProductionOrderItemComponentCostingDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformProductionOrderItemComponentCostingDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformProductionOrderItemComponentCostingDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformProductionOrderItemComponentCostingDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_production_order_item_component_costing_data` WHERE `ProductionOrder`=? AND `ProductionOrderItem`=? AND `Operations`=? AND `OperationsItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_production_order_item_component_costing_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformProductionOrderItemComponentCostingDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformProductionOrderItemComponentCostingDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_production_order_item_component_costing_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformProductionOrderItemComponentCostingDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionOrderItemComponentCostingDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_production_order_item_component_costing_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionOrderItemComponentCostingDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformProductionOrderItemComponentCostingDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformProductionOrderItemComponentCostingDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformProductionOrderItemComponentCostingDatum(ctx, exec, o.ProductionOrder, o.ProductionOrderItem, o.Operations, o.OperationsItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformProductionOrderItemComponentCostingDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformProductionOrderItemComponentCostingDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionOrderItemComponentCostingDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_production_order_item_component_costing_data`.* FROM `data_platform_production_order_item_component_costing_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionOrderItemComponentCostingDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformProductionOrderItemComponentCostingDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformProductionOrderItemComponentCostingDatumExists checks if the DataPlatformProductionOrderItemComponentCostingDatum row exists.
func DataPlatformProductionOrderItemComponentCostingDatumExists(ctx context.Context, exec boil.ContextExecutor, productionOrder int, productionOrderItem int, operations int, operationsItem int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_production_order_item_component_costing_data` where `ProductionOrder`=? AND `ProductionOrderItem`=? AND `Operations`=? AND `OperationsItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, productionOrder, productionOrderItem, operations, operationsItem)
	}
	row := exec.QueryRowContext(ctx, sql, productionOrder, productionOrderItem, operations, operationsItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_production_order_item_component_costing_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformProductionOrderItemComponentCostingDatum row exists.
func (o *DataPlatformProductionOrderItemComponentCostingDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformProductionOrderItemComponentCostingDatumExists(ctx, exec, o.ProductionOrder, o.ProductionOrderItem, o.Operations, o.OperationsItem)
}
