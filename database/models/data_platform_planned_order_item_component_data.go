// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformPlannedOrderItemComponentDatum is an object representing the database table.
type DataPlatformPlannedOrderItemComponentDatum struct {
	PlannedOrder                                  int          `boil:"PlannedOrder" json:"PlannedOrder" toml:"PlannedOrder" yaml:"PlannedOrder"`
	PlannedOrderItem                              int          `boil:"PlannedOrderItem" json:"PlannedOrderItem" toml:"PlannedOrderItem" yaml:"PlannedOrderItem"`
	BillOfMaterial                                int          `boil:"BillOfMaterial" json:"BillOfMaterial" toml:"BillOfMaterial" yaml:"BillOfMaterial"`
	BillOfMaterialItem                            int          `boil:"BillOfMaterialItem" json:"BillOfMaterialItem" toml:"BillOfMaterialItem" yaml:"BillOfMaterialItem"`
	SupplyChainRelationshipID                     int          `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipDeliveryID             int          `boil:"SupplyChainRelationshipDeliveryID" json:"SupplyChainRelationshipDeliveryID" toml:"SupplyChainRelationshipDeliveryID" yaml:"SupplyChainRelationshipDeliveryID"`
	SupplyChainRelationshipDeliveryPlantID        int          `boil:"SupplyChainRelationshipDeliveryPlantID" json:"SupplyChainRelationshipDeliveryPlantID" toml:"SupplyChainRelationshipDeliveryPlantID" yaml:"SupplyChainRelationshipDeliveryPlantID"`
	SupplyChainRelationshipStockConfPlantID       int          `boil:"SupplyChainRelationshipStockConfPlantID" json:"SupplyChainRelationshipStockConfPlantID" toml:"SupplyChainRelationshipStockConfPlantID" yaml:"SupplyChainRelationshipStockConfPlantID"`
	ProductionPlantBusinessPartner                int          `boil:"ProductionPlantBusinessPartner" json:"ProductionPlantBusinessPartner" toml:"ProductionPlantBusinessPartner" yaml:"ProductionPlantBusinessPartner"`
	ProductionPlant                               string       `boil:"ProductionPlant" json:"ProductionPlant" toml:"ProductionPlant" yaml:"ProductionPlant"`
	ComponentProduct                              string       `boil:"ComponentProduct" json:"ComponentProduct" toml:"ComponentProduct" yaml:"ComponentProduct"`
	ComponentProductBuyer                         int          `boil:"ComponentProductBuyer" json:"ComponentProductBuyer" toml:"ComponentProductBuyer" yaml:"ComponentProductBuyer"`
	ComponentProductSeller                        int          `boil:"ComponentProductSeller" json:"ComponentProductSeller" toml:"ComponentProductSeller" yaml:"ComponentProductSeller"`
	ComponentProductDeliverToParty                int          `boil:"ComponentProductDeliverToParty" json:"ComponentProductDeliverToParty" toml:"ComponentProductDeliverToParty" yaml:"ComponentProductDeliverToParty"`
	ComponentProductDeliverToPlant                string       `boil:"ComponentProductDeliverToPlant" json:"ComponentProductDeliverToPlant" toml:"ComponentProductDeliverToPlant" yaml:"ComponentProductDeliverToPlant"`
	ComponentProductDeliverFromParty              int          `boil:"ComponentProductDeliverFromParty" json:"ComponentProductDeliverFromParty" toml:"ComponentProductDeliverFromParty" yaml:"ComponentProductDeliverFromParty"`
	ComponentProductDeliverFromPlant              string       `boil:"ComponentProductDeliverFromPlant" json:"ComponentProductDeliverFromPlant" toml:"ComponentProductDeliverFromPlant" yaml:"ComponentProductDeliverFromPlant"`
	ComponentProductRequirementDate               string       `boil:"ComponentProductRequirementDate" json:"ComponentProductRequirementDate" toml:"ComponentProductRequirementDate" yaml:"ComponentProductRequirementDate"`
	ComponentProductRequirementTime               string       `boil:"ComponentProductRequirementTime" json:"ComponentProductRequirementTime" toml:"ComponentProductRequirementTime" yaml:"ComponentProductRequirementTime"`
	ComponentProductPlannedQuantityInBaseUnit     float32      `boil:"ComponentProductPlannedQuantityInBaseUnit" json:"ComponentProductPlannedQuantityInBaseUnit" toml:"ComponentProductPlannedQuantityInBaseUnit" yaml:"ComponentProductPlannedQuantityInBaseUnit"`
	ComponentProductPlannedQuantityInDeliveryUnit float32      `boil:"ComponentProductPlannedQuantityInDeliveryUnit" json:"ComponentProductPlannedQuantityInDeliveryUnit" toml:"ComponentProductPlannedQuantityInDeliveryUnit" yaml:"ComponentProductPlannedQuantityInDeliveryUnit"`
	ComponentProductPlannedScrapInPercent         null.Float32 `boil:"ComponentProductPlannedScrapInPercent" json:"ComponentProductPlannedScrapInPercent,omitempty" toml:"ComponentProductPlannedScrapInPercent" yaml:"ComponentProductPlannedScrapInPercent,omitempty"`
	ComponentProductBaseUnit                      string       `boil:"ComponentProductBaseUnit" json:"ComponentProductBaseUnit" toml:"ComponentProductBaseUnit" yaml:"ComponentProductBaseUnit"`
	ComponentProductDeliveryUnit                  string       `boil:"ComponentProductDeliveryUnit" json:"ComponentProductDeliveryUnit" toml:"ComponentProductDeliveryUnit" yaml:"ComponentProductDeliveryUnit"`
	ComponentProductIsMarkedForBackflush          null.Bool    `boil:"ComponentProductIsMarkedForBackflush" json:"ComponentProductIsMarkedForBackflush,omitempty" toml:"ComponentProductIsMarkedForBackflush" yaml:"ComponentProductIsMarkedForBackflush,omitempty"`
	BillOfMaterialItemText                        null.String  `boil:"BillOfMaterialItemText" json:"BillOfMaterialItemText,omitempty" toml:"BillOfMaterialItemText" yaml:"BillOfMaterialItemText,omitempty"`
	StockConfirmationBusinessPartner              int          `boil:"StockConfirmationBusinessPartner" json:"StockConfirmationBusinessPartner" toml:"StockConfirmationBusinessPartner" yaml:"StockConfirmationBusinessPartner"`
	StockConfirmationPlant                        string       `boil:"StockConfirmationPlant" json:"StockConfirmationPlant" toml:"StockConfirmationPlant" yaml:"StockConfirmationPlant"`
	StockConfirmationPlantStorageLocation         null.String  `boil:"StockConfirmationPlantStorageLocation" json:"StockConfirmationPlantStorageLocation,omitempty" toml:"StockConfirmationPlantStorageLocation" yaml:"StockConfirmationPlantStorageLocation,omitempty"`
	MRPArea                                       null.String  `boil:"MRPArea" json:"MRPArea,omitempty" toml:"MRPArea" yaml:"MRPArea,omitempty"`
	MRPController                                 null.String  `boil:"MRPController" json:"MRPController,omitempty" toml:"MRPController" yaml:"MRPController,omitempty"`
	ProductionVersion                             null.Int     `boil:"ProductionVersion" json:"ProductionVersion,omitempty" toml:"ProductionVersion" yaml:"ProductionVersion,omitempty"`
	ProductionVersionItem                         null.Int     `boil:"ProductionVersionItem" json:"ProductionVersionItem,omitempty" toml:"ProductionVersionItem" yaml:"ProductionVersionItem,omitempty"`
	PlannedOrderIsReleased                        null.Bool    `boil:"PlannedOrderIsReleased" json:"PlannedOrderIsReleased,omitempty" toml:"PlannedOrderIsReleased" yaml:"PlannedOrderIsReleased,omitempty"`
	CreationDate                                  null.String  `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	CreationTime                                  null.String  `boil:"CreationTime" json:"CreationTime,omitempty" toml:"CreationTime" yaml:"CreationTime,omitempty"`
	LastChangeDate                                null.String  `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	LastChangeTime                                null.String  `boil:"LastChangeTime" json:"LastChangeTime,omitempty" toml:"LastChangeTime" yaml:"LastChangeTime,omitempty"`
	IsMarkedForDeletion                           null.Bool    `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformPlannedOrderItemComponentDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformPlannedOrderItemComponentDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformPlannedOrderItemComponentDatumColumns = struct {
	PlannedOrder                                  string
	PlannedOrderItem                              string
	BillOfMaterial                                string
	BillOfMaterialItem                            string
	SupplyChainRelationshipID                     string
	SupplyChainRelationshipDeliveryID             string
	SupplyChainRelationshipDeliveryPlantID        string
	SupplyChainRelationshipStockConfPlantID       string
	ProductionPlantBusinessPartner                string
	ProductionPlant                               string
	ComponentProduct                              string
	ComponentProductBuyer                         string
	ComponentProductSeller                        string
	ComponentProductDeliverToParty                string
	ComponentProductDeliverToPlant                string
	ComponentProductDeliverFromParty              string
	ComponentProductDeliverFromPlant              string
	ComponentProductRequirementDate               string
	ComponentProductRequirementTime               string
	ComponentProductPlannedQuantityInBaseUnit     string
	ComponentProductPlannedQuantityInDeliveryUnit string
	ComponentProductPlannedScrapInPercent         string
	ComponentProductBaseUnit                      string
	ComponentProductDeliveryUnit                  string
	ComponentProductIsMarkedForBackflush          string
	BillOfMaterialItemText                        string
	StockConfirmationBusinessPartner              string
	StockConfirmationPlant                        string
	StockConfirmationPlantStorageLocation         string
	MRPArea                                       string
	MRPController                                 string
	ProductionVersion                             string
	ProductionVersionItem                         string
	PlannedOrderIsReleased                        string
	CreationDate                                  string
	CreationTime                                  string
	LastChangeDate                                string
	LastChangeTime                                string
	IsMarkedForDeletion                           string
}{
	PlannedOrder:                                  "PlannedOrder",
	PlannedOrderItem:                              "PlannedOrderItem",
	BillOfMaterial:                                "BillOfMaterial",
	BillOfMaterialItem:                            "BillOfMaterialItem",
	SupplyChainRelationshipID:                     "SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:             "SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:        "SupplyChainRelationshipDeliveryPlantID",
	SupplyChainRelationshipStockConfPlantID:       "SupplyChainRelationshipStockConfPlantID",
	ProductionPlantBusinessPartner:                "ProductionPlantBusinessPartner",
	ProductionPlant:                               "ProductionPlant",
	ComponentProduct:                              "ComponentProduct",
	ComponentProductBuyer:                         "ComponentProductBuyer",
	ComponentProductSeller:                        "ComponentProductSeller",
	ComponentProductDeliverToParty:                "ComponentProductDeliverToParty",
	ComponentProductDeliverToPlant:                "ComponentProductDeliverToPlant",
	ComponentProductDeliverFromParty:              "ComponentProductDeliverFromParty",
	ComponentProductDeliverFromPlant:              "ComponentProductDeliverFromPlant",
	ComponentProductRequirementDate:               "ComponentProductRequirementDate",
	ComponentProductRequirementTime:               "ComponentProductRequirementTime",
	ComponentProductPlannedQuantityInBaseUnit:     "ComponentProductPlannedQuantityInBaseUnit",
	ComponentProductPlannedQuantityInDeliveryUnit: "ComponentProductPlannedQuantityInDeliveryUnit",
	ComponentProductPlannedScrapInPercent:         "ComponentProductPlannedScrapInPercent",
	ComponentProductBaseUnit:                      "ComponentProductBaseUnit",
	ComponentProductDeliveryUnit:                  "ComponentProductDeliveryUnit",
	ComponentProductIsMarkedForBackflush:          "ComponentProductIsMarkedForBackflush",
	BillOfMaterialItemText:                        "BillOfMaterialItemText",
	StockConfirmationBusinessPartner:              "StockConfirmationBusinessPartner",
	StockConfirmationPlant:                        "StockConfirmationPlant",
	StockConfirmationPlantStorageLocation:         "StockConfirmationPlantStorageLocation",
	MRPArea:                                       "MRPArea",
	MRPController:                                 "MRPController",
	ProductionVersion:                             "ProductionVersion",
	ProductionVersionItem:                         "ProductionVersionItem",
	PlannedOrderIsReleased:                        "PlannedOrderIsReleased",
	CreationDate:                                  "CreationDate",
	CreationTime:                                  "CreationTime",
	LastChangeDate:                                "LastChangeDate",
	LastChangeTime:                                "LastChangeTime",
	IsMarkedForDeletion:                           "IsMarkedForDeletion",
}

var DataPlatformPlannedOrderItemComponentDatumTableColumns = struct {
	PlannedOrder                                  string
	PlannedOrderItem                              string
	BillOfMaterial                                string
	BillOfMaterialItem                            string
	SupplyChainRelationshipID                     string
	SupplyChainRelationshipDeliveryID             string
	SupplyChainRelationshipDeliveryPlantID        string
	SupplyChainRelationshipStockConfPlantID       string
	ProductionPlantBusinessPartner                string
	ProductionPlant                               string
	ComponentProduct                              string
	ComponentProductBuyer                         string
	ComponentProductSeller                        string
	ComponentProductDeliverToParty                string
	ComponentProductDeliverToPlant                string
	ComponentProductDeliverFromParty              string
	ComponentProductDeliverFromPlant              string
	ComponentProductRequirementDate               string
	ComponentProductRequirementTime               string
	ComponentProductPlannedQuantityInBaseUnit     string
	ComponentProductPlannedQuantityInDeliveryUnit string
	ComponentProductPlannedScrapInPercent         string
	ComponentProductBaseUnit                      string
	ComponentProductDeliveryUnit                  string
	ComponentProductIsMarkedForBackflush          string
	BillOfMaterialItemText                        string
	StockConfirmationBusinessPartner              string
	StockConfirmationPlant                        string
	StockConfirmationPlantStorageLocation         string
	MRPArea                                       string
	MRPController                                 string
	ProductionVersion                             string
	ProductionVersionItem                         string
	PlannedOrderIsReleased                        string
	CreationDate                                  string
	CreationTime                                  string
	LastChangeDate                                string
	LastChangeTime                                string
	IsMarkedForDeletion                           string
}{
	PlannedOrder:                                  "data_platform_planned_order_item_component_data.PlannedOrder",
	PlannedOrderItem:                              "data_platform_planned_order_item_component_data.PlannedOrderItem",
	BillOfMaterial:                                "data_platform_planned_order_item_component_data.BillOfMaterial",
	BillOfMaterialItem:                            "data_platform_planned_order_item_component_data.BillOfMaterialItem",
	SupplyChainRelationshipID:                     "data_platform_planned_order_item_component_data.SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:             "data_platform_planned_order_item_component_data.SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:        "data_platform_planned_order_item_component_data.SupplyChainRelationshipDeliveryPlantID",
	SupplyChainRelationshipStockConfPlantID:       "data_platform_planned_order_item_component_data.SupplyChainRelationshipStockConfPlantID",
	ProductionPlantBusinessPartner:                "data_platform_planned_order_item_component_data.ProductionPlantBusinessPartner",
	ProductionPlant:                               "data_platform_planned_order_item_component_data.ProductionPlant",
	ComponentProduct:                              "data_platform_planned_order_item_component_data.ComponentProduct",
	ComponentProductBuyer:                         "data_platform_planned_order_item_component_data.ComponentProductBuyer",
	ComponentProductSeller:                        "data_platform_planned_order_item_component_data.ComponentProductSeller",
	ComponentProductDeliverToParty:                "data_platform_planned_order_item_component_data.ComponentProductDeliverToParty",
	ComponentProductDeliverToPlant:                "data_platform_planned_order_item_component_data.ComponentProductDeliverToPlant",
	ComponentProductDeliverFromParty:              "data_platform_planned_order_item_component_data.ComponentProductDeliverFromParty",
	ComponentProductDeliverFromPlant:              "data_platform_planned_order_item_component_data.ComponentProductDeliverFromPlant",
	ComponentProductRequirementDate:               "data_platform_planned_order_item_component_data.ComponentProductRequirementDate",
	ComponentProductRequirementTime:               "data_platform_planned_order_item_component_data.ComponentProductRequirementTime",
	ComponentProductPlannedQuantityInBaseUnit:     "data_platform_planned_order_item_component_data.ComponentProductPlannedQuantityInBaseUnit",
	ComponentProductPlannedQuantityInDeliveryUnit: "data_platform_planned_order_item_component_data.ComponentProductPlannedQuantityInDeliveryUnit",
	ComponentProductPlannedScrapInPercent:         "data_platform_planned_order_item_component_data.ComponentProductPlannedScrapInPercent",
	ComponentProductBaseUnit:                      "data_platform_planned_order_item_component_data.ComponentProductBaseUnit",
	ComponentProductDeliveryUnit:                  "data_platform_planned_order_item_component_data.ComponentProductDeliveryUnit",
	ComponentProductIsMarkedForBackflush:          "data_platform_planned_order_item_component_data.ComponentProductIsMarkedForBackflush",
	BillOfMaterialItemText:                        "data_platform_planned_order_item_component_data.BillOfMaterialItemText",
	StockConfirmationBusinessPartner:              "data_platform_planned_order_item_component_data.StockConfirmationBusinessPartner",
	StockConfirmationPlant:                        "data_platform_planned_order_item_component_data.StockConfirmationPlant",
	StockConfirmationPlantStorageLocation:         "data_platform_planned_order_item_component_data.StockConfirmationPlantStorageLocation",
	MRPArea:                                       "data_platform_planned_order_item_component_data.MRPArea",
	MRPController:                                 "data_platform_planned_order_item_component_data.MRPController",
	ProductionVersion:                             "data_platform_planned_order_item_component_data.ProductionVersion",
	ProductionVersionItem:                         "data_platform_planned_order_item_component_data.ProductionVersionItem",
	PlannedOrderIsReleased:                        "data_platform_planned_order_item_component_data.PlannedOrderIsReleased",
	CreationDate:                                  "data_platform_planned_order_item_component_data.CreationDate",
	CreationTime:                                  "data_platform_planned_order_item_component_data.CreationTime",
	LastChangeDate:                                "data_platform_planned_order_item_component_data.LastChangeDate",
	LastChangeTime:                                "data_platform_planned_order_item_component_data.LastChangeTime",
	IsMarkedForDeletion:                           "data_platform_planned_order_item_component_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformPlannedOrderItemComponentDatumWhere = struct {
	PlannedOrder                                  whereHelperint
	PlannedOrderItem                              whereHelperint
	BillOfMaterial                                whereHelperint
	BillOfMaterialItem                            whereHelperint
	SupplyChainRelationshipID                     whereHelperint
	SupplyChainRelationshipDeliveryID             whereHelperint
	SupplyChainRelationshipDeliveryPlantID        whereHelperint
	SupplyChainRelationshipStockConfPlantID       whereHelperint
	ProductionPlantBusinessPartner                whereHelperint
	ProductionPlant                               whereHelperstring
	ComponentProduct                              whereHelperstring
	ComponentProductBuyer                         whereHelperint
	ComponentProductSeller                        whereHelperint
	ComponentProductDeliverToParty                whereHelperint
	ComponentProductDeliverToPlant                whereHelperstring
	ComponentProductDeliverFromParty              whereHelperint
	ComponentProductDeliverFromPlant              whereHelperstring
	ComponentProductRequirementDate               whereHelperstring
	ComponentProductRequirementTime               whereHelperstring
	ComponentProductPlannedQuantityInBaseUnit     whereHelperfloat32
	ComponentProductPlannedQuantityInDeliveryUnit whereHelperfloat32
	ComponentProductPlannedScrapInPercent         whereHelpernull_Float32
	ComponentProductBaseUnit                      whereHelperstring
	ComponentProductDeliveryUnit                  whereHelperstring
	ComponentProductIsMarkedForBackflush          whereHelpernull_Bool
	BillOfMaterialItemText                        whereHelpernull_String
	StockConfirmationBusinessPartner              whereHelperint
	StockConfirmationPlant                        whereHelperstring
	StockConfirmationPlantStorageLocation         whereHelpernull_String
	MRPArea                                       whereHelpernull_String
	MRPController                                 whereHelpernull_String
	ProductionVersion                             whereHelpernull_Int
	ProductionVersionItem                         whereHelpernull_Int
	PlannedOrderIsReleased                        whereHelpernull_Bool
	CreationDate                                  whereHelpernull_String
	CreationTime                                  whereHelpernull_String
	LastChangeDate                                whereHelpernull_String
	LastChangeTime                                whereHelpernull_String
	IsMarkedForDeletion                           whereHelpernull_Bool
}{
	PlannedOrder:                                  whereHelperint{field: "`data_platform_planned_order_item_component_data`.`PlannedOrder`"},
	PlannedOrderItem:                              whereHelperint{field: "`data_platform_planned_order_item_component_data`.`PlannedOrderItem`"},
	BillOfMaterial:                                whereHelperint{field: "`data_platform_planned_order_item_component_data`.`BillOfMaterial`"},
	BillOfMaterialItem:                            whereHelperint{field: "`data_platform_planned_order_item_component_data`.`BillOfMaterialItem`"},
	SupplyChainRelationshipID:                     whereHelperint{field: "`data_platform_planned_order_item_component_data`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipDeliveryID:             whereHelperint{field: "`data_platform_planned_order_item_component_data`.`SupplyChainRelationshipDeliveryID`"},
	SupplyChainRelationshipDeliveryPlantID:        whereHelperint{field: "`data_platform_planned_order_item_component_data`.`SupplyChainRelationshipDeliveryPlantID`"},
	SupplyChainRelationshipStockConfPlantID:       whereHelperint{field: "`data_platform_planned_order_item_component_data`.`SupplyChainRelationshipStockConfPlantID`"},
	ProductionPlantBusinessPartner:                whereHelperint{field: "`data_platform_planned_order_item_component_data`.`ProductionPlantBusinessPartner`"},
	ProductionPlant:                               whereHelperstring{field: "`data_platform_planned_order_item_component_data`.`ProductionPlant`"},
	ComponentProduct:                              whereHelperstring{field: "`data_platform_planned_order_item_component_data`.`ComponentProduct`"},
	ComponentProductBuyer:                         whereHelperint{field: "`data_platform_planned_order_item_component_data`.`ComponentProductBuyer`"},
	ComponentProductSeller:                        whereHelperint{field: "`data_platform_planned_order_item_component_data`.`ComponentProductSeller`"},
	ComponentProductDeliverToParty:                whereHelperint{field: "`data_platform_planned_order_item_component_data`.`ComponentProductDeliverToParty`"},
	ComponentProductDeliverToPlant:                whereHelperstring{field: "`data_platform_planned_order_item_component_data`.`ComponentProductDeliverToPlant`"},
	ComponentProductDeliverFromParty:              whereHelperint{field: "`data_platform_planned_order_item_component_data`.`ComponentProductDeliverFromParty`"},
	ComponentProductDeliverFromPlant:              whereHelperstring{field: "`data_platform_planned_order_item_component_data`.`ComponentProductDeliverFromPlant`"},
	ComponentProductRequirementDate:               whereHelperstring{field: "`data_platform_planned_order_item_component_data`.`ComponentProductRequirementDate`"},
	ComponentProductRequirementTime:               whereHelperstring{field: "`data_platform_planned_order_item_component_data`.`ComponentProductRequirementTime`"},
	ComponentProductPlannedQuantityInBaseUnit:     whereHelperfloat32{field: "`data_platform_planned_order_item_component_data`.`ComponentProductPlannedQuantityInBaseUnit`"},
	ComponentProductPlannedQuantityInDeliveryUnit: whereHelperfloat32{field: "`data_platform_planned_order_item_component_data`.`ComponentProductPlannedQuantityInDeliveryUnit`"},
	ComponentProductPlannedScrapInPercent:         whereHelpernull_Float32{field: "`data_platform_planned_order_item_component_data`.`ComponentProductPlannedScrapInPercent`"},
	ComponentProductBaseUnit:                      whereHelperstring{field: "`data_platform_planned_order_item_component_data`.`ComponentProductBaseUnit`"},
	ComponentProductDeliveryUnit:                  whereHelperstring{field: "`data_platform_planned_order_item_component_data`.`ComponentProductDeliveryUnit`"},
	ComponentProductIsMarkedForBackflush:          whereHelpernull_Bool{field: "`data_platform_planned_order_item_component_data`.`ComponentProductIsMarkedForBackflush`"},
	BillOfMaterialItemText:                        whereHelpernull_String{field: "`data_platform_planned_order_item_component_data`.`BillOfMaterialItemText`"},
	StockConfirmationBusinessPartner:              whereHelperint{field: "`data_platform_planned_order_item_component_data`.`StockConfirmationBusinessPartner`"},
	StockConfirmationPlant:                        whereHelperstring{field: "`data_platform_planned_order_item_component_data`.`StockConfirmationPlant`"},
	StockConfirmationPlantStorageLocation:         whereHelpernull_String{field: "`data_platform_planned_order_item_component_data`.`StockConfirmationPlantStorageLocation`"},
	MRPArea:                                       whereHelpernull_String{field: "`data_platform_planned_order_item_component_data`.`MRPArea`"},
	MRPController:                                 whereHelpernull_String{field: "`data_platform_planned_order_item_component_data`.`MRPController`"},
	ProductionVersion:                             whereHelpernull_Int{field: "`data_platform_planned_order_item_component_data`.`ProductionVersion`"},
	ProductionVersionItem:                         whereHelpernull_Int{field: "`data_platform_planned_order_item_component_data`.`ProductionVersionItem`"},
	PlannedOrderIsReleased:                        whereHelpernull_Bool{field: "`data_platform_planned_order_item_component_data`.`PlannedOrderIsReleased`"},
	CreationDate:                                  whereHelpernull_String{field: "`data_platform_planned_order_item_component_data`.`CreationDate`"},
	CreationTime:                                  whereHelpernull_String{field: "`data_platform_planned_order_item_component_data`.`CreationTime`"},
	LastChangeDate:                                whereHelpernull_String{field: "`data_platform_planned_order_item_component_data`.`LastChangeDate`"},
	LastChangeTime:                                whereHelpernull_String{field: "`data_platform_planned_order_item_component_data`.`LastChangeTime`"},
	IsMarkedForDeletion:                           whereHelpernull_Bool{field: "`data_platform_planned_order_item_component_data`.`IsMarkedForDeletion`"},
}

// DataPlatformPlannedOrderItemComponentDatumRels is where relationship names are stored.
var DataPlatformPlannedOrderItemComponentDatumRels = struct {
	BillOfMaterialDataPlatformBillOfMaterialItemDatum                     string
	ComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum     string
	ComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum string
	ProductionVersionDataPlatformProductionVersionItemDatum               string
	ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum             string
	ComponentProductBuyerDataPlatformSCRGeneralDatum                      string
	PlannedOrderDataPlatformPlannedOrderItemDatum                         string
	BillOfMaterialDataPlatformPlannedOrderItemOperationComponentData      string
}{
	BillOfMaterialDataPlatformBillOfMaterialItemDatum:                     "BillOfMaterialDataPlatformBillOfMaterialItemDatum",
	ComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum:     "ComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum",
	ComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum: "ComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum",
	ProductionVersionDataPlatformProductionVersionItemDatum:               "ProductionVersionDataPlatformProductionVersionItemDatum",
	ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum:             "ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum",
	ComponentProductBuyerDataPlatformSCRGeneralDatum:                      "ComponentProductBuyerDataPlatformSCRGeneralDatum",
	PlannedOrderDataPlatformPlannedOrderItemDatum:                         "PlannedOrderDataPlatformPlannedOrderItemDatum",
	BillOfMaterialDataPlatformPlannedOrderItemOperationComponentData:      "BillOfMaterialDataPlatformPlannedOrderItemOperationComponentData",
}

// dataPlatformPlannedOrderItemComponentDatumR is where relationships are stored.
type dataPlatformPlannedOrderItemComponentDatumR struct {
	BillOfMaterialDataPlatformBillOfMaterialItemDatum                     *DataPlatformBillOfMaterialItemDatum                     `boil:"BillOfMaterialDataPlatformBillOfMaterialItemDatum" json:"BillOfMaterialDataPlatformBillOfMaterialItemDatum" toml:"BillOfMaterialDataPlatformBillOfMaterialItemDatum" yaml:"BillOfMaterialDataPlatformBillOfMaterialItemDatum"`
	ComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum     *DataPlatformQuantityUnitQuantityUnitDatum               `boil:"ComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"ComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"ComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"ComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	ComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum *DataPlatformQuantityUnitQuantityUnitDatum               `boil:"ComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"ComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"ComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"ComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	ProductionVersionDataPlatformProductionVersionItemDatum               *DataPlatformProductionVersionItemDatum                  `boil:"ProductionVersionDataPlatformProductionVersionItemDatum" json:"ProductionVersionDataPlatformProductionVersionItemDatum" toml:"ProductionVersionDataPlatformProductionVersionItemDatum" yaml:"ProductionVersionDataPlatformProductionVersionItemDatum"`
	ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum             *DataPlatformSCRDeliveryRelationDatum                    `boil:"ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum" json:"ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum" toml:"ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum" yaml:"ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum"`
	ComponentProductBuyerDataPlatformSCRGeneralDatum                      *DataPlatformSCRGeneralDatum                             `boil:"ComponentProductBuyerDataPlatformSCRGeneralDatum" json:"ComponentProductBuyerDataPlatformSCRGeneralDatum" toml:"ComponentProductBuyerDataPlatformSCRGeneralDatum" yaml:"ComponentProductBuyerDataPlatformSCRGeneralDatum"`
	PlannedOrderDataPlatformPlannedOrderItemDatum                         *DataPlatformPlannedOrderItemDatum                       `boil:"PlannedOrderDataPlatformPlannedOrderItemDatum" json:"PlannedOrderDataPlatformPlannedOrderItemDatum" toml:"PlannedOrderDataPlatformPlannedOrderItemDatum" yaml:"PlannedOrderDataPlatformPlannedOrderItemDatum"`
	BillOfMaterialDataPlatformPlannedOrderItemOperationComponentData      DataPlatformPlannedOrderItemOperationComponentDatumSlice `boil:"BillOfMaterialDataPlatformPlannedOrderItemOperationComponentData" json:"BillOfMaterialDataPlatformPlannedOrderItemOperationComponentData" toml:"BillOfMaterialDataPlatformPlannedOrderItemOperationComponentData" yaml:"BillOfMaterialDataPlatformPlannedOrderItemOperationComponentData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformPlannedOrderItemComponentDatumR) NewStruct() *dataPlatformPlannedOrderItemComponentDatumR {
	return &dataPlatformPlannedOrderItemComponentDatumR{}
}

func (r *dataPlatformPlannedOrderItemComponentDatumR) GetBillOfMaterialDataPlatformBillOfMaterialItemDatum() *DataPlatformBillOfMaterialItemDatum {
	if r == nil {
		return nil
	}
	return r.BillOfMaterialDataPlatformBillOfMaterialItemDatum
}

func (r *dataPlatformPlannedOrderItemComponentDatumR) GetComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.ComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformPlannedOrderItemComponentDatumR) GetComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.ComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformPlannedOrderItemComponentDatumR) GetProductionVersionDataPlatformProductionVersionItemDatum() *DataPlatformProductionVersionItemDatum {
	if r == nil {
		return nil
	}
	return r.ProductionVersionDataPlatformProductionVersionItemDatum
}

func (r *dataPlatformPlannedOrderItemComponentDatumR) GetComponentProductBuyerDataPlatformSCRDeliveryRelationDatum() *DataPlatformSCRDeliveryRelationDatum {
	if r == nil {
		return nil
	}
	return r.ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum
}

func (r *dataPlatformPlannedOrderItemComponentDatumR) GetComponentProductBuyerDataPlatformSCRGeneralDatum() *DataPlatformSCRGeneralDatum {
	if r == nil {
		return nil
	}
	return r.ComponentProductBuyerDataPlatformSCRGeneralDatum
}

func (r *dataPlatformPlannedOrderItemComponentDatumR) GetPlannedOrderDataPlatformPlannedOrderItemDatum() *DataPlatformPlannedOrderItemDatum {
	if r == nil {
		return nil
	}
	return r.PlannedOrderDataPlatformPlannedOrderItemDatum
}

func (r *dataPlatformPlannedOrderItemComponentDatumR) GetBillOfMaterialDataPlatformPlannedOrderItemOperationComponentData() DataPlatformPlannedOrderItemOperationComponentDatumSlice {
	if r == nil {
		return nil
	}
	return r.BillOfMaterialDataPlatformPlannedOrderItemOperationComponentData
}

// dataPlatformPlannedOrderItemComponentDatumL is where Load methods for each relationship are stored.
type dataPlatformPlannedOrderItemComponentDatumL struct{}

var (
	dataPlatformPlannedOrderItemComponentDatumAllColumns            = []string{"PlannedOrder", "PlannedOrderItem", "BillOfMaterial", "BillOfMaterialItem", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "SupplyChainRelationshipStockConfPlantID", "ProductionPlantBusinessPartner", "ProductionPlant", "ComponentProduct", "ComponentProductBuyer", "ComponentProductSeller", "ComponentProductDeliverToParty", "ComponentProductDeliverToPlant", "ComponentProductDeliverFromParty", "ComponentProductDeliverFromPlant", "ComponentProductRequirementDate", "ComponentProductRequirementTime", "ComponentProductPlannedQuantityInBaseUnit", "ComponentProductPlannedQuantityInDeliveryUnit", "ComponentProductPlannedScrapInPercent", "ComponentProductBaseUnit", "ComponentProductDeliveryUnit", "ComponentProductIsMarkedForBackflush", "BillOfMaterialItemText", "StockConfirmationBusinessPartner", "StockConfirmationPlant", "StockConfirmationPlantStorageLocation", "MRPArea", "MRPController", "ProductionVersion", "ProductionVersionItem", "PlannedOrderIsReleased", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsMarkedForDeletion"}
	dataPlatformPlannedOrderItemComponentDatumColumnsWithoutDefault = []string{"PlannedOrder", "PlannedOrderItem", "BillOfMaterial", "BillOfMaterialItem", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "SupplyChainRelationshipStockConfPlantID", "ProductionPlantBusinessPartner", "ProductionPlant", "ComponentProduct", "ComponentProductBuyer", "ComponentProductSeller", "ComponentProductDeliverToParty", "ComponentProductDeliverToPlant", "ComponentProductDeliverFromParty", "ComponentProductDeliverFromPlant", "ComponentProductRequirementDate", "ComponentProductRequirementTime", "ComponentProductPlannedQuantityInBaseUnit", "ComponentProductPlannedQuantityInDeliveryUnit", "ComponentProductPlannedScrapInPercent", "ComponentProductBaseUnit", "ComponentProductDeliveryUnit", "ComponentProductIsMarkedForBackflush", "BillOfMaterialItemText", "StockConfirmationBusinessPartner", "StockConfirmationPlant", "StockConfirmationPlantStorageLocation", "MRPArea", "MRPController", "ProductionVersion", "ProductionVersionItem", "PlannedOrderIsReleased", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsMarkedForDeletion"}
	dataPlatformPlannedOrderItemComponentDatumColumnsWithDefault    = []string{}
	dataPlatformPlannedOrderItemComponentDatumPrimaryKeyColumns     = []string{"PlannedOrder", "PlannedOrderItem", "BillOfMaterial", "BillOfMaterialItem"}
	dataPlatformPlannedOrderItemComponentDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformPlannedOrderItemComponentDatumSlice is an alias for a slice of pointers to DataPlatformPlannedOrderItemComponentDatum.
	// This should almost always be used instead of []DataPlatformPlannedOrderItemComponentDatum.
	DataPlatformPlannedOrderItemComponentDatumSlice []*DataPlatformPlannedOrderItemComponentDatum

	dataPlatformPlannedOrderItemComponentDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformPlannedOrderItemComponentDatumType                 = reflect.TypeOf(&DataPlatformPlannedOrderItemComponentDatum{})
	dataPlatformPlannedOrderItemComponentDatumMapping              = queries.MakeStructMapping(dataPlatformPlannedOrderItemComponentDatumType)
	dataPlatformPlannedOrderItemComponentDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformPlannedOrderItemComponentDatumType, dataPlatformPlannedOrderItemComponentDatumMapping, dataPlatformPlannedOrderItemComponentDatumPrimaryKeyColumns)
	dataPlatformPlannedOrderItemComponentDatumInsertCacheMut       sync.RWMutex
	dataPlatformPlannedOrderItemComponentDatumInsertCache          = make(map[string]insertCache)
	dataPlatformPlannedOrderItemComponentDatumUpdateCacheMut       sync.RWMutex
	dataPlatformPlannedOrderItemComponentDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformPlannedOrderItemComponentDatumUpsertCacheMut       sync.RWMutex
	dataPlatformPlannedOrderItemComponentDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformPlannedOrderItemComponentDatum record from the query.
func (q dataPlatformPlannedOrderItemComponentDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformPlannedOrderItemComponentDatum, error) {
	o := &DataPlatformPlannedOrderItemComponentDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_planned_order_item_component_data")
	}

	return o, nil
}

// All returns all DataPlatformPlannedOrderItemComponentDatum records from the query.
func (q dataPlatformPlannedOrderItemComponentDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformPlannedOrderItemComponentDatumSlice, error) {
	var o []*DataPlatformPlannedOrderItemComponentDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformPlannedOrderItemComponentDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformPlannedOrderItemComponentDatum records in the query.
func (q dataPlatformPlannedOrderItemComponentDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_planned_order_item_component_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformPlannedOrderItemComponentDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_planned_order_item_component_data exists")
	}

	return count > 0, nil
}

// BillOfMaterialDataPlatformBillOfMaterialItemDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemComponentDatum) BillOfMaterialDataPlatformBillOfMaterialItemDatum(mods ...qm.QueryMod) dataPlatformBillOfMaterialItemDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BillOfMaterial` = ?", o.BillOfMaterial),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBillOfMaterialItemData(queryMods...)
}

// ComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemComponentDatum) ComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.ComponentProductBaseUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// ComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemComponentDatum) ComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.ComponentProductDeliveryUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// ProductionVersionDataPlatformProductionVersionItemDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemComponentDatum) ProductionVersionDataPlatformProductionVersionItemDatum(mods ...qm.QueryMod) dataPlatformProductionVersionItemDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ProductionVersion` = ?", o.ProductionVersion),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformProductionVersionItemData(queryMods...)
}

// ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemComponentDatum) ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum(mods ...qm.QueryMod) dataPlatformSCRDeliveryRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.ComponentProductBuyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRDeliveryRelationData(queryMods...)
}

// ComponentProductBuyerDataPlatformSCRGeneralDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemComponentDatum) ComponentProductBuyerDataPlatformSCRGeneralDatum(mods ...qm.QueryMod) dataPlatformSCRGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.ComponentProductBuyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRGeneralData(queryMods...)
}

// PlannedOrderDataPlatformPlannedOrderItemDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemComponentDatum) PlannedOrderDataPlatformPlannedOrderItemDatum(mods ...qm.QueryMod) dataPlatformPlannedOrderItemDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PlannedOrder` = ?", o.PlannedOrder),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPlannedOrderItemData(queryMods...)
}

// BillOfMaterialDataPlatformPlannedOrderItemOperationComponentData retrieves all the data_platform_planned_order_item_operation_component_datum's DataPlatformPlannedOrderItemOperationComponentData with an executor via BillOfMaterial column.
func (o *DataPlatformPlannedOrderItemComponentDatum) BillOfMaterialDataPlatformPlannedOrderItemOperationComponentData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemOperationComponentDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_operation_component_data`.`BillOfMaterial`=?", o.BillOfMaterial),
	)

	return DataPlatformPlannedOrderItemOperationComponentData(queryMods...)
}

// LoadBillOfMaterialDataPlatformBillOfMaterialItemDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemComponentDatumL) LoadBillOfMaterialDataPlatformBillOfMaterialItemDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemComponentDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemComponentDatum
	var object *DataPlatformPlannedOrderItemComponentDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemComponentDatum.(*DataPlatformPlannedOrderItemComponentDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemComponentDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemComponentDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemComponentDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemComponentDatum.(*[]*DataPlatformPlannedOrderItemComponentDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemComponentDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemComponentDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemComponentDatumR{}
		}
		args = append(args, object.BillOfMaterial)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemComponentDatumR{}
			}

			for _, a := range args {
				if a == obj.BillOfMaterial {
					continue Outer
				}
			}

			args = append(args, obj.BillOfMaterial)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_bill_of_material_item_data`),
		qm.WhereIn(`data_platform_bill_of_material_item_data.BillOfMaterial in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBillOfMaterialItemDatum")
	}

	var resultSlice []*DataPlatformBillOfMaterialItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBillOfMaterialItemDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_bill_of_material_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_bill_of_material_item_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillOfMaterialDataPlatformBillOfMaterialItemDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BillOfMaterial == foreign.BillOfMaterial {
				local.R.BillOfMaterialDataPlatformBillOfMaterialItemDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemComponentDatumL) LoadComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemComponentDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemComponentDatum
	var object *DataPlatformPlannedOrderItemComponentDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemComponentDatum.(*DataPlatformPlannedOrderItemComponentDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemComponentDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemComponentDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemComponentDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemComponentDatum.(*[]*DataPlatformPlannedOrderItemComponentDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemComponentDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemComponentDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemComponentDatumR{}
		}
		args = append(args, object.ComponentProductBaseUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemComponentDatumR{}
			}

			for _, a := range args {
				if a == obj.ComponentProductBaseUnit {
					continue Outer
				}
			}

			args = append(args, obj.ComponentProductBaseUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ComponentProductBaseUnit == foreign.QuantityUnit {
				local.R.ComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemComponentDatumL) LoadComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemComponentDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemComponentDatum
	var object *DataPlatformPlannedOrderItemComponentDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemComponentDatum.(*DataPlatformPlannedOrderItemComponentDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemComponentDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemComponentDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemComponentDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemComponentDatum.(*[]*DataPlatformPlannedOrderItemComponentDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemComponentDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemComponentDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemComponentDatumR{}
		}
		args = append(args, object.ComponentProductDeliveryUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemComponentDatumR{}
			}

			for _, a := range args {
				if a == obj.ComponentProductDeliveryUnit {
					continue Outer
				}
			}

			args = append(args, obj.ComponentProductDeliveryUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ComponentProductDeliveryUnit == foreign.QuantityUnit {
				local.R.ComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductionVersionDataPlatformProductionVersionItemDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemComponentDatumL) LoadProductionVersionDataPlatformProductionVersionItemDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemComponentDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemComponentDatum
	var object *DataPlatformPlannedOrderItemComponentDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemComponentDatum.(*DataPlatformPlannedOrderItemComponentDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemComponentDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemComponentDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemComponentDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemComponentDatum.(*[]*DataPlatformPlannedOrderItemComponentDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemComponentDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemComponentDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemComponentDatumR{}
		}
		if !queries.IsNil(object.ProductionVersion) {
			args = append(args, object.ProductionVersion)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemComponentDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductionVersion) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProductionVersion) {
				args = append(args, obj.ProductionVersion)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_version_item_data`),
		qm.WhereIn(`data_platform_production_version_item_data.ProductionVersion in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformProductionVersionItemDatum")
	}

	var resultSlice []*DataPlatformProductionVersionItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformProductionVersionItemDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_production_version_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_version_item_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductionVersionDataPlatformProductionVersionItemDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProductionVersion, foreign.ProductionVersion) {
				local.R.ProductionVersionDataPlatformProductionVersionItemDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadComponentProductBuyerDataPlatformSCRDeliveryRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemComponentDatumL) LoadComponentProductBuyerDataPlatformSCRDeliveryRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemComponentDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemComponentDatum
	var object *DataPlatformPlannedOrderItemComponentDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemComponentDatum.(*DataPlatformPlannedOrderItemComponentDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemComponentDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemComponentDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemComponentDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemComponentDatum.(*[]*DataPlatformPlannedOrderItemComponentDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemComponentDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemComponentDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemComponentDatumR{}
		}
		args = append(args, object.ComponentProductBuyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemComponentDatumR{}
			}

			for _, a := range args {
				if a == obj.ComponentProductBuyer {
					continue Outer
				}
			}

			args = append(args, obj.ComponentProductBuyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_delivery_relation_data`),
		qm.WhereIn(`data_platform_scr_delivery_relation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRDeliveryRelationDatum")
	}

	var resultSlice []*DataPlatformSCRDeliveryRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRDeliveryRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_delivery_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_delivery_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ComponentProductBuyer == foreign.Buyer {
				local.R.ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadComponentProductBuyerDataPlatformSCRGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemComponentDatumL) LoadComponentProductBuyerDataPlatformSCRGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemComponentDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemComponentDatum
	var object *DataPlatformPlannedOrderItemComponentDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemComponentDatum.(*DataPlatformPlannedOrderItemComponentDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemComponentDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemComponentDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemComponentDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemComponentDatum.(*[]*DataPlatformPlannedOrderItemComponentDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemComponentDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemComponentDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemComponentDatumR{}
		}
		args = append(args, object.ComponentProductBuyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemComponentDatumR{}
			}

			for _, a := range args {
				if a == obj.ComponentProductBuyer {
					continue Outer
				}
			}

			args = append(args, obj.ComponentProductBuyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_general_data`),
		qm.WhereIn(`data_platform_scr_general_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRGeneralDatum")
	}

	var resultSlice []*DataPlatformSCRGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ComponentProductBuyerDataPlatformSCRGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ComponentProductBuyer == foreign.Buyer {
				local.R.ComponentProductBuyerDataPlatformSCRGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadPlannedOrderDataPlatformPlannedOrderItemDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemComponentDatumL) LoadPlannedOrderDataPlatformPlannedOrderItemDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemComponentDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemComponentDatum
	var object *DataPlatformPlannedOrderItemComponentDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemComponentDatum.(*DataPlatformPlannedOrderItemComponentDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemComponentDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemComponentDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemComponentDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemComponentDatum.(*[]*DataPlatformPlannedOrderItemComponentDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemComponentDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemComponentDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemComponentDatumR{}
		}
		args = append(args, object.PlannedOrder)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemComponentDatumR{}
			}

			for _, a := range args {
				if a == obj.PlannedOrder {
					continue Outer
				}
			}

			args = append(args, obj.PlannedOrder)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_data`),
		qm.WhereIn(`data_platform_planned_order_item_data.PlannedOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPlannedOrderItemDatum")
	}

	var resultSlice []*DataPlatformPlannedOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPlannedOrderItemDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_planned_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PlannedOrderDataPlatformPlannedOrderItemDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlannedOrder == foreign.PlannedOrder {
				local.R.PlannedOrderDataPlatformPlannedOrderItemDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBillOfMaterialDataPlatformPlannedOrderItemOperationComponentData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlannedOrderItemComponentDatumL) LoadBillOfMaterialDataPlatformPlannedOrderItemOperationComponentData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemComponentDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemComponentDatum
	var object *DataPlatformPlannedOrderItemComponentDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemComponentDatum.(*DataPlatformPlannedOrderItemComponentDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemComponentDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemComponentDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemComponentDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemComponentDatum.(*[]*DataPlatformPlannedOrderItemComponentDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemComponentDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemComponentDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemComponentDatumR{}
		}
		args = append(args, object.BillOfMaterial)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemComponentDatumR{}
			}

			for _, a := range args {
				if a == obj.BillOfMaterial {
					continue Outer
				}
			}

			args = append(args, obj.BillOfMaterial)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_operation_component_data`),
		qm.WhereIn(`data_platform_planned_order_item_operation_component_data.BillOfMaterial in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_operation_component_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemOperationComponentDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_operation_component_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_operation_component_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_operation_component_data")
	}

	if singular {
		object.R.BillOfMaterialDataPlatformPlannedOrderItemOperationComponentData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BillOfMaterial == foreign.BillOfMaterial {
				local.R.BillOfMaterialDataPlatformPlannedOrderItemOperationComponentData = append(local.R.BillOfMaterialDataPlatformPlannedOrderItemOperationComponentData, foreign)
				break
			}
		}
	}

	return nil
}

// SetBillOfMaterialDataPlatformBillOfMaterialItemDatum of the dataPlatformPlannedOrderItemComponentDatum to the related item.
// Sets o.R.BillOfMaterialDataPlatformBillOfMaterialItemDatum to related.
func (o *DataPlatformPlannedOrderItemComponentDatum) SetBillOfMaterialDataPlatformBillOfMaterialItemDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBillOfMaterialItemDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_component_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BillOfMaterial"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemComponentDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BillOfMaterial, o.PlannedOrder, o.PlannedOrderItem, o.BillOfMaterial, o.BillOfMaterialItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BillOfMaterial = related.BillOfMaterial
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemComponentDatumR{
			BillOfMaterialDataPlatformBillOfMaterialItemDatum: related,
		}
	} else {
		o.R.BillOfMaterialDataPlatformBillOfMaterialItemDatum = related
	}

	return nil
}

// SetComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformPlannedOrderItemComponentDatum to the related item.
// Sets o.R.ComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformPlannedOrderItemComponentDatum) SetComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_component_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ComponentProductBaseUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemComponentDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.PlannedOrder, o.PlannedOrderItem, o.BillOfMaterial, o.BillOfMaterialItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ComponentProductBaseUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemComponentDatumR{
			ComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.ComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformPlannedOrderItemComponentDatum to the related item.
// Sets o.R.ComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformPlannedOrderItemComponentDatum) SetComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_component_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ComponentProductDeliveryUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemComponentDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.PlannedOrder, o.PlannedOrderItem, o.BillOfMaterial, o.BillOfMaterialItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ComponentProductDeliveryUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemComponentDatumR{
			ComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.ComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetProductionVersionDataPlatformProductionVersionItemDatum of the dataPlatformPlannedOrderItemComponentDatum to the related item.
// Sets o.R.ProductionVersionDataPlatformProductionVersionItemDatum to related.
func (o *DataPlatformPlannedOrderItemComponentDatum) SetProductionVersionDataPlatformProductionVersionItemDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformProductionVersionItemDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_component_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductionVersion"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemComponentDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.ProductionVersion, o.PlannedOrder, o.PlannedOrderItem, o.BillOfMaterial, o.BillOfMaterialItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProductionVersion, related.ProductionVersion)
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemComponentDatumR{
			ProductionVersionDataPlatformProductionVersionItemDatum: related,
		}
	} else {
		o.R.ProductionVersionDataPlatformProductionVersionItemDatum = related
	}

	return nil
}

// RemoveProductionVersionDataPlatformProductionVersionItemDatum relationship.
// Sets o.R.ProductionVersionDataPlatformProductionVersionItemDatum to nil.
func (o *DataPlatformPlannedOrderItemComponentDatum) RemoveProductionVersionDataPlatformProductionVersionItemDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformProductionVersionItemDatum) error {
	var err error

	queries.SetScanner(&o.ProductionVersion, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("ProductionVersion")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductionVersionDataPlatformProductionVersionItemDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetComponentProductBuyerDataPlatformSCRDeliveryRelationDatum of the dataPlatformPlannedOrderItemComponentDatum to the related item.
// Sets o.R.ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum to related.
func (o *DataPlatformPlannedOrderItemComponentDatum) SetComponentProductBuyerDataPlatformSCRDeliveryRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRDeliveryRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_component_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ComponentProductBuyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemComponentDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.PlannedOrder, o.PlannedOrderItem, o.BillOfMaterial, o.BillOfMaterialItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ComponentProductBuyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemComponentDatumR{
			ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum: related,
		}
	} else {
		o.R.ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum = related
	}

	return nil
}

// SetComponentProductBuyerDataPlatformSCRGeneralDatum of the dataPlatformPlannedOrderItemComponentDatum to the related item.
// Sets o.R.ComponentProductBuyerDataPlatformSCRGeneralDatum to related.
func (o *DataPlatformPlannedOrderItemComponentDatum) SetComponentProductBuyerDataPlatformSCRGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_component_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ComponentProductBuyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemComponentDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.PlannedOrder, o.PlannedOrderItem, o.BillOfMaterial, o.BillOfMaterialItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ComponentProductBuyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemComponentDatumR{
			ComponentProductBuyerDataPlatformSCRGeneralDatum: related,
		}
	} else {
		o.R.ComponentProductBuyerDataPlatformSCRGeneralDatum = related
	}

	return nil
}

// SetPlannedOrderDataPlatformPlannedOrderItemDatum of the dataPlatformPlannedOrderItemComponentDatum to the related item.
// Sets o.R.PlannedOrderDataPlatformPlannedOrderItemDatum to related.
func (o *DataPlatformPlannedOrderItemComponentDatum) SetPlannedOrderDataPlatformPlannedOrderItemDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPlannedOrderItemDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_component_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PlannedOrder"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemComponentDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PlannedOrder, o.PlannedOrder, o.PlannedOrderItem, o.BillOfMaterial, o.BillOfMaterialItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlannedOrder = related.PlannedOrder
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemComponentDatumR{
			PlannedOrderDataPlatformPlannedOrderItemDatum: related,
		}
	} else {
		o.R.PlannedOrderDataPlatformPlannedOrderItemDatum = related
	}

	return nil
}

// AddBillOfMaterialDataPlatformPlannedOrderItemOperationComponentData adds the given related objects to the existing relationships
// of the data_platform_planned_order_item_component_datum, optionally inserting them as new records.
// Appends related to o.R.BillOfMaterialDataPlatformPlannedOrderItemOperationComponentData.
func (o *DataPlatformPlannedOrderItemComponentDatum) AddBillOfMaterialDataPlatformPlannedOrderItemOperationComponentData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemOperationComponentDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BillOfMaterial = o.BillOfMaterial
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_operation_component_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BillOfMaterial"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemOperationComponentDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BillOfMaterial, rel.PlannedOrder, rel.PlannedOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID, rel.BillOfMaterial, rel.BillOfMaterialItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BillOfMaterial = o.BillOfMaterial
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemComponentDatumR{
			BillOfMaterialDataPlatformPlannedOrderItemOperationComponentData: related,
		}
	} else {
		o.R.BillOfMaterialDataPlatformPlannedOrderItemOperationComponentData = append(o.R.BillOfMaterialDataPlatformPlannedOrderItemOperationComponentData, related...)
	}

	return nil
}

// DataPlatformPlannedOrderItemComponentData retrieves all the records using an executor.
func DataPlatformPlannedOrderItemComponentData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemComponentDatumQuery {
	mods = append(mods, qm.From("`data_platform_planned_order_item_component_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_planned_order_item_component_data`.*"})
	}

	return dataPlatformPlannedOrderItemComponentDatumQuery{q}
}

// FindDataPlatformPlannedOrderItemComponentDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformPlannedOrderItemComponentDatum(ctx context.Context, exec boil.ContextExecutor, plannedOrder int, plannedOrderItem int, billOfMaterial int, billOfMaterialItem int, selectCols ...string) (*DataPlatformPlannedOrderItemComponentDatum, error) {
	dataPlatformPlannedOrderItemComponentDatumObj := &DataPlatformPlannedOrderItemComponentDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_planned_order_item_component_data` where `PlannedOrder`=? AND `PlannedOrderItem`=? AND `BillOfMaterial`=? AND `BillOfMaterialItem`=?", sel,
	)

	q := queries.Raw(query, plannedOrder, plannedOrderItem, billOfMaterial, billOfMaterialItem)

	err := q.Bind(ctx, exec, dataPlatformPlannedOrderItemComponentDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_planned_order_item_component_data")
	}

	return dataPlatformPlannedOrderItemComponentDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformPlannedOrderItemComponentDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_planned_order_item_component_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPlannedOrderItemComponentDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformPlannedOrderItemComponentDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformPlannedOrderItemComponentDatumInsertCache[key]
	dataPlatformPlannedOrderItemComponentDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformPlannedOrderItemComponentDatumAllColumns,
			dataPlatformPlannedOrderItemComponentDatumColumnsWithDefault,
			dataPlatformPlannedOrderItemComponentDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPlannedOrderItemComponentDatumType, dataPlatformPlannedOrderItemComponentDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformPlannedOrderItemComponentDatumType, dataPlatformPlannedOrderItemComponentDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_planned_order_item_component_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_planned_order_item_component_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_planned_order_item_component_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemComponentDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_planned_order_item_component_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PlannedOrder,
		o.PlannedOrderItem,
		o.BillOfMaterial,
		o.BillOfMaterialItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_planned_order_item_component_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPlannedOrderItemComponentDatumInsertCacheMut.Lock()
		dataPlatformPlannedOrderItemComponentDatumInsertCache[key] = cache
		dataPlatformPlannedOrderItemComponentDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformPlannedOrderItemComponentDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformPlannedOrderItemComponentDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformPlannedOrderItemComponentDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformPlannedOrderItemComponentDatumUpdateCache[key]
	dataPlatformPlannedOrderItemComponentDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformPlannedOrderItemComponentDatumAllColumns,
			dataPlatformPlannedOrderItemComponentDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_planned_order_item_component_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_planned_order_item_component_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemComponentDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformPlannedOrderItemComponentDatumType, dataPlatformPlannedOrderItemComponentDatumMapping, append(wl, dataPlatformPlannedOrderItemComponentDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_planned_order_item_component_data row")
	}

	if !cached {
		dataPlatformPlannedOrderItemComponentDatumUpdateCacheMut.Lock()
		dataPlatformPlannedOrderItemComponentDatumUpdateCache[key] = cache
		dataPlatformPlannedOrderItemComponentDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformPlannedOrderItemComponentDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_planned_order_item_component_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformPlannedOrderItemComponentDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPlannedOrderItemComponentDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_planned_order_item_component_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPlannedOrderItemComponentDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformPlannedOrderItemComponentDatum slice")
	}

	return nil
}

var mySQLDataPlatformPlannedOrderItemComponentDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformPlannedOrderItemComponentDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_planned_order_item_component_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPlannedOrderItemComponentDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformPlannedOrderItemComponentDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformPlannedOrderItemComponentDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformPlannedOrderItemComponentDatumUpsertCache[key]
	dataPlatformPlannedOrderItemComponentDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformPlannedOrderItemComponentDatumAllColumns,
			dataPlatformPlannedOrderItemComponentDatumColumnsWithDefault,
			dataPlatformPlannedOrderItemComponentDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformPlannedOrderItemComponentDatumAllColumns,
			dataPlatformPlannedOrderItemComponentDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_planned_order_item_component_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_planned_order_item_component_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_planned_order_item_component_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPlannedOrderItemComponentDatumType, dataPlatformPlannedOrderItemComponentDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformPlannedOrderItemComponentDatumType, dataPlatformPlannedOrderItemComponentDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_planned_order_item_component_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformPlannedOrderItemComponentDatumType, dataPlatformPlannedOrderItemComponentDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_planned_order_item_component_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_planned_order_item_component_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPlannedOrderItemComponentDatumUpsertCacheMut.Lock()
		dataPlatformPlannedOrderItemComponentDatumUpsertCache[key] = cache
		dataPlatformPlannedOrderItemComponentDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformPlannedOrderItemComponentDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformPlannedOrderItemComponentDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformPlannedOrderItemComponentDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformPlannedOrderItemComponentDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_planned_order_item_component_data` WHERE `PlannedOrder`=? AND `PlannedOrderItem`=? AND `BillOfMaterial`=? AND `BillOfMaterialItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_planned_order_item_component_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformPlannedOrderItemComponentDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformPlannedOrderItemComponentDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_planned_order_item_component_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformPlannedOrderItemComponentDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPlannedOrderItemComponentDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_planned_order_item_component_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPlannedOrderItemComponentDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformPlannedOrderItemComponentDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformPlannedOrderItemComponentDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformPlannedOrderItemComponentDatum(ctx, exec, o.PlannedOrder, o.PlannedOrderItem, o.BillOfMaterial, o.BillOfMaterialItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformPlannedOrderItemComponentDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformPlannedOrderItemComponentDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPlannedOrderItemComponentDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_planned_order_item_component_data`.* FROM `data_platform_planned_order_item_component_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPlannedOrderItemComponentDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformPlannedOrderItemComponentDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformPlannedOrderItemComponentDatumExists checks if the DataPlatformPlannedOrderItemComponentDatum row exists.
func DataPlatformPlannedOrderItemComponentDatumExists(ctx context.Context, exec boil.ContextExecutor, plannedOrder int, plannedOrderItem int, billOfMaterial int, billOfMaterialItem int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_planned_order_item_component_data` where `PlannedOrder`=? AND `PlannedOrderItem`=? AND `BillOfMaterial`=? AND `BillOfMaterialItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, plannedOrder, plannedOrderItem, billOfMaterial, billOfMaterialItem)
	}
	row := exec.QueryRowContext(ctx, sql, plannedOrder, plannedOrderItem, billOfMaterial, billOfMaterialItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_planned_order_item_component_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformPlannedOrderItemComponentDatum row exists.
func (o *DataPlatformPlannedOrderItemComponentDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformPlannedOrderItemComponentDatumExists(ctx, exec, o.PlannedOrder, o.PlannedOrderItem, o.BillOfMaterial, o.BillOfMaterialItem)
}
