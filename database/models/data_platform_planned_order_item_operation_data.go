// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformPlannedOrderItemOperationDatum is an object representing the database table.
type DataPlatformPlannedOrderItemOperationDatum struct {
	PlannedOrder                             int          `boil:"PlannedOrder" json:"PlannedOrder" toml:"PlannedOrder" yaml:"PlannedOrder"`
	PlannedOrderItem                         int          `boil:"PlannedOrderItem" json:"PlannedOrderItem" toml:"PlannedOrderItem" yaml:"PlannedOrderItem"`
	Operations                               int          `boil:"Operations" json:"Operations" toml:"Operations" yaml:"Operations"`
	OperationsItem                           int          `boil:"OperationsItem" json:"OperationsItem" toml:"OperationsItem" yaml:"OperationsItem"`
	OperationID                              int          `boil:"OperationID" json:"OperationID" toml:"OperationID" yaml:"OperationID"`
	OperationType                            string       `boil:"OperationType" json:"OperationType" toml:"OperationType" yaml:"OperationType"`
	SupplyChainRelationshipID                int          `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipDeliveryID        int          `boil:"SupplyChainRelationshipDeliveryID" json:"SupplyChainRelationshipDeliveryID" toml:"SupplyChainRelationshipDeliveryID" yaml:"SupplyChainRelationshipDeliveryID"`
	SupplyChainRelationshipDeliveryPlantID   int          `boil:"SupplyChainRelationshipDeliveryPlantID" json:"SupplyChainRelationshipDeliveryPlantID" toml:"SupplyChainRelationshipDeliveryPlantID" yaml:"SupplyChainRelationshipDeliveryPlantID"`
	SupplyChainRelationshipProductionPlantID int          `boil:"SupplyChainRelationshipProductionPlantID" json:"SupplyChainRelationshipProductionPlantID" toml:"SupplyChainRelationshipProductionPlantID" yaml:"SupplyChainRelationshipProductionPlantID"`
	Product                                  string       `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	Buyer                                    int          `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                                   int          `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	DeliverToParty                           int          `boil:"DeliverToParty" json:"DeliverToParty" toml:"DeliverToParty" yaml:"DeliverToParty"`
	DeliverToPlant                           string       `boil:"DeliverToPlant" json:"DeliverToPlant" toml:"DeliverToPlant" yaml:"DeliverToPlant"`
	DeliverFromParty                         int          `boil:"DeliverFromParty" json:"DeliverFromParty" toml:"DeliverFromParty" yaml:"DeliverFromParty"`
	DeliverFromPlant                         string       `boil:"DeliverFromPlant" json:"DeliverFromPlant" toml:"DeliverFromPlant" yaml:"DeliverFromPlant"`
	ProductionPlantBusinessPartner           int          `boil:"ProductionPlantBusinessPartner" json:"ProductionPlantBusinessPartner" toml:"ProductionPlantBusinessPartner" yaml:"ProductionPlantBusinessPartner"`
	ProductionPlant                          string       `boil:"ProductionPlant" json:"ProductionPlant" toml:"ProductionPlant" yaml:"ProductionPlant"`
	MRPArea                                  null.String  `boil:"MRPArea" json:"MRPArea,omitempty" toml:"MRPArea" yaml:"MRPArea,omitempty"`
	MRPController                            null.String  `boil:"MRPController" json:"MRPController,omitempty" toml:"MRPController" yaml:"MRPController,omitempty"`
	ProductionVersion                        null.Int     `boil:"ProductionVersion" json:"ProductionVersion,omitempty" toml:"ProductionVersion" yaml:"ProductionVersion,omitempty"`
	ProductionVersionItem                    null.Int     `boil:"ProductionVersionItem" json:"ProductionVersionItem,omitempty" toml:"ProductionVersionItem" yaml:"ProductionVersionItem,omitempty"`
	Sequence                                 int          `boil:"Sequence" json:"Sequence" toml:"Sequence" yaml:"Sequence"`
	SequenceText                             null.String  `boil:"SequenceText" json:"SequenceText,omitempty" toml:"SequenceText" yaml:"SequenceText,omitempty"`
	OperationText                            string       `boil:"OperationText" json:"OperationText" toml:"OperationText" yaml:"OperationText"`
	ProductBaseUnit                          string       `boil:"ProductBaseUnit" json:"ProductBaseUnit" toml:"ProductBaseUnit" yaml:"ProductBaseUnit"`
	ProductProductionUnit                    string       `boil:"ProductProductionUnit" json:"ProductProductionUnit" toml:"ProductProductionUnit" yaml:"ProductProductionUnit"`
	ProductOperationUnit                     string       `boil:"ProductOperationUnit" json:"ProductOperationUnit" toml:"ProductOperationUnit" yaml:"ProductOperationUnit"`
	ProductDeliveryUnit                      string       `boil:"ProductDeliveryUnit" json:"ProductDeliveryUnit" toml:"ProductDeliveryUnit" yaml:"ProductDeliveryUnit"`
	StandardLotSizeQuantity                  float32      `boil:"StandardLotSizeQuantity" json:"StandardLotSizeQuantity" toml:"StandardLotSizeQuantity" yaml:"StandardLotSizeQuantity"`
	MinimumLotSizeQuantity                   float32      `boil:"MinimumLotSizeQuantity" json:"MinimumLotSizeQuantity" toml:"MinimumLotSizeQuantity" yaml:"MinimumLotSizeQuantity"`
	MaximumLotSizeQuantity                   float32      `boil:"MaximumLotSizeQuantity" json:"MaximumLotSizeQuantity" toml:"MaximumLotSizeQuantity" yaml:"MaximumLotSizeQuantity"`
	OperationPlannedQuantityInBaseUnit       float32      `boil:"OperationPlannedQuantityInBaseUnit" json:"OperationPlannedQuantityInBaseUnit" toml:"OperationPlannedQuantityInBaseUnit" yaml:"OperationPlannedQuantityInBaseUnit"`
	OperationPlannedQuantityInProductionUnit float32      `boil:"OperationPlannedQuantityInProductionUnit" json:"OperationPlannedQuantityInProductionUnit" toml:"OperationPlannedQuantityInProductionUnit" yaml:"OperationPlannedQuantityInProductionUnit"`
	OperationPlannedQuantityInOperationUnit  float32      `boil:"OperationPlannedQuantityInOperationUnit" json:"OperationPlannedQuantityInOperationUnit" toml:"OperationPlannedQuantityInOperationUnit" yaml:"OperationPlannedQuantityInOperationUnit"`
	OperationPlannedQuantityInDeliveryUnit   float32      `boil:"OperationPlannedQuantityInDeliveryUnit" json:"OperationPlannedQuantityInDeliveryUnit" toml:"OperationPlannedQuantityInDeliveryUnit" yaml:"OperationPlannedQuantityInDeliveryUnit"`
	OperationPlannedScrapInPercent           null.Float32 `boil:"OperationPlannedScrapInPercent" json:"OperationPlannedScrapInPercent,omitempty" toml:"OperationPlannedScrapInPercent" yaml:"OperationPlannedScrapInPercent,omitempty"`
	ResponsiblePlannerGroup                  null.String  `boil:"ResponsiblePlannerGroup" json:"ResponsiblePlannerGroup,omitempty" toml:"ResponsiblePlannerGroup" yaml:"ResponsiblePlannerGroup,omitempty"`
	PlainLongText                            null.String  `boil:"PlainLongText" json:"PlainLongText,omitempty" toml:"PlainLongText" yaml:"PlainLongText,omitempty"`
	WorkCenter                               int          `boil:"WorkCenter" json:"WorkCenter" toml:"WorkCenter" yaml:"WorkCenter"`
	CapacityCategory                         null.String  `boil:"CapacityCategory" json:"CapacityCategory,omitempty" toml:"CapacityCategory" yaml:"CapacityCategory,omitempty"`
	OperationCostingRelevancyType            null.String  `boil:"OperationCostingRelevancyType" json:"OperationCostingRelevancyType,omitempty" toml:"OperationCostingRelevancyType" yaml:"OperationCostingRelevancyType,omitempty"`
	OperationSetupType                       null.String  `boil:"OperationSetupType" json:"OperationSetupType,omitempty" toml:"OperationSetupType" yaml:"OperationSetupType,omitempty"`
	OperationSetupGroupCategory              null.String  `boil:"OperationSetupGroupCategory" json:"OperationSetupGroupCategory,omitempty" toml:"OperationSetupGroupCategory" yaml:"OperationSetupGroupCategory,omitempty"`
	OperationSetupGroup                      null.String  `boil:"OperationSetupGroup" json:"OperationSetupGroup,omitempty" toml:"OperationSetupGroup" yaml:"OperationSetupGroup,omitempty"`
	MaximumWaitDuration                      null.Float32 `boil:"MaximumWaitDuration" json:"MaximumWaitDuration,omitempty" toml:"MaximumWaitDuration" yaml:"MaximumWaitDuration,omitempty"`
	StandardWaitDuration                     null.Float32 `boil:"StandardWaitDuration" json:"StandardWaitDuration,omitempty" toml:"StandardWaitDuration" yaml:"StandardWaitDuration,omitempty"`
	MinimumWaitDuration                      null.Float32 `boil:"MinimumWaitDuration" json:"MinimumWaitDuration,omitempty" toml:"MinimumWaitDuration" yaml:"MinimumWaitDuration,omitempty"`
	WaitDurationUnit                         null.String  `boil:"WaitDurationUnit" json:"WaitDurationUnit,omitempty" toml:"WaitDurationUnit" yaml:"WaitDurationUnit,omitempty"`
	MaximumQueueDuration                     null.Float32 `boil:"MaximumQueueDuration" json:"MaximumQueueDuration,omitempty" toml:"MaximumQueueDuration" yaml:"MaximumQueueDuration,omitempty"`
	StandardQueueDuration                    null.Float32 `boil:"StandardQueueDuration" json:"StandardQueueDuration,omitempty" toml:"StandardQueueDuration" yaml:"StandardQueueDuration,omitempty"`
	MinimumQueueDuration                     null.Float32 `boil:"MinimumQueueDuration" json:"MinimumQueueDuration,omitempty" toml:"MinimumQueueDuration" yaml:"MinimumQueueDuration,omitempty"`
	QueueDurationUnit                        null.String  `boil:"QueueDurationUnit" json:"QueueDurationUnit,omitempty" toml:"QueueDurationUnit" yaml:"QueueDurationUnit,omitempty"`
	MaximumMoveDuration                      null.Float32 `boil:"MaximumMoveDuration" json:"MaximumMoveDuration,omitempty" toml:"MaximumMoveDuration" yaml:"MaximumMoveDuration,omitempty"`
	StandardMoveDuration                     null.Float32 `boil:"StandardMoveDuration" json:"StandardMoveDuration,omitempty" toml:"StandardMoveDuration" yaml:"StandardMoveDuration,omitempty"`
	MinimumMoveDuration                      null.Float32 `boil:"MinimumMoveDuration" json:"MinimumMoveDuration,omitempty" toml:"MinimumMoveDuration" yaml:"MinimumMoveDuration,omitempty"`
	MoveDurationUnit                         null.String  `boil:"MoveDurationUnit" json:"MoveDurationUnit,omitempty" toml:"MoveDurationUnit" yaml:"MoveDurationUnit,omitempty"`
	StandardDeliveryDuration                 null.Float32 `boil:"StandardDeliveryDuration" json:"StandardDeliveryDuration,omitempty" toml:"StandardDeliveryDuration" yaml:"StandardDeliveryDuration,omitempty"`
	StandardDeliveryDurationUnit             null.String  `boil:"StandardDeliveryDurationUnit" json:"StandardDeliveryDurationUnit,omitempty" toml:"StandardDeliveryDurationUnit" yaml:"StandardDeliveryDurationUnit,omitempty"`
	CostElement                              null.String  `boil:"CostElement" json:"CostElement,omitempty" toml:"CostElement" yaml:"CostElement,omitempty"`
	PlannedOrderIsReleased                   null.Bool    `boil:"PlannedOrderIsReleased" json:"PlannedOrderIsReleased,omitempty" toml:"PlannedOrderIsReleased" yaml:"PlannedOrderIsReleased,omitempty"`
	CreationDate                             string       `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	CreationTime                             string       `boil:"CreationTime" json:"CreationTime" toml:"CreationTime" yaml:"CreationTime"`
	LastChangeDate                           string       `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	LastChangeTime                           string       `boil:"LastChangeTime" json:"LastChangeTime" toml:"LastChangeTime" yaml:"LastChangeTime"`
	IsMarkedForDeletion                      null.Bool    `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformPlannedOrderItemOperationDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformPlannedOrderItemOperationDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformPlannedOrderItemOperationDatumColumns = struct {
	PlannedOrder                             string
	PlannedOrderItem                         string
	Operations                               string
	OperationsItem                           string
	OperationID                              string
	OperationType                            string
	SupplyChainRelationshipID                string
	SupplyChainRelationshipDeliveryID        string
	SupplyChainRelationshipDeliveryPlantID   string
	SupplyChainRelationshipProductionPlantID string
	Product                                  string
	Buyer                                    string
	Seller                                   string
	DeliverToParty                           string
	DeliverToPlant                           string
	DeliverFromParty                         string
	DeliverFromPlant                         string
	ProductionPlantBusinessPartner           string
	ProductionPlant                          string
	MRPArea                                  string
	MRPController                            string
	ProductionVersion                        string
	ProductionVersionItem                    string
	Sequence                                 string
	SequenceText                             string
	OperationText                            string
	ProductBaseUnit                          string
	ProductProductionUnit                    string
	ProductOperationUnit                     string
	ProductDeliveryUnit                      string
	StandardLotSizeQuantity                  string
	MinimumLotSizeQuantity                   string
	MaximumLotSizeQuantity                   string
	OperationPlannedQuantityInBaseUnit       string
	OperationPlannedQuantityInProductionUnit string
	OperationPlannedQuantityInOperationUnit  string
	OperationPlannedQuantityInDeliveryUnit   string
	OperationPlannedScrapInPercent           string
	ResponsiblePlannerGroup                  string
	PlainLongText                            string
	WorkCenter                               string
	CapacityCategory                         string
	OperationCostingRelevancyType            string
	OperationSetupType                       string
	OperationSetupGroupCategory              string
	OperationSetupGroup                      string
	MaximumWaitDuration                      string
	StandardWaitDuration                     string
	MinimumWaitDuration                      string
	WaitDurationUnit                         string
	MaximumQueueDuration                     string
	StandardQueueDuration                    string
	MinimumQueueDuration                     string
	QueueDurationUnit                        string
	MaximumMoveDuration                      string
	StandardMoveDuration                     string
	MinimumMoveDuration                      string
	MoveDurationUnit                         string
	StandardDeliveryDuration                 string
	StandardDeliveryDurationUnit             string
	CostElement                              string
	PlannedOrderIsReleased                   string
	CreationDate                             string
	CreationTime                             string
	LastChangeDate                           string
	LastChangeTime                           string
	IsMarkedForDeletion                      string
}{
	PlannedOrder:                             "PlannedOrder",
	PlannedOrderItem:                         "PlannedOrderItem",
	Operations:                               "Operations",
	OperationsItem:                           "OperationsItem",
	OperationID:                              "OperationID",
	OperationType:                            "OperationType",
	SupplyChainRelationshipID:                "SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:        "SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:   "SupplyChainRelationshipDeliveryPlantID",
	SupplyChainRelationshipProductionPlantID: "SupplyChainRelationshipProductionPlantID",
	Product:                                  "Product",
	Buyer:                                    "Buyer",
	Seller:                                   "Seller",
	DeliverToParty:                           "DeliverToParty",
	DeliverToPlant:                           "DeliverToPlant",
	DeliverFromParty:                         "DeliverFromParty",
	DeliverFromPlant:                         "DeliverFromPlant",
	ProductionPlantBusinessPartner:           "ProductionPlantBusinessPartner",
	ProductionPlant:                          "ProductionPlant",
	MRPArea:                                  "MRPArea",
	MRPController:                            "MRPController",
	ProductionVersion:                        "ProductionVersion",
	ProductionVersionItem:                    "ProductionVersionItem",
	Sequence:                                 "Sequence",
	SequenceText:                             "SequenceText",
	OperationText:                            "OperationText",
	ProductBaseUnit:                          "ProductBaseUnit",
	ProductProductionUnit:                    "ProductProductionUnit",
	ProductOperationUnit:                     "ProductOperationUnit",
	ProductDeliveryUnit:                      "ProductDeliveryUnit",
	StandardLotSizeQuantity:                  "StandardLotSizeQuantity",
	MinimumLotSizeQuantity:                   "MinimumLotSizeQuantity",
	MaximumLotSizeQuantity:                   "MaximumLotSizeQuantity",
	OperationPlannedQuantityInBaseUnit:       "OperationPlannedQuantityInBaseUnit",
	OperationPlannedQuantityInProductionUnit: "OperationPlannedQuantityInProductionUnit",
	OperationPlannedQuantityInOperationUnit:  "OperationPlannedQuantityInOperationUnit",
	OperationPlannedQuantityInDeliveryUnit:   "OperationPlannedQuantityInDeliveryUnit",
	OperationPlannedScrapInPercent:           "OperationPlannedScrapInPercent",
	ResponsiblePlannerGroup:                  "ResponsiblePlannerGroup",
	PlainLongText:                            "PlainLongText",
	WorkCenter:                               "WorkCenter",
	CapacityCategory:                         "CapacityCategory",
	OperationCostingRelevancyType:            "OperationCostingRelevancyType",
	OperationSetupType:                       "OperationSetupType",
	OperationSetupGroupCategory:              "OperationSetupGroupCategory",
	OperationSetupGroup:                      "OperationSetupGroup",
	MaximumWaitDuration:                      "MaximumWaitDuration",
	StandardWaitDuration:                     "StandardWaitDuration",
	MinimumWaitDuration:                      "MinimumWaitDuration",
	WaitDurationUnit:                         "WaitDurationUnit",
	MaximumQueueDuration:                     "MaximumQueueDuration",
	StandardQueueDuration:                    "StandardQueueDuration",
	MinimumQueueDuration:                     "MinimumQueueDuration",
	QueueDurationUnit:                        "QueueDurationUnit",
	MaximumMoveDuration:                      "MaximumMoveDuration",
	StandardMoveDuration:                     "StandardMoveDuration",
	MinimumMoveDuration:                      "MinimumMoveDuration",
	MoveDurationUnit:                         "MoveDurationUnit",
	StandardDeliveryDuration:                 "StandardDeliveryDuration",
	StandardDeliveryDurationUnit:             "StandardDeliveryDurationUnit",
	CostElement:                              "CostElement",
	PlannedOrderIsReleased:                   "PlannedOrderIsReleased",
	CreationDate:                             "CreationDate",
	CreationTime:                             "CreationTime",
	LastChangeDate:                           "LastChangeDate",
	LastChangeTime:                           "LastChangeTime",
	IsMarkedForDeletion:                      "IsMarkedForDeletion",
}

var DataPlatformPlannedOrderItemOperationDatumTableColumns = struct {
	PlannedOrder                             string
	PlannedOrderItem                         string
	Operations                               string
	OperationsItem                           string
	OperationID                              string
	OperationType                            string
	SupplyChainRelationshipID                string
	SupplyChainRelationshipDeliveryID        string
	SupplyChainRelationshipDeliveryPlantID   string
	SupplyChainRelationshipProductionPlantID string
	Product                                  string
	Buyer                                    string
	Seller                                   string
	DeliverToParty                           string
	DeliverToPlant                           string
	DeliverFromParty                         string
	DeliverFromPlant                         string
	ProductionPlantBusinessPartner           string
	ProductionPlant                          string
	MRPArea                                  string
	MRPController                            string
	ProductionVersion                        string
	ProductionVersionItem                    string
	Sequence                                 string
	SequenceText                             string
	OperationText                            string
	ProductBaseUnit                          string
	ProductProductionUnit                    string
	ProductOperationUnit                     string
	ProductDeliveryUnit                      string
	StandardLotSizeQuantity                  string
	MinimumLotSizeQuantity                   string
	MaximumLotSizeQuantity                   string
	OperationPlannedQuantityInBaseUnit       string
	OperationPlannedQuantityInProductionUnit string
	OperationPlannedQuantityInOperationUnit  string
	OperationPlannedQuantityInDeliveryUnit   string
	OperationPlannedScrapInPercent           string
	ResponsiblePlannerGroup                  string
	PlainLongText                            string
	WorkCenter                               string
	CapacityCategory                         string
	OperationCostingRelevancyType            string
	OperationSetupType                       string
	OperationSetupGroupCategory              string
	OperationSetupGroup                      string
	MaximumWaitDuration                      string
	StandardWaitDuration                     string
	MinimumWaitDuration                      string
	WaitDurationUnit                         string
	MaximumQueueDuration                     string
	StandardQueueDuration                    string
	MinimumQueueDuration                     string
	QueueDurationUnit                        string
	MaximumMoveDuration                      string
	StandardMoveDuration                     string
	MinimumMoveDuration                      string
	MoveDurationUnit                         string
	StandardDeliveryDuration                 string
	StandardDeliveryDurationUnit             string
	CostElement                              string
	PlannedOrderIsReleased                   string
	CreationDate                             string
	CreationTime                             string
	LastChangeDate                           string
	LastChangeTime                           string
	IsMarkedForDeletion                      string
}{
	PlannedOrder:                             "data_platform_planned_order_item_operation_data.PlannedOrder",
	PlannedOrderItem:                         "data_platform_planned_order_item_operation_data.PlannedOrderItem",
	Operations:                               "data_platform_planned_order_item_operation_data.Operations",
	OperationsItem:                           "data_platform_planned_order_item_operation_data.OperationsItem",
	OperationID:                              "data_platform_planned_order_item_operation_data.OperationID",
	OperationType:                            "data_platform_planned_order_item_operation_data.OperationType",
	SupplyChainRelationshipID:                "data_platform_planned_order_item_operation_data.SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:        "data_platform_planned_order_item_operation_data.SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:   "data_platform_planned_order_item_operation_data.SupplyChainRelationshipDeliveryPlantID",
	SupplyChainRelationshipProductionPlantID: "data_platform_planned_order_item_operation_data.SupplyChainRelationshipProductionPlantID",
	Product:                                  "data_platform_planned_order_item_operation_data.Product",
	Buyer:                                    "data_platform_planned_order_item_operation_data.Buyer",
	Seller:                                   "data_platform_planned_order_item_operation_data.Seller",
	DeliverToParty:                           "data_platform_planned_order_item_operation_data.DeliverToParty",
	DeliverToPlant:                           "data_platform_planned_order_item_operation_data.DeliverToPlant",
	DeliverFromParty:                         "data_platform_planned_order_item_operation_data.DeliverFromParty",
	DeliverFromPlant:                         "data_platform_planned_order_item_operation_data.DeliverFromPlant",
	ProductionPlantBusinessPartner:           "data_platform_planned_order_item_operation_data.ProductionPlantBusinessPartner",
	ProductionPlant:                          "data_platform_planned_order_item_operation_data.ProductionPlant",
	MRPArea:                                  "data_platform_planned_order_item_operation_data.MRPArea",
	MRPController:                            "data_platform_planned_order_item_operation_data.MRPController",
	ProductionVersion:                        "data_platform_planned_order_item_operation_data.ProductionVersion",
	ProductionVersionItem:                    "data_platform_planned_order_item_operation_data.ProductionVersionItem",
	Sequence:                                 "data_platform_planned_order_item_operation_data.Sequence",
	SequenceText:                             "data_platform_planned_order_item_operation_data.SequenceText",
	OperationText:                            "data_platform_planned_order_item_operation_data.OperationText",
	ProductBaseUnit:                          "data_platform_planned_order_item_operation_data.ProductBaseUnit",
	ProductProductionUnit:                    "data_platform_planned_order_item_operation_data.ProductProductionUnit",
	ProductOperationUnit:                     "data_platform_planned_order_item_operation_data.ProductOperationUnit",
	ProductDeliveryUnit:                      "data_platform_planned_order_item_operation_data.ProductDeliveryUnit",
	StandardLotSizeQuantity:                  "data_platform_planned_order_item_operation_data.StandardLotSizeQuantity",
	MinimumLotSizeQuantity:                   "data_platform_planned_order_item_operation_data.MinimumLotSizeQuantity",
	MaximumLotSizeQuantity:                   "data_platform_planned_order_item_operation_data.MaximumLotSizeQuantity",
	OperationPlannedQuantityInBaseUnit:       "data_platform_planned_order_item_operation_data.OperationPlannedQuantityInBaseUnit",
	OperationPlannedQuantityInProductionUnit: "data_platform_planned_order_item_operation_data.OperationPlannedQuantityInProductionUnit",
	OperationPlannedQuantityInOperationUnit:  "data_platform_planned_order_item_operation_data.OperationPlannedQuantityInOperationUnit",
	OperationPlannedQuantityInDeliveryUnit:   "data_platform_planned_order_item_operation_data.OperationPlannedQuantityInDeliveryUnit",
	OperationPlannedScrapInPercent:           "data_platform_planned_order_item_operation_data.OperationPlannedScrapInPercent",
	ResponsiblePlannerGroup:                  "data_platform_planned_order_item_operation_data.ResponsiblePlannerGroup",
	PlainLongText:                            "data_platform_planned_order_item_operation_data.PlainLongText",
	WorkCenter:                               "data_platform_planned_order_item_operation_data.WorkCenter",
	CapacityCategory:                         "data_platform_planned_order_item_operation_data.CapacityCategory",
	OperationCostingRelevancyType:            "data_platform_planned_order_item_operation_data.OperationCostingRelevancyType",
	OperationSetupType:                       "data_platform_planned_order_item_operation_data.OperationSetupType",
	OperationSetupGroupCategory:              "data_platform_planned_order_item_operation_data.OperationSetupGroupCategory",
	OperationSetupGroup:                      "data_platform_planned_order_item_operation_data.OperationSetupGroup",
	MaximumWaitDuration:                      "data_platform_planned_order_item_operation_data.MaximumWaitDuration",
	StandardWaitDuration:                     "data_platform_planned_order_item_operation_data.StandardWaitDuration",
	MinimumWaitDuration:                      "data_platform_planned_order_item_operation_data.MinimumWaitDuration",
	WaitDurationUnit:                         "data_platform_planned_order_item_operation_data.WaitDurationUnit",
	MaximumQueueDuration:                     "data_platform_planned_order_item_operation_data.MaximumQueueDuration",
	StandardQueueDuration:                    "data_platform_planned_order_item_operation_data.StandardQueueDuration",
	MinimumQueueDuration:                     "data_platform_planned_order_item_operation_data.MinimumQueueDuration",
	QueueDurationUnit:                        "data_platform_planned_order_item_operation_data.QueueDurationUnit",
	MaximumMoveDuration:                      "data_platform_planned_order_item_operation_data.MaximumMoveDuration",
	StandardMoveDuration:                     "data_platform_planned_order_item_operation_data.StandardMoveDuration",
	MinimumMoveDuration:                      "data_platform_planned_order_item_operation_data.MinimumMoveDuration",
	MoveDurationUnit:                         "data_platform_planned_order_item_operation_data.MoveDurationUnit",
	StandardDeliveryDuration:                 "data_platform_planned_order_item_operation_data.StandardDeliveryDuration",
	StandardDeliveryDurationUnit:             "data_platform_planned_order_item_operation_data.StandardDeliveryDurationUnit",
	CostElement:                              "data_platform_planned_order_item_operation_data.CostElement",
	PlannedOrderIsReleased:                   "data_platform_planned_order_item_operation_data.PlannedOrderIsReleased",
	CreationDate:                             "data_platform_planned_order_item_operation_data.CreationDate",
	CreationTime:                             "data_platform_planned_order_item_operation_data.CreationTime",
	LastChangeDate:                           "data_platform_planned_order_item_operation_data.LastChangeDate",
	LastChangeTime:                           "data_platform_planned_order_item_operation_data.LastChangeTime",
	IsMarkedForDeletion:                      "data_platform_planned_order_item_operation_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformPlannedOrderItemOperationDatumWhere = struct {
	PlannedOrder                             whereHelperint
	PlannedOrderItem                         whereHelperint
	Operations                               whereHelperint
	OperationsItem                           whereHelperint
	OperationID                              whereHelperint
	OperationType                            whereHelperstring
	SupplyChainRelationshipID                whereHelperint
	SupplyChainRelationshipDeliveryID        whereHelperint
	SupplyChainRelationshipDeliveryPlantID   whereHelperint
	SupplyChainRelationshipProductionPlantID whereHelperint
	Product                                  whereHelperstring
	Buyer                                    whereHelperint
	Seller                                   whereHelperint
	DeliverToParty                           whereHelperint
	DeliverToPlant                           whereHelperstring
	DeliverFromParty                         whereHelperint
	DeliverFromPlant                         whereHelperstring
	ProductionPlantBusinessPartner           whereHelperint
	ProductionPlant                          whereHelperstring
	MRPArea                                  whereHelpernull_String
	MRPController                            whereHelpernull_String
	ProductionVersion                        whereHelpernull_Int
	ProductionVersionItem                    whereHelpernull_Int
	Sequence                                 whereHelperint
	SequenceText                             whereHelpernull_String
	OperationText                            whereHelperstring
	ProductBaseUnit                          whereHelperstring
	ProductProductionUnit                    whereHelperstring
	ProductOperationUnit                     whereHelperstring
	ProductDeliveryUnit                      whereHelperstring
	StandardLotSizeQuantity                  whereHelperfloat32
	MinimumLotSizeQuantity                   whereHelperfloat32
	MaximumLotSizeQuantity                   whereHelperfloat32
	OperationPlannedQuantityInBaseUnit       whereHelperfloat32
	OperationPlannedQuantityInProductionUnit whereHelperfloat32
	OperationPlannedQuantityInOperationUnit  whereHelperfloat32
	OperationPlannedQuantityInDeliveryUnit   whereHelperfloat32
	OperationPlannedScrapInPercent           whereHelpernull_Float32
	ResponsiblePlannerGroup                  whereHelpernull_String
	PlainLongText                            whereHelpernull_String
	WorkCenter                               whereHelperint
	CapacityCategory                         whereHelpernull_String
	OperationCostingRelevancyType            whereHelpernull_String
	OperationSetupType                       whereHelpernull_String
	OperationSetupGroupCategory              whereHelpernull_String
	OperationSetupGroup                      whereHelpernull_String
	MaximumWaitDuration                      whereHelpernull_Float32
	StandardWaitDuration                     whereHelpernull_Float32
	MinimumWaitDuration                      whereHelpernull_Float32
	WaitDurationUnit                         whereHelpernull_String
	MaximumQueueDuration                     whereHelpernull_Float32
	StandardQueueDuration                    whereHelpernull_Float32
	MinimumQueueDuration                     whereHelpernull_Float32
	QueueDurationUnit                        whereHelpernull_String
	MaximumMoveDuration                      whereHelpernull_Float32
	StandardMoveDuration                     whereHelpernull_Float32
	MinimumMoveDuration                      whereHelpernull_Float32
	MoveDurationUnit                         whereHelpernull_String
	StandardDeliveryDuration                 whereHelpernull_Float32
	StandardDeliveryDurationUnit             whereHelpernull_String
	CostElement                              whereHelpernull_String
	PlannedOrderIsReleased                   whereHelpernull_Bool
	CreationDate                             whereHelperstring
	CreationTime                             whereHelperstring
	LastChangeDate                           whereHelperstring
	LastChangeTime                           whereHelperstring
	IsMarkedForDeletion                      whereHelpernull_Bool
}{
	PlannedOrder:                             whereHelperint{field: "`data_platform_planned_order_item_operation_data`.`PlannedOrder`"},
	PlannedOrderItem:                         whereHelperint{field: "`data_platform_planned_order_item_operation_data`.`PlannedOrderItem`"},
	Operations:                               whereHelperint{field: "`data_platform_planned_order_item_operation_data`.`Operations`"},
	OperationsItem:                           whereHelperint{field: "`data_platform_planned_order_item_operation_data`.`OperationsItem`"},
	OperationID:                              whereHelperint{field: "`data_platform_planned_order_item_operation_data`.`OperationID`"},
	OperationType:                            whereHelperstring{field: "`data_platform_planned_order_item_operation_data`.`OperationType`"},
	SupplyChainRelationshipID:                whereHelperint{field: "`data_platform_planned_order_item_operation_data`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipDeliveryID:        whereHelperint{field: "`data_platform_planned_order_item_operation_data`.`SupplyChainRelationshipDeliveryID`"},
	SupplyChainRelationshipDeliveryPlantID:   whereHelperint{field: "`data_platform_planned_order_item_operation_data`.`SupplyChainRelationshipDeliveryPlantID`"},
	SupplyChainRelationshipProductionPlantID: whereHelperint{field: "`data_platform_planned_order_item_operation_data`.`SupplyChainRelationshipProductionPlantID`"},
	Product:                                  whereHelperstring{field: "`data_platform_planned_order_item_operation_data`.`Product`"},
	Buyer:                                    whereHelperint{field: "`data_platform_planned_order_item_operation_data`.`Buyer`"},
	Seller:                                   whereHelperint{field: "`data_platform_planned_order_item_operation_data`.`Seller`"},
	DeliverToParty:                           whereHelperint{field: "`data_platform_planned_order_item_operation_data`.`DeliverToParty`"},
	DeliverToPlant:                           whereHelperstring{field: "`data_platform_planned_order_item_operation_data`.`DeliverToPlant`"},
	DeliverFromParty:                         whereHelperint{field: "`data_platform_planned_order_item_operation_data`.`DeliverFromParty`"},
	DeliverFromPlant:                         whereHelperstring{field: "`data_platform_planned_order_item_operation_data`.`DeliverFromPlant`"},
	ProductionPlantBusinessPartner:           whereHelperint{field: "`data_platform_planned_order_item_operation_data`.`ProductionPlantBusinessPartner`"},
	ProductionPlant:                          whereHelperstring{field: "`data_platform_planned_order_item_operation_data`.`ProductionPlant`"},
	MRPArea:                                  whereHelpernull_String{field: "`data_platform_planned_order_item_operation_data`.`MRPArea`"},
	MRPController:                            whereHelpernull_String{field: "`data_platform_planned_order_item_operation_data`.`MRPController`"},
	ProductionVersion:                        whereHelpernull_Int{field: "`data_platform_planned_order_item_operation_data`.`ProductionVersion`"},
	ProductionVersionItem:                    whereHelpernull_Int{field: "`data_platform_planned_order_item_operation_data`.`ProductionVersionItem`"},
	Sequence:                                 whereHelperint{field: "`data_platform_planned_order_item_operation_data`.`Sequence`"},
	SequenceText:                             whereHelpernull_String{field: "`data_platform_planned_order_item_operation_data`.`SequenceText`"},
	OperationText:                            whereHelperstring{field: "`data_platform_planned_order_item_operation_data`.`OperationText`"},
	ProductBaseUnit:                          whereHelperstring{field: "`data_platform_planned_order_item_operation_data`.`ProductBaseUnit`"},
	ProductProductionUnit:                    whereHelperstring{field: "`data_platform_planned_order_item_operation_data`.`ProductProductionUnit`"},
	ProductOperationUnit:                     whereHelperstring{field: "`data_platform_planned_order_item_operation_data`.`ProductOperationUnit`"},
	ProductDeliveryUnit:                      whereHelperstring{field: "`data_platform_planned_order_item_operation_data`.`ProductDeliveryUnit`"},
	StandardLotSizeQuantity:                  whereHelperfloat32{field: "`data_platform_planned_order_item_operation_data`.`StandardLotSizeQuantity`"},
	MinimumLotSizeQuantity:                   whereHelperfloat32{field: "`data_platform_planned_order_item_operation_data`.`MinimumLotSizeQuantity`"},
	MaximumLotSizeQuantity:                   whereHelperfloat32{field: "`data_platform_planned_order_item_operation_data`.`MaximumLotSizeQuantity`"},
	OperationPlannedQuantityInBaseUnit:       whereHelperfloat32{field: "`data_platform_planned_order_item_operation_data`.`OperationPlannedQuantityInBaseUnit`"},
	OperationPlannedQuantityInProductionUnit: whereHelperfloat32{field: "`data_platform_planned_order_item_operation_data`.`OperationPlannedQuantityInProductionUnit`"},
	OperationPlannedQuantityInOperationUnit:  whereHelperfloat32{field: "`data_platform_planned_order_item_operation_data`.`OperationPlannedQuantityInOperationUnit`"},
	OperationPlannedQuantityInDeliveryUnit:   whereHelperfloat32{field: "`data_platform_planned_order_item_operation_data`.`OperationPlannedQuantityInDeliveryUnit`"},
	OperationPlannedScrapInPercent:           whereHelpernull_Float32{field: "`data_platform_planned_order_item_operation_data`.`OperationPlannedScrapInPercent`"},
	ResponsiblePlannerGroup:                  whereHelpernull_String{field: "`data_platform_planned_order_item_operation_data`.`ResponsiblePlannerGroup`"},
	PlainLongText:                            whereHelpernull_String{field: "`data_platform_planned_order_item_operation_data`.`PlainLongText`"},
	WorkCenter:                               whereHelperint{field: "`data_platform_planned_order_item_operation_data`.`WorkCenter`"},
	CapacityCategory:                         whereHelpernull_String{field: "`data_platform_planned_order_item_operation_data`.`CapacityCategory`"},
	OperationCostingRelevancyType:            whereHelpernull_String{field: "`data_platform_planned_order_item_operation_data`.`OperationCostingRelevancyType`"},
	OperationSetupType:                       whereHelpernull_String{field: "`data_platform_planned_order_item_operation_data`.`OperationSetupType`"},
	OperationSetupGroupCategory:              whereHelpernull_String{field: "`data_platform_planned_order_item_operation_data`.`OperationSetupGroupCategory`"},
	OperationSetupGroup:                      whereHelpernull_String{field: "`data_platform_planned_order_item_operation_data`.`OperationSetupGroup`"},
	MaximumWaitDuration:                      whereHelpernull_Float32{field: "`data_platform_planned_order_item_operation_data`.`MaximumWaitDuration`"},
	StandardWaitDuration:                     whereHelpernull_Float32{field: "`data_platform_planned_order_item_operation_data`.`StandardWaitDuration`"},
	MinimumWaitDuration:                      whereHelpernull_Float32{field: "`data_platform_planned_order_item_operation_data`.`MinimumWaitDuration`"},
	WaitDurationUnit:                         whereHelpernull_String{field: "`data_platform_planned_order_item_operation_data`.`WaitDurationUnit`"},
	MaximumQueueDuration:                     whereHelpernull_Float32{field: "`data_platform_planned_order_item_operation_data`.`MaximumQueueDuration`"},
	StandardQueueDuration:                    whereHelpernull_Float32{field: "`data_platform_planned_order_item_operation_data`.`StandardQueueDuration`"},
	MinimumQueueDuration:                     whereHelpernull_Float32{field: "`data_platform_planned_order_item_operation_data`.`MinimumQueueDuration`"},
	QueueDurationUnit:                        whereHelpernull_String{field: "`data_platform_planned_order_item_operation_data`.`QueueDurationUnit`"},
	MaximumMoveDuration:                      whereHelpernull_Float32{field: "`data_platform_planned_order_item_operation_data`.`MaximumMoveDuration`"},
	StandardMoveDuration:                     whereHelpernull_Float32{field: "`data_platform_planned_order_item_operation_data`.`StandardMoveDuration`"},
	MinimumMoveDuration:                      whereHelpernull_Float32{field: "`data_platform_planned_order_item_operation_data`.`MinimumMoveDuration`"},
	MoveDurationUnit:                         whereHelpernull_String{field: "`data_platform_planned_order_item_operation_data`.`MoveDurationUnit`"},
	StandardDeliveryDuration:                 whereHelpernull_Float32{field: "`data_platform_planned_order_item_operation_data`.`StandardDeliveryDuration`"},
	StandardDeliveryDurationUnit:             whereHelpernull_String{field: "`data_platform_planned_order_item_operation_data`.`StandardDeliveryDurationUnit`"},
	CostElement:                              whereHelpernull_String{field: "`data_platform_planned_order_item_operation_data`.`CostElement`"},
	PlannedOrderIsReleased:                   whereHelpernull_Bool{field: "`data_platform_planned_order_item_operation_data`.`PlannedOrderIsReleased`"},
	CreationDate:                             whereHelperstring{field: "`data_platform_planned_order_item_operation_data`.`CreationDate`"},
	CreationTime:                             whereHelperstring{field: "`data_platform_planned_order_item_operation_data`.`CreationTime`"},
	LastChangeDate:                           whereHelperstring{field: "`data_platform_planned_order_item_operation_data`.`LastChangeDate`"},
	LastChangeTime:                           whereHelperstring{field: "`data_platform_planned_order_item_operation_data`.`LastChangeTime`"},
	IsMarkedForDeletion:                      whereHelpernull_Bool{field: "`data_platform_planned_order_item_operation_data`.`IsMarkedForDeletion`"},
}

// DataPlatformPlannedOrderItemOperationDatumRels is where relationship names are stored.
var DataPlatformPlannedOrderItemOperationDatumRels = struct {
	MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum             string
	ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum              string
	ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum          string
	ProductionVersionDataPlatformProductionVersionItemDatum               string
	ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum         string
	ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum        string
	QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum            string
	BuyerDataPlatformSCRDeliveryRelationDatum                             string
	BuyerDataPlatformSCRGeneralDatum                                      string
	StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum string
	WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum             string
	WorkCenterDataPlatformWorkCenterGeneralDatum                          string
	PlannedOrderDataPlatformPlannedOrderItemDatum                         string
	OperationIDDataPlatformPlannedOrderItemOperationComponentData         string
}{
	MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum:             "MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum",
	ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum:              "ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum",
	ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum:          "ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum",
	ProductionVersionDataPlatformProductionVersionItemDatum:               "ProductionVersionDataPlatformProductionVersionItemDatum",
	ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum:         "ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum",
	ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum:        "ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum",
	QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum:            "QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum",
	BuyerDataPlatformSCRDeliveryRelationDatum:                             "BuyerDataPlatformSCRDeliveryRelationDatum",
	BuyerDataPlatformSCRGeneralDatum:                                      "BuyerDataPlatformSCRGeneralDatum",
	StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum: "StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum",
	WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum:             "WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum",
	WorkCenterDataPlatformWorkCenterGeneralDatum:                          "WorkCenterDataPlatformWorkCenterGeneralDatum",
	PlannedOrderDataPlatformPlannedOrderItemDatum:                         "PlannedOrderDataPlatformPlannedOrderItemDatum",
	OperationIDDataPlatformPlannedOrderItemOperationComponentData:         "OperationIDDataPlatformPlannedOrderItemOperationComponentData",
}

// dataPlatformPlannedOrderItemOperationDatumR is where relationships are stored.
type dataPlatformPlannedOrderItemOperationDatumR struct {
	MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum             *DataPlatformQuantityUnitQuantityUnitDatum               `boil:"MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum              *DataPlatformQuantityUnitQuantityUnitDatum               `boil:"ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum          *DataPlatformQuantityUnitQuantityUnitDatum               `boil:"ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	ProductionVersionDataPlatformProductionVersionItemDatum               *DataPlatformProductionVersionItemDatum                  `boil:"ProductionVersionDataPlatformProductionVersionItemDatum" json:"ProductionVersionDataPlatformProductionVersionItemDatum" toml:"ProductionVersionDataPlatformProductionVersionItemDatum" yaml:"ProductionVersionDataPlatformProductionVersionItemDatum"`
	ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum         *DataPlatformQuantityUnitQuantityUnitDatum               `boil:"ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum        *DataPlatformQuantityUnitQuantityUnitDatum               `boil:"ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum            *DataPlatformQuantityUnitQuantityUnitDatum               `boil:"QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	BuyerDataPlatformSCRDeliveryRelationDatum                             *DataPlatformSCRDeliveryRelationDatum                    `boil:"BuyerDataPlatformSCRDeliveryRelationDatum" json:"BuyerDataPlatformSCRDeliveryRelationDatum" toml:"BuyerDataPlatformSCRDeliveryRelationDatum" yaml:"BuyerDataPlatformSCRDeliveryRelationDatum"`
	BuyerDataPlatformSCRGeneralDatum                                      *DataPlatformSCRGeneralDatum                             `boil:"BuyerDataPlatformSCRGeneralDatum" json:"BuyerDataPlatformSCRGeneralDatum" toml:"BuyerDataPlatformSCRGeneralDatum" yaml:"BuyerDataPlatformSCRGeneralDatum"`
	StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum *DataPlatformQuantityUnitQuantityUnitDatum               `boil:"StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum             *DataPlatformQuantityUnitQuantityUnitDatum               `boil:"WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	WorkCenterDataPlatformWorkCenterGeneralDatum                          *DataPlatformWorkCenterGeneralDatum                      `boil:"WorkCenterDataPlatformWorkCenterGeneralDatum" json:"WorkCenterDataPlatformWorkCenterGeneralDatum" toml:"WorkCenterDataPlatformWorkCenterGeneralDatum" yaml:"WorkCenterDataPlatformWorkCenterGeneralDatum"`
	PlannedOrderDataPlatformPlannedOrderItemDatum                         *DataPlatformPlannedOrderItemDatum                       `boil:"PlannedOrderDataPlatformPlannedOrderItemDatum" json:"PlannedOrderDataPlatformPlannedOrderItemDatum" toml:"PlannedOrderDataPlatformPlannedOrderItemDatum" yaml:"PlannedOrderDataPlatformPlannedOrderItemDatum"`
	OperationIDDataPlatformPlannedOrderItemOperationComponentData         DataPlatformPlannedOrderItemOperationComponentDatumSlice `boil:"OperationIDDataPlatformPlannedOrderItemOperationComponentData" json:"OperationIDDataPlatformPlannedOrderItemOperationComponentData" toml:"OperationIDDataPlatformPlannedOrderItemOperationComponentData" yaml:"OperationIDDataPlatformPlannedOrderItemOperationComponentData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformPlannedOrderItemOperationDatumR) NewStruct() *dataPlatformPlannedOrderItemOperationDatumR {
	return &dataPlatformPlannedOrderItemOperationDatumR{}
}

func (r *dataPlatformPlannedOrderItemOperationDatumR) GetMoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformPlannedOrderItemOperationDatumR) GetProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformPlannedOrderItemOperationDatumR) GetProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformPlannedOrderItemOperationDatumR) GetProductionVersionDataPlatformProductionVersionItemDatum() *DataPlatformProductionVersionItemDatum {
	if r == nil {
		return nil
	}
	return r.ProductionVersionDataPlatformProductionVersionItemDatum
}

func (r *dataPlatformPlannedOrderItemOperationDatumR) GetProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformPlannedOrderItemOperationDatumR) GetProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformPlannedOrderItemOperationDatumR) GetQueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformPlannedOrderItemOperationDatumR) GetBuyerDataPlatformSCRDeliveryRelationDatum() *DataPlatformSCRDeliveryRelationDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRDeliveryRelationDatum
}

func (r *dataPlatformPlannedOrderItemOperationDatumR) GetBuyerDataPlatformSCRGeneralDatum() *DataPlatformSCRGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRGeneralDatum
}

func (r *dataPlatformPlannedOrderItemOperationDatumR) GetStandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformPlannedOrderItemOperationDatumR) GetWaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformPlannedOrderItemOperationDatumR) GetWorkCenterDataPlatformWorkCenterGeneralDatum() *DataPlatformWorkCenterGeneralDatum {
	if r == nil {
		return nil
	}
	return r.WorkCenterDataPlatformWorkCenterGeneralDatum
}

func (r *dataPlatformPlannedOrderItemOperationDatumR) GetPlannedOrderDataPlatformPlannedOrderItemDatum() *DataPlatformPlannedOrderItemDatum {
	if r == nil {
		return nil
	}
	return r.PlannedOrderDataPlatformPlannedOrderItemDatum
}

func (r *dataPlatformPlannedOrderItemOperationDatumR) GetOperationIDDataPlatformPlannedOrderItemOperationComponentData() DataPlatformPlannedOrderItemOperationComponentDatumSlice {
	if r == nil {
		return nil
	}
	return r.OperationIDDataPlatformPlannedOrderItemOperationComponentData
}

// dataPlatformPlannedOrderItemOperationDatumL is where Load methods for each relationship are stored.
type dataPlatformPlannedOrderItemOperationDatumL struct{}

var (
	dataPlatformPlannedOrderItemOperationDatumAllColumns            = []string{"PlannedOrder", "PlannedOrderItem", "Operations", "OperationsItem", "OperationID", "OperationType", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "SupplyChainRelationshipProductionPlantID", "Product", "Buyer", "Seller", "DeliverToParty", "DeliverToPlant", "DeliverFromParty", "DeliverFromPlant", "ProductionPlantBusinessPartner", "ProductionPlant", "MRPArea", "MRPController", "ProductionVersion", "ProductionVersionItem", "Sequence", "SequenceText", "OperationText", "ProductBaseUnit", "ProductProductionUnit", "ProductOperationUnit", "ProductDeliveryUnit", "StandardLotSizeQuantity", "MinimumLotSizeQuantity", "MaximumLotSizeQuantity", "OperationPlannedQuantityInBaseUnit", "OperationPlannedQuantityInProductionUnit", "OperationPlannedQuantityInOperationUnit", "OperationPlannedQuantityInDeliveryUnit", "OperationPlannedScrapInPercent", "ResponsiblePlannerGroup", "PlainLongText", "WorkCenter", "CapacityCategory", "OperationCostingRelevancyType", "OperationSetupType", "OperationSetupGroupCategory", "OperationSetupGroup", "MaximumWaitDuration", "StandardWaitDuration", "MinimumWaitDuration", "WaitDurationUnit", "MaximumQueueDuration", "StandardQueueDuration", "MinimumQueueDuration", "QueueDurationUnit", "MaximumMoveDuration", "StandardMoveDuration", "MinimumMoveDuration", "MoveDurationUnit", "StandardDeliveryDuration", "StandardDeliveryDurationUnit", "CostElement", "PlannedOrderIsReleased", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsMarkedForDeletion"}
	dataPlatformPlannedOrderItemOperationDatumColumnsWithoutDefault = []string{"PlannedOrder", "PlannedOrderItem", "Operations", "OperationsItem", "OperationID", "OperationType", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "SupplyChainRelationshipProductionPlantID", "Product", "Buyer", "Seller", "DeliverToParty", "DeliverToPlant", "DeliverFromParty", "DeliverFromPlant", "ProductionPlantBusinessPartner", "ProductionPlant", "MRPArea", "MRPController", "ProductionVersion", "ProductionVersionItem", "Sequence", "SequenceText", "OperationText", "ProductBaseUnit", "ProductProductionUnit", "ProductOperationUnit", "ProductDeliveryUnit", "StandardLotSizeQuantity", "MinimumLotSizeQuantity", "MaximumLotSizeQuantity", "OperationPlannedQuantityInBaseUnit", "OperationPlannedQuantityInProductionUnit", "OperationPlannedQuantityInOperationUnit", "OperationPlannedQuantityInDeliveryUnit", "OperationPlannedScrapInPercent", "ResponsiblePlannerGroup", "PlainLongText", "WorkCenter", "CapacityCategory", "OperationCostingRelevancyType", "OperationSetupType", "OperationSetupGroupCategory", "OperationSetupGroup", "MaximumWaitDuration", "StandardWaitDuration", "MinimumWaitDuration", "WaitDurationUnit", "MaximumQueueDuration", "StandardQueueDuration", "MinimumQueueDuration", "QueueDurationUnit", "MaximumMoveDuration", "StandardMoveDuration", "MinimumMoveDuration", "MoveDurationUnit", "StandardDeliveryDuration", "StandardDeliveryDurationUnit", "CostElement", "PlannedOrderIsReleased", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsMarkedForDeletion"}
	dataPlatformPlannedOrderItemOperationDatumColumnsWithDefault    = []string{}
	dataPlatformPlannedOrderItemOperationDatumPrimaryKeyColumns     = []string{"PlannedOrder", "PlannedOrderItem", "Operations", "OperationsItem", "OperationID"}
	dataPlatformPlannedOrderItemOperationDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformPlannedOrderItemOperationDatumSlice is an alias for a slice of pointers to DataPlatformPlannedOrderItemOperationDatum.
	// This should almost always be used instead of []DataPlatformPlannedOrderItemOperationDatum.
	DataPlatformPlannedOrderItemOperationDatumSlice []*DataPlatformPlannedOrderItemOperationDatum

	dataPlatformPlannedOrderItemOperationDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformPlannedOrderItemOperationDatumType                 = reflect.TypeOf(&DataPlatformPlannedOrderItemOperationDatum{})
	dataPlatformPlannedOrderItemOperationDatumMapping              = queries.MakeStructMapping(dataPlatformPlannedOrderItemOperationDatumType)
	dataPlatformPlannedOrderItemOperationDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformPlannedOrderItemOperationDatumType, dataPlatformPlannedOrderItemOperationDatumMapping, dataPlatformPlannedOrderItemOperationDatumPrimaryKeyColumns)
	dataPlatformPlannedOrderItemOperationDatumInsertCacheMut       sync.RWMutex
	dataPlatformPlannedOrderItemOperationDatumInsertCache          = make(map[string]insertCache)
	dataPlatformPlannedOrderItemOperationDatumUpdateCacheMut       sync.RWMutex
	dataPlatformPlannedOrderItemOperationDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformPlannedOrderItemOperationDatumUpsertCacheMut       sync.RWMutex
	dataPlatformPlannedOrderItemOperationDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformPlannedOrderItemOperationDatum record from the query.
func (q dataPlatformPlannedOrderItemOperationDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformPlannedOrderItemOperationDatum, error) {
	o := &DataPlatformPlannedOrderItemOperationDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_planned_order_item_operation_data")
	}

	return o, nil
}

// All returns all DataPlatformPlannedOrderItemOperationDatum records from the query.
func (q dataPlatformPlannedOrderItemOperationDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformPlannedOrderItemOperationDatumSlice, error) {
	var o []*DataPlatformPlannedOrderItemOperationDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformPlannedOrderItemOperationDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformPlannedOrderItemOperationDatum records in the query.
func (q dataPlatformPlannedOrderItemOperationDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_planned_order_item_operation_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformPlannedOrderItemOperationDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_planned_order_item_operation_data exists")
	}

	return count > 0, nil
}

// MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemOperationDatum) MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.MoveDurationUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemOperationDatum) ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.ProductBaseUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemOperationDatum) ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.ProductDeliveryUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// ProductionVersionDataPlatformProductionVersionItemDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemOperationDatum) ProductionVersionDataPlatformProductionVersionItemDatum(mods ...qm.QueryMod) dataPlatformProductionVersionItemDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ProductionVersion` = ?", o.ProductionVersion),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformProductionVersionItemData(queryMods...)
}

// ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemOperationDatum) ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.ProductOperationUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemOperationDatum) ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.ProductProductionUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemOperationDatum) QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.QueueDurationUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// BuyerDataPlatformSCRDeliveryRelationDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemOperationDatum) BuyerDataPlatformSCRDeliveryRelationDatum(mods ...qm.QueryMod) dataPlatformSCRDeliveryRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRDeliveryRelationData(queryMods...)
}

// BuyerDataPlatformSCRGeneralDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemOperationDatum) BuyerDataPlatformSCRGeneralDatum(mods ...qm.QueryMod) dataPlatformSCRGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRGeneralData(queryMods...)
}

// StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemOperationDatum) StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.StandardDeliveryDurationUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemOperationDatum) WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.WaitDurationUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// WorkCenterDataPlatformWorkCenterGeneralDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemOperationDatum) WorkCenterDataPlatformWorkCenterGeneralDatum(mods ...qm.QueryMod) dataPlatformWorkCenterGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`WorkCenter` = ?", o.WorkCenter),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformWorkCenterGeneralData(queryMods...)
}

// PlannedOrderDataPlatformPlannedOrderItemDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemOperationDatum) PlannedOrderDataPlatformPlannedOrderItemDatum(mods ...qm.QueryMod) dataPlatformPlannedOrderItemDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PlannedOrder` = ?", o.PlannedOrder),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPlannedOrderItemData(queryMods...)
}

// OperationIDDataPlatformPlannedOrderItemOperationComponentData retrieves all the data_platform_planned_order_item_operation_component_datum's DataPlatformPlannedOrderItemOperationComponentData with an executor via OperationID column.
func (o *DataPlatformPlannedOrderItemOperationDatum) OperationIDDataPlatformPlannedOrderItemOperationComponentData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemOperationComponentDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_operation_component_data`.`OperationID`=?", o.OperationID),
	)

	return DataPlatformPlannedOrderItemOperationComponentData(queryMods...)
}

// LoadMoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemOperationDatumL) LoadMoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemOperationDatum
	var object *DataPlatformPlannedOrderItemOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemOperationDatum.(*DataPlatformPlannedOrderItemOperationDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemOperationDatum.(*[]*DataPlatformPlannedOrderItemOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemOperationDatumR{}
		}
		if !queries.IsNil(object.MoveDurationUnit) {
			args = append(args, object.MoveDurationUnit)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemOperationDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.MoveDurationUnit) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.MoveDurationUnit) {
				args = append(args, obj.MoveDurationUnit)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.MoveDurationUnit, foreign.QuantityUnit) {
				local.R.MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemOperationDatumL) LoadProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemOperationDatum
	var object *DataPlatformPlannedOrderItemOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemOperationDatum.(*DataPlatformPlannedOrderItemOperationDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemOperationDatum.(*[]*DataPlatformPlannedOrderItemOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemOperationDatumR{}
		}
		args = append(args, object.ProductBaseUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemOperationDatumR{}
			}

			for _, a := range args {
				if a == obj.ProductBaseUnit {
					continue Outer
				}
			}

			args = append(args, obj.ProductBaseUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductBaseUnit == foreign.QuantityUnit {
				local.R.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemOperationDatumL) LoadProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemOperationDatum
	var object *DataPlatformPlannedOrderItemOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemOperationDatum.(*DataPlatformPlannedOrderItemOperationDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemOperationDatum.(*[]*DataPlatformPlannedOrderItemOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemOperationDatumR{}
		}
		args = append(args, object.ProductDeliveryUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemOperationDatumR{}
			}

			for _, a := range args {
				if a == obj.ProductDeliveryUnit {
					continue Outer
				}
			}

			args = append(args, obj.ProductDeliveryUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductDeliveryUnit == foreign.QuantityUnit {
				local.R.ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductionVersionDataPlatformProductionVersionItemDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemOperationDatumL) LoadProductionVersionDataPlatformProductionVersionItemDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemOperationDatum
	var object *DataPlatformPlannedOrderItemOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemOperationDatum.(*DataPlatformPlannedOrderItemOperationDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemOperationDatum.(*[]*DataPlatformPlannedOrderItemOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemOperationDatumR{}
		}
		if !queries.IsNil(object.ProductionVersion) {
			args = append(args, object.ProductionVersion)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemOperationDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductionVersion) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProductionVersion) {
				args = append(args, obj.ProductionVersion)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_version_item_data`),
		qm.WhereIn(`data_platform_production_version_item_data.ProductionVersion in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformProductionVersionItemDatum")
	}

	var resultSlice []*DataPlatformProductionVersionItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformProductionVersionItemDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_production_version_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_version_item_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductionVersionDataPlatformProductionVersionItemDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProductionVersion, foreign.ProductionVersion) {
				local.R.ProductionVersionDataPlatformProductionVersionItemDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemOperationDatumL) LoadProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemOperationDatum
	var object *DataPlatformPlannedOrderItemOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemOperationDatum.(*DataPlatformPlannedOrderItemOperationDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemOperationDatum.(*[]*DataPlatformPlannedOrderItemOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemOperationDatumR{}
		}
		args = append(args, object.ProductOperationUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemOperationDatumR{}
			}

			for _, a := range args {
				if a == obj.ProductOperationUnit {
					continue Outer
				}
			}

			args = append(args, obj.ProductOperationUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductOperationUnit == foreign.QuantityUnit {
				local.R.ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemOperationDatumL) LoadProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemOperationDatum
	var object *DataPlatformPlannedOrderItemOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemOperationDatum.(*DataPlatformPlannedOrderItemOperationDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemOperationDatum.(*[]*DataPlatformPlannedOrderItemOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemOperationDatumR{}
		}
		args = append(args, object.ProductProductionUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemOperationDatumR{}
			}

			for _, a := range args {
				if a == obj.ProductProductionUnit {
					continue Outer
				}
			}

			args = append(args, obj.ProductProductionUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductProductionUnit == foreign.QuantityUnit {
				local.R.ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadQueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemOperationDatumL) LoadQueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemOperationDatum
	var object *DataPlatformPlannedOrderItemOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemOperationDatum.(*DataPlatformPlannedOrderItemOperationDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemOperationDatum.(*[]*DataPlatformPlannedOrderItemOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemOperationDatumR{}
		}
		if !queries.IsNil(object.QueueDurationUnit) {
			args = append(args, object.QueueDurationUnit)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemOperationDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QueueDurationUnit) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.QueueDurationUnit) {
				args = append(args, obj.QueueDurationUnit)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.QueueDurationUnit, foreign.QuantityUnit) {
				local.R.QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRDeliveryRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemOperationDatumL) LoadBuyerDataPlatformSCRDeliveryRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemOperationDatum
	var object *DataPlatformPlannedOrderItemOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemOperationDatum.(*DataPlatformPlannedOrderItemOperationDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemOperationDatum.(*[]*DataPlatformPlannedOrderItemOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemOperationDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemOperationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_delivery_relation_data`),
		qm.WhereIn(`data_platform_scr_delivery_relation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRDeliveryRelationDatum")
	}

	var resultSlice []*DataPlatformSCRDeliveryRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRDeliveryRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_delivery_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_delivery_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRDeliveryRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRDeliveryRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemOperationDatumL) LoadBuyerDataPlatformSCRGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemOperationDatum
	var object *DataPlatformPlannedOrderItemOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemOperationDatum.(*DataPlatformPlannedOrderItemOperationDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemOperationDatum.(*[]*DataPlatformPlannedOrderItemOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemOperationDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemOperationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_general_data`),
		qm.WhereIn(`data_platform_scr_general_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRGeneralDatum")
	}

	var resultSlice []*DataPlatformSCRGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadStandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemOperationDatumL) LoadStandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemOperationDatum
	var object *DataPlatformPlannedOrderItemOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemOperationDatum.(*DataPlatformPlannedOrderItemOperationDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemOperationDatum.(*[]*DataPlatformPlannedOrderItemOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemOperationDatumR{}
		}
		if !queries.IsNil(object.StandardDeliveryDurationUnit) {
			args = append(args, object.StandardDeliveryDurationUnit)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemOperationDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.StandardDeliveryDurationUnit) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.StandardDeliveryDurationUnit) {
				args = append(args, obj.StandardDeliveryDurationUnit)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.StandardDeliveryDurationUnit, foreign.QuantityUnit) {
				local.R.StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadWaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemOperationDatumL) LoadWaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemOperationDatum
	var object *DataPlatformPlannedOrderItemOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemOperationDatum.(*DataPlatformPlannedOrderItemOperationDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemOperationDatum.(*[]*DataPlatformPlannedOrderItemOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemOperationDatumR{}
		}
		if !queries.IsNil(object.WaitDurationUnit) {
			args = append(args, object.WaitDurationUnit)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemOperationDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.WaitDurationUnit) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.WaitDurationUnit) {
				args = append(args, obj.WaitDurationUnit)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.WaitDurationUnit, foreign.QuantityUnit) {
				local.R.WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadWorkCenterDataPlatformWorkCenterGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemOperationDatumL) LoadWorkCenterDataPlatformWorkCenterGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemOperationDatum
	var object *DataPlatformPlannedOrderItemOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemOperationDatum.(*DataPlatformPlannedOrderItemOperationDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemOperationDatum.(*[]*DataPlatformPlannedOrderItemOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemOperationDatumR{}
		}
		args = append(args, object.WorkCenter)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemOperationDatumR{}
			}

			for _, a := range args {
				if a == obj.WorkCenter {
					continue Outer
				}
			}

			args = append(args, obj.WorkCenter)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_work_center_general_data`),
		qm.WhereIn(`data_platform_work_center_general_data.WorkCenter in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformWorkCenterGeneralDatum")
	}

	var resultSlice []*DataPlatformWorkCenterGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformWorkCenterGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_work_center_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_work_center_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.WorkCenterDataPlatformWorkCenterGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.WorkCenter == foreign.WorkCenter {
				local.R.WorkCenterDataPlatformWorkCenterGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadPlannedOrderDataPlatformPlannedOrderItemDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemOperationDatumL) LoadPlannedOrderDataPlatformPlannedOrderItemDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemOperationDatum
	var object *DataPlatformPlannedOrderItemOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemOperationDatum.(*DataPlatformPlannedOrderItemOperationDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemOperationDatum.(*[]*DataPlatformPlannedOrderItemOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemOperationDatumR{}
		}
		args = append(args, object.PlannedOrder)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemOperationDatumR{}
			}

			for _, a := range args {
				if a == obj.PlannedOrder {
					continue Outer
				}
			}

			args = append(args, obj.PlannedOrder)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_data`),
		qm.WhereIn(`data_platform_planned_order_item_data.PlannedOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPlannedOrderItemDatum")
	}

	var resultSlice []*DataPlatformPlannedOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPlannedOrderItemDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_planned_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PlannedOrderDataPlatformPlannedOrderItemDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlannedOrder == foreign.PlannedOrder {
				local.R.PlannedOrderDataPlatformPlannedOrderItemDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadOperationIDDataPlatformPlannedOrderItemOperationComponentData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlannedOrderItemOperationDatumL) LoadOperationIDDataPlatformPlannedOrderItemOperationComponentData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemOperationDatum
	var object *DataPlatformPlannedOrderItemOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemOperationDatum.(*DataPlatformPlannedOrderItemOperationDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemOperationDatum.(*[]*DataPlatformPlannedOrderItemOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemOperationDatumR{}
		}
		args = append(args, object.OperationID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemOperationDatumR{}
			}

			for _, a := range args {
				if a == obj.OperationID {
					continue Outer
				}
			}

			args = append(args, obj.OperationID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_operation_component_data`),
		qm.WhereIn(`data_platform_planned_order_item_operation_component_data.OperationID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_operation_component_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemOperationComponentDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_operation_component_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_operation_component_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_operation_component_data")
	}

	if singular {
		object.R.OperationIDDataPlatformPlannedOrderItemOperationComponentData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.OperationID == foreign.OperationID {
				local.R.OperationIDDataPlatformPlannedOrderItemOperationComponentData = append(local.R.OperationIDDataPlatformPlannedOrderItemOperationComponentData, foreign)
				break
			}
		}
	}

	return nil
}

// SetMoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformPlannedOrderItemOperationDatum to the related item.
// Sets o.R.MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformPlannedOrderItemOperationDatum) SetMoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"MoveDurationUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.PlannedOrder, o.PlannedOrderItem, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.MoveDurationUnit, related.QuantityUnit)
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemOperationDatumR{
			MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// RemoveMoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum relationship.
// Sets o.R.MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum to nil.
func (o *DataPlatformPlannedOrderItemOperationDatum) RemoveMoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error

	queries.SetScanner(&o.MoveDurationUnit, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("MoveDurationUnit")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformPlannedOrderItemOperationDatum to the related item.
// Sets o.R.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformPlannedOrderItemOperationDatum) SetProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductBaseUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.PlannedOrder, o.PlannedOrderItem, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductBaseUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemOperationDatumR{
			ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformPlannedOrderItemOperationDatum to the related item.
// Sets o.R.ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformPlannedOrderItemOperationDatum) SetProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductDeliveryUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.PlannedOrder, o.PlannedOrderItem, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductDeliveryUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemOperationDatumR{
			ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetProductionVersionDataPlatformProductionVersionItemDatum of the dataPlatformPlannedOrderItemOperationDatum to the related item.
// Sets o.R.ProductionVersionDataPlatformProductionVersionItemDatum to related.
func (o *DataPlatformPlannedOrderItemOperationDatum) SetProductionVersionDataPlatformProductionVersionItemDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformProductionVersionItemDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductionVersion"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.ProductionVersion, o.PlannedOrder, o.PlannedOrderItem, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProductionVersion, related.ProductionVersion)
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemOperationDatumR{
			ProductionVersionDataPlatformProductionVersionItemDatum: related,
		}
	} else {
		o.R.ProductionVersionDataPlatformProductionVersionItemDatum = related
	}

	return nil
}

// RemoveProductionVersionDataPlatformProductionVersionItemDatum relationship.
// Sets o.R.ProductionVersionDataPlatformProductionVersionItemDatum to nil.
func (o *DataPlatformPlannedOrderItemOperationDatum) RemoveProductionVersionDataPlatformProductionVersionItemDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformProductionVersionItemDatum) error {
	var err error

	queries.SetScanner(&o.ProductionVersion, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("ProductionVersion")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductionVersionDataPlatformProductionVersionItemDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformPlannedOrderItemOperationDatum to the related item.
// Sets o.R.ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformPlannedOrderItemOperationDatum) SetProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductOperationUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.PlannedOrder, o.PlannedOrderItem, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductOperationUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemOperationDatumR{
			ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformPlannedOrderItemOperationDatum to the related item.
// Sets o.R.ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformPlannedOrderItemOperationDatum) SetProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductProductionUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.PlannedOrder, o.PlannedOrderItem, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductProductionUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemOperationDatumR{
			ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetQueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformPlannedOrderItemOperationDatum to the related item.
// Sets o.R.QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformPlannedOrderItemOperationDatum) SetQueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"QueueDurationUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.PlannedOrder, o.PlannedOrderItem, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.QueueDurationUnit, related.QuantityUnit)
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemOperationDatumR{
			QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// RemoveQueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum relationship.
// Sets o.R.QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum to nil.
func (o *DataPlatformPlannedOrderItemOperationDatum) RemoveQueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error

	queries.SetScanner(&o.QueueDurationUnit, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("QueueDurationUnit")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetBuyerDataPlatformSCRDeliveryRelationDatum of the dataPlatformPlannedOrderItemOperationDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRDeliveryRelationDatum to related.
func (o *DataPlatformPlannedOrderItemOperationDatum) SetBuyerDataPlatformSCRDeliveryRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRDeliveryRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.PlannedOrder, o.PlannedOrderItem, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemOperationDatumR{
			BuyerDataPlatformSCRDeliveryRelationDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRDeliveryRelationDatum = related
	}

	return nil
}

// SetBuyerDataPlatformSCRGeneralDatum of the dataPlatformPlannedOrderItemOperationDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRGeneralDatum to related.
func (o *DataPlatformPlannedOrderItemOperationDatum) SetBuyerDataPlatformSCRGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.PlannedOrder, o.PlannedOrderItem, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemOperationDatumR{
			BuyerDataPlatformSCRGeneralDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRGeneralDatum = related
	}

	return nil
}

// SetStandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformPlannedOrderItemOperationDatum to the related item.
// Sets o.R.StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformPlannedOrderItemOperationDatum) SetStandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"StandardDeliveryDurationUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.PlannedOrder, o.PlannedOrderItem, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.StandardDeliveryDurationUnit, related.QuantityUnit)
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemOperationDatumR{
			StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// RemoveStandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum relationship.
// Sets o.R.StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum to nil.
func (o *DataPlatformPlannedOrderItemOperationDatum) RemoveStandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error

	queries.SetScanner(&o.StandardDeliveryDurationUnit, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("StandardDeliveryDurationUnit")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetWaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformPlannedOrderItemOperationDatum to the related item.
// Sets o.R.WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformPlannedOrderItemOperationDatum) SetWaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"WaitDurationUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.PlannedOrder, o.PlannedOrderItem, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.WaitDurationUnit, related.QuantityUnit)
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemOperationDatumR{
			WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// RemoveWaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum relationship.
// Sets o.R.WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum to nil.
func (o *DataPlatformPlannedOrderItemOperationDatum) RemoveWaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error

	queries.SetScanner(&o.WaitDurationUnit, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("WaitDurationUnit")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetWorkCenterDataPlatformWorkCenterGeneralDatum of the dataPlatformPlannedOrderItemOperationDatum to the related item.
// Sets o.R.WorkCenterDataPlatformWorkCenterGeneralDatum to related.
func (o *DataPlatformPlannedOrderItemOperationDatum) SetWorkCenterDataPlatformWorkCenterGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformWorkCenterGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"WorkCenter"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.WorkCenter, o.PlannedOrder, o.PlannedOrderItem, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.WorkCenter = related.WorkCenter
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemOperationDatumR{
			WorkCenterDataPlatformWorkCenterGeneralDatum: related,
		}
	} else {
		o.R.WorkCenterDataPlatformWorkCenterGeneralDatum = related
	}

	return nil
}

// SetPlannedOrderDataPlatformPlannedOrderItemDatum of the dataPlatformPlannedOrderItemOperationDatum to the related item.
// Sets o.R.PlannedOrderDataPlatformPlannedOrderItemDatum to related.
func (o *DataPlatformPlannedOrderItemOperationDatum) SetPlannedOrderDataPlatformPlannedOrderItemDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPlannedOrderItemDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PlannedOrder"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PlannedOrder, o.PlannedOrder, o.PlannedOrderItem, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlannedOrder = related.PlannedOrder
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemOperationDatumR{
			PlannedOrderDataPlatformPlannedOrderItemDatum: related,
		}
	} else {
		o.R.PlannedOrderDataPlatformPlannedOrderItemDatum = related
	}

	return nil
}

// AddOperationIDDataPlatformPlannedOrderItemOperationComponentData adds the given related objects to the existing relationships
// of the data_platform_planned_order_item_operation_datum, optionally inserting them as new records.
// Appends related to o.R.OperationIDDataPlatformPlannedOrderItemOperationComponentData.
func (o *DataPlatformPlannedOrderItemOperationDatum) AddOperationIDDataPlatformPlannedOrderItemOperationComponentData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemOperationComponentDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OperationID = o.OperationID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_operation_component_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"OperationID"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemOperationComponentDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.OperationID, rel.PlannedOrder, rel.PlannedOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID, rel.BillOfMaterial, rel.BillOfMaterialItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OperationID = o.OperationID
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemOperationDatumR{
			OperationIDDataPlatformPlannedOrderItemOperationComponentData: related,
		}
	} else {
		o.R.OperationIDDataPlatformPlannedOrderItemOperationComponentData = append(o.R.OperationIDDataPlatformPlannedOrderItemOperationComponentData, related...)
	}

	return nil
}

// DataPlatformPlannedOrderItemOperationData retrieves all the records using an executor.
func DataPlatformPlannedOrderItemOperationData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemOperationDatumQuery {
	mods = append(mods, qm.From("`data_platform_planned_order_item_operation_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_planned_order_item_operation_data`.*"})
	}

	return dataPlatformPlannedOrderItemOperationDatumQuery{q}
}

// FindDataPlatformPlannedOrderItemOperationDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformPlannedOrderItemOperationDatum(ctx context.Context, exec boil.ContextExecutor, plannedOrder int, plannedOrderItem int, operations int, operationsItem int, operationID int, selectCols ...string) (*DataPlatformPlannedOrderItemOperationDatum, error) {
	dataPlatformPlannedOrderItemOperationDatumObj := &DataPlatformPlannedOrderItemOperationDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_planned_order_item_operation_data` where `PlannedOrder`=? AND `PlannedOrderItem`=? AND `Operations`=? AND `OperationsItem`=? AND `OperationID`=?", sel,
	)

	q := queries.Raw(query, plannedOrder, plannedOrderItem, operations, operationsItem, operationID)

	err := q.Bind(ctx, exec, dataPlatformPlannedOrderItemOperationDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_planned_order_item_operation_data")
	}

	return dataPlatformPlannedOrderItemOperationDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformPlannedOrderItemOperationDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_planned_order_item_operation_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPlannedOrderItemOperationDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformPlannedOrderItemOperationDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformPlannedOrderItemOperationDatumInsertCache[key]
	dataPlatformPlannedOrderItemOperationDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformPlannedOrderItemOperationDatumAllColumns,
			dataPlatformPlannedOrderItemOperationDatumColumnsWithDefault,
			dataPlatformPlannedOrderItemOperationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPlannedOrderItemOperationDatumType, dataPlatformPlannedOrderItemOperationDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformPlannedOrderItemOperationDatumType, dataPlatformPlannedOrderItemOperationDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_planned_order_item_operation_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_planned_order_item_operation_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_planned_order_item_operation_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemOperationDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_planned_order_item_operation_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PlannedOrder,
		o.PlannedOrderItem,
		o.Operations,
		o.OperationsItem,
		o.OperationID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_planned_order_item_operation_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPlannedOrderItemOperationDatumInsertCacheMut.Lock()
		dataPlatformPlannedOrderItemOperationDatumInsertCache[key] = cache
		dataPlatformPlannedOrderItemOperationDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformPlannedOrderItemOperationDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformPlannedOrderItemOperationDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformPlannedOrderItemOperationDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformPlannedOrderItemOperationDatumUpdateCache[key]
	dataPlatformPlannedOrderItemOperationDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformPlannedOrderItemOperationDatumAllColumns,
			dataPlatformPlannedOrderItemOperationDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_planned_order_item_operation_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_planned_order_item_operation_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemOperationDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformPlannedOrderItemOperationDatumType, dataPlatformPlannedOrderItemOperationDatumMapping, append(wl, dataPlatformPlannedOrderItemOperationDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_planned_order_item_operation_data row")
	}

	if !cached {
		dataPlatformPlannedOrderItemOperationDatumUpdateCacheMut.Lock()
		dataPlatformPlannedOrderItemOperationDatumUpdateCache[key] = cache
		dataPlatformPlannedOrderItemOperationDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformPlannedOrderItemOperationDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_planned_order_item_operation_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformPlannedOrderItemOperationDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPlannedOrderItemOperationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_planned_order_item_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPlannedOrderItemOperationDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformPlannedOrderItemOperationDatum slice")
	}

	return nil
}

var mySQLDataPlatformPlannedOrderItemOperationDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformPlannedOrderItemOperationDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_planned_order_item_operation_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPlannedOrderItemOperationDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformPlannedOrderItemOperationDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformPlannedOrderItemOperationDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformPlannedOrderItemOperationDatumUpsertCache[key]
	dataPlatformPlannedOrderItemOperationDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformPlannedOrderItemOperationDatumAllColumns,
			dataPlatformPlannedOrderItemOperationDatumColumnsWithDefault,
			dataPlatformPlannedOrderItemOperationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformPlannedOrderItemOperationDatumAllColumns,
			dataPlatformPlannedOrderItemOperationDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_planned_order_item_operation_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_planned_order_item_operation_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_planned_order_item_operation_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPlannedOrderItemOperationDatumType, dataPlatformPlannedOrderItemOperationDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformPlannedOrderItemOperationDatumType, dataPlatformPlannedOrderItemOperationDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_planned_order_item_operation_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformPlannedOrderItemOperationDatumType, dataPlatformPlannedOrderItemOperationDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_planned_order_item_operation_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_planned_order_item_operation_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPlannedOrderItemOperationDatumUpsertCacheMut.Lock()
		dataPlatformPlannedOrderItemOperationDatumUpsertCache[key] = cache
		dataPlatformPlannedOrderItemOperationDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformPlannedOrderItemOperationDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformPlannedOrderItemOperationDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformPlannedOrderItemOperationDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformPlannedOrderItemOperationDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_planned_order_item_operation_data` WHERE `PlannedOrder`=? AND `PlannedOrderItem`=? AND `Operations`=? AND `OperationsItem`=? AND `OperationID`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_planned_order_item_operation_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformPlannedOrderItemOperationDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformPlannedOrderItemOperationDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_planned_order_item_operation_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformPlannedOrderItemOperationDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPlannedOrderItemOperationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_planned_order_item_operation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPlannedOrderItemOperationDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformPlannedOrderItemOperationDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformPlannedOrderItemOperationDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformPlannedOrderItemOperationDatum(ctx, exec, o.PlannedOrder, o.PlannedOrderItem, o.Operations, o.OperationsItem, o.OperationID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformPlannedOrderItemOperationDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformPlannedOrderItemOperationDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPlannedOrderItemOperationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_planned_order_item_operation_data`.* FROM `data_platform_planned_order_item_operation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPlannedOrderItemOperationDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformPlannedOrderItemOperationDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformPlannedOrderItemOperationDatumExists checks if the DataPlatformPlannedOrderItemOperationDatum row exists.
func DataPlatformPlannedOrderItemOperationDatumExists(ctx context.Context, exec boil.ContextExecutor, plannedOrder int, plannedOrderItem int, operations int, operationsItem int, operationID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_planned_order_item_operation_data` where `PlannedOrder`=? AND `PlannedOrderItem`=? AND `Operations`=? AND `OperationsItem`=? AND `OperationID`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, plannedOrder, plannedOrderItem, operations, operationsItem, operationID)
	}
	row := exec.QueryRowContext(ctx, sql, plannedOrder, plannedOrderItem, operations, operationsItem, operationID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_planned_order_item_operation_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformPlannedOrderItemOperationDatum row exists.
func (o *DataPlatformPlannedOrderItemOperationDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformPlannedOrderItemOperationDatumExists(ctx, exec, o.PlannedOrder, o.PlannedOrderItem, o.Operations, o.OperationsItem, o.OperationID)
}
