// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformTimeZoneTimeZoneDatum is an object representing the database table.
type DataPlatformTimeZoneTimeZoneDatum struct {
	TimeZone            string       `boil:"TimeZone" json:"TimeZone" toml:"TimeZone" yaml:"TimeZone"`
	Country             string       `boil:"Country" json:"Country" toml:"Country" yaml:"Country"`
	GlobalRegion        null.String  `boil:"GlobalRegion" json:"GlobalRegion,omitempty" toml:"GlobalRegion" yaml:"GlobalRegion,omitempty"`
	OffSetPlusMinusFlag null.String  `boil:"OffSetPlusMinusFlag" json:"OffSetPlusMinusFlag,omitempty" toml:"OffSetPlusMinusFlag" yaml:"OffSetPlusMinusFlag,omitempty"`
	OffSetTime          null.Float32 `boil:"OffSetTime" json:"OffSetTime,omitempty" toml:"OffSetTime" yaml:"OffSetTime,omitempty"`

	R *dataPlatformTimeZoneTimeZoneDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformTimeZoneTimeZoneDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformTimeZoneTimeZoneDatumColumns = struct {
	TimeZone            string
	Country             string
	GlobalRegion        string
	OffSetPlusMinusFlag string
	OffSetTime          string
}{
	TimeZone:            "TimeZone",
	Country:             "Country",
	GlobalRegion:        "GlobalRegion",
	OffSetPlusMinusFlag: "OffSetPlusMinusFlag",
	OffSetTime:          "OffSetTime",
}

var DataPlatformTimeZoneTimeZoneDatumTableColumns = struct {
	TimeZone            string
	Country             string
	GlobalRegion        string
	OffSetPlusMinusFlag string
	OffSetTime          string
}{
	TimeZone:            "data_platform_time_zone_time_zone_data.TimeZone",
	Country:             "data_platform_time_zone_time_zone_data.Country",
	GlobalRegion:        "data_platform_time_zone_time_zone_data.GlobalRegion",
	OffSetPlusMinusFlag: "data_platform_time_zone_time_zone_data.OffSetPlusMinusFlag",
	OffSetTime:          "data_platform_time_zone_time_zone_data.OffSetTime",
}

// Generated where

var DataPlatformTimeZoneTimeZoneDatumWhere = struct {
	TimeZone            whereHelperstring
	Country             whereHelperstring
	GlobalRegion        whereHelpernull_String
	OffSetPlusMinusFlag whereHelpernull_String
	OffSetTime          whereHelpernull_Float32
}{
	TimeZone:            whereHelperstring{field: "`data_platform_time_zone_time_zone_data`.`TimeZone`"},
	Country:             whereHelperstring{field: "`data_platform_time_zone_time_zone_data`.`Country`"},
	GlobalRegion:        whereHelpernull_String{field: "`data_platform_time_zone_time_zone_data`.`GlobalRegion`"},
	OffSetPlusMinusFlag: whereHelpernull_String{field: "`data_platform_time_zone_time_zone_data`.`OffSetPlusMinusFlag`"},
	OffSetTime:          whereHelpernull_Float32{field: "`data_platform_time_zone_time_zone_data`.`OffSetTime`"},
}

// DataPlatformTimeZoneTimeZoneDatumRels is where relationship names are stored.
var DataPlatformTimeZoneTimeZoneDatumRels = struct {
	DeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData       string
	DeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData         string
	DeliverFromPlantTimeZoneDataPlatformOrdersItemData                   string
	DeliverToPlantTimeZoneDataPlatformOrdersItemData                     string
	ProductionPlantTimeZoneDataPlatformOrdersItemData                    string
	StockConfirmationPlantTimeZoneDataPlatformOrdersItemData             string
	StockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData string
	TimeZoneDataPlatformPlantGeneralData                                 string
	TimeZoneDataPlatformTimeZoneTimeZoneTextData                         string
}{
	DeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData:       "DeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData",
	DeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData:         "DeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData",
	DeliverFromPlantTimeZoneDataPlatformOrdersItemData:                   "DeliverFromPlantTimeZoneDataPlatformOrdersItemData",
	DeliverToPlantTimeZoneDataPlatformOrdersItemData:                     "DeliverToPlantTimeZoneDataPlatformOrdersItemData",
	ProductionPlantTimeZoneDataPlatformOrdersItemData:                    "ProductionPlantTimeZoneDataPlatformOrdersItemData",
	StockConfirmationPlantTimeZoneDataPlatformOrdersItemData:             "StockConfirmationPlantTimeZoneDataPlatformOrdersItemData",
	StockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData: "StockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData",
	TimeZoneDataPlatformPlantGeneralData:                                 "TimeZoneDataPlatformPlantGeneralData",
	TimeZoneDataPlatformTimeZoneTimeZoneTextData:                         "TimeZoneDataPlatformTimeZoneTimeZoneTextData",
}

// dataPlatformTimeZoneTimeZoneDatumR is where relationships are stored.
type dataPlatformTimeZoneTimeZoneDatumR struct {
	DeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData       DataPlatformDeliveryDocumentHeaderDatumSlice `boil:"DeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData" json:"DeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData" toml:"DeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData" yaml:"DeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData"`
	DeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData         DataPlatformDeliveryDocumentHeaderDatumSlice `boil:"DeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData" json:"DeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData" toml:"DeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData" yaml:"DeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData"`
	DeliverFromPlantTimeZoneDataPlatformOrdersItemData                   DataPlatformOrdersItemDatumSlice             `boil:"DeliverFromPlantTimeZoneDataPlatformOrdersItemData" json:"DeliverFromPlantTimeZoneDataPlatformOrdersItemData" toml:"DeliverFromPlantTimeZoneDataPlatformOrdersItemData" yaml:"DeliverFromPlantTimeZoneDataPlatformOrdersItemData"`
	DeliverToPlantTimeZoneDataPlatformOrdersItemData                     DataPlatformOrdersItemDatumSlice             `boil:"DeliverToPlantTimeZoneDataPlatformOrdersItemData" json:"DeliverToPlantTimeZoneDataPlatformOrdersItemData" toml:"DeliverToPlantTimeZoneDataPlatformOrdersItemData" yaml:"DeliverToPlantTimeZoneDataPlatformOrdersItemData"`
	ProductionPlantTimeZoneDataPlatformOrdersItemData                    DataPlatformOrdersItemDatumSlice             `boil:"ProductionPlantTimeZoneDataPlatformOrdersItemData" json:"ProductionPlantTimeZoneDataPlatformOrdersItemData" toml:"ProductionPlantTimeZoneDataPlatformOrdersItemData" yaml:"ProductionPlantTimeZoneDataPlatformOrdersItemData"`
	StockConfirmationPlantTimeZoneDataPlatformOrdersItemData             DataPlatformOrdersItemDatumSlice             `boil:"StockConfirmationPlantTimeZoneDataPlatformOrdersItemData" json:"StockConfirmationPlantTimeZoneDataPlatformOrdersItemData" toml:"StockConfirmationPlantTimeZoneDataPlatformOrdersItemData" yaml:"StockConfirmationPlantTimeZoneDataPlatformOrdersItemData"`
	StockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData DataPlatformOrdersItemScheduleLineDatumSlice `boil:"StockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData" json:"StockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData" toml:"StockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData" yaml:"StockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData"`
	TimeZoneDataPlatformPlantGeneralData                                 DataPlatformPlantGeneralDatumSlice           `boil:"TimeZoneDataPlatformPlantGeneralData" json:"TimeZoneDataPlatformPlantGeneralData" toml:"TimeZoneDataPlatformPlantGeneralData" yaml:"TimeZoneDataPlatformPlantGeneralData"`
	TimeZoneDataPlatformTimeZoneTimeZoneTextData                         DataPlatformTimeZoneTimeZoneTextDatumSlice   `boil:"TimeZoneDataPlatformTimeZoneTimeZoneTextData" json:"TimeZoneDataPlatformTimeZoneTimeZoneTextData" toml:"TimeZoneDataPlatformTimeZoneTimeZoneTextData" yaml:"TimeZoneDataPlatformTimeZoneTimeZoneTextData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformTimeZoneTimeZoneDatumR) NewStruct() *dataPlatformTimeZoneTimeZoneDatumR {
	return &dataPlatformTimeZoneTimeZoneDatumR{}
}

func (r *dataPlatformTimeZoneTimeZoneDatumR) GetDeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData() DataPlatformDeliveryDocumentHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.DeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData
}

func (r *dataPlatformTimeZoneTimeZoneDatumR) GetDeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData() DataPlatformDeliveryDocumentHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.DeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData
}

func (r *dataPlatformTimeZoneTimeZoneDatumR) GetDeliverFromPlantTimeZoneDataPlatformOrdersItemData() DataPlatformOrdersItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.DeliverFromPlantTimeZoneDataPlatformOrdersItemData
}

func (r *dataPlatformTimeZoneTimeZoneDatumR) GetDeliverToPlantTimeZoneDataPlatformOrdersItemData() DataPlatformOrdersItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.DeliverToPlantTimeZoneDataPlatformOrdersItemData
}

func (r *dataPlatformTimeZoneTimeZoneDatumR) GetProductionPlantTimeZoneDataPlatformOrdersItemData() DataPlatformOrdersItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductionPlantTimeZoneDataPlatformOrdersItemData
}

func (r *dataPlatformTimeZoneTimeZoneDatumR) GetStockConfirmationPlantTimeZoneDataPlatformOrdersItemData() DataPlatformOrdersItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.StockConfirmationPlantTimeZoneDataPlatformOrdersItemData
}

func (r *dataPlatformTimeZoneTimeZoneDatumR) GetStockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData() DataPlatformOrdersItemScheduleLineDatumSlice {
	if r == nil {
		return nil
	}
	return r.StockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData
}

func (r *dataPlatformTimeZoneTimeZoneDatumR) GetTimeZoneDataPlatformPlantGeneralData() DataPlatformPlantGeneralDatumSlice {
	if r == nil {
		return nil
	}
	return r.TimeZoneDataPlatformPlantGeneralData
}

func (r *dataPlatformTimeZoneTimeZoneDatumR) GetTimeZoneDataPlatformTimeZoneTimeZoneTextData() DataPlatformTimeZoneTimeZoneTextDatumSlice {
	if r == nil {
		return nil
	}
	return r.TimeZoneDataPlatformTimeZoneTimeZoneTextData
}

// dataPlatformTimeZoneTimeZoneDatumL is where Load methods for each relationship are stored.
type dataPlatformTimeZoneTimeZoneDatumL struct{}

var (
	dataPlatformTimeZoneTimeZoneDatumAllColumns            = []string{"TimeZone", "Country", "GlobalRegion", "OffSetPlusMinusFlag", "OffSetTime"}
	dataPlatformTimeZoneTimeZoneDatumColumnsWithoutDefault = []string{"TimeZone", "Country", "GlobalRegion", "OffSetPlusMinusFlag", "OffSetTime"}
	dataPlatformTimeZoneTimeZoneDatumColumnsWithDefault    = []string{}
	dataPlatformTimeZoneTimeZoneDatumPrimaryKeyColumns     = []string{"TimeZone"}
	dataPlatformTimeZoneTimeZoneDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformTimeZoneTimeZoneDatumSlice is an alias for a slice of pointers to DataPlatformTimeZoneTimeZoneDatum.
	// This should almost always be used instead of []DataPlatformTimeZoneTimeZoneDatum.
	DataPlatformTimeZoneTimeZoneDatumSlice []*DataPlatformTimeZoneTimeZoneDatum

	dataPlatformTimeZoneTimeZoneDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformTimeZoneTimeZoneDatumType                 = reflect.TypeOf(&DataPlatformTimeZoneTimeZoneDatum{})
	dataPlatformTimeZoneTimeZoneDatumMapping              = queries.MakeStructMapping(dataPlatformTimeZoneTimeZoneDatumType)
	dataPlatformTimeZoneTimeZoneDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformTimeZoneTimeZoneDatumType, dataPlatformTimeZoneTimeZoneDatumMapping, dataPlatformTimeZoneTimeZoneDatumPrimaryKeyColumns)
	dataPlatformTimeZoneTimeZoneDatumInsertCacheMut       sync.RWMutex
	dataPlatformTimeZoneTimeZoneDatumInsertCache          = make(map[string]insertCache)
	dataPlatformTimeZoneTimeZoneDatumUpdateCacheMut       sync.RWMutex
	dataPlatformTimeZoneTimeZoneDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformTimeZoneTimeZoneDatumUpsertCacheMut       sync.RWMutex
	dataPlatformTimeZoneTimeZoneDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformTimeZoneTimeZoneDatum record from the query.
func (q dataPlatformTimeZoneTimeZoneDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformTimeZoneTimeZoneDatum, error) {
	o := &DataPlatformTimeZoneTimeZoneDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_time_zone_time_zone_data")
	}

	return o, nil
}

// All returns all DataPlatformTimeZoneTimeZoneDatum records from the query.
func (q dataPlatformTimeZoneTimeZoneDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformTimeZoneTimeZoneDatumSlice, error) {
	var o []*DataPlatformTimeZoneTimeZoneDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformTimeZoneTimeZoneDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformTimeZoneTimeZoneDatum records in the query.
func (q dataPlatformTimeZoneTimeZoneDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_time_zone_time_zone_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformTimeZoneTimeZoneDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_time_zone_time_zone_data exists")
	}

	return count > 0, nil
}

// DeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData retrieves all the data_platform_delivery_document_header_datum's DataPlatformDeliveryDocumentHeaderData with an executor via DeliverFromPlantTimeZone column.
func (o *DataPlatformTimeZoneTimeZoneDatum) DeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_header_data`.`DeliverFromPlantTimeZone`=?", o.TimeZone),
	)

	return DataPlatformDeliveryDocumentHeaderData(queryMods...)
}

// DeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData retrieves all the data_platform_delivery_document_header_datum's DataPlatformDeliveryDocumentHeaderData with an executor via DeliverToPlantTimeZone column.
func (o *DataPlatformTimeZoneTimeZoneDatum) DeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_header_data`.`DeliverToPlantTimeZone`=?", o.TimeZone),
	)

	return DataPlatformDeliveryDocumentHeaderData(queryMods...)
}

// DeliverFromPlantTimeZoneDataPlatformOrdersItemData retrieves all the data_platform_orders_item_datum's DataPlatformOrdersItemData with an executor via DeliverFromPlantTimeZone column.
func (o *DataPlatformTimeZoneTimeZoneDatum) DeliverFromPlantTimeZoneDataPlatformOrdersItemData(mods ...qm.QueryMod) dataPlatformOrdersItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_item_data`.`DeliverFromPlantTimeZone`=?", o.TimeZone),
	)

	return DataPlatformOrdersItemData(queryMods...)
}

// DeliverToPlantTimeZoneDataPlatformOrdersItemData retrieves all the data_platform_orders_item_datum's DataPlatformOrdersItemData with an executor via DeliverToPlantTimeZone column.
func (o *DataPlatformTimeZoneTimeZoneDatum) DeliverToPlantTimeZoneDataPlatformOrdersItemData(mods ...qm.QueryMod) dataPlatformOrdersItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_item_data`.`DeliverToPlantTimeZone`=?", o.TimeZone),
	)

	return DataPlatformOrdersItemData(queryMods...)
}

// ProductionPlantTimeZoneDataPlatformOrdersItemData retrieves all the data_platform_orders_item_datum's DataPlatformOrdersItemData with an executor via ProductionPlantTimeZone column.
func (o *DataPlatformTimeZoneTimeZoneDatum) ProductionPlantTimeZoneDataPlatformOrdersItemData(mods ...qm.QueryMod) dataPlatformOrdersItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_item_data`.`ProductionPlantTimeZone`=?", o.TimeZone),
	)

	return DataPlatformOrdersItemData(queryMods...)
}

// StockConfirmationPlantTimeZoneDataPlatformOrdersItemData retrieves all the data_platform_orders_item_datum's DataPlatformOrdersItemData with an executor via StockConfirmationPlantTimeZone column.
func (o *DataPlatformTimeZoneTimeZoneDatum) StockConfirmationPlantTimeZoneDataPlatformOrdersItemData(mods ...qm.QueryMod) dataPlatformOrdersItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_item_data`.`StockConfirmationPlantTimeZone`=?", o.TimeZone),
	)

	return DataPlatformOrdersItemData(queryMods...)
}

// StockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData retrieves all the data_platform_orders_item_schedule_line_datum's DataPlatformOrdersItemScheduleLineData with an executor via StockConfirmationPlantTimeZone column.
func (o *DataPlatformTimeZoneTimeZoneDatum) StockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData(mods ...qm.QueryMod) dataPlatformOrdersItemScheduleLineDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_item_schedule_line_data`.`StockConfirmationPlantTimeZone`=?", o.TimeZone),
	)

	return DataPlatformOrdersItemScheduleLineData(queryMods...)
}

// TimeZoneDataPlatformPlantGeneralData retrieves all the data_platform_plant_general_datum's DataPlatformPlantGeneralData with an executor via TimeZone column.
func (o *DataPlatformTimeZoneTimeZoneDatum) TimeZoneDataPlatformPlantGeneralData(mods ...qm.QueryMod) dataPlatformPlantGeneralDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_plant_general_data`.`TimeZone`=?", o.TimeZone),
	)

	return DataPlatformPlantGeneralData(queryMods...)
}

// TimeZoneDataPlatformTimeZoneTimeZoneTextData retrieves all the data_platform_time_zone_time_zone_text_datum's DataPlatformTimeZoneTimeZoneTextData with an executor via TimeZone column.
func (o *DataPlatformTimeZoneTimeZoneDatum) TimeZoneDataPlatformTimeZoneTimeZoneTextData(mods ...qm.QueryMod) dataPlatformTimeZoneTimeZoneTextDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_time_zone_time_zone_text_data`.`TimeZone`=?", o.TimeZone),
	)

	return DataPlatformTimeZoneTimeZoneTextData(queryMods...)
}

// LoadDeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformTimeZoneTimeZoneDatumL) LoadDeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformTimeZoneTimeZoneDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformTimeZoneTimeZoneDatum
	var object *DataPlatformTimeZoneTimeZoneDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformTimeZoneTimeZoneDatum.(*DataPlatformTimeZoneTimeZoneDatum)
		if !ok {
			object = new(DataPlatformTimeZoneTimeZoneDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformTimeZoneTimeZoneDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformTimeZoneTimeZoneDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformTimeZoneTimeZoneDatum.(*[]*DataPlatformTimeZoneTimeZoneDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformTimeZoneTimeZoneDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformTimeZoneTimeZoneDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformTimeZoneTimeZoneDatumR{}
		}
		args = append(args, object.TimeZone)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformTimeZoneTimeZoneDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TimeZone) {
					continue Outer
				}
			}

			args = append(args, obj.TimeZone)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_header_data`),
		qm.WhereIn(`data_platform_delivery_document_header_data.DeliverFromPlantTimeZone in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_header_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_header_data")
	}

	if singular {
		object.R.DeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.TimeZone, foreign.DeliverFromPlantTimeZone) {
				local.R.DeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData = append(local.R.DeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformTimeZoneTimeZoneDatumL) LoadDeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformTimeZoneTimeZoneDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformTimeZoneTimeZoneDatum
	var object *DataPlatformTimeZoneTimeZoneDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformTimeZoneTimeZoneDatum.(*DataPlatformTimeZoneTimeZoneDatum)
		if !ok {
			object = new(DataPlatformTimeZoneTimeZoneDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformTimeZoneTimeZoneDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformTimeZoneTimeZoneDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformTimeZoneTimeZoneDatum.(*[]*DataPlatformTimeZoneTimeZoneDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformTimeZoneTimeZoneDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformTimeZoneTimeZoneDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformTimeZoneTimeZoneDatumR{}
		}
		args = append(args, object.TimeZone)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformTimeZoneTimeZoneDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TimeZone) {
					continue Outer
				}
			}

			args = append(args, obj.TimeZone)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_header_data`),
		qm.WhereIn(`data_platform_delivery_document_header_data.DeliverToPlantTimeZone in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_header_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_header_data")
	}

	if singular {
		object.R.DeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.TimeZone, foreign.DeliverToPlantTimeZone) {
				local.R.DeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData = append(local.R.DeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDeliverFromPlantTimeZoneDataPlatformOrdersItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformTimeZoneTimeZoneDatumL) LoadDeliverFromPlantTimeZoneDataPlatformOrdersItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformTimeZoneTimeZoneDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformTimeZoneTimeZoneDatum
	var object *DataPlatformTimeZoneTimeZoneDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformTimeZoneTimeZoneDatum.(*DataPlatformTimeZoneTimeZoneDatum)
		if !ok {
			object = new(DataPlatformTimeZoneTimeZoneDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformTimeZoneTimeZoneDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformTimeZoneTimeZoneDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformTimeZoneTimeZoneDatum.(*[]*DataPlatformTimeZoneTimeZoneDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformTimeZoneTimeZoneDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformTimeZoneTimeZoneDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformTimeZoneTimeZoneDatumR{}
		}
		args = append(args, object.TimeZone)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformTimeZoneTimeZoneDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TimeZone) {
					continue Outer
				}
			}

			args = append(args, obj.TimeZone)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_data`),
		qm.WhereIn(`data_platform_orders_item_data.DeliverFromPlantTimeZone in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_item_data")
	}

	var resultSlice []*DataPlatformOrdersItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_data")
	}

	if singular {
		object.R.DeliverFromPlantTimeZoneDataPlatformOrdersItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.TimeZone, foreign.DeliverFromPlantTimeZone) {
				local.R.DeliverFromPlantTimeZoneDataPlatformOrdersItemData = append(local.R.DeliverFromPlantTimeZoneDataPlatformOrdersItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDeliverToPlantTimeZoneDataPlatformOrdersItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformTimeZoneTimeZoneDatumL) LoadDeliverToPlantTimeZoneDataPlatformOrdersItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformTimeZoneTimeZoneDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformTimeZoneTimeZoneDatum
	var object *DataPlatformTimeZoneTimeZoneDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformTimeZoneTimeZoneDatum.(*DataPlatformTimeZoneTimeZoneDatum)
		if !ok {
			object = new(DataPlatformTimeZoneTimeZoneDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformTimeZoneTimeZoneDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformTimeZoneTimeZoneDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformTimeZoneTimeZoneDatum.(*[]*DataPlatformTimeZoneTimeZoneDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformTimeZoneTimeZoneDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformTimeZoneTimeZoneDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformTimeZoneTimeZoneDatumR{}
		}
		args = append(args, object.TimeZone)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformTimeZoneTimeZoneDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TimeZone) {
					continue Outer
				}
			}

			args = append(args, obj.TimeZone)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_data`),
		qm.WhereIn(`data_platform_orders_item_data.DeliverToPlantTimeZone in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_item_data")
	}

	var resultSlice []*DataPlatformOrdersItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_data")
	}

	if singular {
		object.R.DeliverToPlantTimeZoneDataPlatformOrdersItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.TimeZone, foreign.DeliverToPlantTimeZone) {
				local.R.DeliverToPlantTimeZoneDataPlatformOrdersItemData = append(local.R.DeliverToPlantTimeZoneDataPlatformOrdersItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductionPlantTimeZoneDataPlatformOrdersItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformTimeZoneTimeZoneDatumL) LoadProductionPlantTimeZoneDataPlatformOrdersItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformTimeZoneTimeZoneDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformTimeZoneTimeZoneDatum
	var object *DataPlatformTimeZoneTimeZoneDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformTimeZoneTimeZoneDatum.(*DataPlatformTimeZoneTimeZoneDatum)
		if !ok {
			object = new(DataPlatformTimeZoneTimeZoneDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformTimeZoneTimeZoneDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformTimeZoneTimeZoneDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformTimeZoneTimeZoneDatum.(*[]*DataPlatformTimeZoneTimeZoneDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformTimeZoneTimeZoneDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformTimeZoneTimeZoneDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformTimeZoneTimeZoneDatumR{}
		}
		args = append(args, object.TimeZone)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformTimeZoneTimeZoneDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TimeZone) {
					continue Outer
				}
			}

			args = append(args, obj.TimeZone)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_data`),
		qm.WhereIn(`data_platform_orders_item_data.ProductionPlantTimeZone in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_item_data")
	}

	var resultSlice []*DataPlatformOrdersItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_data")
	}

	if singular {
		object.R.ProductionPlantTimeZoneDataPlatformOrdersItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.TimeZone, foreign.ProductionPlantTimeZone) {
				local.R.ProductionPlantTimeZoneDataPlatformOrdersItemData = append(local.R.ProductionPlantTimeZoneDataPlatformOrdersItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadStockConfirmationPlantTimeZoneDataPlatformOrdersItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformTimeZoneTimeZoneDatumL) LoadStockConfirmationPlantTimeZoneDataPlatformOrdersItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformTimeZoneTimeZoneDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformTimeZoneTimeZoneDatum
	var object *DataPlatformTimeZoneTimeZoneDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformTimeZoneTimeZoneDatum.(*DataPlatformTimeZoneTimeZoneDatum)
		if !ok {
			object = new(DataPlatformTimeZoneTimeZoneDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformTimeZoneTimeZoneDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformTimeZoneTimeZoneDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformTimeZoneTimeZoneDatum.(*[]*DataPlatformTimeZoneTimeZoneDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformTimeZoneTimeZoneDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformTimeZoneTimeZoneDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformTimeZoneTimeZoneDatumR{}
		}
		args = append(args, object.TimeZone)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformTimeZoneTimeZoneDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TimeZone) {
					continue Outer
				}
			}

			args = append(args, obj.TimeZone)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_data`),
		qm.WhereIn(`data_platform_orders_item_data.StockConfirmationPlantTimeZone in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_item_data")
	}

	var resultSlice []*DataPlatformOrdersItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_data")
	}

	if singular {
		object.R.StockConfirmationPlantTimeZoneDataPlatformOrdersItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.TimeZone, foreign.StockConfirmationPlantTimeZone) {
				local.R.StockConfirmationPlantTimeZoneDataPlatformOrdersItemData = append(local.R.StockConfirmationPlantTimeZoneDataPlatformOrdersItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadStockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformTimeZoneTimeZoneDatumL) LoadStockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformTimeZoneTimeZoneDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformTimeZoneTimeZoneDatum
	var object *DataPlatformTimeZoneTimeZoneDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformTimeZoneTimeZoneDatum.(*DataPlatformTimeZoneTimeZoneDatum)
		if !ok {
			object = new(DataPlatformTimeZoneTimeZoneDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformTimeZoneTimeZoneDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformTimeZoneTimeZoneDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformTimeZoneTimeZoneDatum.(*[]*DataPlatformTimeZoneTimeZoneDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformTimeZoneTimeZoneDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformTimeZoneTimeZoneDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformTimeZoneTimeZoneDatumR{}
		}
		args = append(args, object.TimeZone)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformTimeZoneTimeZoneDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TimeZone) {
					continue Outer
				}
			}

			args = append(args, obj.TimeZone)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_schedule_line_data`),
		qm.WhereIn(`data_platform_orders_item_schedule_line_data.StockConfirmationPlantTimeZone in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_item_schedule_line_data")
	}

	var resultSlice []*DataPlatformOrdersItemScheduleLineDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_item_schedule_line_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_item_schedule_line_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_schedule_line_data")
	}

	if singular {
		object.R.StockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.TimeZone, foreign.StockConfirmationPlantTimeZone) {
				local.R.StockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData = append(local.R.StockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadTimeZoneDataPlatformPlantGeneralData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformTimeZoneTimeZoneDatumL) LoadTimeZoneDataPlatformPlantGeneralData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformTimeZoneTimeZoneDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformTimeZoneTimeZoneDatum
	var object *DataPlatformTimeZoneTimeZoneDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformTimeZoneTimeZoneDatum.(*DataPlatformTimeZoneTimeZoneDatum)
		if !ok {
			object = new(DataPlatformTimeZoneTimeZoneDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformTimeZoneTimeZoneDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformTimeZoneTimeZoneDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformTimeZoneTimeZoneDatum.(*[]*DataPlatformTimeZoneTimeZoneDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformTimeZoneTimeZoneDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformTimeZoneTimeZoneDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformTimeZoneTimeZoneDatumR{}
		}
		args = append(args, object.TimeZone)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformTimeZoneTimeZoneDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TimeZone) {
					continue Outer
				}
			}

			args = append(args, obj.TimeZone)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_general_data`),
		qm.WhereIn(`data_platform_plant_general_data.TimeZone in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_plant_general_data")
	}

	var resultSlice []*DataPlatformPlantGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_plant_general_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_plant_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_general_data")
	}

	if singular {
		object.R.TimeZoneDataPlatformPlantGeneralData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.TimeZone, foreign.TimeZone) {
				local.R.TimeZoneDataPlatformPlantGeneralData = append(local.R.TimeZoneDataPlatformPlantGeneralData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadTimeZoneDataPlatformTimeZoneTimeZoneTextData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformTimeZoneTimeZoneDatumL) LoadTimeZoneDataPlatformTimeZoneTimeZoneTextData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformTimeZoneTimeZoneDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformTimeZoneTimeZoneDatum
	var object *DataPlatformTimeZoneTimeZoneDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformTimeZoneTimeZoneDatum.(*DataPlatformTimeZoneTimeZoneDatum)
		if !ok {
			object = new(DataPlatformTimeZoneTimeZoneDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformTimeZoneTimeZoneDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformTimeZoneTimeZoneDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformTimeZoneTimeZoneDatum.(*[]*DataPlatformTimeZoneTimeZoneDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformTimeZoneTimeZoneDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformTimeZoneTimeZoneDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformTimeZoneTimeZoneDatumR{}
		}
		args = append(args, object.TimeZone)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformTimeZoneTimeZoneDatumR{}
			}

			for _, a := range args {
				if a == obj.TimeZone {
					continue Outer
				}
			}

			args = append(args, obj.TimeZone)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_time_zone_time_zone_text_data`),
		qm.WhereIn(`data_platform_time_zone_time_zone_text_data.TimeZone in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_time_zone_time_zone_text_data")
	}

	var resultSlice []*DataPlatformTimeZoneTimeZoneTextDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_time_zone_time_zone_text_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_time_zone_time_zone_text_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_time_zone_time_zone_text_data")
	}

	if singular {
		object.R.TimeZoneDataPlatformTimeZoneTimeZoneTextData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.TimeZone == foreign.TimeZone {
				local.R.TimeZoneDataPlatformTimeZoneTimeZoneTextData = append(local.R.TimeZoneDataPlatformTimeZoneTimeZoneTextData, foreign)
				break
			}
		}
	}

	return nil
}

// AddDeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData adds the given related objects to the existing relationships
// of the data_platform_time_zone_time_zone_datum, optionally inserting them as new records.
// Appends related to o.R.DeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData.
func (o *DataPlatformTimeZoneTimeZoneDatum) AddDeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DeliverFromPlantTimeZone, o.TimeZone)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DeliverFromPlantTimeZone"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.TimeZone, rel.DeliveryDocument}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DeliverFromPlantTimeZone, o.TimeZone)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformTimeZoneTimeZoneDatumR{
			DeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData: related,
		}
	} else {
		o.R.DeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData = append(o.R.DeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData, related...)
	}

	return nil
}

// SetDeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData removes all previously related items of the
// data_platform_time_zone_time_zone_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DeliverFromPlantTimeZoneDataPlatformTimeZoneTimeZoneDatum's DeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData accordingly.
// Replaces o.R.DeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData with related.
func (o *DataPlatformTimeZoneTimeZoneDatum) SetDeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	query := "update `data_platform_delivery_document_header_data` set `DeliverFromPlantTimeZone` = null where `DeliverFromPlantTimeZone` = ?"
	values := []interface{}{o.TimeZone}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.DeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData = nil
	}

	return o.AddDeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData(ctx, exec, insert, related...)
}

// RemoveDeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData relationships from objects passed in.
// Removes related items from R.DeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformTimeZoneTimeZoneDatum) RemoveDeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DeliverFromPlantTimeZone, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("DeliverFromPlantTimeZone")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData {
			if rel != ri {
				continue
			}

			ln := len(o.R.DeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData)
			if ln > 1 && i < ln-1 {
				o.R.DeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData[i] = o.R.DeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData[ln-1]
			}
			o.R.DeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData = o.R.DeliverFromPlantTimeZoneDataPlatformDeliveryDocumentHeaderData[:ln-1]
			break
		}
	}

	return nil
}

// AddDeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData adds the given related objects to the existing relationships
// of the data_platform_time_zone_time_zone_datum, optionally inserting them as new records.
// Appends related to o.R.DeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData.
func (o *DataPlatformTimeZoneTimeZoneDatum) AddDeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DeliverToPlantTimeZone, o.TimeZone)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DeliverToPlantTimeZone"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.TimeZone, rel.DeliveryDocument}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DeliverToPlantTimeZone, o.TimeZone)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformTimeZoneTimeZoneDatumR{
			DeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData: related,
		}
	} else {
		o.R.DeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData = append(o.R.DeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData, related...)
	}

	return nil
}

// SetDeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData removes all previously related items of the
// data_platform_time_zone_time_zone_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DeliverToPlantTimeZoneDataPlatformTimeZoneTimeZoneDatum's DeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData accordingly.
// Replaces o.R.DeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData with related.
func (o *DataPlatformTimeZoneTimeZoneDatum) SetDeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	query := "update `data_platform_delivery_document_header_data` set `DeliverToPlantTimeZone` = null where `DeliverToPlantTimeZone` = ?"
	values := []interface{}{o.TimeZone}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.DeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData = nil
	}

	return o.AddDeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData(ctx, exec, insert, related...)
}

// RemoveDeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData relationships from objects passed in.
// Removes related items from R.DeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformTimeZoneTimeZoneDatum) RemoveDeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DeliverToPlantTimeZone, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("DeliverToPlantTimeZone")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData {
			if rel != ri {
				continue
			}

			ln := len(o.R.DeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData)
			if ln > 1 && i < ln-1 {
				o.R.DeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData[i] = o.R.DeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData[ln-1]
			}
			o.R.DeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData = o.R.DeliverToPlantTimeZoneDataPlatformDeliveryDocumentHeaderData[:ln-1]
			break
		}
	}

	return nil
}

// AddDeliverFromPlantTimeZoneDataPlatformOrdersItemData adds the given related objects to the existing relationships
// of the data_platform_time_zone_time_zone_datum, optionally inserting them as new records.
// Appends related to o.R.DeliverFromPlantTimeZoneDataPlatformOrdersItemData.
func (o *DataPlatformTimeZoneTimeZoneDatum) AddDeliverFromPlantTimeZoneDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DeliverFromPlantTimeZone, o.TimeZone)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DeliverFromPlantTimeZone"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.TimeZone, rel.OrderID, rel.OrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DeliverFromPlantTimeZone, o.TimeZone)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformTimeZoneTimeZoneDatumR{
			DeliverFromPlantTimeZoneDataPlatformOrdersItemData: related,
		}
	} else {
		o.R.DeliverFromPlantTimeZoneDataPlatformOrdersItemData = append(o.R.DeliverFromPlantTimeZoneDataPlatformOrdersItemData, related...)
	}

	return nil
}

// SetDeliverFromPlantTimeZoneDataPlatformOrdersItemData removes all previously related items of the
// data_platform_time_zone_time_zone_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DeliverFromPlantTimeZoneDataPlatformTimeZoneTimeZoneDatum's DeliverFromPlantTimeZoneDataPlatformOrdersItemData accordingly.
// Replaces o.R.DeliverFromPlantTimeZoneDataPlatformOrdersItemData with related.
func (o *DataPlatformTimeZoneTimeZoneDatum) SetDeliverFromPlantTimeZoneDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	query := "update `data_platform_orders_item_data` set `DeliverFromPlantTimeZone` = null where `DeliverFromPlantTimeZone` = ?"
	values := []interface{}{o.TimeZone}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.DeliverFromPlantTimeZoneDataPlatformOrdersItemData = nil
	}

	return o.AddDeliverFromPlantTimeZoneDataPlatformOrdersItemData(ctx, exec, insert, related...)
}

// RemoveDeliverFromPlantTimeZoneDataPlatformOrdersItemData relationships from objects passed in.
// Removes related items from R.DeliverFromPlantTimeZoneDataPlatformOrdersItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformTimeZoneTimeZoneDatum) RemoveDeliverFromPlantTimeZoneDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOrdersItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DeliverFromPlantTimeZone, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("DeliverFromPlantTimeZone")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DeliverFromPlantTimeZoneDataPlatformOrdersItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.DeliverFromPlantTimeZoneDataPlatformOrdersItemData)
			if ln > 1 && i < ln-1 {
				o.R.DeliverFromPlantTimeZoneDataPlatformOrdersItemData[i] = o.R.DeliverFromPlantTimeZoneDataPlatformOrdersItemData[ln-1]
			}
			o.R.DeliverFromPlantTimeZoneDataPlatformOrdersItemData = o.R.DeliverFromPlantTimeZoneDataPlatformOrdersItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddDeliverToPlantTimeZoneDataPlatformOrdersItemData adds the given related objects to the existing relationships
// of the data_platform_time_zone_time_zone_datum, optionally inserting them as new records.
// Appends related to o.R.DeliverToPlantTimeZoneDataPlatformOrdersItemData.
func (o *DataPlatformTimeZoneTimeZoneDatum) AddDeliverToPlantTimeZoneDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DeliverToPlantTimeZone, o.TimeZone)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DeliverToPlantTimeZone"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.TimeZone, rel.OrderID, rel.OrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DeliverToPlantTimeZone, o.TimeZone)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformTimeZoneTimeZoneDatumR{
			DeliverToPlantTimeZoneDataPlatformOrdersItemData: related,
		}
	} else {
		o.R.DeliverToPlantTimeZoneDataPlatformOrdersItemData = append(o.R.DeliverToPlantTimeZoneDataPlatformOrdersItemData, related...)
	}

	return nil
}

// SetDeliverToPlantTimeZoneDataPlatformOrdersItemData removes all previously related items of the
// data_platform_time_zone_time_zone_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DeliverToPlantTimeZoneDataPlatformTimeZoneTimeZoneDatum's DeliverToPlantTimeZoneDataPlatformOrdersItemData accordingly.
// Replaces o.R.DeliverToPlantTimeZoneDataPlatformOrdersItemData with related.
func (o *DataPlatformTimeZoneTimeZoneDatum) SetDeliverToPlantTimeZoneDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	query := "update `data_platform_orders_item_data` set `DeliverToPlantTimeZone` = null where `DeliverToPlantTimeZone` = ?"
	values := []interface{}{o.TimeZone}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.DeliverToPlantTimeZoneDataPlatformOrdersItemData = nil
	}

	return o.AddDeliverToPlantTimeZoneDataPlatformOrdersItemData(ctx, exec, insert, related...)
}

// RemoveDeliverToPlantTimeZoneDataPlatformOrdersItemData relationships from objects passed in.
// Removes related items from R.DeliverToPlantTimeZoneDataPlatformOrdersItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformTimeZoneTimeZoneDatum) RemoveDeliverToPlantTimeZoneDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOrdersItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DeliverToPlantTimeZone, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("DeliverToPlantTimeZone")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DeliverToPlantTimeZoneDataPlatformOrdersItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.DeliverToPlantTimeZoneDataPlatformOrdersItemData)
			if ln > 1 && i < ln-1 {
				o.R.DeliverToPlantTimeZoneDataPlatformOrdersItemData[i] = o.R.DeliverToPlantTimeZoneDataPlatformOrdersItemData[ln-1]
			}
			o.R.DeliverToPlantTimeZoneDataPlatformOrdersItemData = o.R.DeliverToPlantTimeZoneDataPlatformOrdersItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddProductionPlantTimeZoneDataPlatformOrdersItemData adds the given related objects to the existing relationships
// of the data_platform_time_zone_time_zone_datum, optionally inserting them as new records.
// Appends related to o.R.ProductionPlantTimeZoneDataPlatformOrdersItemData.
func (o *DataPlatformTimeZoneTimeZoneDatum) AddProductionPlantTimeZoneDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductionPlantTimeZone, o.TimeZone)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductionPlantTimeZone"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.TimeZone, rel.OrderID, rel.OrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductionPlantTimeZone, o.TimeZone)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformTimeZoneTimeZoneDatumR{
			ProductionPlantTimeZoneDataPlatformOrdersItemData: related,
		}
	} else {
		o.R.ProductionPlantTimeZoneDataPlatformOrdersItemData = append(o.R.ProductionPlantTimeZoneDataPlatformOrdersItemData, related...)
	}

	return nil
}

// SetProductionPlantTimeZoneDataPlatformOrdersItemData removes all previously related items of the
// data_platform_time_zone_time_zone_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductionPlantTimeZoneDataPlatformTimeZoneTimeZoneDatum's ProductionPlantTimeZoneDataPlatformOrdersItemData accordingly.
// Replaces o.R.ProductionPlantTimeZoneDataPlatformOrdersItemData with related.
func (o *DataPlatformTimeZoneTimeZoneDatum) SetProductionPlantTimeZoneDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	query := "update `data_platform_orders_item_data` set `ProductionPlantTimeZone` = null where `ProductionPlantTimeZone` = ?"
	values := []interface{}{o.TimeZone}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.ProductionPlantTimeZoneDataPlatformOrdersItemData = nil
	}

	return o.AddProductionPlantTimeZoneDataPlatformOrdersItemData(ctx, exec, insert, related...)
}

// RemoveProductionPlantTimeZoneDataPlatformOrdersItemData relationships from objects passed in.
// Removes related items from R.ProductionPlantTimeZoneDataPlatformOrdersItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformTimeZoneTimeZoneDatum) RemoveProductionPlantTimeZoneDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOrdersItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductionPlantTimeZone, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("ProductionPlantTimeZone")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductionPlantTimeZoneDataPlatformOrdersItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductionPlantTimeZoneDataPlatformOrdersItemData)
			if ln > 1 && i < ln-1 {
				o.R.ProductionPlantTimeZoneDataPlatformOrdersItemData[i] = o.R.ProductionPlantTimeZoneDataPlatformOrdersItemData[ln-1]
			}
			o.R.ProductionPlantTimeZoneDataPlatformOrdersItemData = o.R.ProductionPlantTimeZoneDataPlatformOrdersItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddStockConfirmationPlantTimeZoneDataPlatformOrdersItemData adds the given related objects to the existing relationships
// of the data_platform_time_zone_time_zone_datum, optionally inserting them as new records.
// Appends related to o.R.StockConfirmationPlantTimeZoneDataPlatformOrdersItemData.
func (o *DataPlatformTimeZoneTimeZoneDatum) AddStockConfirmationPlantTimeZoneDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.StockConfirmationPlantTimeZone, o.TimeZone)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"StockConfirmationPlantTimeZone"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.TimeZone, rel.OrderID, rel.OrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.StockConfirmationPlantTimeZone, o.TimeZone)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformTimeZoneTimeZoneDatumR{
			StockConfirmationPlantTimeZoneDataPlatformOrdersItemData: related,
		}
	} else {
		o.R.StockConfirmationPlantTimeZoneDataPlatformOrdersItemData = append(o.R.StockConfirmationPlantTimeZoneDataPlatformOrdersItemData, related...)
	}

	return nil
}

// SetStockConfirmationPlantTimeZoneDataPlatformOrdersItemData removes all previously related items of the
// data_platform_time_zone_time_zone_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.StockConfirmationPlantTimeZoneDataPlatformTimeZoneTimeZoneDatum's StockConfirmationPlantTimeZoneDataPlatformOrdersItemData accordingly.
// Replaces o.R.StockConfirmationPlantTimeZoneDataPlatformOrdersItemData with related.
func (o *DataPlatformTimeZoneTimeZoneDatum) SetStockConfirmationPlantTimeZoneDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	query := "update `data_platform_orders_item_data` set `StockConfirmationPlantTimeZone` = null where `StockConfirmationPlantTimeZone` = ?"
	values := []interface{}{o.TimeZone}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.StockConfirmationPlantTimeZoneDataPlatformOrdersItemData = nil
	}

	return o.AddStockConfirmationPlantTimeZoneDataPlatformOrdersItemData(ctx, exec, insert, related...)
}

// RemoveStockConfirmationPlantTimeZoneDataPlatformOrdersItemData relationships from objects passed in.
// Removes related items from R.StockConfirmationPlantTimeZoneDataPlatformOrdersItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformTimeZoneTimeZoneDatum) RemoveStockConfirmationPlantTimeZoneDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOrdersItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.StockConfirmationPlantTimeZone, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("StockConfirmationPlantTimeZone")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.StockConfirmationPlantTimeZoneDataPlatformOrdersItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.StockConfirmationPlantTimeZoneDataPlatformOrdersItemData)
			if ln > 1 && i < ln-1 {
				o.R.StockConfirmationPlantTimeZoneDataPlatformOrdersItemData[i] = o.R.StockConfirmationPlantTimeZoneDataPlatformOrdersItemData[ln-1]
			}
			o.R.StockConfirmationPlantTimeZoneDataPlatformOrdersItemData = o.R.StockConfirmationPlantTimeZoneDataPlatformOrdersItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddStockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData adds the given related objects to the existing relationships
// of the data_platform_time_zone_time_zone_datum, optionally inserting them as new records.
// Appends related to o.R.StockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData.
func (o *DataPlatformTimeZoneTimeZoneDatum) AddStockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemScheduleLineDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.StockConfirmationPlantTimeZone, o.TimeZone)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_item_schedule_line_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"StockConfirmationPlantTimeZone"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemScheduleLineDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.TimeZone, rel.OrderID, rel.OrderItem, rel.ScheduleLine}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.StockConfirmationPlantTimeZone, o.TimeZone)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformTimeZoneTimeZoneDatumR{
			StockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData: related,
		}
	} else {
		o.R.StockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData = append(o.R.StockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData, related...)
	}

	return nil
}

// SetStockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData removes all previously related items of the
// data_platform_time_zone_time_zone_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.StockConfirmationPlantTimeZoneDataPlatformTimeZoneTimeZoneDatum's StockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData accordingly.
// Replaces o.R.StockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData with related.
func (o *DataPlatformTimeZoneTimeZoneDatum) SetStockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemScheduleLineDatum) error {
	query := "update `data_platform_orders_item_schedule_line_data` set `StockConfirmationPlantTimeZone` = null where `StockConfirmationPlantTimeZone` = ?"
	values := []interface{}{o.TimeZone}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.StockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData = nil
	}

	return o.AddStockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData(ctx, exec, insert, related...)
}

// RemoveStockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData relationships from objects passed in.
// Removes related items from R.StockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformTimeZoneTimeZoneDatum) RemoveStockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOrdersItemScheduleLineDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.StockConfirmationPlantTimeZone, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("StockConfirmationPlantTimeZone")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.StockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData {
			if rel != ri {
				continue
			}

			ln := len(o.R.StockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData)
			if ln > 1 && i < ln-1 {
				o.R.StockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData[i] = o.R.StockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData[ln-1]
			}
			o.R.StockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData = o.R.StockConfirmationPlantTimeZoneDataPlatformOrdersItemScheduleLineData[:ln-1]
			break
		}
	}

	return nil
}

// AddTimeZoneDataPlatformPlantGeneralData adds the given related objects to the existing relationships
// of the data_platform_time_zone_time_zone_datum, optionally inserting them as new records.
// Appends related to o.R.TimeZoneDataPlatformPlantGeneralData.
func (o *DataPlatformTimeZoneTimeZoneDatum) AddTimeZoneDataPlatformPlantGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlantGeneralDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TimeZone, o.TimeZone)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_plant_general_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"TimeZone"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlantGeneralDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.TimeZone, rel.BusinessPartner, rel.Plant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TimeZone, o.TimeZone)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformTimeZoneTimeZoneDatumR{
			TimeZoneDataPlatformPlantGeneralData: related,
		}
	} else {
		o.R.TimeZoneDataPlatformPlantGeneralData = append(o.R.TimeZoneDataPlatformPlantGeneralData, related...)
	}

	return nil
}

// SetTimeZoneDataPlatformPlantGeneralData removes all previously related items of the
// data_platform_time_zone_time_zone_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TimeZoneDataPlatformTimeZoneTimeZoneDatum's TimeZoneDataPlatformPlantGeneralData accordingly.
// Replaces o.R.TimeZoneDataPlatformPlantGeneralData with related.
func (o *DataPlatformTimeZoneTimeZoneDatum) SetTimeZoneDataPlatformPlantGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlantGeneralDatum) error {
	query := "update `data_platform_plant_general_data` set `TimeZone` = null where `TimeZone` = ?"
	values := []interface{}{o.TimeZone}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.TimeZoneDataPlatformPlantGeneralData = nil
	}

	return o.AddTimeZoneDataPlatformPlantGeneralData(ctx, exec, insert, related...)
}

// RemoveTimeZoneDataPlatformPlantGeneralData relationships from objects passed in.
// Removes related items from R.TimeZoneDataPlatformPlantGeneralData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformTimeZoneTimeZoneDatum) RemoveTimeZoneDataPlatformPlantGeneralData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformPlantGeneralDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TimeZone, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("TimeZone")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.TimeZoneDataPlatformPlantGeneralData {
			if rel != ri {
				continue
			}

			ln := len(o.R.TimeZoneDataPlatformPlantGeneralData)
			if ln > 1 && i < ln-1 {
				o.R.TimeZoneDataPlatformPlantGeneralData[i] = o.R.TimeZoneDataPlatformPlantGeneralData[ln-1]
			}
			o.R.TimeZoneDataPlatformPlantGeneralData = o.R.TimeZoneDataPlatformPlantGeneralData[:ln-1]
			break
		}
	}

	return nil
}

// AddTimeZoneDataPlatformTimeZoneTimeZoneTextData adds the given related objects to the existing relationships
// of the data_platform_time_zone_time_zone_datum, optionally inserting them as new records.
// Appends related to o.R.TimeZoneDataPlatformTimeZoneTimeZoneTextData.
func (o *DataPlatformTimeZoneTimeZoneDatum) AddTimeZoneDataPlatformTimeZoneTimeZoneTextData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformTimeZoneTimeZoneTextDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TimeZone = o.TimeZone
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_time_zone_time_zone_text_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"TimeZone"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformTimeZoneTimeZoneTextDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.TimeZone, rel.TimeZone, rel.Language}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TimeZone = o.TimeZone
		}
	}

	if o.R == nil {
		o.R = &dataPlatformTimeZoneTimeZoneDatumR{
			TimeZoneDataPlatformTimeZoneTimeZoneTextData: related,
		}
	} else {
		o.R.TimeZoneDataPlatformTimeZoneTimeZoneTextData = append(o.R.TimeZoneDataPlatformTimeZoneTimeZoneTextData, related...)
	}

	return nil
}

// DataPlatformTimeZoneTimeZoneData retrieves all the records using an executor.
func DataPlatformTimeZoneTimeZoneData(mods ...qm.QueryMod) dataPlatformTimeZoneTimeZoneDatumQuery {
	mods = append(mods, qm.From("`data_platform_time_zone_time_zone_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_time_zone_time_zone_data`.*"})
	}

	return dataPlatformTimeZoneTimeZoneDatumQuery{q}
}

// FindDataPlatformTimeZoneTimeZoneDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformTimeZoneTimeZoneDatum(ctx context.Context, exec boil.ContextExecutor, timeZone string, selectCols ...string) (*DataPlatformTimeZoneTimeZoneDatum, error) {
	dataPlatformTimeZoneTimeZoneDatumObj := &DataPlatformTimeZoneTimeZoneDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_time_zone_time_zone_data` where `TimeZone`=?", sel,
	)

	q := queries.Raw(query, timeZone)

	err := q.Bind(ctx, exec, dataPlatformTimeZoneTimeZoneDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_time_zone_time_zone_data")
	}

	return dataPlatformTimeZoneTimeZoneDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformTimeZoneTimeZoneDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_time_zone_time_zone_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformTimeZoneTimeZoneDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformTimeZoneTimeZoneDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformTimeZoneTimeZoneDatumInsertCache[key]
	dataPlatformTimeZoneTimeZoneDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformTimeZoneTimeZoneDatumAllColumns,
			dataPlatformTimeZoneTimeZoneDatumColumnsWithDefault,
			dataPlatformTimeZoneTimeZoneDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformTimeZoneTimeZoneDatumType, dataPlatformTimeZoneTimeZoneDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformTimeZoneTimeZoneDatumType, dataPlatformTimeZoneTimeZoneDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_time_zone_time_zone_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_time_zone_time_zone_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_time_zone_time_zone_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformTimeZoneTimeZoneDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_time_zone_time_zone_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TimeZone,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_time_zone_time_zone_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformTimeZoneTimeZoneDatumInsertCacheMut.Lock()
		dataPlatformTimeZoneTimeZoneDatumInsertCache[key] = cache
		dataPlatformTimeZoneTimeZoneDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformTimeZoneTimeZoneDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformTimeZoneTimeZoneDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformTimeZoneTimeZoneDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformTimeZoneTimeZoneDatumUpdateCache[key]
	dataPlatformTimeZoneTimeZoneDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformTimeZoneTimeZoneDatumAllColumns,
			dataPlatformTimeZoneTimeZoneDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_time_zone_time_zone_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_time_zone_time_zone_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformTimeZoneTimeZoneDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformTimeZoneTimeZoneDatumType, dataPlatformTimeZoneTimeZoneDatumMapping, append(wl, dataPlatformTimeZoneTimeZoneDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_time_zone_time_zone_data row")
	}

	if !cached {
		dataPlatformTimeZoneTimeZoneDatumUpdateCacheMut.Lock()
		dataPlatformTimeZoneTimeZoneDatumUpdateCache[key] = cache
		dataPlatformTimeZoneTimeZoneDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformTimeZoneTimeZoneDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_time_zone_time_zone_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformTimeZoneTimeZoneDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformTimeZoneTimeZoneDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_time_zone_time_zone_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformTimeZoneTimeZoneDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformTimeZoneTimeZoneDatum slice")
	}

	return nil
}

var mySQLDataPlatformTimeZoneTimeZoneDatumUniqueColumns = []string{
	"TimeZone",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformTimeZoneTimeZoneDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_time_zone_time_zone_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformTimeZoneTimeZoneDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformTimeZoneTimeZoneDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformTimeZoneTimeZoneDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformTimeZoneTimeZoneDatumUpsertCache[key]
	dataPlatformTimeZoneTimeZoneDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformTimeZoneTimeZoneDatumAllColumns,
			dataPlatformTimeZoneTimeZoneDatumColumnsWithDefault,
			dataPlatformTimeZoneTimeZoneDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformTimeZoneTimeZoneDatumAllColumns,
			dataPlatformTimeZoneTimeZoneDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_time_zone_time_zone_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_time_zone_time_zone_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_time_zone_time_zone_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformTimeZoneTimeZoneDatumType, dataPlatformTimeZoneTimeZoneDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformTimeZoneTimeZoneDatumType, dataPlatformTimeZoneTimeZoneDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_time_zone_time_zone_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformTimeZoneTimeZoneDatumType, dataPlatformTimeZoneTimeZoneDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_time_zone_time_zone_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_time_zone_time_zone_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformTimeZoneTimeZoneDatumUpsertCacheMut.Lock()
		dataPlatformTimeZoneTimeZoneDatumUpsertCache[key] = cache
		dataPlatformTimeZoneTimeZoneDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformTimeZoneTimeZoneDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformTimeZoneTimeZoneDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformTimeZoneTimeZoneDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformTimeZoneTimeZoneDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_time_zone_time_zone_data` WHERE `TimeZone`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_time_zone_time_zone_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformTimeZoneTimeZoneDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformTimeZoneTimeZoneDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_time_zone_time_zone_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformTimeZoneTimeZoneDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformTimeZoneTimeZoneDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_time_zone_time_zone_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformTimeZoneTimeZoneDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformTimeZoneTimeZoneDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformTimeZoneTimeZoneDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformTimeZoneTimeZoneDatum(ctx, exec, o.TimeZone)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformTimeZoneTimeZoneDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformTimeZoneTimeZoneDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformTimeZoneTimeZoneDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_time_zone_time_zone_data`.* FROM `data_platform_time_zone_time_zone_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformTimeZoneTimeZoneDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformTimeZoneTimeZoneDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformTimeZoneTimeZoneDatumExists checks if the DataPlatformTimeZoneTimeZoneDatum row exists.
func DataPlatformTimeZoneTimeZoneDatumExists(ctx context.Context, exec boil.ContextExecutor, timeZone string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_time_zone_time_zone_data` where `TimeZone`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, timeZone)
	}
	row := exec.QueryRowContext(ctx, sql, timeZone)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_time_zone_time_zone_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformTimeZoneTimeZoneDatum row exists.
func (o *DataPlatformTimeZoneTimeZoneDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformTimeZoneTimeZoneDatumExists(ctx, exec, o.TimeZone)
}
