// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformProductionOrderHeaderDatum is an object representing the database table.
type DataPlatformProductionOrderHeaderDatum struct {
	ProductionOrder                     int          `boil:"ProductionOrder" json:"ProductionOrder" toml:"ProductionOrder" yaml:"ProductionOrder"`
	ProductionOrderType                 null.String  `boil:"ProductionOrderType" json:"ProductionOrderType,omitempty" toml:"ProductionOrderType" yaml:"ProductionOrderType,omitempty"`
	CreationDate                        string       `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	LastChangeDate                      string       `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	HeaderIsReleased                    null.Bool    `boil:"HeaderIsReleased" json:"HeaderIsReleased,omitempty" toml:"HeaderIsReleased" yaml:"HeaderIsReleased,omitempty"`
	HeaderIsPartiallyConfirmed          null.Bool    `boil:"HeaderIsPartiallyConfirmed" json:"HeaderIsPartiallyConfirmed,omitempty" toml:"HeaderIsPartiallyConfirmed" yaml:"HeaderIsPartiallyConfirmed,omitempty"`
	HeaderIsConfirmed                   null.Bool    `boil:"HeaderIsConfirmed" json:"HeaderIsConfirmed,omitempty" toml:"HeaderIsConfirmed" yaml:"HeaderIsConfirmed,omitempty"`
	HeaderIsLocked                      null.Bool    `boil:"HeaderIsLocked" json:"HeaderIsLocked,omitempty" toml:"HeaderIsLocked" yaml:"HeaderIsLocked,omitempty"`
	HeaderIsMarkedForDeletion           null.Bool    `boil:"HeaderIsMarkedForDeletion" json:"HeaderIsMarkedForDeletion,omitempty" toml:"HeaderIsMarkedForDeletion" yaml:"HeaderIsMarkedForDeletion,omitempty"`
	Product                             null.String  `boil:"Product" json:"Product,omitempty" toml:"Product" yaml:"Product,omitempty"`
	OwnerProductionPlant                string       `boil:"OwnerProductionPlant" json:"OwnerProductionPlant" toml:"OwnerProductionPlant" yaml:"OwnerProductionPlant"`
	OwnerProductionPlantBusinessPartner int          `boil:"OwnerProductionPlantBusinessPartner" json:"OwnerProductionPlantBusinessPartner" toml:"OwnerProductionPlantBusinessPartner" yaml:"OwnerProductionPlantBusinessPartner"`
	OwnerProductionPlantStorageLocation null.String  `boil:"OwnerProductionPlantStorageLocation" json:"OwnerProductionPlantStorageLocation,omitempty" toml:"OwnerProductionPlantStorageLocation" yaml:"OwnerProductionPlantStorageLocation,omitempty"`
	MRPArea                             null.String  `boil:"MRPArea" json:"MRPArea,omitempty" toml:"MRPArea" yaml:"MRPArea,omitempty"`
	MRPController                       null.String  `boil:"MRPController" json:"MRPController,omitempty" toml:"MRPController" yaml:"MRPController,omitempty"`
	ProductionSupervisor                null.String  `boil:"ProductionSupervisor" json:"ProductionSupervisor,omitempty" toml:"ProductionSupervisor" yaml:"ProductionSupervisor,omitempty"`
	ProductionVersion                   null.Int     `boil:"ProductionVersion" json:"ProductionVersion,omitempty" toml:"ProductionVersion" yaml:"ProductionVersion,omitempty"`
	PlannedOrder                        null.Int     `boil:"PlannedOrder" json:"PlannedOrder,omitempty" toml:"PlannedOrder" yaml:"PlannedOrder,omitempty"`
	OrderID                             null.Int     `boil:"OrderID" json:"OrderID,omitempty" toml:"OrderID" yaml:"OrderID,omitempty"`
	OrderItem                           null.Int     `boil:"OrderItem" json:"OrderItem,omitempty" toml:"OrderItem" yaml:"OrderItem,omitempty"`
	ProductionOrderPlannedStartDate     null.String  `boil:"ProductionOrderPlannedStartDate" json:"ProductionOrderPlannedStartDate,omitempty" toml:"ProductionOrderPlannedStartDate" yaml:"ProductionOrderPlannedStartDate,omitempty"`
	ProductionOrderPlannedStartTime     null.String  `boil:"ProductionOrderPlannedStartTime" json:"ProductionOrderPlannedStartTime,omitempty" toml:"ProductionOrderPlannedStartTime" yaml:"ProductionOrderPlannedStartTime,omitempty"`
	ProductionOrderPlannedEndDate       null.String  `boil:"ProductionOrderPlannedEndDate" json:"ProductionOrderPlannedEndDate,omitempty" toml:"ProductionOrderPlannedEndDate" yaml:"ProductionOrderPlannedEndDate,omitempty"`
	ProductionOrderPlannedEndTime       null.String  `boil:"ProductionOrderPlannedEndTime" json:"ProductionOrderPlannedEndTime,omitempty" toml:"ProductionOrderPlannedEndTime" yaml:"ProductionOrderPlannedEndTime,omitempty"`
	ProductionOrderActualReleaseDate    null.String  `boil:"ProductionOrderActualReleaseDate" json:"ProductionOrderActualReleaseDate,omitempty" toml:"ProductionOrderActualReleaseDate" yaml:"ProductionOrderActualReleaseDate,omitempty"`
	ProductionOrderActualReleaseTime    null.String  `boil:"ProductionOrderActualReleaseTime" json:"ProductionOrderActualReleaseTime,omitempty" toml:"ProductionOrderActualReleaseTime" yaml:"ProductionOrderActualReleaseTime,omitempty"`
	ProductionOrderActualStartDate      null.String  `boil:"ProductionOrderActualStartDate" json:"ProductionOrderActualStartDate,omitempty" toml:"ProductionOrderActualStartDate" yaml:"ProductionOrderActualStartDate,omitempty"`
	ProductionOrderActualStartTime      null.String  `boil:"ProductionOrderActualStartTime" json:"ProductionOrderActualStartTime,omitempty" toml:"ProductionOrderActualStartTime" yaml:"ProductionOrderActualStartTime,omitempty"`
	ProductionOrderActualEndDate        null.String  `boil:"ProductionOrderActualEndDate" json:"ProductionOrderActualEndDate,omitempty" toml:"ProductionOrderActualEndDate" yaml:"ProductionOrderActualEndDate,omitempty"`
	ProductionOrderActualEndTime        null.String  `boil:"ProductionOrderActualEndTime" json:"ProductionOrderActualEndTime,omitempty" toml:"ProductionOrderActualEndTime" yaml:"ProductionOrderActualEndTime,omitempty"`
	ProductionUnit                      null.String  `boil:"ProductionUnit" json:"ProductionUnit,omitempty" toml:"ProductionUnit" yaml:"ProductionUnit,omitempty"`
	TotalQuantity                       float32      `boil:"TotalQuantity" json:"TotalQuantity" toml:"TotalQuantity" yaml:"TotalQuantity"`
	PlannedScrapQuantity                null.Float32 `boil:"PlannedScrapQuantity" json:"PlannedScrapQuantity,omitempty" toml:"PlannedScrapQuantity" yaml:"PlannedScrapQuantity,omitempty"`
	ConfirmedYieldQuantity              null.Float32 `boil:"ConfirmedYieldQuantity" json:"ConfirmedYieldQuantity,omitempty" toml:"ConfirmedYieldQuantity" yaml:"ConfirmedYieldQuantity,omitempty"`
	ProductionOrderHeaderText           null.String  `boil:"ProductionOrderHeaderText" json:"ProductionOrderHeaderText,omitempty" toml:"ProductionOrderHeaderText" yaml:"ProductionOrderHeaderText,omitempty"`

	R *dataPlatformProductionOrderHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformProductionOrderHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformProductionOrderHeaderDatumColumns = struct {
	ProductionOrder                     string
	ProductionOrderType                 string
	CreationDate                        string
	LastChangeDate                      string
	HeaderIsReleased                    string
	HeaderIsPartiallyConfirmed          string
	HeaderIsConfirmed                   string
	HeaderIsLocked                      string
	HeaderIsMarkedForDeletion           string
	Product                             string
	OwnerProductionPlant                string
	OwnerProductionPlantBusinessPartner string
	OwnerProductionPlantStorageLocation string
	MRPArea                             string
	MRPController                       string
	ProductionSupervisor                string
	ProductionVersion                   string
	PlannedOrder                        string
	OrderID                             string
	OrderItem                           string
	ProductionOrderPlannedStartDate     string
	ProductionOrderPlannedStartTime     string
	ProductionOrderPlannedEndDate       string
	ProductionOrderPlannedEndTime       string
	ProductionOrderActualReleaseDate    string
	ProductionOrderActualReleaseTime    string
	ProductionOrderActualStartDate      string
	ProductionOrderActualStartTime      string
	ProductionOrderActualEndDate        string
	ProductionOrderActualEndTime        string
	ProductionUnit                      string
	TotalQuantity                       string
	PlannedScrapQuantity                string
	ConfirmedYieldQuantity              string
	ProductionOrderHeaderText           string
}{
	ProductionOrder:                     "ProductionOrder",
	ProductionOrderType:                 "ProductionOrderType",
	CreationDate:                        "CreationDate",
	LastChangeDate:                      "LastChangeDate",
	HeaderIsReleased:                    "HeaderIsReleased",
	HeaderIsPartiallyConfirmed:          "HeaderIsPartiallyConfirmed",
	HeaderIsConfirmed:                   "HeaderIsConfirmed",
	HeaderIsLocked:                      "HeaderIsLocked",
	HeaderIsMarkedForDeletion:           "HeaderIsMarkedForDeletion",
	Product:                             "Product",
	OwnerProductionPlant:                "OwnerProductionPlant",
	OwnerProductionPlantBusinessPartner: "OwnerProductionPlantBusinessPartner",
	OwnerProductionPlantStorageLocation: "OwnerProductionPlantStorageLocation",
	MRPArea:                             "MRPArea",
	MRPController:                       "MRPController",
	ProductionSupervisor:                "ProductionSupervisor",
	ProductionVersion:                   "ProductionVersion",
	PlannedOrder:                        "PlannedOrder",
	OrderID:                             "OrderID",
	OrderItem:                           "OrderItem",
	ProductionOrderPlannedStartDate:     "ProductionOrderPlannedStartDate",
	ProductionOrderPlannedStartTime:     "ProductionOrderPlannedStartTime",
	ProductionOrderPlannedEndDate:       "ProductionOrderPlannedEndDate",
	ProductionOrderPlannedEndTime:       "ProductionOrderPlannedEndTime",
	ProductionOrderActualReleaseDate:    "ProductionOrderActualReleaseDate",
	ProductionOrderActualReleaseTime:    "ProductionOrderActualReleaseTime",
	ProductionOrderActualStartDate:      "ProductionOrderActualStartDate",
	ProductionOrderActualStartTime:      "ProductionOrderActualStartTime",
	ProductionOrderActualEndDate:        "ProductionOrderActualEndDate",
	ProductionOrderActualEndTime:        "ProductionOrderActualEndTime",
	ProductionUnit:                      "ProductionUnit",
	TotalQuantity:                       "TotalQuantity",
	PlannedScrapQuantity:                "PlannedScrapQuantity",
	ConfirmedYieldQuantity:              "ConfirmedYieldQuantity",
	ProductionOrderHeaderText:           "ProductionOrderHeaderText",
}

var DataPlatformProductionOrderHeaderDatumTableColumns = struct {
	ProductionOrder                     string
	ProductionOrderType                 string
	CreationDate                        string
	LastChangeDate                      string
	HeaderIsReleased                    string
	HeaderIsPartiallyConfirmed          string
	HeaderIsConfirmed                   string
	HeaderIsLocked                      string
	HeaderIsMarkedForDeletion           string
	Product                             string
	OwnerProductionPlant                string
	OwnerProductionPlantBusinessPartner string
	OwnerProductionPlantStorageLocation string
	MRPArea                             string
	MRPController                       string
	ProductionSupervisor                string
	ProductionVersion                   string
	PlannedOrder                        string
	OrderID                             string
	OrderItem                           string
	ProductionOrderPlannedStartDate     string
	ProductionOrderPlannedStartTime     string
	ProductionOrderPlannedEndDate       string
	ProductionOrderPlannedEndTime       string
	ProductionOrderActualReleaseDate    string
	ProductionOrderActualReleaseTime    string
	ProductionOrderActualStartDate      string
	ProductionOrderActualStartTime      string
	ProductionOrderActualEndDate        string
	ProductionOrderActualEndTime        string
	ProductionUnit                      string
	TotalQuantity                       string
	PlannedScrapQuantity                string
	ConfirmedYieldQuantity              string
	ProductionOrderHeaderText           string
}{
	ProductionOrder:                     "data_platform_production_order_header_data.ProductionOrder",
	ProductionOrderType:                 "data_platform_production_order_header_data.ProductionOrderType",
	CreationDate:                        "data_platform_production_order_header_data.CreationDate",
	LastChangeDate:                      "data_platform_production_order_header_data.LastChangeDate",
	HeaderIsReleased:                    "data_platform_production_order_header_data.HeaderIsReleased",
	HeaderIsPartiallyConfirmed:          "data_platform_production_order_header_data.HeaderIsPartiallyConfirmed",
	HeaderIsConfirmed:                   "data_platform_production_order_header_data.HeaderIsConfirmed",
	HeaderIsLocked:                      "data_platform_production_order_header_data.HeaderIsLocked",
	HeaderIsMarkedForDeletion:           "data_platform_production_order_header_data.HeaderIsMarkedForDeletion",
	Product:                             "data_platform_production_order_header_data.Product",
	OwnerProductionPlant:                "data_platform_production_order_header_data.OwnerProductionPlant",
	OwnerProductionPlantBusinessPartner: "data_platform_production_order_header_data.OwnerProductionPlantBusinessPartner",
	OwnerProductionPlantStorageLocation: "data_platform_production_order_header_data.OwnerProductionPlantStorageLocation",
	MRPArea:                             "data_platform_production_order_header_data.MRPArea",
	MRPController:                       "data_platform_production_order_header_data.MRPController",
	ProductionSupervisor:                "data_platform_production_order_header_data.ProductionSupervisor",
	ProductionVersion:                   "data_platform_production_order_header_data.ProductionVersion",
	PlannedOrder:                        "data_platform_production_order_header_data.PlannedOrder",
	OrderID:                             "data_platform_production_order_header_data.OrderID",
	OrderItem:                           "data_platform_production_order_header_data.OrderItem",
	ProductionOrderPlannedStartDate:     "data_platform_production_order_header_data.ProductionOrderPlannedStartDate",
	ProductionOrderPlannedStartTime:     "data_platform_production_order_header_data.ProductionOrderPlannedStartTime",
	ProductionOrderPlannedEndDate:       "data_platform_production_order_header_data.ProductionOrderPlannedEndDate",
	ProductionOrderPlannedEndTime:       "data_platform_production_order_header_data.ProductionOrderPlannedEndTime",
	ProductionOrderActualReleaseDate:    "data_platform_production_order_header_data.ProductionOrderActualReleaseDate",
	ProductionOrderActualReleaseTime:    "data_platform_production_order_header_data.ProductionOrderActualReleaseTime",
	ProductionOrderActualStartDate:      "data_platform_production_order_header_data.ProductionOrderActualStartDate",
	ProductionOrderActualStartTime:      "data_platform_production_order_header_data.ProductionOrderActualStartTime",
	ProductionOrderActualEndDate:        "data_platform_production_order_header_data.ProductionOrderActualEndDate",
	ProductionOrderActualEndTime:        "data_platform_production_order_header_data.ProductionOrderActualEndTime",
	ProductionUnit:                      "data_platform_production_order_header_data.ProductionUnit",
	TotalQuantity:                       "data_platform_production_order_header_data.TotalQuantity",
	PlannedScrapQuantity:                "data_platform_production_order_header_data.PlannedScrapQuantity",
	ConfirmedYieldQuantity:              "data_platform_production_order_header_data.ConfirmedYieldQuantity",
	ProductionOrderHeaderText:           "data_platform_production_order_header_data.ProductionOrderHeaderText",
}

// Generated where

var DataPlatformProductionOrderHeaderDatumWhere = struct {
	ProductionOrder                     whereHelperint
	ProductionOrderType                 whereHelpernull_String
	CreationDate                        whereHelperstring
	LastChangeDate                      whereHelperstring
	HeaderIsReleased                    whereHelpernull_Bool
	HeaderIsPartiallyConfirmed          whereHelpernull_Bool
	HeaderIsConfirmed                   whereHelpernull_Bool
	HeaderIsLocked                      whereHelpernull_Bool
	HeaderIsMarkedForDeletion           whereHelpernull_Bool
	Product                             whereHelpernull_String
	OwnerProductionPlant                whereHelperstring
	OwnerProductionPlantBusinessPartner whereHelperint
	OwnerProductionPlantStorageLocation whereHelpernull_String
	MRPArea                             whereHelpernull_String
	MRPController                       whereHelpernull_String
	ProductionSupervisor                whereHelpernull_String
	ProductionVersion                   whereHelpernull_Int
	PlannedOrder                        whereHelpernull_Int
	OrderID                             whereHelpernull_Int
	OrderItem                           whereHelpernull_Int
	ProductionOrderPlannedStartDate     whereHelpernull_String
	ProductionOrderPlannedStartTime     whereHelpernull_String
	ProductionOrderPlannedEndDate       whereHelpernull_String
	ProductionOrderPlannedEndTime       whereHelpernull_String
	ProductionOrderActualReleaseDate    whereHelpernull_String
	ProductionOrderActualReleaseTime    whereHelpernull_String
	ProductionOrderActualStartDate      whereHelpernull_String
	ProductionOrderActualStartTime      whereHelpernull_String
	ProductionOrderActualEndDate        whereHelpernull_String
	ProductionOrderActualEndTime        whereHelpernull_String
	ProductionUnit                      whereHelpernull_String
	TotalQuantity                       whereHelperfloat32
	PlannedScrapQuantity                whereHelpernull_Float32
	ConfirmedYieldQuantity              whereHelpernull_Float32
	ProductionOrderHeaderText           whereHelpernull_String
}{
	ProductionOrder:                     whereHelperint{field: "`data_platform_production_order_header_data`.`ProductionOrder`"},
	ProductionOrderType:                 whereHelpernull_String{field: "`data_platform_production_order_header_data`.`ProductionOrderType`"},
	CreationDate:                        whereHelperstring{field: "`data_platform_production_order_header_data`.`CreationDate`"},
	LastChangeDate:                      whereHelperstring{field: "`data_platform_production_order_header_data`.`LastChangeDate`"},
	HeaderIsReleased:                    whereHelpernull_Bool{field: "`data_platform_production_order_header_data`.`HeaderIsReleased`"},
	HeaderIsPartiallyConfirmed:          whereHelpernull_Bool{field: "`data_platform_production_order_header_data`.`HeaderIsPartiallyConfirmed`"},
	HeaderIsConfirmed:                   whereHelpernull_Bool{field: "`data_platform_production_order_header_data`.`HeaderIsConfirmed`"},
	HeaderIsLocked:                      whereHelpernull_Bool{field: "`data_platform_production_order_header_data`.`HeaderIsLocked`"},
	HeaderIsMarkedForDeletion:           whereHelpernull_Bool{field: "`data_platform_production_order_header_data`.`HeaderIsMarkedForDeletion`"},
	Product:                             whereHelpernull_String{field: "`data_platform_production_order_header_data`.`Product`"},
	OwnerProductionPlant:                whereHelperstring{field: "`data_platform_production_order_header_data`.`OwnerProductionPlant`"},
	OwnerProductionPlantBusinessPartner: whereHelperint{field: "`data_platform_production_order_header_data`.`OwnerProductionPlantBusinessPartner`"},
	OwnerProductionPlantStorageLocation: whereHelpernull_String{field: "`data_platform_production_order_header_data`.`OwnerProductionPlantStorageLocation`"},
	MRPArea:                             whereHelpernull_String{field: "`data_platform_production_order_header_data`.`MRPArea`"},
	MRPController:                       whereHelpernull_String{field: "`data_platform_production_order_header_data`.`MRPController`"},
	ProductionSupervisor:                whereHelpernull_String{field: "`data_platform_production_order_header_data`.`ProductionSupervisor`"},
	ProductionVersion:                   whereHelpernull_Int{field: "`data_platform_production_order_header_data`.`ProductionVersion`"},
	PlannedOrder:                        whereHelpernull_Int{field: "`data_platform_production_order_header_data`.`PlannedOrder`"},
	OrderID:                             whereHelpernull_Int{field: "`data_platform_production_order_header_data`.`OrderID`"},
	OrderItem:                           whereHelpernull_Int{field: "`data_platform_production_order_header_data`.`OrderItem`"},
	ProductionOrderPlannedStartDate:     whereHelpernull_String{field: "`data_platform_production_order_header_data`.`ProductionOrderPlannedStartDate`"},
	ProductionOrderPlannedStartTime:     whereHelpernull_String{field: "`data_platform_production_order_header_data`.`ProductionOrderPlannedStartTime`"},
	ProductionOrderPlannedEndDate:       whereHelpernull_String{field: "`data_platform_production_order_header_data`.`ProductionOrderPlannedEndDate`"},
	ProductionOrderPlannedEndTime:       whereHelpernull_String{field: "`data_platform_production_order_header_data`.`ProductionOrderPlannedEndTime`"},
	ProductionOrderActualReleaseDate:    whereHelpernull_String{field: "`data_platform_production_order_header_data`.`ProductionOrderActualReleaseDate`"},
	ProductionOrderActualReleaseTime:    whereHelpernull_String{field: "`data_platform_production_order_header_data`.`ProductionOrderActualReleaseTime`"},
	ProductionOrderActualStartDate:      whereHelpernull_String{field: "`data_platform_production_order_header_data`.`ProductionOrderActualStartDate`"},
	ProductionOrderActualStartTime:      whereHelpernull_String{field: "`data_platform_production_order_header_data`.`ProductionOrderActualStartTime`"},
	ProductionOrderActualEndDate:        whereHelpernull_String{field: "`data_platform_production_order_header_data`.`ProductionOrderActualEndDate`"},
	ProductionOrderActualEndTime:        whereHelpernull_String{field: "`data_platform_production_order_header_data`.`ProductionOrderActualEndTime`"},
	ProductionUnit:                      whereHelpernull_String{field: "`data_platform_production_order_header_data`.`ProductionUnit`"},
	TotalQuantity:                       whereHelperfloat32{field: "`data_platform_production_order_header_data`.`TotalQuantity`"},
	PlannedScrapQuantity:                whereHelpernull_Float32{field: "`data_platform_production_order_header_data`.`PlannedScrapQuantity`"},
	ConfirmedYieldQuantity:              whereHelpernull_Float32{field: "`data_platform_production_order_header_data`.`ConfirmedYieldQuantity`"},
	ProductionOrderHeaderText:           whereHelpernull_String{field: "`data_platform_production_order_header_data`.`ProductionOrderHeaderText`"},
}

// DataPlatformProductionOrderHeaderDatumRels is where relationship names are stored.
var DataPlatformProductionOrderHeaderDatumRels = struct {
}{}

// dataPlatformProductionOrderHeaderDatumR is where relationships are stored.
type dataPlatformProductionOrderHeaderDatumR struct {
}

// NewStruct creates a new relationship struct
func (*dataPlatformProductionOrderHeaderDatumR) NewStruct() *dataPlatformProductionOrderHeaderDatumR {
	return &dataPlatformProductionOrderHeaderDatumR{}
}

// dataPlatformProductionOrderHeaderDatumL is where Load methods for each relationship are stored.
type dataPlatformProductionOrderHeaderDatumL struct{}

var (
	dataPlatformProductionOrderHeaderDatumAllColumns            = []string{"ProductionOrder", "ProductionOrderType", "CreationDate", "LastChangeDate", "HeaderIsReleased", "HeaderIsPartiallyConfirmed", "HeaderIsConfirmed", "HeaderIsLocked", "HeaderIsMarkedForDeletion", "Product", "OwnerProductionPlant", "OwnerProductionPlantBusinessPartner", "OwnerProductionPlantStorageLocation", "MRPArea", "MRPController", "ProductionSupervisor", "ProductionVersion", "PlannedOrder", "OrderID", "OrderItem", "ProductionOrderPlannedStartDate", "ProductionOrderPlannedStartTime", "ProductionOrderPlannedEndDate", "ProductionOrderPlannedEndTime", "ProductionOrderActualReleaseDate", "ProductionOrderActualReleaseTime", "ProductionOrderActualStartDate", "ProductionOrderActualStartTime", "ProductionOrderActualEndDate", "ProductionOrderActualEndTime", "ProductionUnit", "TotalQuantity", "PlannedScrapQuantity", "ConfirmedYieldQuantity", "ProductionOrderHeaderText"}
	dataPlatformProductionOrderHeaderDatumColumnsWithoutDefault = []string{"ProductionOrder", "ProductionOrderType", "CreationDate", "LastChangeDate", "HeaderIsReleased", "HeaderIsPartiallyConfirmed", "HeaderIsConfirmed", "HeaderIsLocked", "HeaderIsMarkedForDeletion", "Product", "OwnerProductionPlant", "OwnerProductionPlantBusinessPartner", "OwnerProductionPlantStorageLocation", "MRPArea", "MRPController", "ProductionSupervisor", "ProductionVersion", "PlannedOrder", "OrderID", "OrderItem", "ProductionOrderPlannedStartDate", "ProductionOrderPlannedStartTime", "ProductionOrderPlannedEndDate", "ProductionOrderPlannedEndTime", "ProductionOrderActualReleaseDate", "ProductionOrderActualReleaseTime", "ProductionOrderActualStartDate", "ProductionOrderActualStartTime", "ProductionOrderActualEndDate", "ProductionOrderActualEndTime", "ProductionUnit", "TotalQuantity", "PlannedScrapQuantity", "ConfirmedYieldQuantity", "ProductionOrderHeaderText"}
	dataPlatformProductionOrderHeaderDatumColumnsWithDefault    = []string{}
	dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns     = []string{"ProductionOrder"}
	dataPlatformProductionOrderHeaderDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformProductionOrderHeaderDatumSlice is an alias for a slice of pointers to DataPlatformProductionOrderHeaderDatum.
	// This should almost always be used instead of []DataPlatformProductionOrderHeaderDatum.
	DataPlatformProductionOrderHeaderDatumSlice []*DataPlatformProductionOrderHeaderDatum

	dataPlatformProductionOrderHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformProductionOrderHeaderDatumType                 = reflect.TypeOf(&DataPlatformProductionOrderHeaderDatum{})
	dataPlatformProductionOrderHeaderDatumMapping              = queries.MakeStructMapping(dataPlatformProductionOrderHeaderDatumType)
	dataPlatformProductionOrderHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformProductionOrderHeaderDatumType, dataPlatformProductionOrderHeaderDatumMapping, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns)
	dataPlatformProductionOrderHeaderDatumInsertCacheMut       sync.RWMutex
	dataPlatformProductionOrderHeaderDatumInsertCache          = make(map[string]insertCache)
	dataPlatformProductionOrderHeaderDatumUpdateCacheMut       sync.RWMutex
	dataPlatformProductionOrderHeaderDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformProductionOrderHeaderDatumUpsertCacheMut       sync.RWMutex
	dataPlatformProductionOrderHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformProductionOrderHeaderDatum record from the query.
func (q dataPlatformProductionOrderHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformProductionOrderHeaderDatum, error) {
	o := &DataPlatformProductionOrderHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_production_order_header_data")
	}

	return o, nil
}

// All returns all DataPlatformProductionOrderHeaderDatum records from the query.
func (q dataPlatformProductionOrderHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformProductionOrderHeaderDatumSlice, error) {
	var o []*DataPlatformProductionOrderHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformProductionOrderHeaderDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformProductionOrderHeaderDatum records in the query.
func (q dataPlatformProductionOrderHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_production_order_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformProductionOrderHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_production_order_header_data exists")
	}

	return count > 0, nil
}

// DataPlatformProductionOrderHeaderData retrieves all the records using an executor.
func DataPlatformProductionOrderHeaderData(mods ...qm.QueryMod) dataPlatformProductionOrderHeaderDatumQuery {
	mods = append(mods, qm.From("`data_platform_production_order_header_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_production_order_header_data`.*"})
	}

	return dataPlatformProductionOrderHeaderDatumQuery{q}
}

// FindDataPlatformProductionOrderHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformProductionOrderHeaderDatum(ctx context.Context, exec boil.ContextExecutor, productionOrder int, selectCols ...string) (*DataPlatformProductionOrderHeaderDatum, error) {
	dataPlatformProductionOrderHeaderDatumObj := &DataPlatformProductionOrderHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_production_order_header_data` where `ProductionOrder`=?", sel,
	)

	q := queries.Raw(query, productionOrder)

	err := q.Bind(ctx, exec, dataPlatformProductionOrderHeaderDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_production_order_header_data")
	}

	return dataPlatformProductionOrderHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformProductionOrderHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_production_order_header_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductionOrderHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformProductionOrderHeaderDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformProductionOrderHeaderDatumInsertCache[key]
	dataPlatformProductionOrderHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformProductionOrderHeaderDatumAllColumns,
			dataPlatformProductionOrderHeaderDatumColumnsWithDefault,
			dataPlatformProductionOrderHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionOrderHeaderDatumType, dataPlatformProductionOrderHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformProductionOrderHeaderDatumType, dataPlatformProductionOrderHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_production_order_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_production_order_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_production_order_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_production_order_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ProductionOrder,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_production_order_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductionOrderHeaderDatumInsertCacheMut.Lock()
		dataPlatformProductionOrderHeaderDatumInsertCache[key] = cache
		dataPlatformProductionOrderHeaderDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformProductionOrderHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformProductionOrderHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformProductionOrderHeaderDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformProductionOrderHeaderDatumUpdateCache[key]
	dataPlatformProductionOrderHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformProductionOrderHeaderDatumAllColumns,
			dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_production_order_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_production_order_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionOrderHeaderDatumType, dataPlatformProductionOrderHeaderDatumMapping, append(wl, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_production_order_header_data row")
	}

	if !cached {
		dataPlatformProductionOrderHeaderDatumUpdateCacheMut.Lock()
		dataPlatformProductionOrderHeaderDatumUpdateCache[key] = cache
		dataPlatformProductionOrderHeaderDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformProductionOrderHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_production_order_header_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformProductionOrderHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionOrderHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_production_order_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformProductionOrderHeaderDatum slice")
	}

	return nil
}

var mySQLDataPlatformProductionOrderHeaderDatumUniqueColumns = []string{
	"ProductionOrder",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformProductionOrderHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_production_order_header_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductionOrderHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformProductionOrderHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformProductionOrderHeaderDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformProductionOrderHeaderDatumUpsertCache[key]
	dataPlatformProductionOrderHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformProductionOrderHeaderDatumAllColumns,
			dataPlatformProductionOrderHeaderDatumColumnsWithDefault,
			dataPlatformProductionOrderHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformProductionOrderHeaderDatumAllColumns,
			dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_production_order_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_production_order_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_production_order_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionOrderHeaderDatumType, dataPlatformProductionOrderHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformProductionOrderHeaderDatumType, dataPlatformProductionOrderHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_production_order_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformProductionOrderHeaderDatumType, dataPlatformProductionOrderHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_production_order_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_production_order_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductionOrderHeaderDatumUpsertCacheMut.Lock()
		dataPlatformProductionOrderHeaderDatumUpsertCache[key] = cache
		dataPlatformProductionOrderHeaderDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformProductionOrderHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformProductionOrderHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformProductionOrderHeaderDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformProductionOrderHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_production_order_header_data` WHERE `ProductionOrder`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_production_order_header_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformProductionOrderHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformProductionOrderHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_production_order_header_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformProductionOrderHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionOrderHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_production_order_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformProductionOrderHeaderDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformProductionOrderHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformProductionOrderHeaderDatum(ctx, exec, o.ProductionOrder)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformProductionOrderHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformProductionOrderHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionOrderHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_production_order_header_data`.* FROM `data_platform_production_order_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformProductionOrderHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformProductionOrderHeaderDatumExists checks if the DataPlatformProductionOrderHeaderDatum row exists.
func DataPlatformProductionOrderHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, productionOrder int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_production_order_header_data` where `ProductionOrder`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, productionOrder)
	}
	row := exec.QueryRowContext(ctx, sql, productionOrder)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_production_order_header_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformProductionOrderHeaderDatum row exists.
func (o *DataPlatformProductionOrderHeaderDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformProductionOrderHeaderDatumExists(ctx, exec, o.ProductionOrder)
}
