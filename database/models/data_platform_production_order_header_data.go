// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformProductionOrderHeaderDatum is an object representing the database table.
type DataPlatformProductionOrderHeaderDatum struct {
	ProductionOrder                                    int          `boil:"ProductionOrder" json:"ProductionOrder" toml:"ProductionOrder" yaml:"ProductionOrder"`
	SupplyChainRelationshipID                          int          `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipProductionPlantID           int          `boil:"SupplyChainRelationshipProductionPlantID" json:"SupplyChainRelationshipProductionPlantID" toml:"SupplyChainRelationshipProductionPlantID" yaml:"SupplyChainRelationshipProductionPlantID"`
	SupplyChainRelationshipDeliveryID                  int          `boil:"SupplyChainRelationshipDeliveryID" json:"SupplyChainRelationshipDeliveryID" toml:"SupplyChainRelationshipDeliveryID" yaml:"SupplyChainRelationshipDeliveryID"`
	SupplyChainRelationshipDeliveryPlantID             int          `boil:"SupplyChainRelationshipDeliveryPlantID" json:"SupplyChainRelationshipDeliveryPlantID" toml:"SupplyChainRelationshipDeliveryPlantID" yaml:"SupplyChainRelationshipDeliveryPlantID"`
	ProductionOrderType                                string       `boil:"ProductionOrderType" json:"ProductionOrderType" toml:"ProductionOrderType" yaml:"ProductionOrderType"`
	Product                                            string       `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	Buyer                                              int          `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                                             int          `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	OwnerProductionPlantBusinessPartner                int          `boil:"OwnerProductionPlantBusinessPartner" json:"OwnerProductionPlantBusinessPartner" toml:"OwnerProductionPlantBusinessPartner" yaml:"OwnerProductionPlantBusinessPartner"`
	OwnerProductionPlant                               string       `boil:"OwnerProductionPlant" json:"OwnerProductionPlant" toml:"OwnerProductionPlant" yaml:"OwnerProductionPlant"`
	OwnerProductionPlantStorageLocation                string       `boil:"OwnerProductionPlantStorageLocation" json:"OwnerProductionPlantStorageLocation" toml:"OwnerProductionPlantStorageLocation" yaml:"OwnerProductionPlantStorageLocation"`
	DepartureDeliverFromParty                          int          `boil:"DepartureDeliverFromParty" json:"DepartureDeliverFromParty" toml:"DepartureDeliverFromParty" yaml:"DepartureDeliverFromParty"`
	DepartureDeliverFromPlant                          string       `boil:"DepartureDeliverFromPlant" json:"DepartureDeliverFromPlant" toml:"DepartureDeliverFromPlant" yaml:"DepartureDeliverFromPlant"`
	DepartureDeliverFromPlantStorageLocation           string       `boil:"DepartureDeliverFromPlantStorageLocation" json:"DepartureDeliverFromPlantStorageLocation" toml:"DepartureDeliverFromPlantStorageLocation" yaml:"DepartureDeliverFromPlantStorageLocation"`
	DestinationDeliverToParty                          int          `boil:"DestinationDeliverToParty" json:"DestinationDeliverToParty" toml:"DestinationDeliverToParty" yaml:"DestinationDeliverToParty"`
	DestinationDeliverToPlant                          string       `boil:"DestinationDeliverToPlant" json:"DestinationDeliverToPlant" toml:"DestinationDeliverToPlant" yaml:"DestinationDeliverToPlant"`
	DestinationDeliverToPlantStorageLocation           string       `boil:"DestinationDeliverToPlantStorageLocation" json:"DestinationDeliverToPlantStorageLocation" toml:"DestinationDeliverToPlantStorageLocation" yaml:"DestinationDeliverToPlantStorageLocation"`
	ProductBaseUnit                                    string       `boil:"ProductBaseUnit" json:"ProductBaseUnit" toml:"ProductBaseUnit" yaml:"ProductBaseUnit"`
	MRPArea                                            null.String  `boil:"MRPArea" json:"MRPArea,omitempty" toml:"MRPArea" yaml:"MRPArea,omitempty"`
	MRPController                                      null.String  `boil:"MRPController" json:"MRPController,omitempty" toml:"MRPController" yaml:"MRPController,omitempty"`
	ProductionVersion                                  null.Int     `boil:"ProductionVersion" json:"ProductionVersion,omitempty" toml:"ProductionVersion" yaml:"ProductionVersion,omitempty"`
	BillOfMaterial                                     int          `boil:"BillOfMaterial" json:"BillOfMaterial" toml:"BillOfMaterial" yaml:"BillOfMaterial"`
	Operations                                         int          `boil:"Operations" json:"Operations" toml:"Operations" yaml:"Operations"`
	ProductionOrderQuantityInBaseUnit                  float32      `boil:"ProductionOrderQuantityInBaseUnit" json:"ProductionOrderQuantityInBaseUnit" toml:"ProductionOrderQuantityInBaseUnit" yaml:"ProductionOrderQuantityInBaseUnit"`
	ProductionOrderQuantityInDepartureProductionUnit   float32      `boil:"ProductionOrderQuantityInDepartureProductionUnit" json:"ProductionOrderQuantityInDepartureProductionUnit" toml:"ProductionOrderQuantityInDepartureProductionUnit" yaml:"ProductionOrderQuantityInDepartureProductionUnit"`
	ProductionOrderQuantityInDestinationProductionUnit float32      `boil:"ProductionOrderQuantityInDestinationProductionUnit" json:"ProductionOrderQuantityInDestinationProductionUnit" toml:"ProductionOrderQuantityInDestinationProductionUnit" yaml:"ProductionOrderQuantityInDestinationProductionUnit"`
	ProductionOrderQuantityInDepartureDeliveryUnit     float32      `boil:"ProductionOrderQuantityInDepartureDeliveryUnit" json:"ProductionOrderQuantityInDepartureDeliveryUnit" toml:"ProductionOrderQuantityInDepartureDeliveryUnit" yaml:"ProductionOrderQuantityInDepartureDeliveryUnit"`
	ProductionOrderQuantityInDestinationDeliveryUnit   float32      `boil:"ProductionOrderQuantityInDestinationDeliveryUnit" json:"ProductionOrderQuantityInDestinationDeliveryUnit" toml:"ProductionOrderQuantityInDestinationDeliveryUnit" yaml:"ProductionOrderQuantityInDestinationDeliveryUnit"`
	ProductionOrderDepartureProductionUnit             string       `boil:"ProductionOrderDepartureProductionUnit" json:"ProductionOrderDepartureProductionUnit" toml:"ProductionOrderDepartureProductionUnit" yaml:"ProductionOrderDepartureProductionUnit"`
	ProductionOrderDestinationProductionUnit           string       `boil:"ProductionOrderDestinationProductionUnit" json:"ProductionOrderDestinationProductionUnit" toml:"ProductionOrderDestinationProductionUnit" yaml:"ProductionOrderDestinationProductionUnit"`
	ProductionOrderDepartureDeliveryUnit               string       `boil:"ProductionOrderDepartureDeliveryUnit" json:"ProductionOrderDepartureDeliveryUnit" toml:"ProductionOrderDepartureDeliveryUnit" yaml:"ProductionOrderDepartureDeliveryUnit"`
	ProductionOrderDestinationDeliveryUnit             string       `boil:"ProductionOrderDestinationDeliveryUnit" json:"ProductionOrderDestinationDeliveryUnit" toml:"ProductionOrderDestinationDeliveryUnit" yaml:"ProductionOrderDestinationDeliveryUnit"`
	ProductionOrderPlannedScrapQtyInBaseUnit           null.Float32 `boil:"ProductionOrderPlannedScrapQtyInBaseUnit" json:"ProductionOrderPlannedScrapQtyInBaseUnit,omitempty" toml:"ProductionOrderPlannedScrapQtyInBaseUnit" yaml:"ProductionOrderPlannedScrapQtyInBaseUnit,omitempty"`
	ProductionOrderPlannedStartDate                    string       `boil:"ProductionOrderPlannedStartDate" json:"ProductionOrderPlannedStartDate" toml:"ProductionOrderPlannedStartDate" yaml:"ProductionOrderPlannedStartDate"`
	ProductionOrderPlannedStartTime                    string       `boil:"ProductionOrderPlannedStartTime" json:"ProductionOrderPlannedStartTime" toml:"ProductionOrderPlannedStartTime" yaml:"ProductionOrderPlannedStartTime"`
	ProductionOrderPlannedEndDate                      string       `boil:"ProductionOrderPlannedEndDate" json:"ProductionOrderPlannedEndDate" toml:"ProductionOrderPlannedEndDate" yaml:"ProductionOrderPlannedEndDate"`
	ProductionOrderPlannedEndTime                      string       `boil:"ProductionOrderPlannedEndTime" json:"ProductionOrderPlannedEndTime" toml:"ProductionOrderPlannedEndTime" yaml:"ProductionOrderPlannedEndTime"`
	ProductionOrderActualReleaseDate                   null.String  `boil:"ProductionOrderActualReleaseDate" json:"ProductionOrderActualReleaseDate,omitempty" toml:"ProductionOrderActualReleaseDate" yaml:"ProductionOrderActualReleaseDate,omitempty"`
	ProductionOrderActualReleaseTime                   null.String  `boil:"ProductionOrderActualReleaseTime" json:"ProductionOrderActualReleaseTime,omitempty" toml:"ProductionOrderActualReleaseTime" yaml:"ProductionOrderActualReleaseTime,omitempty"`
	ProductionOrderActualStartDate                     null.String  `boil:"ProductionOrderActualStartDate" json:"ProductionOrderActualStartDate,omitempty" toml:"ProductionOrderActualStartDate" yaml:"ProductionOrderActualStartDate,omitempty"`
	ProductionOrderActualStartTime                     null.String  `boil:"ProductionOrderActualStartTime" json:"ProductionOrderActualStartTime,omitempty" toml:"ProductionOrderActualStartTime" yaml:"ProductionOrderActualStartTime,omitempty"`
	ProductionOrderActualEndDate                       null.String  `boil:"ProductionOrderActualEndDate" json:"ProductionOrderActualEndDate,omitempty" toml:"ProductionOrderActualEndDate" yaml:"ProductionOrderActualEndDate,omitempty"`
	ProductionOrderActualEndTime                       null.String  `boil:"ProductionOrderActualEndTime" json:"ProductionOrderActualEndTime,omitempty" toml:"ProductionOrderActualEndTime" yaml:"ProductionOrderActualEndTime,omitempty"`
	PlannedOrder                                       null.Int     `boil:"PlannedOrder" json:"PlannedOrder,omitempty" toml:"PlannedOrder" yaml:"PlannedOrder,omitempty"`
	OrderID                                            null.Int     `boil:"OrderID" json:"OrderID,omitempty" toml:"OrderID" yaml:"OrderID,omitempty"`
	OrderItem                                          null.Int     `boil:"OrderItem" json:"OrderItem,omitempty" toml:"OrderItem" yaml:"OrderItem,omitempty"`
	ProductionOrderHeaderText                          null.String  `boil:"ProductionOrderHeaderText" json:"ProductionOrderHeaderText,omitempty" toml:"ProductionOrderHeaderText" yaml:"ProductionOrderHeaderText,omitempty"`
	CreationDate                                       string       `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	CreationTime                                       string       `boil:"CreationTime" json:"CreationTime" toml:"CreationTime" yaml:"CreationTime"`
	LastChangeDate                                     string       `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	LastChangeTime                                     string       `boil:"LastChangeTime" json:"LastChangeTime" toml:"LastChangeTime" yaml:"LastChangeTime"`
	IsReleased                                         null.Bool    `boil:"IsReleased" json:"IsReleased,omitempty" toml:"IsReleased" yaml:"IsReleased,omitempty"`
	IsPartiallyConfirmed                               null.Bool    `boil:"IsPartiallyConfirmed" json:"IsPartiallyConfirmed,omitempty" toml:"IsPartiallyConfirmed" yaml:"IsPartiallyConfirmed,omitempty"`
	IsConfirmed                                        null.Bool    `boil:"IsConfirmed" json:"IsConfirmed,omitempty" toml:"IsConfirmed" yaml:"IsConfirmed,omitempty"`
	IsLocked                                           null.Bool    `boil:"IsLocked" json:"IsLocked,omitempty" toml:"IsLocked" yaml:"IsLocked,omitempty"`
	IsCancelled                                        null.Bool    `boil:"IsCancelled" json:"IsCancelled,omitempty" toml:"IsCancelled" yaml:"IsCancelled,omitempty"`
	IsMarkedForDeletion                                null.Bool    `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformProductionOrderHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformProductionOrderHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformProductionOrderHeaderDatumColumns = struct {
	ProductionOrder                                    string
	SupplyChainRelationshipID                          string
	SupplyChainRelationshipProductionPlantID           string
	SupplyChainRelationshipDeliveryID                  string
	SupplyChainRelationshipDeliveryPlantID             string
	ProductionOrderType                                string
	Product                                            string
	Buyer                                              string
	Seller                                             string
	OwnerProductionPlantBusinessPartner                string
	OwnerProductionPlant                               string
	OwnerProductionPlantStorageLocation                string
	DepartureDeliverFromParty                          string
	DepartureDeliverFromPlant                          string
	DepartureDeliverFromPlantStorageLocation           string
	DestinationDeliverToParty                          string
	DestinationDeliverToPlant                          string
	DestinationDeliverToPlantStorageLocation           string
	ProductBaseUnit                                    string
	MRPArea                                            string
	MRPController                                      string
	ProductionVersion                                  string
	BillOfMaterial                                     string
	Operations                                         string
	ProductionOrderQuantityInBaseUnit                  string
	ProductionOrderQuantityInDepartureProductionUnit   string
	ProductionOrderQuantityInDestinationProductionUnit string
	ProductionOrderQuantityInDepartureDeliveryUnit     string
	ProductionOrderQuantityInDestinationDeliveryUnit   string
	ProductionOrderDepartureProductionUnit             string
	ProductionOrderDestinationProductionUnit           string
	ProductionOrderDepartureDeliveryUnit               string
	ProductionOrderDestinationDeliveryUnit             string
	ProductionOrderPlannedScrapQtyInBaseUnit           string
	ProductionOrderPlannedStartDate                    string
	ProductionOrderPlannedStartTime                    string
	ProductionOrderPlannedEndDate                      string
	ProductionOrderPlannedEndTime                      string
	ProductionOrderActualReleaseDate                   string
	ProductionOrderActualReleaseTime                   string
	ProductionOrderActualStartDate                     string
	ProductionOrderActualStartTime                     string
	ProductionOrderActualEndDate                       string
	ProductionOrderActualEndTime                       string
	PlannedOrder                                       string
	OrderID                                            string
	OrderItem                                          string
	ProductionOrderHeaderText                          string
	CreationDate                                       string
	CreationTime                                       string
	LastChangeDate                                     string
	LastChangeTime                                     string
	IsReleased                                         string
	IsPartiallyConfirmed                               string
	IsConfirmed                                        string
	IsLocked                                           string
	IsCancelled                                        string
	IsMarkedForDeletion                                string
}{
	ProductionOrder:                                  "ProductionOrder",
	SupplyChainRelationshipID:                        "SupplyChainRelationshipID",
	SupplyChainRelationshipProductionPlantID:         "SupplyChainRelationshipProductionPlantID",
	SupplyChainRelationshipDeliveryID:                "SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:           "SupplyChainRelationshipDeliveryPlantID",
	ProductionOrderType:                              "ProductionOrderType",
	Product:                                          "Product",
	Buyer:                                            "Buyer",
	Seller:                                           "Seller",
	OwnerProductionPlantBusinessPartner:              "OwnerProductionPlantBusinessPartner",
	OwnerProductionPlant:                             "OwnerProductionPlant",
	OwnerProductionPlantStorageLocation:              "OwnerProductionPlantStorageLocation",
	DepartureDeliverFromParty:                        "DepartureDeliverFromParty",
	DepartureDeliverFromPlant:                        "DepartureDeliverFromPlant",
	DepartureDeliverFromPlantStorageLocation:         "DepartureDeliverFromPlantStorageLocation",
	DestinationDeliverToParty:                        "DestinationDeliverToParty",
	DestinationDeliverToPlant:                        "DestinationDeliverToPlant",
	DestinationDeliverToPlantStorageLocation:         "DestinationDeliverToPlantStorageLocation",
	ProductBaseUnit:                                  "ProductBaseUnit",
	MRPArea:                                          "MRPArea",
	MRPController:                                    "MRPController",
	ProductionVersion:                                "ProductionVersion",
	BillOfMaterial:                                   "BillOfMaterial",
	Operations:                                       "Operations",
	ProductionOrderQuantityInBaseUnit:                "ProductionOrderQuantityInBaseUnit",
	ProductionOrderQuantityInDepartureProductionUnit: "ProductionOrderQuantityInDepartureProductionUnit",
	ProductionOrderQuantityInDestinationProductionUnit: "ProductionOrderQuantityInDestinationProductionUnit",
	ProductionOrderQuantityInDepartureDeliveryUnit:     "ProductionOrderQuantityInDepartureDeliveryUnit",
	ProductionOrderQuantityInDestinationDeliveryUnit:   "ProductionOrderQuantityInDestinationDeliveryUnit",
	ProductionOrderDepartureProductionUnit:             "ProductionOrderDepartureProductionUnit",
	ProductionOrderDestinationProductionUnit:           "ProductionOrderDestinationProductionUnit",
	ProductionOrderDepartureDeliveryUnit:               "ProductionOrderDepartureDeliveryUnit",
	ProductionOrderDestinationDeliveryUnit:             "ProductionOrderDestinationDeliveryUnit",
	ProductionOrderPlannedScrapQtyInBaseUnit:           "ProductionOrderPlannedScrapQtyInBaseUnit",
	ProductionOrderPlannedStartDate:                    "ProductionOrderPlannedStartDate",
	ProductionOrderPlannedStartTime:                    "ProductionOrderPlannedStartTime",
	ProductionOrderPlannedEndDate:                      "ProductionOrderPlannedEndDate",
	ProductionOrderPlannedEndTime:                      "ProductionOrderPlannedEndTime",
	ProductionOrderActualReleaseDate:                   "ProductionOrderActualReleaseDate",
	ProductionOrderActualReleaseTime:                   "ProductionOrderActualReleaseTime",
	ProductionOrderActualStartDate:                     "ProductionOrderActualStartDate",
	ProductionOrderActualStartTime:                     "ProductionOrderActualStartTime",
	ProductionOrderActualEndDate:                       "ProductionOrderActualEndDate",
	ProductionOrderActualEndTime:                       "ProductionOrderActualEndTime",
	PlannedOrder:                                       "PlannedOrder",
	OrderID:                                            "OrderID",
	OrderItem:                                          "OrderItem",
	ProductionOrderHeaderText:                          "ProductionOrderHeaderText",
	CreationDate:                                       "CreationDate",
	CreationTime:                                       "CreationTime",
	LastChangeDate:                                     "LastChangeDate",
	LastChangeTime:                                     "LastChangeTime",
	IsReleased:                                         "IsReleased",
	IsPartiallyConfirmed:                               "IsPartiallyConfirmed",
	IsConfirmed:                                        "IsConfirmed",
	IsLocked:                                           "IsLocked",
	IsCancelled:                                        "IsCancelled",
	IsMarkedForDeletion:                                "IsMarkedForDeletion",
}

var DataPlatformProductionOrderHeaderDatumTableColumns = struct {
	ProductionOrder                                    string
	SupplyChainRelationshipID                          string
	SupplyChainRelationshipProductionPlantID           string
	SupplyChainRelationshipDeliveryID                  string
	SupplyChainRelationshipDeliveryPlantID             string
	ProductionOrderType                                string
	Product                                            string
	Buyer                                              string
	Seller                                             string
	OwnerProductionPlantBusinessPartner                string
	OwnerProductionPlant                               string
	OwnerProductionPlantStorageLocation                string
	DepartureDeliverFromParty                          string
	DepartureDeliverFromPlant                          string
	DepartureDeliverFromPlantStorageLocation           string
	DestinationDeliverToParty                          string
	DestinationDeliverToPlant                          string
	DestinationDeliverToPlantStorageLocation           string
	ProductBaseUnit                                    string
	MRPArea                                            string
	MRPController                                      string
	ProductionVersion                                  string
	BillOfMaterial                                     string
	Operations                                         string
	ProductionOrderQuantityInBaseUnit                  string
	ProductionOrderQuantityInDepartureProductionUnit   string
	ProductionOrderQuantityInDestinationProductionUnit string
	ProductionOrderQuantityInDepartureDeliveryUnit     string
	ProductionOrderQuantityInDestinationDeliveryUnit   string
	ProductionOrderDepartureProductionUnit             string
	ProductionOrderDestinationProductionUnit           string
	ProductionOrderDepartureDeliveryUnit               string
	ProductionOrderDestinationDeliveryUnit             string
	ProductionOrderPlannedScrapQtyInBaseUnit           string
	ProductionOrderPlannedStartDate                    string
	ProductionOrderPlannedStartTime                    string
	ProductionOrderPlannedEndDate                      string
	ProductionOrderPlannedEndTime                      string
	ProductionOrderActualReleaseDate                   string
	ProductionOrderActualReleaseTime                   string
	ProductionOrderActualStartDate                     string
	ProductionOrderActualStartTime                     string
	ProductionOrderActualEndDate                       string
	ProductionOrderActualEndTime                       string
	PlannedOrder                                       string
	OrderID                                            string
	OrderItem                                          string
	ProductionOrderHeaderText                          string
	CreationDate                                       string
	CreationTime                                       string
	LastChangeDate                                     string
	LastChangeTime                                     string
	IsReleased                                         string
	IsPartiallyConfirmed                               string
	IsConfirmed                                        string
	IsLocked                                           string
	IsCancelled                                        string
	IsMarkedForDeletion                                string
}{
	ProductionOrder:                                  "data_platform_production_order_header_data.ProductionOrder",
	SupplyChainRelationshipID:                        "data_platform_production_order_header_data.SupplyChainRelationshipID",
	SupplyChainRelationshipProductionPlantID:         "data_platform_production_order_header_data.SupplyChainRelationshipProductionPlantID",
	SupplyChainRelationshipDeliveryID:                "data_platform_production_order_header_data.SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:           "data_platform_production_order_header_data.SupplyChainRelationshipDeliveryPlantID",
	ProductionOrderType:                              "data_platform_production_order_header_data.ProductionOrderType",
	Product:                                          "data_platform_production_order_header_data.Product",
	Buyer:                                            "data_platform_production_order_header_data.Buyer",
	Seller:                                           "data_platform_production_order_header_data.Seller",
	OwnerProductionPlantBusinessPartner:              "data_platform_production_order_header_data.OwnerProductionPlantBusinessPartner",
	OwnerProductionPlant:                             "data_platform_production_order_header_data.OwnerProductionPlant",
	OwnerProductionPlantStorageLocation:              "data_platform_production_order_header_data.OwnerProductionPlantStorageLocation",
	DepartureDeliverFromParty:                        "data_platform_production_order_header_data.DepartureDeliverFromParty",
	DepartureDeliverFromPlant:                        "data_platform_production_order_header_data.DepartureDeliverFromPlant",
	DepartureDeliverFromPlantStorageLocation:         "data_platform_production_order_header_data.DepartureDeliverFromPlantStorageLocation",
	DestinationDeliverToParty:                        "data_platform_production_order_header_data.DestinationDeliverToParty",
	DestinationDeliverToPlant:                        "data_platform_production_order_header_data.DestinationDeliverToPlant",
	DestinationDeliverToPlantStorageLocation:         "data_platform_production_order_header_data.DestinationDeliverToPlantStorageLocation",
	ProductBaseUnit:                                  "data_platform_production_order_header_data.ProductBaseUnit",
	MRPArea:                                          "data_platform_production_order_header_data.MRPArea",
	MRPController:                                    "data_platform_production_order_header_data.MRPController",
	ProductionVersion:                                "data_platform_production_order_header_data.ProductionVersion",
	BillOfMaterial:                                   "data_platform_production_order_header_data.BillOfMaterial",
	Operations:                                       "data_platform_production_order_header_data.Operations",
	ProductionOrderQuantityInBaseUnit:                "data_platform_production_order_header_data.ProductionOrderQuantityInBaseUnit",
	ProductionOrderQuantityInDepartureProductionUnit: "data_platform_production_order_header_data.ProductionOrderQuantityInDepartureProductionUnit",
	ProductionOrderQuantityInDestinationProductionUnit: "data_platform_production_order_header_data.ProductionOrderQuantityInDestinationProductionUnit",
	ProductionOrderQuantityInDepartureDeliveryUnit:     "data_platform_production_order_header_data.ProductionOrderQuantityInDepartureDeliveryUnit",
	ProductionOrderQuantityInDestinationDeliveryUnit:   "data_platform_production_order_header_data.ProductionOrderQuantityInDestinationDeliveryUnit",
	ProductionOrderDepartureProductionUnit:             "data_platform_production_order_header_data.ProductionOrderDepartureProductionUnit",
	ProductionOrderDestinationProductionUnit:           "data_platform_production_order_header_data.ProductionOrderDestinationProductionUnit",
	ProductionOrderDepartureDeliveryUnit:               "data_platform_production_order_header_data.ProductionOrderDepartureDeliveryUnit",
	ProductionOrderDestinationDeliveryUnit:             "data_platform_production_order_header_data.ProductionOrderDestinationDeliveryUnit",
	ProductionOrderPlannedScrapQtyInBaseUnit:           "data_platform_production_order_header_data.ProductionOrderPlannedScrapQtyInBaseUnit",
	ProductionOrderPlannedStartDate:                    "data_platform_production_order_header_data.ProductionOrderPlannedStartDate",
	ProductionOrderPlannedStartTime:                    "data_platform_production_order_header_data.ProductionOrderPlannedStartTime",
	ProductionOrderPlannedEndDate:                      "data_platform_production_order_header_data.ProductionOrderPlannedEndDate",
	ProductionOrderPlannedEndTime:                      "data_platform_production_order_header_data.ProductionOrderPlannedEndTime",
	ProductionOrderActualReleaseDate:                   "data_platform_production_order_header_data.ProductionOrderActualReleaseDate",
	ProductionOrderActualReleaseTime:                   "data_platform_production_order_header_data.ProductionOrderActualReleaseTime",
	ProductionOrderActualStartDate:                     "data_platform_production_order_header_data.ProductionOrderActualStartDate",
	ProductionOrderActualStartTime:                     "data_platform_production_order_header_data.ProductionOrderActualStartTime",
	ProductionOrderActualEndDate:                       "data_platform_production_order_header_data.ProductionOrderActualEndDate",
	ProductionOrderActualEndTime:                       "data_platform_production_order_header_data.ProductionOrderActualEndTime",
	PlannedOrder:                                       "data_platform_production_order_header_data.PlannedOrder",
	OrderID:                                            "data_platform_production_order_header_data.OrderID",
	OrderItem:                                          "data_platform_production_order_header_data.OrderItem",
	ProductionOrderHeaderText:                          "data_platform_production_order_header_data.ProductionOrderHeaderText",
	CreationDate:                                       "data_platform_production_order_header_data.CreationDate",
	CreationTime:                                       "data_platform_production_order_header_data.CreationTime",
	LastChangeDate:                                     "data_platform_production_order_header_data.LastChangeDate",
	LastChangeTime:                                     "data_platform_production_order_header_data.LastChangeTime",
	IsReleased:                                         "data_platform_production_order_header_data.IsReleased",
	IsPartiallyConfirmed:                               "data_platform_production_order_header_data.IsPartiallyConfirmed",
	IsConfirmed:                                        "data_platform_production_order_header_data.IsConfirmed",
	IsLocked:                                           "data_platform_production_order_header_data.IsLocked",
	IsCancelled:                                        "data_platform_production_order_header_data.IsCancelled",
	IsMarkedForDeletion:                                "data_platform_production_order_header_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformProductionOrderHeaderDatumWhere = struct {
	ProductionOrder                                    whereHelperint
	SupplyChainRelationshipID                          whereHelperint
	SupplyChainRelationshipProductionPlantID           whereHelperint
	SupplyChainRelationshipDeliveryID                  whereHelperint
	SupplyChainRelationshipDeliveryPlantID             whereHelperint
	ProductionOrderType                                whereHelperstring
	Product                                            whereHelperstring
	Buyer                                              whereHelperint
	Seller                                             whereHelperint
	OwnerProductionPlantBusinessPartner                whereHelperint
	OwnerProductionPlant                               whereHelperstring
	OwnerProductionPlantStorageLocation                whereHelperstring
	DepartureDeliverFromParty                          whereHelperint
	DepartureDeliverFromPlant                          whereHelperstring
	DepartureDeliverFromPlantStorageLocation           whereHelperstring
	DestinationDeliverToParty                          whereHelperint
	DestinationDeliverToPlant                          whereHelperstring
	DestinationDeliverToPlantStorageLocation           whereHelperstring
	ProductBaseUnit                                    whereHelperstring
	MRPArea                                            whereHelpernull_String
	MRPController                                      whereHelpernull_String
	ProductionVersion                                  whereHelpernull_Int
	BillOfMaterial                                     whereHelperint
	Operations                                         whereHelperint
	ProductionOrderQuantityInBaseUnit                  whereHelperfloat32
	ProductionOrderQuantityInDepartureProductionUnit   whereHelperfloat32
	ProductionOrderQuantityInDestinationProductionUnit whereHelperfloat32
	ProductionOrderQuantityInDepartureDeliveryUnit     whereHelperfloat32
	ProductionOrderQuantityInDestinationDeliveryUnit   whereHelperfloat32
	ProductionOrderDepartureProductionUnit             whereHelperstring
	ProductionOrderDestinationProductionUnit           whereHelperstring
	ProductionOrderDepartureDeliveryUnit               whereHelperstring
	ProductionOrderDestinationDeliveryUnit             whereHelperstring
	ProductionOrderPlannedScrapQtyInBaseUnit           whereHelpernull_Float32
	ProductionOrderPlannedStartDate                    whereHelperstring
	ProductionOrderPlannedStartTime                    whereHelperstring
	ProductionOrderPlannedEndDate                      whereHelperstring
	ProductionOrderPlannedEndTime                      whereHelperstring
	ProductionOrderActualReleaseDate                   whereHelpernull_String
	ProductionOrderActualReleaseTime                   whereHelpernull_String
	ProductionOrderActualStartDate                     whereHelpernull_String
	ProductionOrderActualStartTime                     whereHelpernull_String
	ProductionOrderActualEndDate                       whereHelpernull_String
	ProductionOrderActualEndTime                       whereHelpernull_String
	PlannedOrder                                       whereHelpernull_Int
	OrderID                                            whereHelpernull_Int
	OrderItem                                          whereHelpernull_Int
	ProductionOrderHeaderText                          whereHelpernull_String
	CreationDate                                       whereHelperstring
	CreationTime                                       whereHelperstring
	LastChangeDate                                     whereHelperstring
	LastChangeTime                                     whereHelperstring
	IsReleased                                         whereHelpernull_Bool
	IsPartiallyConfirmed                               whereHelpernull_Bool
	IsConfirmed                                        whereHelpernull_Bool
	IsLocked                                           whereHelpernull_Bool
	IsCancelled                                        whereHelpernull_Bool
	IsMarkedForDeletion                                whereHelpernull_Bool
}{
	ProductionOrder:                                  whereHelperint{field: "`data_platform_production_order_header_data`.`ProductionOrder`"},
	SupplyChainRelationshipID:                        whereHelperint{field: "`data_platform_production_order_header_data`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipProductionPlantID:         whereHelperint{field: "`data_platform_production_order_header_data`.`SupplyChainRelationshipProductionPlantID`"},
	SupplyChainRelationshipDeliveryID:                whereHelperint{field: "`data_platform_production_order_header_data`.`SupplyChainRelationshipDeliveryID`"},
	SupplyChainRelationshipDeliveryPlantID:           whereHelperint{field: "`data_platform_production_order_header_data`.`SupplyChainRelationshipDeliveryPlantID`"},
	ProductionOrderType:                              whereHelperstring{field: "`data_platform_production_order_header_data`.`ProductionOrderType`"},
	Product:                                          whereHelperstring{field: "`data_platform_production_order_header_data`.`Product`"},
	Buyer:                                            whereHelperint{field: "`data_platform_production_order_header_data`.`Buyer`"},
	Seller:                                           whereHelperint{field: "`data_platform_production_order_header_data`.`Seller`"},
	OwnerProductionPlantBusinessPartner:              whereHelperint{field: "`data_platform_production_order_header_data`.`OwnerProductionPlantBusinessPartner`"},
	OwnerProductionPlant:                             whereHelperstring{field: "`data_platform_production_order_header_data`.`OwnerProductionPlant`"},
	OwnerProductionPlantStorageLocation:              whereHelperstring{field: "`data_platform_production_order_header_data`.`OwnerProductionPlantStorageLocation`"},
	DepartureDeliverFromParty:                        whereHelperint{field: "`data_platform_production_order_header_data`.`DepartureDeliverFromParty`"},
	DepartureDeliverFromPlant:                        whereHelperstring{field: "`data_platform_production_order_header_data`.`DepartureDeliverFromPlant`"},
	DepartureDeliverFromPlantStorageLocation:         whereHelperstring{field: "`data_platform_production_order_header_data`.`DepartureDeliverFromPlantStorageLocation`"},
	DestinationDeliverToParty:                        whereHelperint{field: "`data_platform_production_order_header_data`.`DestinationDeliverToParty`"},
	DestinationDeliverToPlant:                        whereHelperstring{field: "`data_platform_production_order_header_data`.`DestinationDeliverToPlant`"},
	DestinationDeliverToPlantStorageLocation:         whereHelperstring{field: "`data_platform_production_order_header_data`.`DestinationDeliverToPlantStorageLocation`"},
	ProductBaseUnit:                                  whereHelperstring{field: "`data_platform_production_order_header_data`.`ProductBaseUnit`"},
	MRPArea:                                          whereHelpernull_String{field: "`data_platform_production_order_header_data`.`MRPArea`"},
	MRPController:                                    whereHelpernull_String{field: "`data_platform_production_order_header_data`.`MRPController`"},
	ProductionVersion:                                whereHelpernull_Int{field: "`data_platform_production_order_header_data`.`ProductionVersion`"},
	BillOfMaterial:                                   whereHelperint{field: "`data_platform_production_order_header_data`.`BillOfMaterial`"},
	Operations:                                       whereHelperint{field: "`data_platform_production_order_header_data`.`Operations`"},
	ProductionOrderQuantityInBaseUnit:                whereHelperfloat32{field: "`data_platform_production_order_header_data`.`ProductionOrderQuantityInBaseUnit`"},
	ProductionOrderQuantityInDepartureProductionUnit: whereHelperfloat32{field: "`data_platform_production_order_header_data`.`ProductionOrderQuantityInDepartureProductionUnit`"},
	ProductionOrderQuantityInDestinationProductionUnit: whereHelperfloat32{field: "`data_platform_production_order_header_data`.`ProductionOrderQuantityInDestinationProductionUnit`"},
	ProductionOrderQuantityInDepartureDeliveryUnit:     whereHelperfloat32{field: "`data_platform_production_order_header_data`.`ProductionOrderQuantityInDepartureDeliveryUnit`"},
	ProductionOrderQuantityInDestinationDeliveryUnit:   whereHelperfloat32{field: "`data_platform_production_order_header_data`.`ProductionOrderQuantityInDestinationDeliveryUnit`"},
	ProductionOrderDepartureProductionUnit:             whereHelperstring{field: "`data_platform_production_order_header_data`.`ProductionOrderDepartureProductionUnit`"},
	ProductionOrderDestinationProductionUnit:           whereHelperstring{field: "`data_platform_production_order_header_data`.`ProductionOrderDestinationProductionUnit`"},
	ProductionOrderDepartureDeliveryUnit:               whereHelperstring{field: "`data_platform_production_order_header_data`.`ProductionOrderDepartureDeliveryUnit`"},
	ProductionOrderDestinationDeliveryUnit:             whereHelperstring{field: "`data_platform_production_order_header_data`.`ProductionOrderDestinationDeliveryUnit`"},
	ProductionOrderPlannedScrapQtyInBaseUnit:           whereHelpernull_Float32{field: "`data_platform_production_order_header_data`.`ProductionOrderPlannedScrapQtyInBaseUnit`"},
	ProductionOrderPlannedStartDate:                    whereHelperstring{field: "`data_platform_production_order_header_data`.`ProductionOrderPlannedStartDate`"},
	ProductionOrderPlannedStartTime:                    whereHelperstring{field: "`data_platform_production_order_header_data`.`ProductionOrderPlannedStartTime`"},
	ProductionOrderPlannedEndDate:                      whereHelperstring{field: "`data_platform_production_order_header_data`.`ProductionOrderPlannedEndDate`"},
	ProductionOrderPlannedEndTime:                      whereHelperstring{field: "`data_platform_production_order_header_data`.`ProductionOrderPlannedEndTime`"},
	ProductionOrderActualReleaseDate:                   whereHelpernull_String{field: "`data_platform_production_order_header_data`.`ProductionOrderActualReleaseDate`"},
	ProductionOrderActualReleaseTime:                   whereHelpernull_String{field: "`data_platform_production_order_header_data`.`ProductionOrderActualReleaseTime`"},
	ProductionOrderActualStartDate:                     whereHelpernull_String{field: "`data_platform_production_order_header_data`.`ProductionOrderActualStartDate`"},
	ProductionOrderActualStartTime:                     whereHelpernull_String{field: "`data_platform_production_order_header_data`.`ProductionOrderActualStartTime`"},
	ProductionOrderActualEndDate:                       whereHelpernull_String{field: "`data_platform_production_order_header_data`.`ProductionOrderActualEndDate`"},
	ProductionOrderActualEndTime:                       whereHelpernull_String{field: "`data_platform_production_order_header_data`.`ProductionOrderActualEndTime`"},
	PlannedOrder:                                       whereHelpernull_Int{field: "`data_platform_production_order_header_data`.`PlannedOrder`"},
	OrderID:                                            whereHelpernull_Int{field: "`data_platform_production_order_header_data`.`OrderID`"},
	OrderItem:                                          whereHelpernull_Int{field: "`data_platform_production_order_header_data`.`OrderItem`"},
	ProductionOrderHeaderText:                          whereHelpernull_String{field: "`data_platform_production_order_header_data`.`ProductionOrderHeaderText`"},
	CreationDate:                                       whereHelperstring{field: "`data_platform_production_order_header_data`.`CreationDate`"},
	CreationTime:                                       whereHelperstring{field: "`data_platform_production_order_header_data`.`CreationTime`"},
	LastChangeDate:                                     whereHelperstring{field: "`data_platform_production_order_header_data`.`LastChangeDate`"},
	LastChangeTime:                                     whereHelperstring{field: "`data_platform_production_order_header_data`.`LastChangeTime`"},
	IsReleased:                                         whereHelpernull_Bool{field: "`data_platform_production_order_header_data`.`IsReleased`"},
	IsPartiallyConfirmed:                               whereHelpernull_Bool{field: "`data_platform_production_order_header_data`.`IsPartiallyConfirmed`"},
	IsConfirmed:                                        whereHelpernull_Bool{field: "`data_platform_production_order_header_data`.`IsConfirmed`"},
	IsLocked:                                           whereHelpernull_Bool{field: "`data_platform_production_order_header_data`.`IsLocked`"},
	IsCancelled:                                        whereHelpernull_Bool{field: "`data_platform_production_order_header_data`.`IsCancelled`"},
	IsMarkedForDeletion:                                whereHelpernull_Bool{field: "`data_platform_production_order_header_data`.`IsMarkedForDeletion`"},
}

// DataPlatformProductionOrderHeaderDatumRels is where relationship names are stored.
var DataPlatformProductionOrderHeaderDatumRels = struct {
	BillOfMaterialDataPlatformBillOfMaterialHeaderDatum                               string
	DepartureDeliverFromPartyDataPlatformPlantStorageLocationDatum                    string
	DestinationDeliverToPartyDataPlatformPlantStorageLocationDatum                    string
	Operation                                                                         string
	OrderIDDataPlatformOrdersItemDatum                                                string
	OwnerProductionPlantDataPlatformPlantStorageLocationDatum                         string
	ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum                          string
	ProductionOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum     string
	ProductionOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum   string
	ProductionOrderDestinationProductionUnitDataPlatformQuantityUnitQuantityUnitDatum string
	ProductionOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum   string
	BuyerDataPlatformSCRDeliveryRelationDatum                                         string
	BuyerDataPlatformSCRGeneralDatum                                                  string
	ProductionOrderDataPlatformProductionOrderItemData                                string
	ProductionOrderDataPlatformPurchaseRequisitionHeaderData                          string
}{
	BillOfMaterialDataPlatformBillOfMaterialHeaderDatum:            "BillOfMaterialDataPlatformBillOfMaterialHeaderDatum",
	DepartureDeliverFromPartyDataPlatformPlantStorageLocationDatum: "DepartureDeliverFromPartyDataPlatformPlantStorageLocationDatum",
	DestinationDeliverToPartyDataPlatformPlantStorageLocationDatum: "DestinationDeliverToPartyDataPlatformPlantStorageLocationDatum",
	Operation:                          "Operation",
	OrderIDDataPlatformOrdersItemDatum: "OrderIDDataPlatformOrdersItemDatum",
	OwnerProductionPlantDataPlatformPlantStorageLocationDatum:                         "OwnerProductionPlantDataPlatformPlantStorageLocationDatum",
	ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum:                          "ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum",
	ProductionOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum:     "ProductionOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum",
	ProductionOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum:   "ProductionOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum",
	ProductionOrderDestinationProductionUnitDataPlatformQuantityUnitQuantityUnitDatum: "ProductionOrderDestinationProductionUnitDataPlatformQuantityUnitQuantityUnitDatum",
	ProductionOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum:   "ProductionOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum",
	BuyerDataPlatformSCRDeliveryRelationDatum:                                         "BuyerDataPlatformSCRDeliveryRelationDatum",
	BuyerDataPlatformSCRGeneralDatum:                                                  "BuyerDataPlatformSCRGeneralDatum",
	ProductionOrderDataPlatformProductionOrderItemData:                                "ProductionOrderDataPlatformProductionOrderItemData",
	ProductionOrderDataPlatformPurchaseRequisitionHeaderData:                          "ProductionOrderDataPlatformPurchaseRequisitionHeaderData",
}

// dataPlatformProductionOrderHeaderDatumR is where relationships are stored.
type dataPlatformProductionOrderHeaderDatumR struct {
	BillOfMaterialDataPlatformBillOfMaterialHeaderDatum                               *DataPlatformBillOfMaterialHeaderDatum          `boil:"BillOfMaterialDataPlatformBillOfMaterialHeaderDatum" json:"BillOfMaterialDataPlatformBillOfMaterialHeaderDatum" toml:"BillOfMaterialDataPlatformBillOfMaterialHeaderDatum" yaml:"BillOfMaterialDataPlatformBillOfMaterialHeaderDatum"`
	DepartureDeliverFromPartyDataPlatformPlantStorageLocationDatum                    *DataPlatformPlantStorageLocationDatum          `boil:"DepartureDeliverFromPartyDataPlatformPlantStorageLocationDatum" json:"DepartureDeliverFromPartyDataPlatformPlantStorageLocationDatum" toml:"DepartureDeliverFromPartyDataPlatformPlantStorageLocationDatum" yaml:"DepartureDeliverFromPartyDataPlatformPlantStorageLocationDatum"`
	DestinationDeliverToPartyDataPlatformPlantStorageLocationDatum                    *DataPlatformPlantStorageLocationDatum          `boil:"DestinationDeliverToPartyDataPlatformPlantStorageLocationDatum" json:"DestinationDeliverToPartyDataPlatformPlantStorageLocationDatum" toml:"DestinationDeliverToPartyDataPlatformPlantStorageLocationDatum" yaml:"DestinationDeliverToPartyDataPlatformPlantStorageLocationDatum"`
	Operation                                                                         *DataPlatformOperationsHeaderDatum              `boil:"Operation" json:"Operation" toml:"Operation" yaml:"Operation"`
	OrderIDDataPlatformOrdersItemDatum                                                *DataPlatformOrdersItemDatum                    `boil:"OrderIDDataPlatformOrdersItemDatum" json:"OrderIDDataPlatformOrdersItemDatum" toml:"OrderIDDataPlatformOrdersItemDatum" yaml:"OrderIDDataPlatformOrdersItemDatum"`
	OwnerProductionPlantDataPlatformPlantStorageLocationDatum                         *DataPlatformPlantStorageLocationDatum          `boil:"OwnerProductionPlantDataPlatformPlantStorageLocationDatum" json:"OwnerProductionPlantDataPlatformPlantStorageLocationDatum" toml:"OwnerProductionPlantDataPlatformPlantStorageLocationDatum" yaml:"OwnerProductionPlantDataPlatformPlantStorageLocationDatum"`
	ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum                          *DataPlatformQuantityUnitQuantityUnitDatum      `boil:"ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	ProductionOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum     *DataPlatformQuantityUnitQuantityUnitDatum      `boil:"ProductionOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"ProductionOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"ProductionOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"ProductionOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	ProductionOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum   *DataPlatformQuantityUnitQuantityUnitDatum      `boil:"ProductionOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"ProductionOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"ProductionOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"ProductionOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	ProductionOrderDestinationProductionUnitDataPlatformQuantityUnitQuantityUnitDatum *DataPlatformQuantityUnitQuantityUnitDatum      `boil:"ProductionOrderDestinationProductionUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"ProductionOrderDestinationProductionUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"ProductionOrderDestinationProductionUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"ProductionOrderDestinationProductionUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	ProductionOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum   *DataPlatformQuantityUnitQuantityUnitDatum      `boil:"ProductionOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"ProductionOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"ProductionOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"ProductionOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	BuyerDataPlatformSCRDeliveryRelationDatum                                         *DataPlatformSCRDeliveryRelationDatum           `boil:"BuyerDataPlatformSCRDeliveryRelationDatum" json:"BuyerDataPlatformSCRDeliveryRelationDatum" toml:"BuyerDataPlatformSCRDeliveryRelationDatum" yaml:"BuyerDataPlatformSCRDeliveryRelationDatum"`
	BuyerDataPlatformSCRGeneralDatum                                                  *DataPlatformSCRGeneralDatum                    `boil:"BuyerDataPlatformSCRGeneralDatum" json:"BuyerDataPlatformSCRGeneralDatum" toml:"BuyerDataPlatformSCRGeneralDatum" yaml:"BuyerDataPlatformSCRGeneralDatum"`
	ProductionOrderDataPlatformProductionOrderItemData                                DataPlatformProductionOrderItemDatumSlice       `boil:"ProductionOrderDataPlatformProductionOrderItemData" json:"ProductionOrderDataPlatformProductionOrderItemData" toml:"ProductionOrderDataPlatformProductionOrderItemData" yaml:"ProductionOrderDataPlatformProductionOrderItemData"`
	ProductionOrderDataPlatformPurchaseRequisitionHeaderData                          DataPlatformPurchaseRequisitionHeaderDatumSlice `boil:"ProductionOrderDataPlatformPurchaseRequisitionHeaderData" json:"ProductionOrderDataPlatformPurchaseRequisitionHeaderData" toml:"ProductionOrderDataPlatformPurchaseRequisitionHeaderData" yaml:"ProductionOrderDataPlatformPurchaseRequisitionHeaderData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformProductionOrderHeaderDatumR) NewStruct() *dataPlatformProductionOrderHeaderDatumR {
	return &dataPlatformProductionOrderHeaderDatumR{}
}

func (r *dataPlatformProductionOrderHeaderDatumR) GetBillOfMaterialDataPlatformBillOfMaterialHeaderDatum() *DataPlatformBillOfMaterialHeaderDatum {
	if r == nil {
		return nil
	}
	return r.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum
}

func (r *dataPlatformProductionOrderHeaderDatumR) GetDepartureDeliverFromPartyDataPlatformPlantStorageLocationDatum() *DataPlatformPlantStorageLocationDatum {
	if r == nil {
		return nil
	}
	return r.DepartureDeliverFromPartyDataPlatformPlantStorageLocationDatum
}

func (r *dataPlatformProductionOrderHeaderDatumR) GetDestinationDeliverToPartyDataPlatformPlantStorageLocationDatum() *DataPlatformPlantStorageLocationDatum {
	if r == nil {
		return nil
	}
	return r.DestinationDeliverToPartyDataPlatformPlantStorageLocationDatum
}

func (r *dataPlatformProductionOrderHeaderDatumR) GetOperation() *DataPlatformOperationsHeaderDatum {
	if r == nil {
		return nil
	}
	return r.Operation
}

func (r *dataPlatformProductionOrderHeaderDatumR) GetOrderIDDataPlatformOrdersItemDatum() *DataPlatformOrdersItemDatum {
	if r == nil {
		return nil
	}
	return r.OrderIDDataPlatformOrdersItemDatum
}

func (r *dataPlatformProductionOrderHeaderDatumR) GetOwnerProductionPlantDataPlatformPlantStorageLocationDatum() *DataPlatformPlantStorageLocationDatum {
	if r == nil {
		return nil
	}
	return r.OwnerProductionPlantDataPlatformPlantStorageLocationDatum
}

func (r *dataPlatformProductionOrderHeaderDatumR) GetProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformProductionOrderHeaderDatumR) GetProductionOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.ProductionOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformProductionOrderHeaderDatumR) GetProductionOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.ProductionOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformProductionOrderHeaderDatumR) GetProductionOrderDestinationProductionUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.ProductionOrderDestinationProductionUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformProductionOrderHeaderDatumR) GetProductionOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.ProductionOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformProductionOrderHeaderDatumR) GetBuyerDataPlatformSCRDeliveryRelationDatum() *DataPlatformSCRDeliveryRelationDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRDeliveryRelationDatum
}

func (r *dataPlatformProductionOrderHeaderDatumR) GetBuyerDataPlatformSCRGeneralDatum() *DataPlatformSCRGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRGeneralDatum
}

func (r *dataPlatformProductionOrderHeaderDatumR) GetProductionOrderDataPlatformProductionOrderItemData() DataPlatformProductionOrderItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductionOrderDataPlatformProductionOrderItemData
}

func (r *dataPlatformProductionOrderHeaderDatumR) GetProductionOrderDataPlatformPurchaseRequisitionHeaderData() DataPlatformPurchaseRequisitionHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductionOrderDataPlatformPurchaseRequisitionHeaderData
}

// dataPlatformProductionOrderHeaderDatumL is where Load methods for each relationship are stored.
type dataPlatformProductionOrderHeaderDatumL struct{}

var (
	dataPlatformProductionOrderHeaderDatumAllColumns            = []string{"ProductionOrder", "SupplyChainRelationshipID", "SupplyChainRelationshipProductionPlantID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "ProductionOrderType", "Product", "Buyer", "Seller", "OwnerProductionPlantBusinessPartner", "OwnerProductionPlant", "OwnerProductionPlantStorageLocation", "DepartureDeliverFromParty", "DepartureDeliverFromPlant", "DepartureDeliverFromPlantStorageLocation", "DestinationDeliverToParty", "DestinationDeliverToPlant", "DestinationDeliverToPlantStorageLocation", "ProductBaseUnit", "MRPArea", "MRPController", "ProductionVersion", "BillOfMaterial", "Operations", "ProductionOrderQuantityInBaseUnit", "ProductionOrderQuantityInDepartureProductionUnit", "ProductionOrderQuantityInDestinationProductionUnit", "ProductionOrderQuantityInDepartureDeliveryUnit", "ProductionOrderQuantityInDestinationDeliveryUnit", "ProductionOrderDepartureProductionUnit", "ProductionOrderDestinationProductionUnit", "ProductionOrderDepartureDeliveryUnit", "ProductionOrderDestinationDeliveryUnit", "ProductionOrderPlannedScrapQtyInBaseUnit", "ProductionOrderPlannedStartDate", "ProductionOrderPlannedStartTime", "ProductionOrderPlannedEndDate", "ProductionOrderPlannedEndTime", "ProductionOrderActualReleaseDate", "ProductionOrderActualReleaseTime", "ProductionOrderActualStartDate", "ProductionOrderActualStartTime", "ProductionOrderActualEndDate", "ProductionOrderActualEndTime", "PlannedOrder", "OrderID", "OrderItem", "ProductionOrderHeaderText", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsReleased", "IsPartiallyConfirmed", "IsConfirmed", "IsLocked", "IsCancelled", "IsMarkedForDeletion"}
	dataPlatformProductionOrderHeaderDatumColumnsWithoutDefault = []string{"ProductionOrder", "SupplyChainRelationshipID", "SupplyChainRelationshipProductionPlantID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "ProductionOrderType", "Product", "Buyer", "Seller", "OwnerProductionPlantBusinessPartner", "OwnerProductionPlant", "OwnerProductionPlantStorageLocation", "DepartureDeliverFromParty", "DepartureDeliverFromPlant", "DepartureDeliverFromPlantStorageLocation", "DestinationDeliverToParty", "DestinationDeliverToPlant", "DestinationDeliverToPlantStorageLocation", "ProductBaseUnit", "MRPArea", "MRPController", "ProductionVersion", "BillOfMaterial", "Operations", "ProductionOrderQuantityInBaseUnit", "ProductionOrderQuantityInDepartureProductionUnit", "ProductionOrderQuantityInDestinationProductionUnit", "ProductionOrderQuantityInDepartureDeliveryUnit", "ProductionOrderQuantityInDestinationDeliveryUnit", "ProductionOrderDepartureProductionUnit", "ProductionOrderDestinationProductionUnit", "ProductionOrderDepartureDeliveryUnit", "ProductionOrderDestinationDeliveryUnit", "ProductionOrderPlannedScrapQtyInBaseUnit", "ProductionOrderPlannedStartDate", "ProductionOrderPlannedStartTime", "ProductionOrderPlannedEndDate", "ProductionOrderPlannedEndTime", "ProductionOrderActualReleaseDate", "ProductionOrderActualReleaseTime", "ProductionOrderActualStartDate", "ProductionOrderActualStartTime", "ProductionOrderActualEndDate", "ProductionOrderActualEndTime", "PlannedOrder", "OrderID", "OrderItem", "ProductionOrderHeaderText", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsReleased", "IsPartiallyConfirmed", "IsConfirmed", "IsLocked", "IsCancelled", "IsMarkedForDeletion"}
	dataPlatformProductionOrderHeaderDatumColumnsWithDefault    = []string{}
	dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns     = []string{"ProductionOrder"}
	dataPlatformProductionOrderHeaderDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformProductionOrderHeaderDatumSlice is an alias for a slice of pointers to DataPlatformProductionOrderHeaderDatum.
	// This should almost always be used instead of []DataPlatformProductionOrderHeaderDatum.
	DataPlatformProductionOrderHeaderDatumSlice []*DataPlatformProductionOrderHeaderDatum

	dataPlatformProductionOrderHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformProductionOrderHeaderDatumType                 = reflect.TypeOf(&DataPlatformProductionOrderHeaderDatum{})
	dataPlatformProductionOrderHeaderDatumMapping              = queries.MakeStructMapping(dataPlatformProductionOrderHeaderDatumType)
	dataPlatformProductionOrderHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformProductionOrderHeaderDatumType, dataPlatformProductionOrderHeaderDatumMapping, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns)
	dataPlatformProductionOrderHeaderDatumInsertCacheMut       sync.RWMutex
	dataPlatformProductionOrderHeaderDatumInsertCache          = make(map[string]insertCache)
	dataPlatformProductionOrderHeaderDatumUpdateCacheMut       sync.RWMutex
	dataPlatformProductionOrderHeaderDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformProductionOrderHeaderDatumUpsertCacheMut       sync.RWMutex
	dataPlatformProductionOrderHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformProductionOrderHeaderDatum record from the query.
func (q dataPlatformProductionOrderHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformProductionOrderHeaderDatum, error) {
	o := &DataPlatformProductionOrderHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_production_order_header_data")
	}

	return o, nil
}

// All returns all DataPlatformProductionOrderHeaderDatum records from the query.
func (q dataPlatformProductionOrderHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformProductionOrderHeaderDatumSlice, error) {
	var o []*DataPlatformProductionOrderHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformProductionOrderHeaderDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformProductionOrderHeaderDatum records in the query.
func (q dataPlatformProductionOrderHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_production_order_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformProductionOrderHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_production_order_header_data exists")
	}

	return count > 0, nil
}

// BillOfMaterialDataPlatformBillOfMaterialHeaderDatum pointed to by the foreign key.
func (o *DataPlatformProductionOrderHeaderDatum) BillOfMaterialDataPlatformBillOfMaterialHeaderDatum(mods ...qm.QueryMod) dataPlatformBillOfMaterialHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BillOfMaterial` = ?", o.BillOfMaterial),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBillOfMaterialHeaderData(queryMods...)
}

// DepartureDeliverFromPartyDataPlatformPlantStorageLocationDatum pointed to by the foreign key.
func (o *DataPlatformProductionOrderHeaderDatum) DepartureDeliverFromPartyDataPlatformPlantStorageLocationDatum(mods ...qm.QueryMod) dataPlatformPlantStorageLocationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.DepartureDeliverFromParty),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPlantStorageLocationData(queryMods...)
}

// DestinationDeliverToPartyDataPlatformPlantStorageLocationDatum pointed to by the foreign key.
func (o *DataPlatformProductionOrderHeaderDatum) DestinationDeliverToPartyDataPlatformPlantStorageLocationDatum(mods ...qm.QueryMod) dataPlatformPlantStorageLocationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.DestinationDeliverToParty),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPlantStorageLocationData(queryMods...)
}

// Operation pointed to by the foreign key.
func (o *DataPlatformProductionOrderHeaderDatum) Operation(mods ...qm.QueryMod) dataPlatformOperationsHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Operations` = ?", o.Operations),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformOperationsHeaderData(queryMods...)
}

// OrderIDDataPlatformOrdersItemDatum pointed to by the foreign key.
func (o *DataPlatformProductionOrderHeaderDatum) OrderIDDataPlatformOrdersItemDatum(mods ...qm.QueryMod) dataPlatformOrdersItemDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`OrderID` = ?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformOrdersItemData(queryMods...)
}

// OwnerProductionPlantDataPlatformPlantStorageLocationDatum pointed to by the foreign key.
func (o *DataPlatformProductionOrderHeaderDatum) OwnerProductionPlantDataPlatformPlantStorageLocationDatum(mods ...qm.QueryMod) dataPlatformPlantStorageLocationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Plant` = ?", o.OwnerProductionPlant),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPlantStorageLocationData(queryMods...)
}

// ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformProductionOrderHeaderDatum) ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.ProductBaseUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// ProductionOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformProductionOrderHeaderDatum) ProductionOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.ProductionOrderDepartureDeliveryUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// ProductionOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformProductionOrderHeaderDatum) ProductionOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.ProductionOrderDepartureProductionUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// ProductionOrderDestinationProductionUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformProductionOrderHeaderDatum) ProductionOrderDestinationProductionUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.ProductionOrderDestinationProductionUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// ProductionOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformProductionOrderHeaderDatum) ProductionOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.ProductionOrderDestinationDeliveryUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// BuyerDataPlatformSCRDeliveryRelationDatum pointed to by the foreign key.
func (o *DataPlatformProductionOrderHeaderDatum) BuyerDataPlatformSCRDeliveryRelationDatum(mods ...qm.QueryMod) dataPlatformSCRDeliveryRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRDeliveryRelationData(queryMods...)
}

// BuyerDataPlatformSCRGeneralDatum pointed to by the foreign key.
func (o *DataPlatformProductionOrderHeaderDatum) BuyerDataPlatformSCRGeneralDatum(mods ...qm.QueryMod) dataPlatformSCRGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRGeneralData(queryMods...)
}

// ProductionOrderDataPlatformProductionOrderItemData retrieves all the data_platform_production_order_item_datum's DataPlatformProductionOrderItemData with an executor via ProductionOrder column.
func (o *DataPlatformProductionOrderHeaderDatum) ProductionOrderDataPlatformProductionOrderItemData(mods ...qm.QueryMod) dataPlatformProductionOrderItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_item_data`.`ProductionOrder`=?", o.ProductionOrder),
	)

	return DataPlatformProductionOrderItemData(queryMods...)
}

// ProductionOrderDataPlatformPurchaseRequisitionHeaderData retrieves all the data_platform_purchase_requisition_header_datum's DataPlatformPurchaseRequisitionHeaderData with an executor via ProductionOrder column.
func (o *DataPlatformProductionOrderHeaderDatum) ProductionOrderDataPlatformPurchaseRequisitionHeaderData(mods ...qm.QueryMod) dataPlatformPurchaseRequisitionHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_purchase_requisition_header_data`.`ProductionOrder`=?", o.ProductionOrder),
	)

	return DataPlatformPurchaseRequisitionHeaderData(queryMods...)
}

// LoadBillOfMaterialDataPlatformBillOfMaterialHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductionOrderHeaderDatumL) LoadBillOfMaterialDataPlatformBillOfMaterialHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderHeaderDatum
	var object *DataPlatformProductionOrderHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderHeaderDatum.(*DataPlatformProductionOrderHeaderDatum)
		if !ok {
			object = new(DataPlatformProductionOrderHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderHeaderDatum.(*[]*DataPlatformProductionOrderHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderHeaderDatumR{}
		}
		args = append(args, object.BillOfMaterial)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.BillOfMaterial {
					continue Outer
				}
			}

			args = append(args, obj.BillOfMaterial)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_bill_of_material_header_data`),
		qm.WhereIn(`data_platform_bill_of_material_header_data.BillOfMaterial in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBillOfMaterialHeaderDatum")
	}

	var resultSlice []*DataPlatformBillOfMaterialHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBillOfMaterialHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_bill_of_material_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_bill_of_material_header_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BillOfMaterial == foreign.BillOfMaterial {
				local.R.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadDepartureDeliverFromPartyDataPlatformPlantStorageLocationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductionOrderHeaderDatumL) LoadDepartureDeliverFromPartyDataPlatformPlantStorageLocationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderHeaderDatum
	var object *DataPlatformProductionOrderHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderHeaderDatum.(*DataPlatformProductionOrderHeaderDatum)
		if !ok {
			object = new(DataPlatformProductionOrderHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderHeaderDatum.(*[]*DataPlatformProductionOrderHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderHeaderDatumR{}
		}
		args = append(args, object.DepartureDeliverFromParty)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.DepartureDeliverFromParty {
					continue Outer
				}
			}

			args = append(args, obj.DepartureDeliverFromParty)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_storage_location_data`),
		qm.WhereIn(`data_platform_plant_storage_location_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPlantStorageLocationDatum")
	}

	var resultSlice []*DataPlatformPlantStorageLocationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPlantStorageLocationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_plant_storage_location_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_storage_location_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DepartureDeliverFromPartyDataPlatformPlantStorageLocationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DepartureDeliverFromParty == foreign.BusinessPartner {
				local.R.DepartureDeliverFromPartyDataPlatformPlantStorageLocationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadDestinationDeliverToPartyDataPlatformPlantStorageLocationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductionOrderHeaderDatumL) LoadDestinationDeliverToPartyDataPlatformPlantStorageLocationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderHeaderDatum
	var object *DataPlatformProductionOrderHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderHeaderDatum.(*DataPlatformProductionOrderHeaderDatum)
		if !ok {
			object = new(DataPlatformProductionOrderHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderHeaderDatum.(*[]*DataPlatformProductionOrderHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderHeaderDatumR{}
		}
		args = append(args, object.DestinationDeliverToParty)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.DestinationDeliverToParty {
					continue Outer
				}
			}

			args = append(args, obj.DestinationDeliverToParty)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_storage_location_data`),
		qm.WhereIn(`data_platform_plant_storage_location_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPlantStorageLocationDatum")
	}

	var resultSlice []*DataPlatformPlantStorageLocationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPlantStorageLocationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_plant_storage_location_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_storage_location_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DestinationDeliverToPartyDataPlatformPlantStorageLocationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DestinationDeliverToParty == foreign.BusinessPartner {
				local.R.DestinationDeliverToPartyDataPlatformPlantStorageLocationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadOperation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductionOrderHeaderDatumL) LoadOperation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderHeaderDatum
	var object *DataPlatformProductionOrderHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderHeaderDatum.(*DataPlatformProductionOrderHeaderDatum)
		if !ok {
			object = new(DataPlatformProductionOrderHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderHeaderDatum.(*[]*DataPlatformProductionOrderHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderHeaderDatumR{}
		}
		args = append(args, object.Operations)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.Operations {
					continue Outer
				}
			}

			args = append(args, obj.Operations)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_operations_header_data`),
		qm.WhereIn(`data_platform_operations_header_data.Operations in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformOperationsHeaderDatum")
	}

	var resultSlice []*DataPlatformOperationsHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformOperationsHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_operations_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_operations_header_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Operation = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Operations == foreign.Operations {
				local.R.Operation = foreign
				break
			}
		}
	}

	return nil
}

// LoadOrderIDDataPlatformOrdersItemDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductionOrderHeaderDatumL) LoadOrderIDDataPlatformOrdersItemDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderHeaderDatum
	var object *DataPlatformProductionOrderHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderHeaderDatum.(*DataPlatformProductionOrderHeaderDatum)
		if !ok {
			object = new(DataPlatformProductionOrderHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderHeaderDatum.(*[]*DataPlatformProductionOrderHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderHeaderDatumR{}
		}
		if !queries.IsNil(object.OrderID) {
			args = append(args, object.OrderID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OrderID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OrderID) {
				args = append(args, obj.OrderID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_data`),
		qm.WhereIn(`data_platform_orders_item_data.OrderID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformOrdersItemDatum")
	}

	var resultSlice []*DataPlatformOrdersItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformOrdersItemDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_orders_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrderIDDataPlatformOrdersItemDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OrderID, foreign.OrderID) {
				local.R.OrderIDDataPlatformOrdersItemDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadOwnerProductionPlantDataPlatformPlantStorageLocationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductionOrderHeaderDatumL) LoadOwnerProductionPlantDataPlatformPlantStorageLocationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderHeaderDatum
	var object *DataPlatformProductionOrderHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderHeaderDatum.(*DataPlatformProductionOrderHeaderDatum)
		if !ok {
			object = new(DataPlatformProductionOrderHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderHeaderDatum.(*[]*DataPlatformProductionOrderHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderHeaderDatumR{}
		}
		args = append(args, object.OwnerProductionPlant)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.OwnerProductionPlant {
					continue Outer
				}
			}

			args = append(args, obj.OwnerProductionPlant)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_storage_location_data`),
		qm.WhereIn(`data_platform_plant_storage_location_data.Plant in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPlantStorageLocationDatum")
	}

	var resultSlice []*DataPlatformPlantStorageLocationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPlantStorageLocationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_plant_storage_location_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_storage_location_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OwnerProductionPlantDataPlatformPlantStorageLocationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OwnerProductionPlant == foreign.Plant {
				local.R.OwnerProductionPlantDataPlatformPlantStorageLocationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductionOrderHeaderDatumL) LoadProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderHeaderDatum
	var object *DataPlatformProductionOrderHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderHeaderDatum.(*DataPlatformProductionOrderHeaderDatum)
		if !ok {
			object = new(DataPlatformProductionOrderHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderHeaderDatum.(*[]*DataPlatformProductionOrderHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderHeaderDatumR{}
		}
		args = append(args, object.ProductBaseUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.ProductBaseUnit {
					continue Outer
				}
			}

			args = append(args, obj.ProductBaseUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductBaseUnit == foreign.QuantityUnit {
				local.R.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductionOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductionOrderHeaderDatumL) LoadProductionOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderHeaderDatum
	var object *DataPlatformProductionOrderHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderHeaderDatum.(*DataPlatformProductionOrderHeaderDatum)
		if !ok {
			object = new(DataPlatformProductionOrderHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderHeaderDatum.(*[]*DataPlatformProductionOrderHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderHeaderDatumR{}
		}
		args = append(args, object.ProductionOrderDepartureDeliveryUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.ProductionOrderDepartureDeliveryUnit {
					continue Outer
				}
			}

			args = append(args, obj.ProductionOrderDepartureDeliveryUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductionOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductionOrderDepartureDeliveryUnit == foreign.QuantityUnit {
				local.R.ProductionOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductionOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductionOrderHeaderDatumL) LoadProductionOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderHeaderDatum
	var object *DataPlatformProductionOrderHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderHeaderDatum.(*DataPlatformProductionOrderHeaderDatum)
		if !ok {
			object = new(DataPlatformProductionOrderHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderHeaderDatum.(*[]*DataPlatformProductionOrderHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderHeaderDatumR{}
		}
		args = append(args, object.ProductionOrderDepartureProductionUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.ProductionOrderDepartureProductionUnit {
					continue Outer
				}
			}

			args = append(args, obj.ProductionOrderDepartureProductionUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductionOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductionOrderDepartureProductionUnit == foreign.QuantityUnit {
				local.R.ProductionOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductionOrderDestinationProductionUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductionOrderHeaderDatumL) LoadProductionOrderDestinationProductionUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderHeaderDatum
	var object *DataPlatformProductionOrderHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderHeaderDatum.(*DataPlatformProductionOrderHeaderDatum)
		if !ok {
			object = new(DataPlatformProductionOrderHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderHeaderDatum.(*[]*DataPlatformProductionOrderHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderHeaderDatumR{}
		}
		args = append(args, object.ProductionOrderDestinationProductionUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.ProductionOrderDestinationProductionUnit {
					continue Outer
				}
			}

			args = append(args, obj.ProductionOrderDestinationProductionUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductionOrderDestinationProductionUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductionOrderDestinationProductionUnit == foreign.QuantityUnit {
				local.R.ProductionOrderDestinationProductionUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductionOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductionOrderHeaderDatumL) LoadProductionOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderHeaderDatum
	var object *DataPlatformProductionOrderHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderHeaderDatum.(*DataPlatformProductionOrderHeaderDatum)
		if !ok {
			object = new(DataPlatformProductionOrderHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderHeaderDatum.(*[]*DataPlatformProductionOrderHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderHeaderDatumR{}
		}
		args = append(args, object.ProductionOrderDestinationDeliveryUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.ProductionOrderDestinationDeliveryUnit {
					continue Outer
				}
			}

			args = append(args, obj.ProductionOrderDestinationDeliveryUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductionOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductionOrderDestinationDeliveryUnit == foreign.QuantityUnit {
				local.R.ProductionOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRDeliveryRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductionOrderHeaderDatumL) LoadBuyerDataPlatformSCRDeliveryRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderHeaderDatum
	var object *DataPlatformProductionOrderHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderHeaderDatum.(*DataPlatformProductionOrderHeaderDatum)
		if !ok {
			object = new(DataPlatformProductionOrderHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderHeaderDatum.(*[]*DataPlatformProductionOrderHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderHeaderDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_delivery_relation_data`),
		qm.WhereIn(`data_platform_scr_delivery_relation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRDeliveryRelationDatum")
	}

	var resultSlice []*DataPlatformSCRDeliveryRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRDeliveryRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_delivery_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_delivery_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRDeliveryRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRDeliveryRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductionOrderHeaderDatumL) LoadBuyerDataPlatformSCRGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderHeaderDatum
	var object *DataPlatformProductionOrderHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderHeaderDatum.(*DataPlatformProductionOrderHeaderDatum)
		if !ok {
			object = new(DataPlatformProductionOrderHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderHeaderDatum.(*[]*DataPlatformProductionOrderHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderHeaderDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_general_data`),
		qm.WhereIn(`data_platform_scr_general_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRGeneralDatum")
	}

	var resultSlice []*DataPlatformSCRGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductionOrderDataPlatformProductionOrderItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductionOrderHeaderDatumL) LoadProductionOrderDataPlatformProductionOrderItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderHeaderDatum
	var object *DataPlatformProductionOrderHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderHeaderDatum.(*DataPlatformProductionOrderHeaderDatum)
		if !ok {
			object = new(DataPlatformProductionOrderHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderHeaderDatum.(*[]*DataPlatformProductionOrderHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderHeaderDatumR{}
		}
		args = append(args, object.ProductionOrder)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.ProductionOrder {
					continue Outer
				}
			}

			args = append(args, obj.ProductionOrder)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_item_data`),
		qm.WhereIn(`data_platform_production_order_item_data.ProductionOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_item_data")
	}

	var resultSlice []*DataPlatformProductionOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_item_data")
	}

	if singular {
		object.R.ProductionOrderDataPlatformProductionOrderItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ProductionOrder == foreign.ProductionOrder {
				local.R.ProductionOrderDataPlatformProductionOrderItemData = append(local.R.ProductionOrderDataPlatformProductionOrderItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductionOrderDataPlatformPurchaseRequisitionHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductionOrderHeaderDatumL) LoadProductionOrderDataPlatformPurchaseRequisitionHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderHeaderDatum
	var object *DataPlatformProductionOrderHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderHeaderDatum.(*DataPlatformProductionOrderHeaderDatum)
		if !ok {
			object = new(DataPlatformProductionOrderHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderHeaderDatum.(*[]*DataPlatformProductionOrderHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderHeaderDatumR{}
		}
		args = append(args, object.ProductionOrder)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductionOrder) {
					continue Outer
				}
			}

			args = append(args, obj.ProductionOrder)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_purchase_requisition_header_data`),
		qm.WhereIn(`data_platform_purchase_requisition_header_data.ProductionOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_purchase_requisition_header_data")
	}

	var resultSlice []*DataPlatformPurchaseRequisitionHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_purchase_requisition_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_purchase_requisition_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_purchase_requisition_header_data")
	}

	if singular {
		object.R.ProductionOrderDataPlatformPurchaseRequisitionHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ProductionOrder, foreign.ProductionOrder) {
				local.R.ProductionOrderDataPlatformPurchaseRequisitionHeaderData = append(local.R.ProductionOrderDataPlatformPurchaseRequisitionHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// SetBillOfMaterialDataPlatformBillOfMaterialHeaderDatum of the dataPlatformProductionOrderHeaderDatum to the related item.
// Sets o.R.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum to related.
func (o *DataPlatformProductionOrderHeaderDatum) SetBillOfMaterialDataPlatformBillOfMaterialHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBillOfMaterialHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_production_order_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BillOfMaterial"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BillOfMaterial, o.ProductionOrder}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BillOfMaterial = related.BillOfMaterial
	if o.R == nil {
		o.R = &dataPlatformProductionOrderHeaderDatumR{
			BillOfMaterialDataPlatformBillOfMaterialHeaderDatum: related,
		}
	} else {
		o.R.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum = related
	}

	return nil
}

// SetDepartureDeliverFromPartyDataPlatformPlantStorageLocationDatum of the dataPlatformProductionOrderHeaderDatum to the related item.
// Sets o.R.DepartureDeliverFromPartyDataPlatformPlantStorageLocationDatum to related.
func (o *DataPlatformProductionOrderHeaderDatum) SetDepartureDeliverFromPartyDataPlatformPlantStorageLocationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPlantStorageLocationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_production_order_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"DepartureDeliverFromParty"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.ProductionOrder}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DepartureDeliverFromParty = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformProductionOrderHeaderDatumR{
			DepartureDeliverFromPartyDataPlatformPlantStorageLocationDatum: related,
		}
	} else {
		o.R.DepartureDeliverFromPartyDataPlatformPlantStorageLocationDatum = related
	}

	return nil
}

// SetDestinationDeliverToPartyDataPlatformPlantStorageLocationDatum of the dataPlatformProductionOrderHeaderDatum to the related item.
// Sets o.R.DestinationDeliverToPartyDataPlatformPlantStorageLocationDatum to related.
func (o *DataPlatformProductionOrderHeaderDatum) SetDestinationDeliverToPartyDataPlatformPlantStorageLocationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPlantStorageLocationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_production_order_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"DestinationDeliverToParty"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.ProductionOrder}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DestinationDeliverToParty = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformProductionOrderHeaderDatumR{
			DestinationDeliverToPartyDataPlatformPlantStorageLocationDatum: related,
		}
	} else {
		o.R.DestinationDeliverToPartyDataPlatformPlantStorageLocationDatum = related
	}

	return nil
}

// SetOperation of the dataPlatformProductionOrderHeaderDatum to the related item.
// Sets o.R.Operation to related.
func (o *DataPlatformProductionOrderHeaderDatum) SetOperation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformOperationsHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_production_order_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Operations"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Operations, o.ProductionOrder}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Operations = related.Operations
	if o.R == nil {
		o.R = &dataPlatformProductionOrderHeaderDatumR{
			Operation: related,
		}
	} else {
		o.R.Operation = related
	}

	return nil
}

// SetOrderIDDataPlatformOrdersItemDatum of the dataPlatformProductionOrderHeaderDatum to the related item.
// Sets o.R.OrderIDDataPlatformOrdersItemDatum to related.
func (o *DataPlatformProductionOrderHeaderDatum) SetOrderIDDataPlatformOrdersItemDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformOrdersItemDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_production_order_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"OrderID"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.OrderID, o.ProductionOrder}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OrderID, related.OrderID)
	if o.R == nil {
		o.R = &dataPlatformProductionOrderHeaderDatumR{
			OrderIDDataPlatformOrdersItemDatum: related,
		}
	} else {
		o.R.OrderIDDataPlatformOrdersItemDatum = related
	}

	return nil
}

// RemoveOrderIDDataPlatformOrdersItemDatum relationship.
// Sets o.R.OrderIDDataPlatformOrdersItemDatum to nil.
func (o *DataPlatformProductionOrderHeaderDatum) RemoveOrderIDDataPlatformOrdersItemDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformOrdersItemDatum) error {
	var err error

	queries.SetScanner(&o.OrderID, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("OrderID")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.OrderIDDataPlatformOrdersItemDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetOwnerProductionPlantDataPlatformPlantStorageLocationDatum of the dataPlatformProductionOrderHeaderDatum to the related item.
// Sets o.R.OwnerProductionPlantDataPlatformPlantStorageLocationDatum to related.
func (o *DataPlatformProductionOrderHeaderDatum) SetOwnerProductionPlantDataPlatformPlantStorageLocationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPlantStorageLocationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_production_order_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"OwnerProductionPlant"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Plant, o.ProductionOrder}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OwnerProductionPlant = related.Plant
	if o.R == nil {
		o.R = &dataPlatformProductionOrderHeaderDatumR{
			OwnerProductionPlantDataPlatformPlantStorageLocationDatum: related,
		}
	} else {
		o.R.OwnerProductionPlantDataPlatformPlantStorageLocationDatum = related
	}

	return nil
}

// SetProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformProductionOrderHeaderDatum to the related item.
// Sets o.R.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformProductionOrderHeaderDatum) SetProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_production_order_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductBaseUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.ProductionOrder}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductBaseUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformProductionOrderHeaderDatumR{
			ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetProductionOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformProductionOrderHeaderDatum to the related item.
// Sets o.R.ProductionOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformProductionOrderHeaderDatum) SetProductionOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_production_order_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductionOrderDepartureDeliveryUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.ProductionOrder}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductionOrderDepartureDeliveryUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformProductionOrderHeaderDatumR{
			ProductionOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.ProductionOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetProductionOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformProductionOrderHeaderDatum to the related item.
// Sets o.R.ProductionOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformProductionOrderHeaderDatum) SetProductionOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_production_order_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductionOrderDepartureProductionUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.ProductionOrder}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductionOrderDepartureProductionUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformProductionOrderHeaderDatumR{
			ProductionOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.ProductionOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetProductionOrderDestinationProductionUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformProductionOrderHeaderDatum to the related item.
// Sets o.R.ProductionOrderDestinationProductionUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformProductionOrderHeaderDatum) SetProductionOrderDestinationProductionUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_production_order_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductionOrderDestinationProductionUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.ProductionOrder}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductionOrderDestinationProductionUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformProductionOrderHeaderDatumR{
			ProductionOrderDestinationProductionUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.ProductionOrderDestinationProductionUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetProductionOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformProductionOrderHeaderDatum to the related item.
// Sets o.R.ProductionOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformProductionOrderHeaderDatum) SetProductionOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_production_order_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductionOrderDestinationDeliveryUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.ProductionOrder}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductionOrderDestinationDeliveryUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformProductionOrderHeaderDatumR{
			ProductionOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.ProductionOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetBuyerDataPlatformSCRDeliveryRelationDatum of the dataPlatformProductionOrderHeaderDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRDeliveryRelationDatum to related.
func (o *DataPlatformProductionOrderHeaderDatum) SetBuyerDataPlatformSCRDeliveryRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRDeliveryRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_production_order_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.ProductionOrder}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformProductionOrderHeaderDatumR{
			BuyerDataPlatformSCRDeliveryRelationDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRDeliveryRelationDatum = related
	}

	return nil
}

// SetBuyerDataPlatformSCRGeneralDatum of the dataPlatformProductionOrderHeaderDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRGeneralDatum to related.
func (o *DataPlatformProductionOrderHeaderDatum) SetBuyerDataPlatformSCRGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_production_order_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.ProductionOrder}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformProductionOrderHeaderDatumR{
			BuyerDataPlatformSCRGeneralDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRGeneralDatum = related
	}

	return nil
}

// AddProductionOrderDataPlatformProductionOrderItemData adds the given related objects to the existing relationships
// of the data_platform_production_order_header_datum, optionally inserting them as new records.
// Appends related to o.R.ProductionOrderDataPlatformProductionOrderItemData.
func (o *DataPlatformProductionOrderHeaderDatum) AddProductionOrderDataPlatformProductionOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductionOrder = o.ProductionOrder
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductionOrder"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.ProductionOrder, rel.ProductionOrder, rel.ProductionOrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductionOrder = o.ProductionOrder
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductionOrderHeaderDatumR{
			ProductionOrderDataPlatformProductionOrderItemData: related,
		}
	} else {
		o.R.ProductionOrderDataPlatformProductionOrderItemData = append(o.R.ProductionOrderDataPlatformProductionOrderItemData, related...)
	}

	return nil
}

// AddProductionOrderDataPlatformPurchaseRequisitionHeaderData adds the given related objects to the existing relationships
// of the data_platform_production_order_header_datum, optionally inserting them as new records.
// Appends related to o.R.ProductionOrderDataPlatformPurchaseRequisitionHeaderData.
func (o *DataPlatformProductionOrderHeaderDatum) AddProductionOrderDataPlatformPurchaseRequisitionHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPurchaseRequisitionHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductionOrder, o.ProductionOrder)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_purchase_requisition_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductionOrder"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPurchaseRequisitionHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.ProductionOrder, rel.PurchaseRequisition}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductionOrder, o.ProductionOrder)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductionOrderHeaderDatumR{
			ProductionOrderDataPlatformPurchaseRequisitionHeaderData: related,
		}
	} else {
		o.R.ProductionOrderDataPlatformPurchaseRequisitionHeaderData = append(o.R.ProductionOrderDataPlatformPurchaseRequisitionHeaderData, related...)
	}

	return nil
}

// SetProductionOrderDataPlatformPurchaseRequisitionHeaderData removes all previously related items of the
// data_platform_production_order_header_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductionOrderDataPlatformProductionOrderHeaderDatum's ProductionOrderDataPlatformPurchaseRequisitionHeaderData accordingly.
// Replaces o.R.ProductionOrderDataPlatformPurchaseRequisitionHeaderData with related.
func (o *DataPlatformProductionOrderHeaderDatum) SetProductionOrderDataPlatformPurchaseRequisitionHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPurchaseRequisitionHeaderDatum) error {
	query := "update `data_platform_purchase_requisition_header_data` set `ProductionOrder` = null where `ProductionOrder` = ?"
	values := []interface{}{o.ProductionOrder}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.ProductionOrderDataPlatformPurchaseRequisitionHeaderData = nil
	}

	return o.AddProductionOrderDataPlatformPurchaseRequisitionHeaderData(ctx, exec, insert, related...)
}

// RemoveProductionOrderDataPlatformPurchaseRequisitionHeaderData relationships from objects passed in.
// Removes related items from R.ProductionOrderDataPlatformPurchaseRequisitionHeaderData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformProductionOrderHeaderDatum) RemoveProductionOrderDataPlatformPurchaseRequisitionHeaderData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformPurchaseRequisitionHeaderDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductionOrder, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("ProductionOrder")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductionOrderDataPlatformPurchaseRequisitionHeaderData {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductionOrderDataPlatformPurchaseRequisitionHeaderData)
			if ln > 1 && i < ln-1 {
				o.R.ProductionOrderDataPlatformPurchaseRequisitionHeaderData[i] = o.R.ProductionOrderDataPlatformPurchaseRequisitionHeaderData[ln-1]
			}
			o.R.ProductionOrderDataPlatformPurchaseRequisitionHeaderData = o.R.ProductionOrderDataPlatformPurchaseRequisitionHeaderData[:ln-1]
			break
		}
	}

	return nil
}

// DataPlatformProductionOrderHeaderData retrieves all the records using an executor.
func DataPlatformProductionOrderHeaderData(mods ...qm.QueryMod) dataPlatformProductionOrderHeaderDatumQuery {
	mods = append(mods, qm.From("`data_platform_production_order_header_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_production_order_header_data`.*"})
	}

	return dataPlatformProductionOrderHeaderDatumQuery{q}
}

// FindDataPlatformProductionOrderHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformProductionOrderHeaderDatum(ctx context.Context, exec boil.ContextExecutor, productionOrder int, selectCols ...string) (*DataPlatformProductionOrderHeaderDatum, error) {
	dataPlatformProductionOrderHeaderDatumObj := &DataPlatformProductionOrderHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_production_order_header_data` where `ProductionOrder`=?", sel,
	)

	q := queries.Raw(query, productionOrder)

	err := q.Bind(ctx, exec, dataPlatformProductionOrderHeaderDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_production_order_header_data")
	}

	return dataPlatformProductionOrderHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformProductionOrderHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_production_order_header_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductionOrderHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformProductionOrderHeaderDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformProductionOrderHeaderDatumInsertCache[key]
	dataPlatformProductionOrderHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformProductionOrderHeaderDatumAllColumns,
			dataPlatformProductionOrderHeaderDatumColumnsWithDefault,
			dataPlatformProductionOrderHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionOrderHeaderDatumType, dataPlatformProductionOrderHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformProductionOrderHeaderDatumType, dataPlatformProductionOrderHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_production_order_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_production_order_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_production_order_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_production_order_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ProductionOrder,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_production_order_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductionOrderHeaderDatumInsertCacheMut.Lock()
		dataPlatformProductionOrderHeaderDatumInsertCache[key] = cache
		dataPlatformProductionOrderHeaderDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformProductionOrderHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformProductionOrderHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformProductionOrderHeaderDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformProductionOrderHeaderDatumUpdateCache[key]
	dataPlatformProductionOrderHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformProductionOrderHeaderDatumAllColumns,
			dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_production_order_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_production_order_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionOrderHeaderDatumType, dataPlatformProductionOrderHeaderDatumMapping, append(wl, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_production_order_header_data row")
	}

	if !cached {
		dataPlatformProductionOrderHeaderDatumUpdateCacheMut.Lock()
		dataPlatformProductionOrderHeaderDatumUpdateCache[key] = cache
		dataPlatformProductionOrderHeaderDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformProductionOrderHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_production_order_header_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformProductionOrderHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionOrderHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_production_order_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformProductionOrderHeaderDatum slice")
	}

	return nil
}

var mySQLDataPlatformProductionOrderHeaderDatumUniqueColumns = []string{
	"ProductionOrder",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformProductionOrderHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_production_order_header_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductionOrderHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformProductionOrderHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformProductionOrderHeaderDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformProductionOrderHeaderDatumUpsertCache[key]
	dataPlatformProductionOrderHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformProductionOrderHeaderDatumAllColumns,
			dataPlatformProductionOrderHeaderDatumColumnsWithDefault,
			dataPlatformProductionOrderHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformProductionOrderHeaderDatumAllColumns,
			dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_production_order_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_production_order_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_production_order_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionOrderHeaderDatumType, dataPlatformProductionOrderHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformProductionOrderHeaderDatumType, dataPlatformProductionOrderHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_production_order_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformProductionOrderHeaderDatumType, dataPlatformProductionOrderHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_production_order_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_production_order_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductionOrderHeaderDatumUpsertCacheMut.Lock()
		dataPlatformProductionOrderHeaderDatumUpsertCache[key] = cache
		dataPlatformProductionOrderHeaderDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformProductionOrderHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformProductionOrderHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformProductionOrderHeaderDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformProductionOrderHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_production_order_header_data` WHERE `ProductionOrder`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_production_order_header_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformProductionOrderHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformProductionOrderHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_production_order_header_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformProductionOrderHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionOrderHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_production_order_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformProductionOrderHeaderDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformProductionOrderHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformProductionOrderHeaderDatum(ctx, exec, o.ProductionOrder)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformProductionOrderHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformProductionOrderHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionOrderHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_production_order_header_data`.* FROM `data_platform_production_order_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformProductionOrderHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformProductionOrderHeaderDatumExists checks if the DataPlatformProductionOrderHeaderDatum row exists.
func DataPlatformProductionOrderHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, productionOrder int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_production_order_header_data` where `ProductionOrder`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, productionOrder)
	}
	row := exec.QueryRowContext(ctx, sql, productionOrder)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_production_order_header_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformProductionOrderHeaderDatum row exists.
func (o *DataPlatformProductionOrderHeaderDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformProductionOrderHeaderDatumExists(ctx, exec, o.ProductionOrder)
}
