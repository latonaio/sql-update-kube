// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformTaxCodeTaxCodeDatum is an object representing the database table.
type DataPlatformTaxCodeTaxCodeDatum struct {
	Country string `boil:"Country" json:"Country" toml:"Country" yaml:"Country"`
	TaxCode string `boil:"TaxCode" json:"TaxCode" toml:"TaxCode" yaml:"TaxCode"`

	R *dataPlatformTaxCodeTaxCodeDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformTaxCodeTaxCodeDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformTaxCodeTaxCodeDatumColumns = struct {
	Country string
	TaxCode string
}{
	Country: "Country",
	TaxCode: "TaxCode",
}

var DataPlatformTaxCodeTaxCodeDatumTableColumns = struct {
	Country string
	TaxCode string
}{
	Country: "data_platform_tax_code_tax_code_data.Country",
	TaxCode: "data_platform_tax_code_tax_code_data.TaxCode",
}

// Generated where

var DataPlatformTaxCodeTaxCodeDatumWhere = struct {
	Country whereHelperstring
	TaxCode whereHelperstring
}{
	Country: whereHelperstring{field: "`data_platform_tax_code_tax_code_data`.`Country`"},
	TaxCode: whereHelperstring{field: "`data_platform_tax_code_tax_code_data`.`TaxCode`"},
}

// DataPlatformTaxCodeTaxCodeDatumRels is where relationship names are stored.
var DataPlatformTaxCodeTaxCodeDatumRels = struct {
	CountryDataPlatformTaxCodeTaxCodeTextData string
	CountryDataPlatformTaxCodeTaxRateData     string
}{
	CountryDataPlatformTaxCodeTaxCodeTextData: "CountryDataPlatformTaxCodeTaxCodeTextData",
	CountryDataPlatformTaxCodeTaxRateData:     "CountryDataPlatformTaxCodeTaxRateData",
}

// dataPlatformTaxCodeTaxCodeDatumR is where relationships are stored.
type dataPlatformTaxCodeTaxCodeDatumR struct {
	CountryDataPlatformTaxCodeTaxCodeTextData DataPlatformTaxCodeTaxCodeTextDatumSlice `boil:"CountryDataPlatformTaxCodeTaxCodeTextData" json:"CountryDataPlatformTaxCodeTaxCodeTextData" toml:"CountryDataPlatformTaxCodeTaxCodeTextData" yaml:"CountryDataPlatformTaxCodeTaxCodeTextData"`
	CountryDataPlatformTaxCodeTaxRateData     DataPlatformTaxCodeTaxRateDatumSlice     `boil:"CountryDataPlatformTaxCodeTaxRateData" json:"CountryDataPlatformTaxCodeTaxRateData" toml:"CountryDataPlatformTaxCodeTaxRateData" yaml:"CountryDataPlatformTaxCodeTaxRateData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformTaxCodeTaxCodeDatumR) NewStruct() *dataPlatformTaxCodeTaxCodeDatumR {
	return &dataPlatformTaxCodeTaxCodeDatumR{}
}

func (r *dataPlatformTaxCodeTaxCodeDatumR) GetCountryDataPlatformTaxCodeTaxCodeTextData() DataPlatformTaxCodeTaxCodeTextDatumSlice {
	if r == nil {
		return nil
	}
	return r.CountryDataPlatformTaxCodeTaxCodeTextData
}

func (r *dataPlatformTaxCodeTaxCodeDatumR) GetCountryDataPlatformTaxCodeTaxRateData() DataPlatformTaxCodeTaxRateDatumSlice {
	if r == nil {
		return nil
	}
	return r.CountryDataPlatformTaxCodeTaxRateData
}

// dataPlatformTaxCodeTaxCodeDatumL is where Load methods for each relationship are stored.
type dataPlatformTaxCodeTaxCodeDatumL struct{}

var (
	dataPlatformTaxCodeTaxCodeDatumAllColumns            = []string{"Country", "TaxCode"}
	dataPlatformTaxCodeTaxCodeDatumColumnsWithoutDefault = []string{"Country", "TaxCode"}
	dataPlatformTaxCodeTaxCodeDatumColumnsWithDefault    = []string{}
	dataPlatformTaxCodeTaxCodeDatumPrimaryKeyColumns     = []string{"Country", "TaxCode"}
	dataPlatformTaxCodeTaxCodeDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformTaxCodeTaxCodeDatumSlice is an alias for a slice of pointers to DataPlatformTaxCodeTaxCodeDatum.
	// This should almost always be used instead of []DataPlatformTaxCodeTaxCodeDatum.
	DataPlatformTaxCodeTaxCodeDatumSlice []*DataPlatformTaxCodeTaxCodeDatum

	dataPlatformTaxCodeTaxCodeDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformTaxCodeTaxCodeDatumType                 = reflect.TypeOf(&DataPlatformTaxCodeTaxCodeDatum{})
	dataPlatformTaxCodeTaxCodeDatumMapping              = queries.MakeStructMapping(dataPlatformTaxCodeTaxCodeDatumType)
	dataPlatformTaxCodeTaxCodeDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformTaxCodeTaxCodeDatumType, dataPlatformTaxCodeTaxCodeDatumMapping, dataPlatformTaxCodeTaxCodeDatumPrimaryKeyColumns)
	dataPlatformTaxCodeTaxCodeDatumInsertCacheMut       sync.RWMutex
	dataPlatformTaxCodeTaxCodeDatumInsertCache          = make(map[string]insertCache)
	dataPlatformTaxCodeTaxCodeDatumUpdateCacheMut       sync.RWMutex
	dataPlatformTaxCodeTaxCodeDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformTaxCodeTaxCodeDatumUpsertCacheMut       sync.RWMutex
	dataPlatformTaxCodeTaxCodeDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformTaxCodeTaxCodeDatum record from the query.
func (q dataPlatformTaxCodeTaxCodeDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformTaxCodeTaxCodeDatum, error) {
	o := &DataPlatformTaxCodeTaxCodeDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_tax_code_tax_code_data")
	}

	return o, nil
}

// All returns all DataPlatformTaxCodeTaxCodeDatum records from the query.
func (q dataPlatformTaxCodeTaxCodeDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformTaxCodeTaxCodeDatumSlice, error) {
	var o []*DataPlatformTaxCodeTaxCodeDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformTaxCodeTaxCodeDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformTaxCodeTaxCodeDatum records in the query.
func (q dataPlatformTaxCodeTaxCodeDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_tax_code_tax_code_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformTaxCodeTaxCodeDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_tax_code_tax_code_data exists")
	}

	return count > 0, nil
}

// CountryDataPlatformTaxCodeTaxCodeTextData retrieves all the data_platform_tax_code_tax_code_text_datum's DataPlatformTaxCodeTaxCodeTextData with an executor via Country column.
func (o *DataPlatformTaxCodeTaxCodeDatum) CountryDataPlatformTaxCodeTaxCodeTextData(mods ...qm.QueryMod) dataPlatformTaxCodeTaxCodeTextDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_tax_code_tax_code_text_data`.`Country`=?", o.Country),
	)

	return DataPlatformTaxCodeTaxCodeTextData(queryMods...)
}

// CountryDataPlatformTaxCodeTaxRateData retrieves all the data_platform_tax_code_tax_rate_datum's DataPlatformTaxCodeTaxRateData with an executor via Country column.
func (o *DataPlatformTaxCodeTaxCodeDatum) CountryDataPlatformTaxCodeTaxRateData(mods ...qm.QueryMod) dataPlatformTaxCodeTaxRateDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_tax_code_tax_rate_data`.`Country`=?", o.Country),
	)

	return DataPlatformTaxCodeTaxRateData(queryMods...)
}

// LoadCountryDataPlatformTaxCodeTaxCodeTextData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformTaxCodeTaxCodeDatumL) LoadCountryDataPlatformTaxCodeTaxCodeTextData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformTaxCodeTaxCodeDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformTaxCodeTaxCodeDatum
	var object *DataPlatformTaxCodeTaxCodeDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformTaxCodeTaxCodeDatum.(*DataPlatformTaxCodeTaxCodeDatum)
		if !ok {
			object = new(DataPlatformTaxCodeTaxCodeDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformTaxCodeTaxCodeDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformTaxCodeTaxCodeDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformTaxCodeTaxCodeDatum.(*[]*DataPlatformTaxCodeTaxCodeDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformTaxCodeTaxCodeDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformTaxCodeTaxCodeDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformTaxCodeTaxCodeDatumR{}
		}
		args = append(args, object.Country)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformTaxCodeTaxCodeDatumR{}
			}

			for _, a := range args {
				if a == obj.Country {
					continue Outer
				}
			}

			args = append(args, obj.Country)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_tax_code_tax_code_text_data`),
		qm.WhereIn(`data_platform_tax_code_tax_code_text_data.Country in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_tax_code_tax_code_text_data")
	}

	var resultSlice []*DataPlatformTaxCodeTaxCodeTextDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_tax_code_tax_code_text_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_tax_code_tax_code_text_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_tax_code_tax_code_text_data")
	}

	if singular {
		object.R.CountryDataPlatformTaxCodeTaxCodeTextData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Country == foreign.Country {
				local.R.CountryDataPlatformTaxCodeTaxCodeTextData = append(local.R.CountryDataPlatformTaxCodeTaxCodeTextData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadCountryDataPlatformTaxCodeTaxRateData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformTaxCodeTaxCodeDatumL) LoadCountryDataPlatformTaxCodeTaxRateData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformTaxCodeTaxCodeDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformTaxCodeTaxCodeDatum
	var object *DataPlatformTaxCodeTaxCodeDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformTaxCodeTaxCodeDatum.(*DataPlatformTaxCodeTaxCodeDatum)
		if !ok {
			object = new(DataPlatformTaxCodeTaxCodeDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformTaxCodeTaxCodeDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformTaxCodeTaxCodeDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformTaxCodeTaxCodeDatum.(*[]*DataPlatformTaxCodeTaxCodeDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformTaxCodeTaxCodeDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformTaxCodeTaxCodeDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformTaxCodeTaxCodeDatumR{}
		}
		args = append(args, object.Country)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformTaxCodeTaxCodeDatumR{}
			}

			for _, a := range args {
				if a == obj.Country {
					continue Outer
				}
			}

			args = append(args, obj.Country)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_tax_code_tax_rate_data`),
		qm.WhereIn(`data_platform_tax_code_tax_rate_data.Country in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_tax_code_tax_rate_data")
	}

	var resultSlice []*DataPlatformTaxCodeTaxRateDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_tax_code_tax_rate_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_tax_code_tax_rate_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_tax_code_tax_rate_data")
	}

	if singular {
		object.R.CountryDataPlatformTaxCodeTaxRateData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Country == foreign.Country {
				local.R.CountryDataPlatformTaxCodeTaxRateData = append(local.R.CountryDataPlatformTaxCodeTaxRateData, foreign)
				break
			}
		}
	}

	return nil
}

// AddCountryDataPlatformTaxCodeTaxCodeTextData adds the given related objects to the existing relationships
// of the data_platform_tax_code_tax_code_datum, optionally inserting them as new records.
// Appends related to o.R.CountryDataPlatformTaxCodeTaxCodeTextData.
func (o *DataPlatformTaxCodeTaxCodeDatum) AddCountryDataPlatformTaxCodeTaxCodeTextData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformTaxCodeTaxCodeTextDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Country = o.Country
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_tax_code_tax_code_text_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Country"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformTaxCodeTaxCodeTextDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Country, rel.Country, rel.TaxCode, rel.Language}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Country = o.Country
		}
	}

	if o.R == nil {
		o.R = &dataPlatformTaxCodeTaxCodeDatumR{
			CountryDataPlatformTaxCodeTaxCodeTextData: related,
		}
	} else {
		o.R.CountryDataPlatformTaxCodeTaxCodeTextData = append(o.R.CountryDataPlatformTaxCodeTaxCodeTextData, related...)
	}

	return nil
}

// AddCountryDataPlatformTaxCodeTaxRateData adds the given related objects to the existing relationships
// of the data_platform_tax_code_tax_code_datum, optionally inserting them as new records.
// Appends related to o.R.CountryDataPlatformTaxCodeTaxRateData.
func (o *DataPlatformTaxCodeTaxCodeDatum) AddCountryDataPlatformTaxCodeTaxRateData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformTaxCodeTaxRateDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Country = o.Country
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_tax_code_tax_rate_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Country"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformTaxCodeTaxRateDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Country, rel.Country, rel.TaxCode, rel.ValidityEndDate, rel.ValidityStartDate}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Country = o.Country
		}
	}

	if o.R == nil {
		o.R = &dataPlatformTaxCodeTaxCodeDatumR{
			CountryDataPlatformTaxCodeTaxRateData: related,
		}
	} else {
		o.R.CountryDataPlatformTaxCodeTaxRateData = append(o.R.CountryDataPlatformTaxCodeTaxRateData, related...)
	}

	return nil
}

// DataPlatformTaxCodeTaxCodeData retrieves all the records using an executor.
func DataPlatformTaxCodeTaxCodeData(mods ...qm.QueryMod) dataPlatformTaxCodeTaxCodeDatumQuery {
	mods = append(mods, qm.From("`data_platform_tax_code_tax_code_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_tax_code_tax_code_data`.*"})
	}

	return dataPlatformTaxCodeTaxCodeDatumQuery{q}
}

// FindDataPlatformTaxCodeTaxCodeDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformTaxCodeTaxCodeDatum(ctx context.Context, exec boil.ContextExecutor, country string, taxCode string, selectCols ...string) (*DataPlatformTaxCodeTaxCodeDatum, error) {
	dataPlatformTaxCodeTaxCodeDatumObj := &DataPlatformTaxCodeTaxCodeDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_tax_code_tax_code_data` where `Country`=? AND `TaxCode`=?", sel,
	)

	q := queries.Raw(query, country, taxCode)

	err := q.Bind(ctx, exec, dataPlatformTaxCodeTaxCodeDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_tax_code_tax_code_data")
	}

	return dataPlatformTaxCodeTaxCodeDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformTaxCodeTaxCodeDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_tax_code_tax_code_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformTaxCodeTaxCodeDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformTaxCodeTaxCodeDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformTaxCodeTaxCodeDatumInsertCache[key]
	dataPlatformTaxCodeTaxCodeDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformTaxCodeTaxCodeDatumAllColumns,
			dataPlatformTaxCodeTaxCodeDatumColumnsWithDefault,
			dataPlatformTaxCodeTaxCodeDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformTaxCodeTaxCodeDatumType, dataPlatformTaxCodeTaxCodeDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformTaxCodeTaxCodeDatumType, dataPlatformTaxCodeTaxCodeDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_tax_code_tax_code_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_tax_code_tax_code_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_tax_code_tax_code_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformTaxCodeTaxCodeDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_tax_code_tax_code_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Country,
		o.TaxCode,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_tax_code_tax_code_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformTaxCodeTaxCodeDatumInsertCacheMut.Lock()
		dataPlatformTaxCodeTaxCodeDatumInsertCache[key] = cache
		dataPlatformTaxCodeTaxCodeDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformTaxCodeTaxCodeDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformTaxCodeTaxCodeDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformTaxCodeTaxCodeDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformTaxCodeTaxCodeDatumUpdateCache[key]
	dataPlatformTaxCodeTaxCodeDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformTaxCodeTaxCodeDatumAllColumns,
			dataPlatformTaxCodeTaxCodeDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_tax_code_tax_code_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_tax_code_tax_code_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformTaxCodeTaxCodeDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformTaxCodeTaxCodeDatumType, dataPlatformTaxCodeTaxCodeDatumMapping, append(wl, dataPlatformTaxCodeTaxCodeDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_tax_code_tax_code_data row")
	}

	if !cached {
		dataPlatformTaxCodeTaxCodeDatumUpdateCacheMut.Lock()
		dataPlatformTaxCodeTaxCodeDatumUpdateCache[key] = cache
		dataPlatformTaxCodeTaxCodeDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformTaxCodeTaxCodeDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_tax_code_tax_code_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformTaxCodeTaxCodeDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformTaxCodeTaxCodeDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_tax_code_tax_code_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformTaxCodeTaxCodeDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformTaxCodeTaxCodeDatum slice")
	}

	return nil
}

var mySQLDataPlatformTaxCodeTaxCodeDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformTaxCodeTaxCodeDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_tax_code_tax_code_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformTaxCodeTaxCodeDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformTaxCodeTaxCodeDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformTaxCodeTaxCodeDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformTaxCodeTaxCodeDatumUpsertCache[key]
	dataPlatformTaxCodeTaxCodeDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformTaxCodeTaxCodeDatumAllColumns,
			dataPlatformTaxCodeTaxCodeDatumColumnsWithDefault,
			dataPlatformTaxCodeTaxCodeDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformTaxCodeTaxCodeDatumAllColumns,
			dataPlatformTaxCodeTaxCodeDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_tax_code_tax_code_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_tax_code_tax_code_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_tax_code_tax_code_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformTaxCodeTaxCodeDatumType, dataPlatformTaxCodeTaxCodeDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformTaxCodeTaxCodeDatumType, dataPlatformTaxCodeTaxCodeDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_tax_code_tax_code_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformTaxCodeTaxCodeDatumType, dataPlatformTaxCodeTaxCodeDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_tax_code_tax_code_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_tax_code_tax_code_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformTaxCodeTaxCodeDatumUpsertCacheMut.Lock()
		dataPlatformTaxCodeTaxCodeDatumUpsertCache[key] = cache
		dataPlatformTaxCodeTaxCodeDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformTaxCodeTaxCodeDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformTaxCodeTaxCodeDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformTaxCodeTaxCodeDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformTaxCodeTaxCodeDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_tax_code_tax_code_data` WHERE `Country`=? AND `TaxCode`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_tax_code_tax_code_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformTaxCodeTaxCodeDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformTaxCodeTaxCodeDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_tax_code_tax_code_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformTaxCodeTaxCodeDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformTaxCodeTaxCodeDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_tax_code_tax_code_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformTaxCodeTaxCodeDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformTaxCodeTaxCodeDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformTaxCodeTaxCodeDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformTaxCodeTaxCodeDatum(ctx, exec, o.Country, o.TaxCode)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformTaxCodeTaxCodeDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformTaxCodeTaxCodeDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformTaxCodeTaxCodeDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_tax_code_tax_code_data`.* FROM `data_platform_tax_code_tax_code_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformTaxCodeTaxCodeDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformTaxCodeTaxCodeDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformTaxCodeTaxCodeDatumExists checks if the DataPlatformTaxCodeTaxCodeDatum row exists.
func DataPlatformTaxCodeTaxCodeDatumExists(ctx context.Context, exec boil.ContextExecutor, country string, taxCode string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_tax_code_tax_code_data` where `Country`=? AND `TaxCode`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, country, taxCode)
	}
	row := exec.QueryRowContext(ctx, sql, country, taxCode)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_tax_code_tax_code_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformTaxCodeTaxCodeDatum row exists.
func (o *DataPlatformTaxCodeTaxCodeDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformTaxCodeTaxCodeDatumExists(ctx, exec, o.Country, o.TaxCode)
}
