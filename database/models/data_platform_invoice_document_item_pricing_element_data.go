// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformInvoiceDocumentItemPricingElementDatum is an object representing the database table.
type DataPlatformInvoiceDocumentItemPricingElementDatum struct {
	InvoiceDocument            int          `boil:"InvoiceDocument" json:"InvoiceDocument" toml:"InvoiceDocument" yaml:"InvoiceDocument"`
	InvoiceDocumentItem        int          `boil:"InvoiceDocumentItem" json:"InvoiceDocumentItem" toml:"InvoiceDocumentItem" yaml:"InvoiceDocumentItem"`
	PricingProcedureCounter    int          `boil:"PricingProcedureCounter" json:"PricingProcedureCounter" toml:"PricingProcedureCounter" yaml:"PricingProcedureCounter"`
	ConditionRecord            null.Int     `boil:"ConditionRecord" json:"ConditionRecord,omitempty" toml:"ConditionRecord" yaml:"ConditionRecord,omitempty"`
	ConditionSequentialNumber  null.Int     `boil:"ConditionSequentialNumber" json:"ConditionSequentialNumber,omitempty" toml:"ConditionSequentialNumber" yaml:"ConditionSequentialNumber,omitempty"`
	ConditionType              null.String  `boil:"ConditionType" json:"ConditionType,omitempty" toml:"ConditionType" yaml:"ConditionType,omitempty"`
	PricingDate                null.String  `boil:"PricingDate" json:"PricingDate,omitempty" toml:"PricingDate" yaml:"PricingDate,omitempty"`
	ConditionRateValue         null.Float32 `boil:"ConditionRateValue" json:"ConditionRateValue,omitempty" toml:"ConditionRateValue" yaml:"ConditionRateValue,omitempty"`
	ConditionCurrency          null.String  `boil:"ConditionCurrency" json:"ConditionCurrency,omitempty" toml:"ConditionCurrency" yaml:"ConditionCurrency,omitempty"`
	ConditionQuantity          null.Float32 `boil:"ConditionQuantity" json:"ConditionQuantity,omitempty" toml:"ConditionQuantity" yaml:"ConditionQuantity,omitempty"`
	ConditionQuantityUnit      null.String  `boil:"ConditionQuantityUnit" json:"ConditionQuantityUnit,omitempty" toml:"ConditionQuantityUnit" yaml:"ConditionQuantityUnit,omitempty"`
	TaxCode                    null.String  `boil:"TaxCode" json:"TaxCode,omitempty" toml:"TaxCode" yaml:"TaxCode,omitempty"`
	ConditionAmount            null.Float32 `boil:"ConditionAmount" json:"ConditionAmount,omitempty" toml:"ConditionAmount" yaml:"ConditionAmount,omitempty"`
	TransactionCurrency        null.String  `boil:"TransactionCurrency" json:"TransactionCurrency,omitempty" toml:"TransactionCurrency" yaml:"TransactionCurrency,omitempty"`
	ConditionIsManuallyChanged null.Bool    `boil:"ConditionIsManuallyChanged" json:"ConditionIsManuallyChanged,omitempty" toml:"ConditionIsManuallyChanged" yaml:"ConditionIsManuallyChanged,omitempty"`

	R *dataPlatformInvoiceDocumentItemPricingElementDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformInvoiceDocumentItemPricingElementDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformInvoiceDocumentItemPricingElementDatumColumns = struct {
	InvoiceDocument            string
	InvoiceDocumentItem        string
	PricingProcedureCounter    string
	ConditionRecord            string
	ConditionSequentialNumber  string
	ConditionType              string
	PricingDate                string
	ConditionRateValue         string
	ConditionCurrency          string
	ConditionQuantity          string
	ConditionQuantityUnit      string
	TaxCode                    string
	ConditionAmount            string
	TransactionCurrency        string
	ConditionIsManuallyChanged string
}{
	InvoiceDocument:            "InvoiceDocument",
	InvoiceDocumentItem:        "InvoiceDocumentItem",
	PricingProcedureCounter:    "PricingProcedureCounter",
	ConditionRecord:            "ConditionRecord",
	ConditionSequentialNumber:  "ConditionSequentialNumber",
	ConditionType:              "ConditionType",
	PricingDate:                "PricingDate",
	ConditionRateValue:         "ConditionRateValue",
	ConditionCurrency:          "ConditionCurrency",
	ConditionQuantity:          "ConditionQuantity",
	ConditionQuantityUnit:      "ConditionQuantityUnit",
	TaxCode:                    "TaxCode",
	ConditionAmount:            "ConditionAmount",
	TransactionCurrency:        "TransactionCurrency",
	ConditionIsManuallyChanged: "ConditionIsManuallyChanged",
}

var DataPlatformInvoiceDocumentItemPricingElementDatumTableColumns = struct {
	InvoiceDocument            string
	InvoiceDocumentItem        string
	PricingProcedureCounter    string
	ConditionRecord            string
	ConditionSequentialNumber  string
	ConditionType              string
	PricingDate                string
	ConditionRateValue         string
	ConditionCurrency          string
	ConditionQuantity          string
	ConditionQuantityUnit      string
	TaxCode                    string
	ConditionAmount            string
	TransactionCurrency        string
	ConditionIsManuallyChanged string
}{
	InvoiceDocument:            "data_platform_invoice_document_item_pricing_element_data.InvoiceDocument",
	InvoiceDocumentItem:        "data_platform_invoice_document_item_pricing_element_data.InvoiceDocumentItem",
	PricingProcedureCounter:    "data_platform_invoice_document_item_pricing_element_data.PricingProcedureCounter",
	ConditionRecord:            "data_platform_invoice_document_item_pricing_element_data.ConditionRecord",
	ConditionSequentialNumber:  "data_platform_invoice_document_item_pricing_element_data.ConditionSequentialNumber",
	ConditionType:              "data_platform_invoice_document_item_pricing_element_data.ConditionType",
	PricingDate:                "data_platform_invoice_document_item_pricing_element_data.PricingDate",
	ConditionRateValue:         "data_platform_invoice_document_item_pricing_element_data.ConditionRateValue",
	ConditionCurrency:          "data_platform_invoice_document_item_pricing_element_data.ConditionCurrency",
	ConditionQuantity:          "data_platform_invoice_document_item_pricing_element_data.ConditionQuantity",
	ConditionQuantityUnit:      "data_platform_invoice_document_item_pricing_element_data.ConditionQuantityUnit",
	TaxCode:                    "data_platform_invoice_document_item_pricing_element_data.TaxCode",
	ConditionAmount:            "data_platform_invoice_document_item_pricing_element_data.ConditionAmount",
	TransactionCurrency:        "data_platform_invoice_document_item_pricing_element_data.TransactionCurrency",
	ConditionIsManuallyChanged: "data_platform_invoice_document_item_pricing_element_data.ConditionIsManuallyChanged",
}

// Generated where

var DataPlatformInvoiceDocumentItemPricingElementDatumWhere = struct {
	InvoiceDocument            whereHelperint
	InvoiceDocumentItem        whereHelperint
	PricingProcedureCounter    whereHelperint
	ConditionRecord            whereHelpernull_Int
	ConditionSequentialNumber  whereHelpernull_Int
	ConditionType              whereHelpernull_String
	PricingDate                whereHelpernull_String
	ConditionRateValue         whereHelpernull_Float32
	ConditionCurrency          whereHelpernull_String
	ConditionQuantity          whereHelpernull_Float32
	ConditionQuantityUnit      whereHelpernull_String
	TaxCode                    whereHelpernull_String
	ConditionAmount            whereHelpernull_Float32
	TransactionCurrency        whereHelpernull_String
	ConditionIsManuallyChanged whereHelpernull_Bool
}{
	InvoiceDocument:            whereHelperint{field: "`data_platform_invoice_document_item_pricing_element_data`.`InvoiceDocument`"},
	InvoiceDocumentItem:        whereHelperint{field: "`data_platform_invoice_document_item_pricing_element_data`.`InvoiceDocumentItem`"},
	PricingProcedureCounter:    whereHelperint{field: "`data_platform_invoice_document_item_pricing_element_data`.`PricingProcedureCounter`"},
	ConditionRecord:            whereHelpernull_Int{field: "`data_platform_invoice_document_item_pricing_element_data`.`ConditionRecord`"},
	ConditionSequentialNumber:  whereHelpernull_Int{field: "`data_platform_invoice_document_item_pricing_element_data`.`ConditionSequentialNumber`"},
	ConditionType:              whereHelpernull_String{field: "`data_platform_invoice_document_item_pricing_element_data`.`ConditionType`"},
	PricingDate:                whereHelpernull_String{field: "`data_platform_invoice_document_item_pricing_element_data`.`PricingDate`"},
	ConditionRateValue:         whereHelpernull_Float32{field: "`data_platform_invoice_document_item_pricing_element_data`.`ConditionRateValue`"},
	ConditionCurrency:          whereHelpernull_String{field: "`data_platform_invoice_document_item_pricing_element_data`.`ConditionCurrency`"},
	ConditionQuantity:          whereHelpernull_Float32{field: "`data_platform_invoice_document_item_pricing_element_data`.`ConditionQuantity`"},
	ConditionQuantityUnit:      whereHelpernull_String{field: "`data_platform_invoice_document_item_pricing_element_data`.`ConditionQuantityUnit`"},
	TaxCode:                    whereHelpernull_String{field: "`data_platform_invoice_document_item_pricing_element_data`.`TaxCode`"},
	ConditionAmount:            whereHelpernull_Float32{field: "`data_platform_invoice_document_item_pricing_element_data`.`ConditionAmount`"},
	TransactionCurrency:        whereHelpernull_String{field: "`data_platform_invoice_document_item_pricing_element_data`.`TransactionCurrency`"},
	ConditionIsManuallyChanged: whereHelpernull_Bool{field: "`data_platform_invoice_document_item_pricing_element_data`.`ConditionIsManuallyChanged`"},
}

// DataPlatformInvoiceDocumentItemPricingElementDatumRels is where relationship names are stored.
var DataPlatformInvoiceDocumentItemPricingElementDatumRels = struct {
}{}

// dataPlatformInvoiceDocumentItemPricingElementDatumR is where relationships are stored.
type dataPlatformInvoiceDocumentItemPricingElementDatumR struct {
}

// NewStruct creates a new relationship struct
func (*dataPlatformInvoiceDocumentItemPricingElementDatumR) NewStruct() *dataPlatformInvoiceDocumentItemPricingElementDatumR {
	return &dataPlatformInvoiceDocumentItemPricingElementDatumR{}
}

// dataPlatformInvoiceDocumentItemPricingElementDatumL is where Load methods for each relationship are stored.
type dataPlatformInvoiceDocumentItemPricingElementDatumL struct{}

var (
	dataPlatformInvoiceDocumentItemPricingElementDatumAllColumns            = []string{"InvoiceDocument", "InvoiceDocumentItem", "PricingProcedureCounter", "ConditionRecord", "ConditionSequentialNumber", "ConditionType", "PricingDate", "ConditionRateValue", "ConditionCurrency", "ConditionQuantity", "ConditionQuantityUnit", "TaxCode", "ConditionAmount", "TransactionCurrency", "ConditionIsManuallyChanged"}
	dataPlatformInvoiceDocumentItemPricingElementDatumColumnsWithoutDefault = []string{"InvoiceDocument", "InvoiceDocumentItem", "PricingProcedureCounter", "ConditionRecord", "ConditionSequentialNumber", "ConditionType", "PricingDate", "ConditionRateValue", "ConditionCurrency", "ConditionQuantity", "ConditionQuantityUnit", "TaxCode", "ConditionAmount", "TransactionCurrency", "ConditionIsManuallyChanged"}
	dataPlatformInvoiceDocumentItemPricingElementDatumColumnsWithDefault    = []string{}
	dataPlatformInvoiceDocumentItemPricingElementDatumPrimaryKeyColumns     = []string{"InvoiceDocument", "InvoiceDocumentItem", "PricingProcedureCounter"}
	dataPlatformInvoiceDocumentItemPricingElementDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformInvoiceDocumentItemPricingElementDatumSlice is an alias for a slice of pointers to DataPlatformInvoiceDocumentItemPricingElementDatum.
	// This should almost always be used instead of []DataPlatformInvoiceDocumentItemPricingElementDatum.
	DataPlatformInvoiceDocumentItemPricingElementDatumSlice []*DataPlatformInvoiceDocumentItemPricingElementDatum

	dataPlatformInvoiceDocumentItemPricingElementDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformInvoiceDocumentItemPricingElementDatumType                 = reflect.TypeOf(&DataPlatformInvoiceDocumentItemPricingElementDatum{})
	dataPlatformInvoiceDocumentItemPricingElementDatumMapping              = queries.MakeStructMapping(dataPlatformInvoiceDocumentItemPricingElementDatumType)
	dataPlatformInvoiceDocumentItemPricingElementDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformInvoiceDocumentItemPricingElementDatumType, dataPlatformInvoiceDocumentItemPricingElementDatumMapping, dataPlatformInvoiceDocumentItemPricingElementDatumPrimaryKeyColumns)
	dataPlatformInvoiceDocumentItemPricingElementDatumInsertCacheMut       sync.RWMutex
	dataPlatformInvoiceDocumentItemPricingElementDatumInsertCache          = make(map[string]insertCache)
	dataPlatformInvoiceDocumentItemPricingElementDatumUpdateCacheMut       sync.RWMutex
	dataPlatformInvoiceDocumentItemPricingElementDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformInvoiceDocumentItemPricingElementDatumUpsertCacheMut       sync.RWMutex
	dataPlatformInvoiceDocumentItemPricingElementDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformInvoiceDocumentItemPricingElementDatum record from the query.
func (q dataPlatformInvoiceDocumentItemPricingElementDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformInvoiceDocumentItemPricingElementDatum, error) {
	o := &DataPlatformInvoiceDocumentItemPricingElementDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_invoice_document_item_pricing_element_data")
	}

	return o, nil
}

// All returns all DataPlatformInvoiceDocumentItemPricingElementDatum records from the query.
func (q dataPlatformInvoiceDocumentItemPricingElementDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformInvoiceDocumentItemPricingElementDatumSlice, error) {
	var o []*DataPlatformInvoiceDocumentItemPricingElementDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformInvoiceDocumentItemPricingElementDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformInvoiceDocumentItemPricingElementDatum records in the query.
func (q dataPlatformInvoiceDocumentItemPricingElementDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_invoice_document_item_pricing_element_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformInvoiceDocumentItemPricingElementDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_invoice_document_item_pricing_element_data exists")
	}

	return count > 0, nil
}

// DataPlatformInvoiceDocumentItemPricingElementData retrieves all the records using an executor.
func DataPlatformInvoiceDocumentItemPricingElementData(mods ...qm.QueryMod) dataPlatformInvoiceDocumentItemPricingElementDatumQuery {
	mods = append(mods, qm.From("`data_platform_invoice_document_item_pricing_element_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_invoice_document_item_pricing_element_data`.*"})
	}

	return dataPlatformInvoiceDocumentItemPricingElementDatumQuery{q}
}

// FindDataPlatformInvoiceDocumentItemPricingElementDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformInvoiceDocumentItemPricingElementDatum(ctx context.Context, exec boil.ContextExecutor, invoiceDocument int, invoiceDocumentItem int, pricingProcedureCounter int, selectCols ...string) (*DataPlatformInvoiceDocumentItemPricingElementDatum, error) {
	dataPlatformInvoiceDocumentItemPricingElementDatumObj := &DataPlatformInvoiceDocumentItemPricingElementDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_invoice_document_item_pricing_element_data` where `InvoiceDocument`=? AND `InvoiceDocumentItem`=? AND `PricingProcedureCounter`=?", sel,
	)

	q := queries.Raw(query, invoiceDocument, invoiceDocumentItem, pricingProcedureCounter)

	err := q.Bind(ctx, exec, dataPlatformInvoiceDocumentItemPricingElementDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_invoice_document_item_pricing_element_data")
	}

	return dataPlatformInvoiceDocumentItemPricingElementDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformInvoiceDocumentItemPricingElementDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_invoice_document_item_pricing_element_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformInvoiceDocumentItemPricingElementDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformInvoiceDocumentItemPricingElementDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformInvoiceDocumentItemPricingElementDatumInsertCache[key]
	dataPlatformInvoiceDocumentItemPricingElementDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformInvoiceDocumentItemPricingElementDatumAllColumns,
			dataPlatformInvoiceDocumentItemPricingElementDatumColumnsWithDefault,
			dataPlatformInvoiceDocumentItemPricingElementDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformInvoiceDocumentItemPricingElementDatumType, dataPlatformInvoiceDocumentItemPricingElementDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformInvoiceDocumentItemPricingElementDatumType, dataPlatformInvoiceDocumentItemPricingElementDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_invoice_document_item_pricing_element_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_invoice_document_item_pricing_element_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_invoice_document_item_pricing_element_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentItemPricingElementDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_invoice_document_item_pricing_element_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.InvoiceDocument,
		o.InvoiceDocumentItem,
		o.PricingProcedureCounter,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_invoice_document_item_pricing_element_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformInvoiceDocumentItemPricingElementDatumInsertCacheMut.Lock()
		dataPlatformInvoiceDocumentItemPricingElementDatumInsertCache[key] = cache
		dataPlatformInvoiceDocumentItemPricingElementDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformInvoiceDocumentItemPricingElementDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformInvoiceDocumentItemPricingElementDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformInvoiceDocumentItemPricingElementDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformInvoiceDocumentItemPricingElementDatumUpdateCache[key]
	dataPlatformInvoiceDocumentItemPricingElementDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformInvoiceDocumentItemPricingElementDatumAllColumns,
			dataPlatformInvoiceDocumentItemPricingElementDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_invoice_document_item_pricing_element_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_invoice_document_item_pricing_element_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentItemPricingElementDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformInvoiceDocumentItemPricingElementDatumType, dataPlatformInvoiceDocumentItemPricingElementDatumMapping, append(wl, dataPlatformInvoiceDocumentItemPricingElementDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_invoice_document_item_pricing_element_data row")
	}

	if !cached {
		dataPlatformInvoiceDocumentItemPricingElementDatumUpdateCacheMut.Lock()
		dataPlatformInvoiceDocumentItemPricingElementDatumUpdateCache[key] = cache
		dataPlatformInvoiceDocumentItemPricingElementDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformInvoiceDocumentItemPricingElementDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_invoice_document_item_pricing_element_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformInvoiceDocumentItemPricingElementDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInvoiceDocumentItemPricingElementDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_invoice_document_item_pricing_element_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInvoiceDocumentItemPricingElementDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformInvoiceDocumentItemPricingElementDatum slice")
	}

	return nil
}

var mySQLDataPlatformInvoiceDocumentItemPricingElementDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformInvoiceDocumentItemPricingElementDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_invoice_document_item_pricing_element_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformInvoiceDocumentItemPricingElementDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformInvoiceDocumentItemPricingElementDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformInvoiceDocumentItemPricingElementDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformInvoiceDocumentItemPricingElementDatumUpsertCache[key]
	dataPlatformInvoiceDocumentItemPricingElementDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformInvoiceDocumentItemPricingElementDatumAllColumns,
			dataPlatformInvoiceDocumentItemPricingElementDatumColumnsWithDefault,
			dataPlatformInvoiceDocumentItemPricingElementDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformInvoiceDocumentItemPricingElementDatumAllColumns,
			dataPlatformInvoiceDocumentItemPricingElementDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_invoice_document_item_pricing_element_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_invoice_document_item_pricing_element_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_invoice_document_item_pricing_element_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformInvoiceDocumentItemPricingElementDatumType, dataPlatformInvoiceDocumentItemPricingElementDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformInvoiceDocumentItemPricingElementDatumType, dataPlatformInvoiceDocumentItemPricingElementDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_invoice_document_item_pricing_element_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformInvoiceDocumentItemPricingElementDatumType, dataPlatformInvoiceDocumentItemPricingElementDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_invoice_document_item_pricing_element_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_invoice_document_item_pricing_element_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformInvoiceDocumentItemPricingElementDatumUpsertCacheMut.Lock()
		dataPlatformInvoiceDocumentItemPricingElementDatumUpsertCache[key] = cache
		dataPlatformInvoiceDocumentItemPricingElementDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformInvoiceDocumentItemPricingElementDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformInvoiceDocumentItemPricingElementDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformInvoiceDocumentItemPricingElementDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformInvoiceDocumentItemPricingElementDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_invoice_document_item_pricing_element_data` WHERE `InvoiceDocument`=? AND `InvoiceDocumentItem`=? AND `PricingProcedureCounter`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_invoice_document_item_pricing_element_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformInvoiceDocumentItemPricingElementDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformInvoiceDocumentItemPricingElementDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_invoice_document_item_pricing_element_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformInvoiceDocumentItemPricingElementDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInvoiceDocumentItemPricingElementDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_invoice_document_item_pricing_element_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInvoiceDocumentItemPricingElementDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformInvoiceDocumentItemPricingElementDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformInvoiceDocumentItemPricingElementDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformInvoiceDocumentItemPricingElementDatum(ctx, exec, o.InvoiceDocument, o.InvoiceDocumentItem, o.PricingProcedureCounter)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformInvoiceDocumentItemPricingElementDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformInvoiceDocumentItemPricingElementDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInvoiceDocumentItemPricingElementDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_invoice_document_item_pricing_element_data`.* FROM `data_platform_invoice_document_item_pricing_element_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInvoiceDocumentItemPricingElementDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformInvoiceDocumentItemPricingElementDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformInvoiceDocumentItemPricingElementDatumExists checks if the DataPlatformInvoiceDocumentItemPricingElementDatum row exists.
func DataPlatformInvoiceDocumentItemPricingElementDatumExists(ctx context.Context, exec boil.ContextExecutor, invoiceDocument int, invoiceDocumentItem int, pricingProcedureCounter int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_invoice_document_item_pricing_element_data` where `InvoiceDocument`=? AND `InvoiceDocumentItem`=? AND `PricingProcedureCounter`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, invoiceDocument, invoiceDocumentItem, pricingProcedureCounter)
	}
	row := exec.QueryRowContext(ctx, sql, invoiceDocument, invoiceDocumentItem, pricingProcedureCounter)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_invoice_document_item_pricing_element_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformInvoiceDocumentItemPricingElementDatum row exists.
func (o *DataPlatformInvoiceDocumentItemPricingElementDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformInvoiceDocumentItemPricingElementDatumExists(ctx, exec, o.InvoiceDocument, o.InvoiceDocumentItem, o.PricingProcedureCounter)
}
