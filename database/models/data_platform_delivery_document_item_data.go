// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformDeliveryDocumentItemDatum is an object representing the database table.
type DataPlatformDeliveryDocumentItemDatum struct {
	DeliveryDocument                              int          `boil:"DeliveryDocument" json:"DeliveryDocument" toml:"DeliveryDocument" yaml:"DeliveryDocument"`
	DeliveryDocumentItem                          int          `boil:"DeliveryDocumentItem" json:"DeliveryDocumentItem" toml:"DeliveryDocumentItem" yaml:"DeliveryDocumentItem"`
	DeliveryDocumentItemCategory                  null.String  `boil:"DeliveryDocumentItemCategory" json:"DeliveryDocumentItemCategory,omitempty" toml:"DeliveryDocumentItemCategory" yaml:"DeliveryDocumentItemCategory,omitempty"`
	SupplyChainRelationshipID                     int          `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipDeliveryID             int          `boil:"SupplyChainRelationshipDeliveryID" json:"SupplyChainRelationshipDeliveryID" toml:"SupplyChainRelationshipDeliveryID" yaml:"SupplyChainRelationshipDeliveryID"`
	SupplyChainRelationshipDeliveryPlantID        int          `boil:"SupplyChainRelationshipDeliveryPlantID" json:"SupplyChainRelationshipDeliveryPlantID" toml:"SupplyChainRelationshipDeliveryPlantID" yaml:"SupplyChainRelationshipDeliveryPlantID"`
	SupplyChainRelationshipStockConfPlantID       int          `boil:"SupplyChainRelationshipStockConfPlantID" json:"SupplyChainRelationshipStockConfPlantID" toml:"SupplyChainRelationshipStockConfPlantID" yaml:"SupplyChainRelationshipStockConfPlantID"`
	SupplyChainRelationshipProductionPlantID      int          `boil:"SupplyChainRelationshipProductionPlantID" json:"SupplyChainRelationshipProductionPlantID" toml:"SupplyChainRelationshipProductionPlantID" yaml:"SupplyChainRelationshipProductionPlantID"`
	SupplyChainRelationshipBillingID              null.Int     `boil:"SupplyChainRelationshipBillingID" json:"SupplyChainRelationshipBillingID,omitempty" toml:"SupplyChainRelationshipBillingID" yaml:"SupplyChainRelationshipBillingID,omitempty"`
	SupplyChainRelationshipPaymentID              null.Int     `boil:"SupplyChainRelationshipPaymentID" json:"SupplyChainRelationshipPaymentID,omitempty" toml:"SupplyChainRelationshipPaymentID" yaml:"SupplyChainRelationshipPaymentID,omitempty"`
	Buyer                                         int          `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                                        int          `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	DeliverToParty                                int          `boil:"DeliverToParty" json:"DeliverToParty" toml:"DeliverToParty" yaml:"DeliverToParty"`
	DeliverFromParty                              int          `boil:"DeliverFromParty" json:"DeliverFromParty" toml:"DeliverFromParty" yaml:"DeliverFromParty"`
	DeliverToPlant                                string       `boil:"DeliverToPlant" json:"DeliverToPlant" toml:"DeliverToPlant" yaml:"DeliverToPlant"`
	DeliverFromPlant                              string       `boil:"DeliverFromPlant" json:"DeliverFromPlant" toml:"DeliverFromPlant" yaml:"DeliverFromPlant"`
	BillToParty                                   null.Int     `boil:"BillToParty" json:"BillToParty,omitempty" toml:"BillToParty" yaml:"BillToParty,omitempty"`
	BillFromParty                                 null.Int     `boil:"BillFromParty" json:"BillFromParty,omitempty" toml:"BillFromParty" yaml:"BillFromParty,omitempty"`
	BillToCountry                                 null.String  `boil:"BillToCountry" json:"BillToCountry,omitempty" toml:"BillToCountry" yaml:"BillToCountry,omitempty"`
	BillFromCountry                               null.String  `boil:"BillFromCountry" json:"BillFromCountry,omitempty" toml:"BillFromCountry" yaml:"BillFromCountry,omitempty"`
	Payer                                         null.Int     `boil:"Payer" json:"Payer,omitempty" toml:"Payer" yaml:"Payer,omitempty"`
	Payee                                         null.Int     `boil:"Payee" json:"Payee,omitempty" toml:"Payee" yaml:"Payee,omitempty"`
	DeliverToPlantStorageLocation                 null.String  `boil:"DeliverToPlantStorageLocation" json:"DeliverToPlantStorageLocation,omitempty" toml:"DeliverToPlantStorageLocation" yaml:"DeliverToPlantStorageLocation,omitempty"`
	ProductIsBatchManagedInDeliverToPlant         null.Bool    `boil:"ProductIsBatchManagedInDeliverToPlant" json:"ProductIsBatchManagedInDeliverToPlant,omitempty" toml:"ProductIsBatchManagedInDeliverToPlant" yaml:"ProductIsBatchManagedInDeliverToPlant,omitempty"`
	BatchMgmtPolicyInDeliverToPlant               null.String  `boil:"BatchMgmtPolicyInDeliverToPlant" json:"BatchMgmtPolicyInDeliverToPlant,omitempty" toml:"BatchMgmtPolicyInDeliverToPlant" yaml:"BatchMgmtPolicyInDeliverToPlant,omitempty"`
	DeliverToPlantBatch                           null.String  `boil:"DeliverToPlantBatch" json:"DeliverToPlantBatch,omitempty" toml:"DeliverToPlantBatch" yaml:"DeliverToPlantBatch,omitempty"`
	DeliverToPlantBatchValidityStartDate          null.String  `boil:"DeliverToPlantBatchValidityStartDate" json:"DeliverToPlantBatchValidityStartDate,omitempty" toml:"DeliverToPlantBatchValidityStartDate" yaml:"DeliverToPlantBatchValidityStartDate,omitempty"`
	DeliverToPlantBatchValidityStartTime          null.String  `boil:"DeliverToPlantBatchValidityStartTime" json:"DeliverToPlantBatchValidityStartTime,omitempty" toml:"DeliverToPlantBatchValidityStartTime" yaml:"DeliverToPlantBatchValidityStartTime,omitempty"`
	DeliverToPlantBatchValidityEndDate            null.String  `boil:"DeliverToPlantBatchValidityEndDate" json:"DeliverToPlantBatchValidityEndDate,omitempty" toml:"DeliverToPlantBatchValidityEndDate" yaml:"DeliverToPlantBatchValidityEndDate,omitempty"`
	DeliverToPlantBatchValidityEndTime            null.String  `boil:"DeliverToPlantBatchValidityEndTime" json:"DeliverToPlantBatchValidityEndTime,omitempty" toml:"DeliverToPlantBatchValidityEndTime" yaml:"DeliverToPlantBatchValidityEndTime,omitempty"`
	DeliverFromPlantStorageLocation               null.String  `boil:"DeliverFromPlantStorageLocation" json:"DeliverFromPlantStorageLocation,omitempty" toml:"DeliverFromPlantStorageLocation" yaml:"DeliverFromPlantStorageLocation,omitempty"`
	ProductIsBatchManagedInDeliverFromPlant       null.Bool    `boil:"ProductIsBatchManagedInDeliverFromPlant" json:"ProductIsBatchManagedInDeliverFromPlant,omitempty" toml:"ProductIsBatchManagedInDeliverFromPlant" yaml:"ProductIsBatchManagedInDeliverFromPlant,omitempty"`
	BatchMgmtPolicyInDeliverFromPlant             null.String  `boil:"BatchMgmtPolicyInDeliverFromPlant" json:"BatchMgmtPolicyInDeliverFromPlant,omitempty" toml:"BatchMgmtPolicyInDeliverFromPlant" yaml:"BatchMgmtPolicyInDeliverFromPlant,omitempty"`
	DeliverFromPlantBatch                         null.String  `boil:"DeliverFromPlantBatch" json:"DeliverFromPlantBatch,omitempty" toml:"DeliverFromPlantBatch" yaml:"DeliverFromPlantBatch,omitempty"`
	DeliverFromPlantBatchValidityStartDate        null.String  `boil:"DeliverFromPlantBatchValidityStartDate" json:"DeliverFromPlantBatchValidityStartDate,omitempty" toml:"DeliverFromPlantBatchValidityStartDate" yaml:"DeliverFromPlantBatchValidityStartDate,omitempty"`
	DeliverFromPlantBatchValidityStartTime        null.String  `boil:"DeliverFromPlantBatchValidityStartTime" json:"DeliverFromPlantBatchValidityStartTime,omitempty" toml:"DeliverFromPlantBatchValidityStartTime" yaml:"DeliverFromPlantBatchValidityStartTime,omitempty"`
	DeliverFromPlantBatchValidityEndDate          null.String  `boil:"DeliverFromPlantBatchValidityEndDate" json:"DeliverFromPlantBatchValidityEndDate,omitempty" toml:"DeliverFromPlantBatchValidityEndDate" yaml:"DeliverFromPlantBatchValidityEndDate,omitempty"`
	DeliverFromPlantBatchValidityEndTime          null.String  `boil:"DeliverFromPlantBatchValidityEndTime" json:"DeliverFromPlantBatchValidityEndTime,omitempty" toml:"DeliverFromPlantBatchValidityEndTime" yaml:"DeliverFromPlantBatchValidityEndTime,omitempty"`
	StockConfirmationBusinessPartner              null.Int     `boil:"StockConfirmationBusinessPartner" json:"StockConfirmationBusinessPartner,omitempty" toml:"StockConfirmationBusinessPartner" yaml:"StockConfirmationBusinessPartner,omitempty"`
	StockConfirmationPlant                        null.String  `boil:"StockConfirmationPlant" json:"StockConfirmationPlant,omitempty" toml:"StockConfirmationPlant" yaml:"StockConfirmationPlant,omitempty"`
	ProductIsBatchManagedInStockConfirmationPlant null.Bool    `boil:"ProductIsBatchManagedInStockConfirmationPlant" json:"ProductIsBatchManagedInStockConfirmationPlant,omitempty" toml:"ProductIsBatchManagedInStockConfirmationPlant" yaml:"ProductIsBatchManagedInStockConfirmationPlant,omitempty"`
	BatchMgmtPolicyInStockConfirmationPlant       null.String  `boil:"BatchMgmtPolicyInStockConfirmationPlant" json:"BatchMgmtPolicyInStockConfirmationPlant,omitempty" toml:"BatchMgmtPolicyInStockConfirmationPlant" yaml:"BatchMgmtPolicyInStockConfirmationPlant,omitempty"`
	StockConfirmationPlantBatch                   null.String  `boil:"StockConfirmationPlantBatch" json:"StockConfirmationPlantBatch,omitempty" toml:"StockConfirmationPlantBatch" yaml:"StockConfirmationPlantBatch,omitempty"`
	StockConfirmationPlantBatchValidityStartDate  null.String  `boil:"StockConfirmationPlantBatchValidityStartDate" json:"StockConfirmationPlantBatchValidityStartDate,omitempty" toml:"StockConfirmationPlantBatchValidityStartDate" yaml:"StockConfirmationPlantBatchValidityStartDate,omitempty"`
	StockConfirmationPlantBatchValidityStartTime  null.String  `boil:"StockConfirmationPlantBatchValidityStartTime" json:"StockConfirmationPlantBatchValidityStartTime,omitempty" toml:"StockConfirmationPlantBatchValidityStartTime" yaml:"StockConfirmationPlantBatchValidityStartTime,omitempty"`
	StockConfirmationPlantBatchValidityEndDate    null.String  `boil:"StockConfirmationPlantBatchValidityEndDate" json:"StockConfirmationPlantBatchValidityEndDate,omitempty" toml:"StockConfirmationPlantBatchValidityEndDate" yaml:"StockConfirmationPlantBatchValidityEndDate,omitempty"`
	StockConfirmationPlantBatchValidityEndTime    null.String  `boil:"StockConfirmationPlantBatchValidityEndTime" json:"StockConfirmationPlantBatchValidityEndTime,omitempty" toml:"StockConfirmationPlantBatchValidityEndTime" yaml:"StockConfirmationPlantBatchValidityEndTime,omitempty"`
	StockConfirmationPolicy                       null.String  `boil:"StockConfirmationPolicy" json:"StockConfirmationPolicy,omitempty" toml:"StockConfirmationPolicy" yaml:"StockConfirmationPolicy,omitempty"`
	StockConfirmationStatus                       null.String  `boil:"StockConfirmationStatus" json:"StockConfirmationStatus,omitempty" toml:"StockConfirmationStatus" yaml:"StockConfirmationStatus,omitempty"`
	ProductionPlantBusinessPartner                null.Int     `boil:"ProductionPlantBusinessPartner" json:"ProductionPlantBusinessPartner,omitempty" toml:"ProductionPlantBusinessPartner" yaml:"ProductionPlantBusinessPartner,omitempty"`
	ProductionPlant                               null.String  `boil:"ProductionPlant" json:"ProductionPlant,omitempty" toml:"ProductionPlant" yaml:"ProductionPlant,omitempty"`
	ProductionPlantStorageLocation                null.String  `boil:"ProductionPlantStorageLocation" json:"ProductionPlantStorageLocation,omitempty" toml:"ProductionPlantStorageLocation" yaml:"ProductionPlantStorageLocation,omitempty"`
	ProductIsBatchManagedInProductionPlant        null.Bool    `boil:"ProductIsBatchManagedInProductionPlant" json:"ProductIsBatchManagedInProductionPlant,omitempty" toml:"ProductIsBatchManagedInProductionPlant" yaml:"ProductIsBatchManagedInProductionPlant,omitempty"`
	BatchMgmtPolicyInProductionPlant              null.String  `boil:"BatchMgmtPolicyInProductionPlant" json:"BatchMgmtPolicyInProductionPlant,omitempty" toml:"BatchMgmtPolicyInProductionPlant" yaml:"BatchMgmtPolicyInProductionPlant,omitempty"`
	ProductionPlantBatch                          null.String  `boil:"ProductionPlantBatch" json:"ProductionPlantBatch,omitempty" toml:"ProductionPlantBatch" yaml:"ProductionPlantBatch,omitempty"`
	ProductionPlantBatchValidityStartDate         null.String  `boil:"ProductionPlantBatchValidityStartDate" json:"ProductionPlantBatchValidityStartDate,omitempty" toml:"ProductionPlantBatchValidityStartDate" yaml:"ProductionPlantBatchValidityStartDate,omitempty"`
	ProductionPlantBatchValidityStartTime         null.String  `boil:"ProductionPlantBatchValidityStartTime" json:"ProductionPlantBatchValidityStartTime,omitempty" toml:"ProductionPlantBatchValidityStartTime" yaml:"ProductionPlantBatchValidityStartTime,omitempty"`
	ProductionPlantBatchValidityEndDate           null.String  `boil:"ProductionPlantBatchValidityEndDate" json:"ProductionPlantBatchValidityEndDate,omitempty" toml:"ProductionPlantBatchValidityEndDate" yaml:"ProductionPlantBatchValidityEndDate,omitempty"`
	ProductionPlantBatchValidityEndTime           null.String  `boil:"ProductionPlantBatchValidityEndTime" json:"ProductionPlantBatchValidityEndTime,omitempty" toml:"ProductionPlantBatchValidityEndTime" yaml:"ProductionPlantBatchValidityEndTime,omitempty"`
	DeliveryDocumentItemText                      null.String  `boil:"DeliveryDocumentItemText" json:"DeliveryDocumentItemText,omitempty" toml:"DeliveryDocumentItemText" yaml:"DeliveryDocumentItemText,omitempty"`
	DeliveryDocumentItemTextByBuyer               string       `boil:"DeliveryDocumentItemTextByBuyer" json:"DeliveryDocumentItemTextByBuyer" toml:"DeliveryDocumentItemTextByBuyer" yaml:"DeliveryDocumentItemTextByBuyer"`
	DeliveryDocumentItemTextBySeller              string       `boil:"DeliveryDocumentItemTextBySeller" json:"DeliveryDocumentItemTextBySeller" toml:"DeliveryDocumentItemTextBySeller" yaml:"DeliveryDocumentItemTextBySeller"`
	Product                                       null.String  `boil:"Product" json:"Product,omitempty" toml:"Product" yaml:"Product,omitempty"`
	ProductStandardID                             null.String  `boil:"ProductStandardID" json:"ProductStandardID,omitempty" toml:"ProductStandardID" yaml:"ProductStandardID,omitempty"`
	ProductGroup                                  null.String  `boil:"ProductGroup" json:"ProductGroup,omitempty" toml:"ProductGroup" yaml:"ProductGroup,omitempty"`
	BaseUnit                                      null.String  `boil:"BaseUnit" json:"BaseUnit,omitempty" toml:"BaseUnit" yaml:"BaseUnit,omitempty"`
	OriginalQuantityInBaseUnit                    null.Float32 `boil:"OriginalQuantityInBaseUnit" json:"OriginalQuantityInBaseUnit,omitempty" toml:"OriginalQuantityInBaseUnit" yaml:"OriginalQuantityInBaseUnit,omitempty"`
	DeliveryUnit                                  null.String  `boil:"DeliveryUnit" json:"DeliveryUnit,omitempty" toml:"DeliveryUnit" yaml:"DeliveryUnit,omitempty"`
	PlannedGoodsIssueDate                         null.String  `boil:"PlannedGoodsIssueDate" json:"PlannedGoodsIssueDate,omitempty" toml:"PlannedGoodsIssueDate" yaml:"PlannedGoodsIssueDate,omitempty"`
	PlannedGoodsIssueTime                         null.String  `boil:"PlannedGoodsIssueTime" json:"PlannedGoodsIssueTime,omitempty" toml:"PlannedGoodsIssueTime" yaml:"PlannedGoodsIssueTime,omitempty"`
	PlannedGoodsReceiptDate                       null.String  `boil:"PlannedGoodsReceiptDate" json:"PlannedGoodsReceiptDate,omitempty" toml:"PlannedGoodsReceiptDate" yaml:"PlannedGoodsReceiptDate,omitempty"`
	PlannedGoodsReceiptTime                       null.String  `boil:"PlannedGoodsReceiptTime" json:"PlannedGoodsReceiptTime,omitempty" toml:"PlannedGoodsReceiptTime" yaml:"PlannedGoodsReceiptTime,omitempty"`
	PlannedGoodsIssueQuantity                     null.Float32 `boil:"PlannedGoodsIssueQuantity" json:"PlannedGoodsIssueQuantity,omitempty" toml:"PlannedGoodsIssueQuantity" yaml:"PlannedGoodsIssueQuantity,omitempty"`
	PlannedGoodsIssueQtyInBaseUnit                null.Float32 `boil:"PlannedGoodsIssueQtyInBaseUnit" json:"PlannedGoodsIssueQtyInBaseUnit,omitempty" toml:"PlannedGoodsIssueQtyInBaseUnit" yaml:"PlannedGoodsIssueQtyInBaseUnit,omitempty"`
	PlannedGoodsReceiptQuantity                   null.Float32 `boil:"PlannedGoodsReceiptQuantity" json:"PlannedGoodsReceiptQuantity,omitempty" toml:"PlannedGoodsReceiptQuantity" yaml:"PlannedGoodsReceiptQuantity,omitempty"`
	PlannedGoodsReceiptQtyInBaseUnit              null.Float32 `boil:"PlannedGoodsReceiptQtyInBaseUnit" json:"PlannedGoodsReceiptQtyInBaseUnit,omitempty" toml:"PlannedGoodsReceiptQtyInBaseUnit" yaml:"PlannedGoodsReceiptQtyInBaseUnit,omitempty"`
	ActualGoodsIssueDate                          null.String  `boil:"ActualGoodsIssueDate" json:"ActualGoodsIssueDate,omitempty" toml:"ActualGoodsIssueDate" yaml:"ActualGoodsIssueDate,omitempty"`
	ActualGoodsIssueTime                          null.String  `boil:"ActualGoodsIssueTime" json:"ActualGoodsIssueTime,omitempty" toml:"ActualGoodsIssueTime" yaml:"ActualGoodsIssueTime,omitempty"`
	ActualGoodsReceiptDate                        null.String  `boil:"ActualGoodsReceiptDate" json:"ActualGoodsReceiptDate,omitempty" toml:"ActualGoodsReceiptDate" yaml:"ActualGoodsReceiptDate,omitempty"`
	ActualGoodsReceiptTime                        null.String  `boil:"ActualGoodsReceiptTime" json:"ActualGoodsReceiptTime,omitempty" toml:"ActualGoodsReceiptTime" yaml:"ActualGoodsReceiptTime,omitempty"`
	ActualGoodsIssueQuantity                      null.Float32 `boil:"ActualGoodsIssueQuantity" json:"ActualGoodsIssueQuantity,omitempty" toml:"ActualGoodsIssueQuantity" yaml:"ActualGoodsIssueQuantity,omitempty"`
	ActualGoodsIssueQtyInBaseUnit                 null.Float32 `boil:"ActualGoodsIssueQtyInBaseUnit" json:"ActualGoodsIssueQtyInBaseUnit,omitempty" toml:"ActualGoodsIssueQtyInBaseUnit" yaml:"ActualGoodsIssueQtyInBaseUnit,omitempty"`
	ActualGoodsReceiptQuantity                    null.Float32 `boil:"ActualGoodsReceiptQuantity" json:"ActualGoodsReceiptQuantity,omitempty" toml:"ActualGoodsReceiptQuantity" yaml:"ActualGoodsReceiptQuantity,omitempty"`
	ActualGoodsReceiptQtyInBaseUnit               null.Float32 `boil:"ActualGoodsReceiptQtyInBaseUnit" json:"ActualGoodsReceiptQtyInBaseUnit,omitempty" toml:"ActualGoodsReceiptQtyInBaseUnit" yaml:"ActualGoodsReceiptQtyInBaseUnit,omitempty"`
	CreationDate                                  null.String  `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	CreationTime                                  null.String  `boil:"CreationTime" json:"CreationTime,omitempty" toml:"CreationTime" yaml:"CreationTime,omitempty"`
	LastChangeDate                                null.String  `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	LastChangeTime                                null.String  `boil:"LastChangeTime" json:"LastChangeTime,omitempty" toml:"LastChangeTime" yaml:"LastChangeTime,omitempty"`
	ItemBillingStatus                             null.String  `boil:"ItemBillingStatus" json:"ItemBillingStatus,omitempty" toml:"ItemBillingStatus" yaml:"ItemBillingStatus,omitempty"`
	ItemCompleteDeliveryIsDefined                 null.Bool    `boil:"ItemCompleteDeliveryIsDefined" json:"ItemCompleteDeliveryIsDefined,omitempty" toml:"ItemCompleteDeliveryIsDefined" yaml:"ItemCompleteDeliveryIsDefined,omitempty"`
	ItemGrossWeight                               null.Float32 `boil:"ItemGrossWeight" json:"ItemGrossWeight,omitempty" toml:"ItemGrossWeight" yaml:"ItemGrossWeight,omitempty"`
	ItemNetWeight                                 null.Float32 `boil:"ItemNetWeight" json:"ItemNetWeight,omitempty" toml:"ItemNetWeight" yaml:"ItemNetWeight,omitempty"`
	ItemWeightUnit                                null.String  `boil:"ItemWeightUnit" json:"ItemWeightUnit,omitempty" toml:"ItemWeightUnit" yaml:"ItemWeightUnit,omitempty"`
	InternalCapacityQuantity                      null.Float32 `boil:"InternalCapacityQuantity" json:"InternalCapacityQuantity,omitempty" toml:"InternalCapacityQuantity" yaml:"InternalCapacityQuantity,omitempty"`
	InternalCapacityQuantityUnit                  null.String  `boil:"InternalCapacityQuantityUnit" json:"InternalCapacityQuantityUnit,omitempty" toml:"InternalCapacityQuantityUnit" yaml:"InternalCapacityQuantityUnit,omitempty"`
	ItemIsBillingRelevant                         null.Bool    `boil:"ItemIsBillingRelevant" json:"ItemIsBillingRelevant,omitempty" toml:"ItemIsBillingRelevant" yaml:"ItemIsBillingRelevant,omitempty"`
	NetAmount                                     null.Float32 `boil:"NetAmount" json:"NetAmount,omitempty" toml:"NetAmount" yaml:"NetAmount,omitempty"`
	TaxAmount                                     null.Float32 `boil:"TaxAmount" json:"TaxAmount,omitempty" toml:"TaxAmount" yaml:"TaxAmount,omitempty"`
	GrossAmount                                   null.Float32 `boil:"GrossAmount" json:"GrossAmount,omitempty" toml:"GrossAmount" yaml:"GrossAmount,omitempty"`
	OrderID                                       null.Int     `boil:"OrderID" json:"OrderID,omitempty" toml:"OrderID" yaml:"OrderID,omitempty"`
	OrderItem                                     null.Int     `boil:"OrderItem" json:"OrderItem,omitempty" toml:"OrderItem" yaml:"OrderItem,omitempty"`
	OrderType                                     null.String  `boil:"OrderType" json:"OrderType,omitempty" toml:"OrderType" yaml:"OrderType,omitempty"`
	ContractType                                  null.String  `boil:"ContractType" json:"ContractType,omitempty" toml:"ContractType" yaml:"ContractType,omitempty"`
	OrderValidityStartDate                        null.String  `boil:"OrderValidityStartDate" json:"OrderValidityStartDate,omitempty" toml:"OrderValidityStartDate" yaml:"OrderValidityStartDate,omitempty"`
	OrderValidityEndDate                          null.String  `boil:"OrderValidityEndDate" json:"OrderValidityEndDate,omitempty" toml:"OrderValidityEndDate" yaml:"OrderValidityEndDate,omitempty"`
	PaymentTerms                                  null.String  `boil:"PaymentTerms" json:"PaymentTerms,omitempty" toml:"PaymentTerms" yaml:"PaymentTerms,omitempty"`
	DueCalculationBaseDate                        null.String  `boil:"DueCalculationBaseDate" json:"DueCalculationBaseDate,omitempty" toml:"DueCalculationBaseDate" yaml:"DueCalculationBaseDate,omitempty"`
	PaymentDueDate                                null.String  `boil:"PaymentDueDate" json:"PaymentDueDate,omitempty" toml:"PaymentDueDate" yaml:"PaymentDueDate,omitempty"`
	NetPaymentDays                                null.Int     `boil:"NetPaymentDays" json:"NetPaymentDays,omitempty" toml:"NetPaymentDays" yaml:"NetPaymentDays,omitempty"`
	PaymentMethod                                 null.String  `boil:"PaymentMethod" json:"PaymentMethod,omitempty" toml:"PaymentMethod" yaml:"PaymentMethod,omitempty"`
	InvoicePeriodStartDate                        null.String  `boil:"InvoicePeriodStartDate" json:"InvoicePeriodStartDate,omitempty" toml:"InvoicePeriodStartDate" yaml:"InvoicePeriodStartDate,omitempty"`
	InvoicePeriodEndDate                          null.String  `boil:"InvoicePeriodEndDate" json:"InvoicePeriodEndDate,omitempty" toml:"InvoicePeriodEndDate" yaml:"InvoicePeriodEndDate,omitempty"`
	ConfirmedDeliveryDate                         null.String  `boil:"ConfirmedDeliveryDate" json:"ConfirmedDeliveryDate,omitempty" toml:"ConfirmedDeliveryDate" yaml:"ConfirmedDeliveryDate,omitempty"`
	Project                                       null.String  `boil:"Project" json:"Project,omitempty" toml:"Project" yaml:"Project,omitempty"`
	ReferenceDocument                             null.Int     `boil:"ReferenceDocument" json:"ReferenceDocument,omitempty" toml:"ReferenceDocument" yaml:"ReferenceDocument,omitempty"`
	ReferenceDocumentItem                         null.Int     `boil:"ReferenceDocumentItem" json:"ReferenceDocumentItem,omitempty" toml:"ReferenceDocumentItem" yaml:"ReferenceDocumentItem,omitempty"`
	TransactionTaxClassification                  string       `boil:"TransactionTaxClassification" json:"TransactionTaxClassification" toml:"TransactionTaxClassification" yaml:"TransactionTaxClassification"`
	ProductTaxClassificationBillToCountry         string       `boil:"ProductTaxClassificationBillToCountry" json:"ProductTaxClassificationBillToCountry" toml:"ProductTaxClassificationBillToCountry" yaml:"ProductTaxClassificationBillToCountry"`
	ProductTaxClassificationBillFromCountry       string       `boil:"ProductTaxClassificationBillFromCountry" json:"ProductTaxClassificationBillFromCountry" toml:"ProductTaxClassificationBillFromCountry" yaml:"ProductTaxClassificationBillFromCountry"`
	DefinedTaxClassification                      string       `boil:"DefinedTaxClassification" json:"DefinedTaxClassification" toml:"DefinedTaxClassification" yaml:"DefinedTaxClassification"`
	AccountAssignmentGroup                        string       `boil:"AccountAssignmentGroup" json:"AccountAssignmentGroup" toml:"AccountAssignmentGroup" yaml:"AccountAssignmentGroup"`
	ProductAccountAssignmentGroup                 string       `boil:"ProductAccountAssignmentGroup" json:"ProductAccountAssignmentGroup" toml:"ProductAccountAssignmentGroup" yaml:"ProductAccountAssignmentGroup"`
	TaxCode                                       null.String  `boil:"TaxCode" json:"TaxCode,omitempty" toml:"TaxCode" yaml:"TaxCode,omitempty"`
	TaxRate                                       null.Float32 `boil:"TaxRate" json:"TaxRate,omitempty" toml:"TaxRate" yaml:"TaxRate,omitempty"`
	CountryOfOrigin                               null.String  `boil:"CountryOfOrigin" json:"CountryOfOrigin,omitempty" toml:"CountryOfOrigin" yaml:"CountryOfOrigin,omitempty"`
	CountryOfOriginLanguage                       null.String  `boil:"CountryOfOriginLanguage" json:"CountryOfOriginLanguage,omitempty" toml:"CountryOfOriginLanguage" yaml:"CountryOfOriginLanguage,omitempty"`
	ItemDeliveryBlockStatus                       null.Bool    `boil:"ItemDeliveryBlockStatus" json:"ItemDeliveryBlockStatus,omitempty" toml:"ItemDeliveryBlockStatus" yaml:"ItemDeliveryBlockStatus,omitempty"`
	ItemIssuingBlockStatus                        null.Bool    `boil:"ItemIssuingBlockStatus" json:"ItemIssuingBlockStatus,omitempty" toml:"ItemIssuingBlockStatus" yaml:"ItemIssuingBlockStatus,omitempty"`
	ItemReceivingBlockStatus                      null.Bool    `boil:"ItemReceivingBlockStatus" json:"ItemReceivingBlockStatus,omitempty" toml:"ItemReceivingBlockStatus" yaml:"ItemReceivingBlockStatus,omitempty"`
	ItemBillingBlockStatus                        null.Bool    `boil:"ItemBillingBlockStatus" json:"ItemBillingBlockStatus,omitempty" toml:"ItemBillingBlockStatus" yaml:"ItemBillingBlockStatus,omitempty"`
	IsCancelled                                   null.Bool    `boil:"IsCancelled" json:"IsCancelled,omitempty" toml:"IsCancelled" yaml:"IsCancelled,omitempty"`
	IsMarkedForDeletion                           null.Bool    `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`
	ProductionOrder                               null.Int     `boil:"ProductionOrder" json:"ProductionOrder,omitempty" toml:"ProductionOrder" yaml:"ProductionOrder,omitempty"`
	ProductionOrderItem                           null.Int     `boil:"ProductionOrderItem" json:"ProductionOrderItem,omitempty" toml:"ProductionOrderItem" yaml:"ProductionOrderItem,omitempty"`
	Operations                                    null.Int     `boil:"Operations" json:"Operations,omitempty" toml:"Operations" yaml:"Operations,omitempty"`
	OperationsItem                                null.Int     `boil:"OperationsItem" json:"OperationsItem,omitempty" toml:"OperationsItem" yaml:"OperationsItem,omitempty"`
	BillOfMaterial                                null.Int     `boil:"BillOfMaterial" json:"BillOfMaterial,omitempty" toml:"BillOfMaterial" yaml:"BillOfMaterial,omitempty"`
	BillOfMaterialItem                            null.Int     `boil:"BillOfMaterialItem" json:"BillOfMaterialItem,omitempty" toml:"BillOfMaterialItem" yaml:"BillOfMaterialItem,omitempty"`

	R *dataPlatformDeliveryDocumentItemDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformDeliveryDocumentItemDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformDeliveryDocumentItemDatumColumns = struct {
	DeliveryDocument                              string
	DeliveryDocumentItem                          string
	DeliveryDocumentItemCategory                  string
	SupplyChainRelationshipID                     string
	SupplyChainRelationshipDeliveryID             string
	SupplyChainRelationshipDeliveryPlantID        string
	SupplyChainRelationshipStockConfPlantID       string
	SupplyChainRelationshipProductionPlantID      string
	SupplyChainRelationshipBillingID              string
	SupplyChainRelationshipPaymentID              string
	Buyer                                         string
	Seller                                        string
	DeliverToParty                                string
	DeliverFromParty                              string
	DeliverToPlant                                string
	DeliverFromPlant                              string
	BillToParty                                   string
	BillFromParty                                 string
	BillToCountry                                 string
	BillFromCountry                               string
	Payer                                         string
	Payee                                         string
	DeliverToPlantStorageLocation                 string
	ProductIsBatchManagedInDeliverToPlant         string
	BatchMgmtPolicyInDeliverToPlant               string
	DeliverToPlantBatch                           string
	DeliverToPlantBatchValidityStartDate          string
	DeliverToPlantBatchValidityStartTime          string
	DeliverToPlantBatchValidityEndDate            string
	DeliverToPlantBatchValidityEndTime            string
	DeliverFromPlantStorageLocation               string
	ProductIsBatchManagedInDeliverFromPlant       string
	BatchMgmtPolicyInDeliverFromPlant             string
	DeliverFromPlantBatch                         string
	DeliverFromPlantBatchValidityStartDate        string
	DeliverFromPlantBatchValidityStartTime        string
	DeliverFromPlantBatchValidityEndDate          string
	DeliverFromPlantBatchValidityEndTime          string
	StockConfirmationBusinessPartner              string
	StockConfirmationPlant                        string
	ProductIsBatchManagedInStockConfirmationPlant string
	BatchMgmtPolicyInStockConfirmationPlant       string
	StockConfirmationPlantBatch                   string
	StockConfirmationPlantBatchValidityStartDate  string
	StockConfirmationPlantBatchValidityStartTime  string
	StockConfirmationPlantBatchValidityEndDate    string
	StockConfirmationPlantBatchValidityEndTime    string
	StockConfirmationPolicy                       string
	StockConfirmationStatus                       string
	ProductionPlantBusinessPartner                string
	ProductionPlant                               string
	ProductionPlantStorageLocation                string
	ProductIsBatchManagedInProductionPlant        string
	BatchMgmtPolicyInProductionPlant              string
	ProductionPlantBatch                          string
	ProductionPlantBatchValidityStartDate         string
	ProductionPlantBatchValidityStartTime         string
	ProductionPlantBatchValidityEndDate           string
	ProductionPlantBatchValidityEndTime           string
	DeliveryDocumentItemText                      string
	DeliveryDocumentItemTextByBuyer               string
	DeliveryDocumentItemTextBySeller              string
	Product                                       string
	ProductStandardID                             string
	ProductGroup                                  string
	BaseUnit                                      string
	OriginalQuantityInBaseUnit                    string
	DeliveryUnit                                  string
	PlannedGoodsIssueDate                         string
	PlannedGoodsIssueTime                         string
	PlannedGoodsReceiptDate                       string
	PlannedGoodsReceiptTime                       string
	PlannedGoodsIssueQuantity                     string
	PlannedGoodsIssueQtyInBaseUnit                string
	PlannedGoodsReceiptQuantity                   string
	PlannedGoodsReceiptQtyInBaseUnit              string
	ActualGoodsIssueDate                          string
	ActualGoodsIssueTime                          string
	ActualGoodsReceiptDate                        string
	ActualGoodsReceiptTime                        string
	ActualGoodsIssueQuantity                      string
	ActualGoodsIssueQtyInBaseUnit                 string
	ActualGoodsReceiptQuantity                    string
	ActualGoodsReceiptQtyInBaseUnit               string
	CreationDate                                  string
	CreationTime                                  string
	LastChangeDate                                string
	LastChangeTime                                string
	ItemBillingStatus                             string
	ItemCompleteDeliveryIsDefined                 string
	ItemGrossWeight                               string
	ItemNetWeight                                 string
	ItemWeightUnit                                string
	InternalCapacityQuantity                      string
	InternalCapacityQuantityUnit                  string
	ItemIsBillingRelevant                         string
	NetAmount                                     string
	TaxAmount                                     string
	GrossAmount                                   string
	OrderID                                       string
	OrderItem                                     string
	OrderType                                     string
	ContractType                                  string
	OrderValidityStartDate                        string
	OrderValidityEndDate                          string
	PaymentTerms                                  string
	DueCalculationBaseDate                        string
	PaymentDueDate                                string
	NetPaymentDays                                string
	PaymentMethod                                 string
	InvoicePeriodStartDate                        string
	InvoicePeriodEndDate                          string
	ConfirmedDeliveryDate                         string
	Project                                       string
	ReferenceDocument                             string
	ReferenceDocumentItem                         string
	TransactionTaxClassification                  string
	ProductTaxClassificationBillToCountry         string
	ProductTaxClassificationBillFromCountry       string
	DefinedTaxClassification                      string
	AccountAssignmentGroup                        string
	ProductAccountAssignmentGroup                 string
	TaxCode                                       string
	TaxRate                                       string
	CountryOfOrigin                               string
	CountryOfOriginLanguage                       string
	ItemDeliveryBlockStatus                       string
	ItemIssuingBlockStatus                        string
	ItemReceivingBlockStatus                      string
	ItemBillingBlockStatus                        string
	IsCancelled                                   string
	IsMarkedForDeletion                           string
	ProductionOrder                               string
	ProductionOrderItem                           string
	Operations                                    string
	OperationsItem                                string
	BillOfMaterial                                string
	BillOfMaterialItem                            string
}{
	DeliveryDocument:                              "DeliveryDocument",
	DeliveryDocumentItem:                          "DeliveryDocumentItem",
	DeliveryDocumentItemCategory:                  "DeliveryDocumentItemCategory",
	SupplyChainRelationshipID:                     "SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:             "SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:        "SupplyChainRelationshipDeliveryPlantID",
	SupplyChainRelationshipStockConfPlantID:       "SupplyChainRelationshipStockConfPlantID",
	SupplyChainRelationshipProductionPlantID:      "SupplyChainRelationshipProductionPlantID",
	SupplyChainRelationshipBillingID:              "SupplyChainRelationshipBillingID",
	SupplyChainRelationshipPaymentID:              "SupplyChainRelationshipPaymentID",
	Buyer:                                         "Buyer",
	Seller:                                        "Seller",
	DeliverToParty:                                "DeliverToParty",
	DeliverFromParty:                              "DeliverFromParty",
	DeliverToPlant:                                "DeliverToPlant",
	DeliverFromPlant:                              "DeliverFromPlant",
	BillToParty:                                   "BillToParty",
	BillFromParty:                                 "BillFromParty",
	BillToCountry:                                 "BillToCountry",
	BillFromCountry:                               "BillFromCountry",
	Payer:                                         "Payer",
	Payee:                                         "Payee",
	DeliverToPlantStorageLocation:                 "DeliverToPlantStorageLocation",
	ProductIsBatchManagedInDeliverToPlant:         "ProductIsBatchManagedInDeliverToPlant",
	BatchMgmtPolicyInDeliverToPlant:               "BatchMgmtPolicyInDeliverToPlant",
	DeliverToPlantBatch:                           "DeliverToPlantBatch",
	DeliverToPlantBatchValidityStartDate:          "DeliverToPlantBatchValidityStartDate",
	DeliverToPlantBatchValidityStartTime:          "DeliverToPlantBatchValidityStartTime",
	DeliverToPlantBatchValidityEndDate:            "DeliverToPlantBatchValidityEndDate",
	DeliverToPlantBatchValidityEndTime:            "DeliverToPlantBatchValidityEndTime",
	DeliverFromPlantStorageLocation:               "DeliverFromPlantStorageLocation",
	ProductIsBatchManagedInDeliverFromPlant:       "ProductIsBatchManagedInDeliverFromPlant",
	BatchMgmtPolicyInDeliverFromPlant:             "BatchMgmtPolicyInDeliverFromPlant",
	DeliverFromPlantBatch:                         "DeliverFromPlantBatch",
	DeliverFromPlantBatchValidityStartDate:        "DeliverFromPlantBatchValidityStartDate",
	DeliverFromPlantBatchValidityStartTime:        "DeliverFromPlantBatchValidityStartTime",
	DeliverFromPlantBatchValidityEndDate:          "DeliverFromPlantBatchValidityEndDate",
	DeliverFromPlantBatchValidityEndTime:          "DeliverFromPlantBatchValidityEndTime",
	StockConfirmationBusinessPartner:              "StockConfirmationBusinessPartner",
	StockConfirmationPlant:                        "StockConfirmationPlant",
	ProductIsBatchManagedInStockConfirmationPlant: "ProductIsBatchManagedInStockConfirmationPlant",
	BatchMgmtPolicyInStockConfirmationPlant:       "BatchMgmtPolicyInStockConfirmationPlant",
	StockConfirmationPlantBatch:                   "StockConfirmationPlantBatch",
	StockConfirmationPlantBatchValidityStartDate:  "StockConfirmationPlantBatchValidityStartDate",
	StockConfirmationPlantBatchValidityStartTime:  "StockConfirmationPlantBatchValidityStartTime",
	StockConfirmationPlantBatchValidityEndDate:    "StockConfirmationPlantBatchValidityEndDate",
	StockConfirmationPlantBatchValidityEndTime:    "StockConfirmationPlantBatchValidityEndTime",
	StockConfirmationPolicy:                       "StockConfirmationPolicy",
	StockConfirmationStatus:                       "StockConfirmationStatus",
	ProductionPlantBusinessPartner:                "ProductionPlantBusinessPartner",
	ProductionPlant:                               "ProductionPlant",
	ProductionPlantStorageLocation:                "ProductionPlantStorageLocation",
	ProductIsBatchManagedInProductionPlant:        "ProductIsBatchManagedInProductionPlant",
	BatchMgmtPolicyInProductionPlant:              "BatchMgmtPolicyInProductionPlant",
	ProductionPlantBatch:                          "ProductionPlantBatch",
	ProductionPlantBatchValidityStartDate:         "ProductionPlantBatchValidityStartDate",
	ProductionPlantBatchValidityStartTime:         "ProductionPlantBatchValidityStartTime",
	ProductionPlantBatchValidityEndDate:           "ProductionPlantBatchValidityEndDate",
	ProductionPlantBatchValidityEndTime:           "ProductionPlantBatchValidityEndTime",
	DeliveryDocumentItemText:                      "DeliveryDocumentItemText",
	DeliveryDocumentItemTextByBuyer:               "DeliveryDocumentItemTextByBuyer",
	DeliveryDocumentItemTextBySeller:              "DeliveryDocumentItemTextBySeller",
	Product:                                       "Product",
	ProductStandardID:                             "ProductStandardID",
	ProductGroup:                                  "ProductGroup",
	BaseUnit:                                      "BaseUnit",
	OriginalQuantityInBaseUnit:                    "OriginalQuantityInBaseUnit",
	DeliveryUnit:                                  "DeliveryUnit",
	PlannedGoodsIssueDate:                         "PlannedGoodsIssueDate",
	PlannedGoodsIssueTime:                         "PlannedGoodsIssueTime",
	PlannedGoodsReceiptDate:                       "PlannedGoodsReceiptDate",
	PlannedGoodsReceiptTime:                       "PlannedGoodsReceiptTime",
	PlannedGoodsIssueQuantity:                     "PlannedGoodsIssueQuantity",
	PlannedGoodsIssueQtyInBaseUnit:                "PlannedGoodsIssueQtyInBaseUnit",
	PlannedGoodsReceiptQuantity:                   "PlannedGoodsReceiptQuantity",
	PlannedGoodsReceiptQtyInBaseUnit:              "PlannedGoodsReceiptQtyInBaseUnit",
	ActualGoodsIssueDate:                          "ActualGoodsIssueDate",
	ActualGoodsIssueTime:                          "ActualGoodsIssueTime",
	ActualGoodsReceiptDate:                        "ActualGoodsReceiptDate",
	ActualGoodsReceiptTime:                        "ActualGoodsReceiptTime",
	ActualGoodsIssueQuantity:                      "ActualGoodsIssueQuantity",
	ActualGoodsIssueQtyInBaseUnit:                 "ActualGoodsIssueQtyInBaseUnit",
	ActualGoodsReceiptQuantity:                    "ActualGoodsReceiptQuantity",
	ActualGoodsReceiptQtyInBaseUnit:               "ActualGoodsReceiptQtyInBaseUnit",
	CreationDate:                                  "CreationDate",
	CreationTime:                                  "CreationTime",
	LastChangeDate:                                "LastChangeDate",
	LastChangeTime:                                "LastChangeTime",
	ItemBillingStatus:                             "ItemBillingStatus",
	ItemCompleteDeliveryIsDefined:                 "ItemCompleteDeliveryIsDefined",
	ItemGrossWeight:                               "ItemGrossWeight",
	ItemNetWeight:                                 "ItemNetWeight",
	ItemWeightUnit:                                "ItemWeightUnit",
	InternalCapacityQuantity:                      "InternalCapacityQuantity",
	InternalCapacityQuantityUnit:                  "InternalCapacityQuantityUnit",
	ItemIsBillingRelevant:                         "ItemIsBillingRelevant",
	NetAmount:                                     "NetAmount",
	TaxAmount:                                     "TaxAmount",
	GrossAmount:                                   "GrossAmount",
	OrderID:                                       "OrderID",
	OrderItem:                                     "OrderItem",
	OrderType:                                     "OrderType",
	ContractType:                                  "ContractType",
	OrderValidityStartDate:                        "OrderValidityStartDate",
	OrderValidityEndDate:                          "OrderValidityEndDate",
	PaymentTerms:                                  "PaymentTerms",
	DueCalculationBaseDate:                        "DueCalculationBaseDate",
	PaymentDueDate:                                "PaymentDueDate",
	NetPaymentDays:                                "NetPaymentDays",
	PaymentMethod:                                 "PaymentMethod",
	InvoicePeriodStartDate:                        "InvoicePeriodStartDate",
	InvoicePeriodEndDate:                          "InvoicePeriodEndDate",
	ConfirmedDeliveryDate:                         "ConfirmedDeliveryDate",
	Project:                                       "Project",
	ReferenceDocument:                             "ReferenceDocument",
	ReferenceDocumentItem:                         "ReferenceDocumentItem",
	TransactionTaxClassification:                  "TransactionTaxClassification",
	ProductTaxClassificationBillToCountry:         "ProductTaxClassificationBillToCountry",
	ProductTaxClassificationBillFromCountry:       "ProductTaxClassificationBillFromCountry",
	DefinedTaxClassification:                      "DefinedTaxClassification",
	AccountAssignmentGroup:                        "AccountAssignmentGroup",
	ProductAccountAssignmentGroup:                 "ProductAccountAssignmentGroup",
	TaxCode:                                       "TaxCode",
	TaxRate:                                       "TaxRate",
	CountryOfOrigin:                               "CountryOfOrigin",
	CountryOfOriginLanguage:                       "CountryOfOriginLanguage",
	ItemDeliveryBlockStatus:                       "ItemDeliveryBlockStatus",
	ItemIssuingBlockStatus:                        "ItemIssuingBlockStatus",
	ItemReceivingBlockStatus:                      "ItemReceivingBlockStatus",
	ItemBillingBlockStatus:                        "ItemBillingBlockStatus",
	IsCancelled:                                   "IsCancelled",
	IsMarkedForDeletion:                           "IsMarkedForDeletion",
	ProductionOrder:                               "ProductionOrder",
	ProductionOrderItem:                           "ProductionOrderItem",
	Operations:                                    "Operations",
	OperationsItem:                                "OperationsItem",
	BillOfMaterial:                                "BillOfMaterial",
	BillOfMaterialItem:                            "BillOfMaterialItem",
}

var DataPlatformDeliveryDocumentItemDatumTableColumns = struct {
	DeliveryDocument                              string
	DeliveryDocumentItem                          string
	DeliveryDocumentItemCategory                  string
	SupplyChainRelationshipID                     string
	SupplyChainRelationshipDeliveryID             string
	SupplyChainRelationshipDeliveryPlantID        string
	SupplyChainRelationshipStockConfPlantID       string
	SupplyChainRelationshipProductionPlantID      string
	SupplyChainRelationshipBillingID              string
	SupplyChainRelationshipPaymentID              string
	Buyer                                         string
	Seller                                        string
	DeliverToParty                                string
	DeliverFromParty                              string
	DeliverToPlant                                string
	DeliverFromPlant                              string
	BillToParty                                   string
	BillFromParty                                 string
	BillToCountry                                 string
	BillFromCountry                               string
	Payer                                         string
	Payee                                         string
	DeliverToPlantStorageLocation                 string
	ProductIsBatchManagedInDeliverToPlant         string
	BatchMgmtPolicyInDeliverToPlant               string
	DeliverToPlantBatch                           string
	DeliverToPlantBatchValidityStartDate          string
	DeliverToPlantBatchValidityStartTime          string
	DeliverToPlantBatchValidityEndDate            string
	DeliverToPlantBatchValidityEndTime            string
	DeliverFromPlantStorageLocation               string
	ProductIsBatchManagedInDeliverFromPlant       string
	BatchMgmtPolicyInDeliverFromPlant             string
	DeliverFromPlantBatch                         string
	DeliverFromPlantBatchValidityStartDate        string
	DeliverFromPlantBatchValidityStartTime        string
	DeliverFromPlantBatchValidityEndDate          string
	DeliverFromPlantBatchValidityEndTime          string
	StockConfirmationBusinessPartner              string
	StockConfirmationPlant                        string
	ProductIsBatchManagedInStockConfirmationPlant string
	BatchMgmtPolicyInStockConfirmationPlant       string
	StockConfirmationPlantBatch                   string
	StockConfirmationPlantBatchValidityStartDate  string
	StockConfirmationPlantBatchValidityStartTime  string
	StockConfirmationPlantBatchValidityEndDate    string
	StockConfirmationPlantBatchValidityEndTime    string
	StockConfirmationPolicy                       string
	StockConfirmationStatus                       string
	ProductionPlantBusinessPartner                string
	ProductionPlant                               string
	ProductionPlantStorageLocation                string
	ProductIsBatchManagedInProductionPlant        string
	BatchMgmtPolicyInProductionPlant              string
	ProductionPlantBatch                          string
	ProductionPlantBatchValidityStartDate         string
	ProductionPlantBatchValidityStartTime         string
	ProductionPlantBatchValidityEndDate           string
	ProductionPlantBatchValidityEndTime           string
	DeliveryDocumentItemText                      string
	DeliveryDocumentItemTextByBuyer               string
	DeliveryDocumentItemTextBySeller              string
	Product                                       string
	ProductStandardID                             string
	ProductGroup                                  string
	BaseUnit                                      string
	OriginalQuantityInBaseUnit                    string
	DeliveryUnit                                  string
	PlannedGoodsIssueDate                         string
	PlannedGoodsIssueTime                         string
	PlannedGoodsReceiptDate                       string
	PlannedGoodsReceiptTime                       string
	PlannedGoodsIssueQuantity                     string
	PlannedGoodsIssueQtyInBaseUnit                string
	PlannedGoodsReceiptQuantity                   string
	PlannedGoodsReceiptQtyInBaseUnit              string
	ActualGoodsIssueDate                          string
	ActualGoodsIssueTime                          string
	ActualGoodsReceiptDate                        string
	ActualGoodsReceiptTime                        string
	ActualGoodsIssueQuantity                      string
	ActualGoodsIssueQtyInBaseUnit                 string
	ActualGoodsReceiptQuantity                    string
	ActualGoodsReceiptQtyInBaseUnit               string
	CreationDate                                  string
	CreationTime                                  string
	LastChangeDate                                string
	LastChangeTime                                string
	ItemBillingStatus                             string
	ItemCompleteDeliveryIsDefined                 string
	ItemGrossWeight                               string
	ItemNetWeight                                 string
	ItemWeightUnit                                string
	InternalCapacityQuantity                      string
	InternalCapacityQuantityUnit                  string
	ItemIsBillingRelevant                         string
	NetAmount                                     string
	TaxAmount                                     string
	GrossAmount                                   string
	OrderID                                       string
	OrderItem                                     string
	OrderType                                     string
	ContractType                                  string
	OrderValidityStartDate                        string
	OrderValidityEndDate                          string
	PaymentTerms                                  string
	DueCalculationBaseDate                        string
	PaymentDueDate                                string
	NetPaymentDays                                string
	PaymentMethod                                 string
	InvoicePeriodStartDate                        string
	InvoicePeriodEndDate                          string
	ConfirmedDeliveryDate                         string
	Project                                       string
	ReferenceDocument                             string
	ReferenceDocumentItem                         string
	TransactionTaxClassification                  string
	ProductTaxClassificationBillToCountry         string
	ProductTaxClassificationBillFromCountry       string
	DefinedTaxClassification                      string
	AccountAssignmentGroup                        string
	ProductAccountAssignmentGroup                 string
	TaxCode                                       string
	TaxRate                                       string
	CountryOfOrigin                               string
	CountryOfOriginLanguage                       string
	ItemDeliveryBlockStatus                       string
	ItemIssuingBlockStatus                        string
	ItemReceivingBlockStatus                      string
	ItemBillingBlockStatus                        string
	IsCancelled                                   string
	IsMarkedForDeletion                           string
	ProductionOrder                               string
	ProductionOrderItem                           string
	Operations                                    string
	OperationsItem                                string
	BillOfMaterial                                string
	BillOfMaterialItem                            string
}{
	DeliveryDocument:                              "data_platform_delivery_document_item_data.DeliveryDocument",
	DeliveryDocumentItem:                          "data_platform_delivery_document_item_data.DeliveryDocumentItem",
	DeliveryDocumentItemCategory:                  "data_platform_delivery_document_item_data.DeliveryDocumentItemCategory",
	SupplyChainRelationshipID:                     "data_platform_delivery_document_item_data.SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:             "data_platform_delivery_document_item_data.SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:        "data_platform_delivery_document_item_data.SupplyChainRelationshipDeliveryPlantID",
	SupplyChainRelationshipStockConfPlantID:       "data_platform_delivery_document_item_data.SupplyChainRelationshipStockConfPlantID",
	SupplyChainRelationshipProductionPlantID:      "data_platform_delivery_document_item_data.SupplyChainRelationshipProductionPlantID",
	SupplyChainRelationshipBillingID:              "data_platform_delivery_document_item_data.SupplyChainRelationshipBillingID",
	SupplyChainRelationshipPaymentID:              "data_platform_delivery_document_item_data.SupplyChainRelationshipPaymentID",
	Buyer:                                         "data_platform_delivery_document_item_data.Buyer",
	Seller:                                        "data_platform_delivery_document_item_data.Seller",
	DeliverToParty:                                "data_platform_delivery_document_item_data.DeliverToParty",
	DeliverFromParty:                              "data_platform_delivery_document_item_data.DeliverFromParty",
	DeliverToPlant:                                "data_platform_delivery_document_item_data.DeliverToPlant",
	DeliverFromPlant:                              "data_platform_delivery_document_item_data.DeliverFromPlant",
	BillToParty:                                   "data_platform_delivery_document_item_data.BillToParty",
	BillFromParty:                                 "data_platform_delivery_document_item_data.BillFromParty",
	BillToCountry:                                 "data_platform_delivery_document_item_data.BillToCountry",
	BillFromCountry:                               "data_platform_delivery_document_item_data.BillFromCountry",
	Payer:                                         "data_platform_delivery_document_item_data.Payer",
	Payee:                                         "data_platform_delivery_document_item_data.Payee",
	DeliverToPlantStorageLocation:                 "data_platform_delivery_document_item_data.DeliverToPlantStorageLocation",
	ProductIsBatchManagedInDeliverToPlant:         "data_platform_delivery_document_item_data.ProductIsBatchManagedInDeliverToPlant",
	BatchMgmtPolicyInDeliverToPlant:               "data_platform_delivery_document_item_data.BatchMgmtPolicyInDeliverToPlant",
	DeliverToPlantBatch:                           "data_platform_delivery_document_item_data.DeliverToPlantBatch",
	DeliverToPlantBatchValidityStartDate:          "data_platform_delivery_document_item_data.DeliverToPlantBatchValidityStartDate",
	DeliverToPlantBatchValidityStartTime:          "data_platform_delivery_document_item_data.DeliverToPlantBatchValidityStartTime",
	DeliverToPlantBatchValidityEndDate:            "data_platform_delivery_document_item_data.DeliverToPlantBatchValidityEndDate",
	DeliverToPlantBatchValidityEndTime:            "data_platform_delivery_document_item_data.DeliverToPlantBatchValidityEndTime",
	DeliverFromPlantStorageLocation:               "data_platform_delivery_document_item_data.DeliverFromPlantStorageLocation",
	ProductIsBatchManagedInDeliverFromPlant:       "data_platform_delivery_document_item_data.ProductIsBatchManagedInDeliverFromPlant",
	BatchMgmtPolicyInDeliverFromPlant:             "data_platform_delivery_document_item_data.BatchMgmtPolicyInDeliverFromPlant",
	DeliverFromPlantBatch:                         "data_platform_delivery_document_item_data.DeliverFromPlantBatch",
	DeliverFromPlantBatchValidityStartDate:        "data_platform_delivery_document_item_data.DeliverFromPlantBatchValidityStartDate",
	DeliverFromPlantBatchValidityStartTime:        "data_platform_delivery_document_item_data.DeliverFromPlantBatchValidityStartTime",
	DeliverFromPlantBatchValidityEndDate:          "data_platform_delivery_document_item_data.DeliverFromPlantBatchValidityEndDate",
	DeliverFromPlantBatchValidityEndTime:          "data_platform_delivery_document_item_data.DeliverFromPlantBatchValidityEndTime",
	StockConfirmationBusinessPartner:              "data_platform_delivery_document_item_data.StockConfirmationBusinessPartner",
	StockConfirmationPlant:                        "data_platform_delivery_document_item_data.StockConfirmationPlant",
	ProductIsBatchManagedInStockConfirmationPlant: "data_platform_delivery_document_item_data.ProductIsBatchManagedInStockConfirmationPlant",
	BatchMgmtPolicyInStockConfirmationPlant:       "data_platform_delivery_document_item_data.BatchMgmtPolicyInStockConfirmationPlant",
	StockConfirmationPlantBatch:                   "data_platform_delivery_document_item_data.StockConfirmationPlantBatch",
	StockConfirmationPlantBatchValidityStartDate:  "data_platform_delivery_document_item_data.StockConfirmationPlantBatchValidityStartDate",
	StockConfirmationPlantBatchValidityStartTime:  "data_platform_delivery_document_item_data.StockConfirmationPlantBatchValidityStartTime",
	StockConfirmationPlantBatchValidityEndDate:    "data_platform_delivery_document_item_data.StockConfirmationPlantBatchValidityEndDate",
	StockConfirmationPlantBatchValidityEndTime:    "data_platform_delivery_document_item_data.StockConfirmationPlantBatchValidityEndTime",
	StockConfirmationPolicy:                       "data_platform_delivery_document_item_data.StockConfirmationPolicy",
	StockConfirmationStatus:                       "data_platform_delivery_document_item_data.StockConfirmationStatus",
	ProductionPlantBusinessPartner:                "data_platform_delivery_document_item_data.ProductionPlantBusinessPartner",
	ProductionPlant:                               "data_platform_delivery_document_item_data.ProductionPlant",
	ProductionPlantStorageLocation:                "data_platform_delivery_document_item_data.ProductionPlantStorageLocation",
	ProductIsBatchManagedInProductionPlant:        "data_platform_delivery_document_item_data.ProductIsBatchManagedInProductionPlant",
	BatchMgmtPolicyInProductionPlant:              "data_platform_delivery_document_item_data.BatchMgmtPolicyInProductionPlant",
	ProductionPlantBatch:                          "data_platform_delivery_document_item_data.ProductionPlantBatch",
	ProductionPlantBatchValidityStartDate:         "data_platform_delivery_document_item_data.ProductionPlantBatchValidityStartDate",
	ProductionPlantBatchValidityStartTime:         "data_platform_delivery_document_item_data.ProductionPlantBatchValidityStartTime",
	ProductionPlantBatchValidityEndDate:           "data_platform_delivery_document_item_data.ProductionPlantBatchValidityEndDate",
	ProductionPlantBatchValidityEndTime:           "data_platform_delivery_document_item_data.ProductionPlantBatchValidityEndTime",
	DeliveryDocumentItemText:                      "data_platform_delivery_document_item_data.DeliveryDocumentItemText",
	DeliveryDocumentItemTextByBuyer:               "data_platform_delivery_document_item_data.DeliveryDocumentItemTextByBuyer",
	DeliveryDocumentItemTextBySeller:              "data_platform_delivery_document_item_data.DeliveryDocumentItemTextBySeller",
	Product:                                       "data_platform_delivery_document_item_data.Product",
	ProductStandardID:                             "data_platform_delivery_document_item_data.ProductStandardID",
	ProductGroup:                                  "data_platform_delivery_document_item_data.ProductGroup",
	BaseUnit:                                      "data_platform_delivery_document_item_data.BaseUnit",
	OriginalQuantityInBaseUnit:                    "data_platform_delivery_document_item_data.OriginalQuantityInBaseUnit",
	DeliveryUnit:                                  "data_platform_delivery_document_item_data.DeliveryUnit",
	PlannedGoodsIssueDate:                         "data_platform_delivery_document_item_data.PlannedGoodsIssueDate",
	PlannedGoodsIssueTime:                         "data_platform_delivery_document_item_data.PlannedGoodsIssueTime",
	PlannedGoodsReceiptDate:                       "data_platform_delivery_document_item_data.PlannedGoodsReceiptDate",
	PlannedGoodsReceiptTime:                       "data_platform_delivery_document_item_data.PlannedGoodsReceiptTime",
	PlannedGoodsIssueQuantity:                     "data_platform_delivery_document_item_data.PlannedGoodsIssueQuantity",
	PlannedGoodsIssueQtyInBaseUnit:                "data_platform_delivery_document_item_data.PlannedGoodsIssueQtyInBaseUnit",
	PlannedGoodsReceiptQuantity:                   "data_platform_delivery_document_item_data.PlannedGoodsReceiptQuantity",
	PlannedGoodsReceiptQtyInBaseUnit:              "data_platform_delivery_document_item_data.PlannedGoodsReceiptQtyInBaseUnit",
	ActualGoodsIssueDate:                          "data_platform_delivery_document_item_data.ActualGoodsIssueDate",
	ActualGoodsIssueTime:                          "data_platform_delivery_document_item_data.ActualGoodsIssueTime",
	ActualGoodsReceiptDate:                        "data_platform_delivery_document_item_data.ActualGoodsReceiptDate",
	ActualGoodsReceiptTime:                        "data_platform_delivery_document_item_data.ActualGoodsReceiptTime",
	ActualGoodsIssueQuantity:                      "data_platform_delivery_document_item_data.ActualGoodsIssueQuantity",
	ActualGoodsIssueQtyInBaseUnit:                 "data_platform_delivery_document_item_data.ActualGoodsIssueQtyInBaseUnit",
	ActualGoodsReceiptQuantity:                    "data_platform_delivery_document_item_data.ActualGoodsReceiptQuantity",
	ActualGoodsReceiptQtyInBaseUnit:               "data_platform_delivery_document_item_data.ActualGoodsReceiptQtyInBaseUnit",
	CreationDate:                                  "data_platform_delivery_document_item_data.CreationDate",
	CreationTime:                                  "data_platform_delivery_document_item_data.CreationTime",
	LastChangeDate:                                "data_platform_delivery_document_item_data.LastChangeDate",
	LastChangeTime:                                "data_platform_delivery_document_item_data.LastChangeTime",
	ItemBillingStatus:                             "data_platform_delivery_document_item_data.ItemBillingStatus",
	ItemCompleteDeliveryIsDefined:                 "data_platform_delivery_document_item_data.ItemCompleteDeliveryIsDefined",
	ItemGrossWeight:                               "data_platform_delivery_document_item_data.ItemGrossWeight",
	ItemNetWeight:                                 "data_platform_delivery_document_item_data.ItemNetWeight",
	ItemWeightUnit:                                "data_platform_delivery_document_item_data.ItemWeightUnit",
	InternalCapacityQuantity:                      "data_platform_delivery_document_item_data.InternalCapacityQuantity",
	InternalCapacityQuantityUnit:                  "data_platform_delivery_document_item_data.InternalCapacityQuantityUnit",
	ItemIsBillingRelevant:                         "data_platform_delivery_document_item_data.ItemIsBillingRelevant",
	NetAmount:                                     "data_platform_delivery_document_item_data.NetAmount",
	TaxAmount:                                     "data_platform_delivery_document_item_data.TaxAmount",
	GrossAmount:                                   "data_platform_delivery_document_item_data.GrossAmount",
	OrderID:                                       "data_platform_delivery_document_item_data.OrderID",
	OrderItem:                                     "data_platform_delivery_document_item_data.OrderItem",
	OrderType:                                     "data_platform_delivery_document_item_data.OrderType",
	ContractType:                                  "data_platform_delivery_document_item_data.ContractType",
	OrderValidityStartDate:                        "data_platform_delivery_document_item_data.OrderValidityStartDate",
	OrderValidityEndDate:                          "data_platform_delivery_document_item_data.OrderValidityEndDate",
	PaymentTerms:                                  "data_platform_delivery_document_item_data.PaymentTerms",
	DueCalculationBaseDate:                        "data_platform_delivery_document_item_data.DueCalculationBaseDate",
	PaymentDueDate:                                "data_platform_delivery_document_item_data.PaymentDueDate",
	NetPaymentDays:                                "data_platform_delivery_document_item_data.NetPaymentDays",
	PaymentMethod:                                 "data_platform_delivery_document_item_data.PaymentMethod",
	InvoicePeriodStartDate:                        "data_platform_delivery_document_item_data.InvoicePeriodStartDate",
	InvoicePeriodEndDate:                          "data_platform_delivery_document_item_data.InvoicePeriodEndDate",
	ConfirmedDeliveryDate:                         "data_platform_delivery_document_item_data.ConfirmedDeliveryDate",
	Project:                                       "data_platform_delivery_document_item_data.Project",
	ReferenceDocument:                             "data_platform_delivery_document_item_data.ReferenceDocument",
	ReferenceDocumentItem:                         "data_platform_delivery_document_item_data.ReferenceDocumentItem",
	TransactionTaxClassification:                  "data_platform_delivery_document_item_data.TransactionTaxClassification",
	ProductTaxClassificationBillToCountry:         "data_platform_delivery_document_item_data.ProductTaxClassificationBillToCountry",
	ProductTaxClassificationBillFromCountry:       "data_platform_delivery_document_item_data.ProductTaxClassificationBillFromCountry",
	DefinedTaxClassification:                      "data_platform_delivery_document_item_data.DefinedTaxClassification",
	AccountAssignmentGroup:                        "data_platform_delivery_document_item_data.AccountAssignmentGroup",
	ProductAccountAssignmentGroup:                 "data_platform_delivery_document_item_data.ProductAccountAssignmentGroup",
	TaxCode:                                       "data_platform_delivery_document_item_data.TaxCode",
	TaxRate:                                       "data_platform_delivery_document_item_data.TaxRate",
	CountryOfOrigin:                               "data_platform_delivery_document_item_data.CountryOfOrigin",
	CountryOfOriginLanguage:                       "data_platform_delivery_document_item_data.CountryOfOriginLanguage",
	ItemDeliveryBlockStatus:                       "data_platform_delivery_document_item_data.ItemDeliveryBlockStatus",
	ItemIssuingBlockStatus:                        "data_platform_delivery_document_item_data.ItemIssuingBlockStatus",
	ItemReceivingBlockStatus:                      "data_platform_delivery_document_item_data.ItemReceivingBlockStatus",
	ItemBillingBlockStatus:                        "data_platform_delivery_document_item_data.ItemBillingBlockStatus",
	IsCancelled:                                   "data_platform_delivery_document_item_data.IsCancelled",
	IsMarkedForDeletion:                           "data_platform_delivery_document_item_data.IsMarkedForDeletion",
	ProductionOrder:                               "data_platform_delivery_document_item_data.ProductionOrder",
	ProductionOrderItem:                           "data_platform_delivery_document_item_data.ProductionOrderItem",
	Operations:                                    "data_platform_delivery_document_item_data.Operations",
	OperationsItem:                                "data_platform_delivery_document_item_data.OperationsItem",
	BillOfMaterial:                                "data_platform_delivery_document_item_data.BillOfMaterial",
	BillOfMaterialItem:                            "data_platform_delivery_document_item_data.BillOfMaterialItem",
}

// Generated where

var DataPlatformDeliveryDocumentItemDatumWhere = struct {
	DeliveryDocument                              whereHelperint
	DeliveryDocumentItem                          whereHelperint
	DeliveryDocumentItemCategory                  whereHelpernull_String
	SupplyChainRelationshipID                     whereHelperint
	SupplyChainRelationshipDeliveryID             whereHelperint
	SupplyChainRelationshipDeliveryPlantID        whereHelperint
	SupplyChainRelationshipStockConfPlantID       whereHelperint
	SupplyChainRelationshipProductionPlantID      whereHelperint
	SupplyChainRelationshipBillingID              whereHelpernull_Int
	SupplyChainRelationshipPaymentID              whereHelpernull_Int
	Buyer                                         whereHelperint
	Seller                                        whereHelperint
	DeliverToParty                                whereHelperint
	DeliverFromParty                              whereHelperint
	DeliverToPlant                                whereHelperstring
	DeliverFromPlant                              whereHelperstring
	BillToParty                                   whereHelpernull_Int
	BillFromParty                                 whereHelpernull_Int
	BillToCountry                                 whereHelpernull_String
	BillFromCountry                               whereHelpernull_String
	Payer                                         whereHelpernull_Int
	Payee                                         whereHelpernull_Int
	DeliverToPlantStorageLocation                 whereHelpernull_String
	ProductIsBatchManagedInDeliverToPlant         whereHelpernull_Bool
	BatchMgmtPolicyInDeliverToPlant               whereHelpernull_String
	DeliverToPlantBatch                           whereHelpernull_String
	DeliverToPlantBatchValidityStartDate          whereHelpernull_String
	DeliverToPlantBatchValidityStartTime          whereHelpernull_String
	DeliverToPlantBatchValidityEndDate            whereHelpernull_String
	DeliverToPlantBatchValidityEndTime            whereHelpernull_String
	DeliverFromPlantStorageLocation               whereHelpernull_String
	ProductIsBatchManagedInDeliverFromPlant       whereHelpernull_Bool
	BatchMgmtPolicyInDeliverFromPlant             whereHelpernull_String
	DeliverFromPlantBatch                         whereHelpernull_String
	DeliverFromPlantBatchValidityStartDate        whereHelpernull_String
	DeliverFromPlantBatchValidityStartTime        whereHelpernull_String
	DeliverFromPlantBatchValidityEndDate          whereHelpernull_String
	DeliverFromPlantBatchValidityEndTime          whereHelpernull_String
	StockConfirmationBusinessPartner              whereHelpernull_Int
	StockConfirmationPlant                        whereHelpernull_String
	ProductIsBatchManagedInStockConfirmationPlant whereHelpernull_Bool
	BatchMgmtPolicyInStockConfirmationPlant       whereHelpernull_String
	StockConfirmationPlantBatch                   whereHelpernull_String
	StockConfirmationPlantBatchValidityStartDate  whereHelpernull_String
	StockConfirmationPlantBatchValidityStartTime  whereHelpernull_String
	StockConfirmationPlantBatchValidityEndDate    whereHelpernull_String
	StockConfirmationPlantBatchValidityEndTime    whereHelpernull_String
	StockConfirmationPolicy                       whereHelpernull_String
	StockConfirmationStatus                       whereHelpernull_String
	ProductionPlantBusinessPartner                whereHelpernull_Int
	ProductionPlant                               whereHelpernull_String
	ProductionPlantStorageLocation                whereHelpernull_String
	ProductIsBatchManagedInProductionPlant        whereHelpernull_Bool
	BatchMgmtPolicyInProductionPlant              whereHelpernull_String
	ProductionPlantBatch                          whereHelpernull_String
	ProductionPlantBatchValidityStartDate         whereHelpernull_String
	ProductionPlantBatchValidityStartTime         whereHelpernull_String
	ProductionPlantBatchValidityEndDate           whereHelpernull_String
	ProductionPlantBatchValidityEndTime           whereHelpernull_String
	DeliveryDocumentItemText                      whereHelpernull_String
	DeliveryDocumentItemTextByBuyer               whereHelperstring
	DeliveryDocumentItemTextBySeller              whereHelperstring
	Product                                       whereHelpernull_String
	ProductStandardID                             whereHelpernull_String
	ProductGroup                                  whereHelpernull_String
	BaseUnit                                      whereHelpernull_String
	OriginalQuantityInBaseUnit                    whereHelpernull_Float32
	DeliveryUnit                                  whereHelpernull_String
	PlannedGoodsIssueDate                         whereHelpernull_String
	PlannedGoodsIssueTime                         whereHelpernull_String
	PlannedGoodsReceiptDate                       whereHelpernull_String
	PlannedGoodsReceiptTime                       whereHelpernull_String
	PlannedGoodsIssueQuantity                     whereHelpernull_Float32
	PlannedGoodsIssueQtyInBaseUnit                whereHelpernull_Float32
	PlannedGoodsReceiptQuantity                   whereHelpernull_Float32
	PlannedGoodsReceiptQtyInBaseUnit              whereHelpernull_Float32
	ActualGoodsIssueDate                          whereHelpernull_String
	ActualGoodsIssueTime                          whereHelpernull_String
	ActualGoodsReceiptDate                        whereHelpernull_String
	ActualGoodsReceiptTime                        whereHelpernull_String
	ActualGoodsIssueQuantity                      whereHelpernull_Float32
	ActualGoodsIssueQtyInBaseUnit                 whereHelpernull_Float32
	ActualGoodsReceiptQuantity                    whereHelpernull_Float32
	ActualGoodsReceiptQtyInBaseUnit               whereHelpernull_Float32
	CreationDate                                  whereHelpernull_String
	CreationTime                                  whereHelpernull_String
	LastChangeDate                                whereHelpernull_String
	LastChangeTime                                whereHelpernull_String
	ItemBillingStatus                             whereHelpernull_String
	ItemCompleteDeliveryIsDefined                 whereHelpernull_Bool
	ItemGrossWeight                               whereHelpernull_Float32
	ItemNetWeight                                 whereHelpernull_Float32
	ItemWeightUnit                                whereHelpernull_String
	InternalCapacityQuantity                      whereHelpernull_Float32
	InternalCapacityQuantityUnit                  whereHelpernull_String
	ItemIsBillingRelevant                         whereHelpernull_Bool
	NetAmount                                     whereHelpernull_Float32
	TaxAmount                                     whereHelpernull_Float32
	GrossAmount                                   whereHelpernull_Float32
	OrderID                                       whereHelpernull_Int
	OrderItem                                     whereHelpernull_Int
	OrderType                                     whereHelpernull_String
	ContractType                                  whereHelpernull_String
	OrderValidityStartDate                        whereHelpernull_String
	OrderValidityEndDate                          whereHelpernull_String
	PaymentTerms                                  whereHelpernull_String
	DueCalculationBaseDate                        whereHelpernull_String
	PaymentDueDate                                whereHelpernull_String
	NetPaymentDays                                whereHelpernull_Int
	PaymentMethod                                 whereHelpernull_String
	InvoicePeriodStartDate                        whereHelpernull_String
	InvoicePeriodEndDate                          whereHelpernull_String
	ConfirmedDeliveryDate                         whereHelpernull_String
	Project                                       whereHelpernull_String
	ReferenceDocument                             whereHelpernull_Int
	ReferenceDocumentItem                         whereHelpernull_Int
	TransactionTaxClassification                  whereHelperstring
	ProductTaxClassificationBillToCountry         whereHelperstring
	ProductTaxClassificationBillFromCountry       whereHelperstring
	DefinedTaxClassification                      whereHelperstring
	AccountAssignmentGroup                        whereHelperstring
	ProductAccountAssignmentGroup                 whereHelperstring
	TaxCode                                       whereHelpernull_String
	TaxRate                                       whereHelpernull_Float32
	CountryOfOrigin                               whereHelpernull_String
	CountryOfOriginLanguage                       whereHelpernull_String
	ItemDeliveryBlockStatus                       whereHelpernull_Bool
	ItemIssuingBlockStatus                        whereHelpernull_Bool
	ItemReceivingBlockStatus                      whereHelpernull_Bool
	ItemBillingBlockStatus                        whereHelpernull_Bool
	IsCancelled                                   whereHelpernull_Bool
	IsMarkedForDeletion                           whereHelpernull_Bool
	ProductionOrder                               whereHelpernull_Int
	ProductionOrderItem                           whereHelpernull_Int
	Operations                                    whereHelpernull_Int
	OperationsItem                                whereHelpernull_Int
	BillOfMaterial                                whereHelpernull_Int
	BillOfMaterialItem                            whereHelpernull_Int
}{
	DeliveryDocument:                              whereHelperint{field: "`data_platform_delivery_document_item_data`.`DeliveryDocument`"},
	DeliveryDocumentItem:                          whereHelperint{field: "`data_platform_delivery_document_item_data`.`DeliveryDocumentItem`"},
	DeliveryDocumentItemCategory:                  whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`DeliveryDocumentItemCategory`"},
	SupplyChainRelationshipID:                     whereHelperint{field: "`data_platform_delivery_document_item_data`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipDeliveryID:             whereHelperint{field: "`data_platform_delivery_document_item_data`.`SupplyChainRelationshipDeliveryID`"},
	SupplyChainRelationshipDeliveryPlantID:        whereHelperint{field: "`data_platform_delivery_document_item_data`.`SupplyChainRelationshipDeliveryPlantID`"},
	SupplyChainRelationshipStockConfPlantID:       whereHelperint{field: "`data_platform_delivery_document_item_data`.`SupplyChainRelationshipStockConfPlantID`"},
	SupplyChainRelationshipProductionPlantID:      whereHelperint{field: "`data_platform_delivery_document_item_data`.`SupplyChainRelationshipProductionPlantID`"},
	SupplyChainRelationshipBillingID:              whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`SupplyChainRelationshipBillingID`"},
	SupplyChainRelationshipPaymentID:              whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`SupplyChainRelationshipPaymentID`"},
	Buyer:                                         whereHelperint{field: "`data_platform_delivery_document_item_data`.`Buyer`"},
	Seller:                                        whereHelperint{field: "`data_platform_delivery_document_item_data`.`Seller`"},
	DeliverToParty:                                whereHelperint{field: "`data_platform_delivery_document_item_data`.`DeliverToParty`"},
	DeliverFromParty:                              whereHelperint{field: "`data_platform_delivery_document_item_data`.`DeliverFromParty`"},
	DeliverToPlant:                                whereHelperstring{field: "`data_platform_delivery_document_item_data`.`DeliverToPlant`"},
	DeliverFromPlant:                              whereHelperstring{field: "`data_platform_delivery_document_item_data`.`DeliverFromPlant`"},
	BillToParty:                                   whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`BillToParty`"},
	BillFromParty:                                 whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`BillFromParty`"},
	BillToCountry:                                 whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`BillToCountry`"},
	BillFromCountry:                               whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`BillFromCountry`"},
	Payer:                                         whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`Payer`"},
	Payee:                                         whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`Payee`"},
	DeliverToPlantStorageLocation:                 whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`DeliverToPlantStorageLocation`"},
	ProductIsBatchManagedInDeliverToPlant:         whereHelpernull_Bool{field: "`data_platform_delivery_document_item_data`.`ProductIsBatchManagedInDeliverToPlant`"},
	BatchMgmtPolicyInDeliverToPlant:               whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`BatchMgmtPolicyInDeliverToPlant`"},
	DeliverToPlantBatch:                           whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`DeliverToPlantBatch`"},
	DeliverToPlantBatchValidityStartDate:          whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`DeliverToPlantBatchValidityStartDate`"},
	DeliverToPlantBatchValidityStartTime:          whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`DeliverToPlantBatchValidityStartTime`"},
	DeliverToPlantBatchValidityEndDate:            whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`DeliverToPlantBatchValidityEndDate`"},
	DeliverToPlantBatchValidityEndTime:            whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`DeliverToPlantBatchValidityEndTime`"},
	DeliverFromPlantStorageLocation:               whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`DeliverFromPlantStorageLocation`"},
	ProductIsBatchManagedInDeliverFromPlant:       whereHelpernull_Bool{field: "`data_platform_delivery_document_item_data`.`ProductIsBatchManagedInDeliverFromPlant`"},
	BatchMgmtPolicyInDeliverFromPlant:             whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`BatchMgmtPolicyInDeliverFromPlant`"},
	DeliverFromPlantBatch:                         whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`DeliverFromPlantBatch`"},
	DeliverFromPlantBatchValidityStartDate:        whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`DeliverFromPlantBatchValidityStartDate`"},
	DeliverFromPlantBatchValidityStartTime:        whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`DeliverFromPlantBatchValidityStartTime`"},
	DeliverFromPlantBatchValidityEndDate:          whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`DeliverFromPlantBatchValidityEndDate`"},
	DeliverFromPlantBatchValidityEndTime:          whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`DeliverFromPlantBatchValidityEndTime`"},
	StockConfirmationBusinessPartner:              whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`StockConfirmationBusinessPartner`"},
	StockConfirmationPlant:                        whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`StockConfirmationPlant`"},
	ProductIsBatchManagedInStockConfirmationPlant: whereHelpernull_Bool{field: "`data_platform_delivery_document_item_data`.`ProductIsBatchManagedInStockConfirmationPlant`"},
	BatchMgmtPolicyInStockConfirmationPlant:       whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`BatchMgmtPolicyInStockConfirmationPlant`"},
	StockConfirmationPlantBatch:                   whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`StockConfirmationPlantBatch`"},
	StockConfirmationPlantBatchValidityStartDate:  whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`StockConfirmationPlantBatchValidityStartDate`"},
	StockConfirmationPlantBatchValidityStartTime:  whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`StockConfirmationPlantBatchValidityStartTime`"},
	StockConfirmationPlantBatchValidityEndDate:    whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`StockConfirmationPlantBatchValidityEndDate`"},
	StockConfirmationPlantBatchValidityEndTime:    whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`StockConfirmationPlantBatchValidityEndTime`"},
	StockConfirmationPolicy:                       whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`StockConfirmationPolicy`"},
	StockConfirmationStatus:                       whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`StockConfirmationStatus`"},
	ProductionPlantBusinessPartner:                whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`ProductionPlantBusinessPartner`"},
	ProductionPlant:                               whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`ProductionPlant`"},
	ProductionPlantStorageLocation:                whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`ProductionPlantStorageLocation`"},
	ProductIsBatchManagedInProductionPlant:        whereHelpernull_Bool{field: "`data_platform_delivery_document_item_data`.`ProductIsBatchManagedInProductionPlant`"},
	BatchMgmtPolicyInProductionPlant:              whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`BatchMgmtPolicyInProductionPlant`"},
	ProductionPlantBatch:                          whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`ProductionPlantBatch`"},
	ProductionPlantBatchValidityStartDate:         whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`ProductionPlantBatchValidityStartDate`"},
	ProductionPlantBatchValidityStartTime:         whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`ProductionPlantBatchValidityStartTime`"},
	ProductionPlantBatchValidityEndDate:           whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`ProductionPlantBatchValidityEndDate`"},
	ProductionPlantBatchValidityEndTime:           whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`ProductionPlantBatchValidityEndTime`"},
	DeliveryDocumentItemText:                      whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`DeliveryDocumentItemText`"},
	DeliveryDocumentItemTextByBuyer:               whereHelperstring{field: "`data_platform_delivery_document_item_data`.`DeliveryDocumentItemTextByBuyer`"},
	DeliveryDocumentItemTextBySeller:              whereHelperstring{field: "`data_platform_delivery_document_item_data`.`DeliveryDocumentItemTextBySeller`"},
	Product:                                       whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`Product`"},
	ProductStandardID:                             whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`ProductStandardID`"},
	ProductGroup:                                  whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`ProductGroup`"},
	BaseUnit:                                      whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`BaseUnit`"},
	OriginalQuantityInBaseUnit:                    whereHelpernull_Float32{field: "`data_platform_delivery_document_item_data`.`OriginalQuantityInBaseUnit`"},
	DeliveryUnit:                                  whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`DeliveryUnit`"},
	PlannedGoodsIssueDate:                         whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`PlannedGoodsIssueDate`"},
	PlannedGoodsIssueTime:                         whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`PlannedGoodsIssueTime`"},
	PlannedGoodsReceiptDate:                       whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`PlannedGoodsReceiptDate`"},
	PlannedGoodsReceiptTime:                       whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`PlannedGoodsReceiptTime`"},
	PlannedGoodsIssueQuantity:                     whereHelpernull_Float32{field: "`data_platform_delivery_document_item_data`.`PlannedGoodsIssueQuantity`"},
	PlannedGoodsIssueQtyInBaseUnit:                whereHelpernull_Float32{field: "`data_platform_delivery_document_item_data`.`PlannedGoodsIssueQtyInBaseUnit`"},
	PlannedGoodsReceiptQuantity:                   whereHelpernull_Float32{field: "`data_platform_delivery_document_item_data`.`PlannedGoodsReceiptQuantity`"},
	PlannedGoodsReceiptQtyInBaseUnit:              whereHelpernull_Float32{field: "`data_platform_delivery_document_item_data`.`PlannedGoodsReceiptQtyInBaseUnit`"},
	ActualGoodsIssueDate:                          whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`ActualGoodsIssueDate`"},
	ActualGoodsIssueTime:                          whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`ActualGoodsIssueTime`"},
	ActualGoodsReceiptDate:                        whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`ActualGoodsReceiptDate`"},
	ActualGoodsReceiptTime:                        whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`ActualGoodsReceiptTime`"},
	ActualGoodsIssueQuantity:                      whereHelpernull_Float32{field: "`data_platform_delivery_document_item_data`.`ActualGoodsIssueQuantity`"},
	ActualGoodsIssueQtyInBaseUnit:                 whereHelpernull_Float32{field: "`data_platform_delivery_document_item_data`.`ActualGoodsIssueQtyInBaseUnit`"},
	ActualGoodsReceiptQuantity:                    whereHelpernull_Float32{field: "`data_platform_delivery_document_item_data`.`ActualGoodsReceiptQuantity`"},
	ActualGoodsReceiptQtyInBaseUnit:               whereHelpernull_Float32{field: "`data_platform_delivery_document_item_data`.`ActualGoodsReceiptQtyInBaseUnit`"},
	CreationDate:                                  whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`CreationDate`"},
	CreationTime:                                  whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`CreationTime`"},
	LastChangeDate:                                whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`LastChangeDate`"},
	LastChangeTime:                                whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`LastChangeTime`"},
	ItemBillingStatus:                             whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`ItemBillingStatus`"},
	ItemCompleteDeliveryIsDefined:                 whereHelpernull_Bool{field: "`data_platform_delivery_document_item_data`.`ItemCompleteDeliveryIsDefined`"},
	ItemGrossWeight:                               whereHelpernull_Float32{field: "`data_platform_delivery_document_item_data`.`ItemGrossWeight`"},
	ItemNetWeight:                                 whereHelpernull_Float32{field: "`data_platform_delivery_document_item_data`.`ItemNetWeight`"},
	ItemWeightUnit:                                whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`ItemWeightUnit`"},
	InternalCapacityQuantity:                      whereHelpernull_Float32{field: "`data_platform_delivery_document_item_data`.`InternalCapacityQuantity`"},
	InternalCapacityQuantityUnit:                  whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`InternalCapacityQuantityUnit`"},
	ItemIsBillingRelevant:                         whereHelpernull_Bool{field: "`data_platform_delivery_document_item_data`.`ItemIsBillingRelevant`"},
	NetAmount:                                     whereHelpernull_Float32{field: "`data_platform_delivery_document_item_data`.`NetAmount`"},
	TaxAmount:                                     whereHelpernull_Float32{field: "`data_platform_delivery_document_item_data`.`TaxAmount`"},
	GrossAmount:                                   whereHelpernull_Float32{field: "`data_platform_delivery_document_item_data`.`GrossAmount`"},
	OrderID:                                       whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`OrderID`"},
	OrderItem:                                     whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`OrderItem`"},
	OrderType:                                     whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`OrderType`"},
	ContractType:                                  whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`ContractType`"},
	OrderValidityStartDate:                        whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`OrderValidityStartDate`"},
	OrderValidityEndDate:                          whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`OrderValidityEndDate`"},
	PaymentTerms:                                  whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`PaymentTerms`"},
	DueCalculationBaseDate:                        whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`DueCalculationBaseDate`"},
	PaymentDueDate:                                whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`PaymentDueDate`"},
	NetPaymentDays:                                whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`NetPaymentDays`"},
	PaymentMethod:                                 whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`PaymentMethod`"},
	InvoicePeriodStartDate:                        whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`InvoicePeriodStartDate`"},
	InvoicePeriodEndDate:                          whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`InvoicePeriodEndDate`"},
	ConfirmedDeliveryDate:                         whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`ConfirmedDeliveryDate`"},
	Project:                                       whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`Project`"},
	ReferenceDocument:                             whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`ReferenceDocument`"},
	ReferenceDocumentItem:                         whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`ReferenceDocumentItem`"},
	TransactionTaxClassification:                  whereHelperstring{field: "`data_platform_delivery_document_item_data`.`TransactionTaxClassification`"},
	ProductTaxClassificationBillToCountry:         whereHelperstring{field: "`data_platform_delivery_document_item_data`.`ProductTaxClassificationBillToCountry`"},
	ProductTaxClassificationBillFromCountry:       whereHelperstring{field: "`data_platform_delivery_document_item_data`.`ProductTaxClassificationBillFromCountry`"},
	DefinedTaxClassification:                      whereHelperstring{field: "`data_platform_delivery_document_item_data`.`DefinedTaxClassification`"},
	AccountAssignmentGroup:                        whereHelperstring{field: "`data_platform_delivery_document_item_data`.`AccountAssignmentGroup`"},
	ProductAccountAssignmentGroup:                 whereHelperstring{field: "`data_platform_delivery_document_item_data`.`ProductAccountAssignmentGroup`"},
	TaxCode:                                       whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`TaxCode`"},
	TaxRate:                                       whereHelpernull_Float32{field: "`data_platform_delivery_document_item_data`.`TaxRate`"},
	CountryOfOrigin:                               whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`CountryOfOrigin`"},
	CountryOfOriginLanguage:                       whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`CountryOfOriginLanguage`"},
	ItemDeliveryBlockStatus:                       whereHelpernull_Bool{field: "`data_platform_delivery_document_item_data`.`ItemDeliveryBlockStatus`"},
	ItemIssuingBlockStatus:                        whereHelpernull_Bool{field: "`data_platform_delivery_document_item_data`.`ItemIssuingBlockStatus`"},
	ItemReceivingBlockStatus:                      whereHelpernull_Bool{field: "`data_platform_delivery_document_item_data`.`ItemReceivingBlockStatus`"},
	ItemBillingBlockStatus:                        whereHelpernull_Bool{field: "`data_platform_delivery_document_item_data`.`ItemBillingBlockStatus`"},
	IsCancelled:                                   whereHelpernull_Bool{field: "`data_platform_delivery_document_item_data`.`IsCancelled`"},
	IsMarkedForDeletion:                           whereHelpernull_Bool{field: "`data_platform_delivery_document_item_data`.`IsMarkedForDeletion`"},
	ProductionOrder:                               whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`ProductionOrder`"},
	ProductionOrderItem:                           whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`ProductionOrderItem`"},
	Operations:                                    whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`Operations`"},
	OperationsItem:                                whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`OperationsItem`"},
	BillOfMaterial:                                whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`BillOfMaterial`"},
	BillOfMaterialItem:                            whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`BillOfMaterialItem`"},
}

// DataPlatformDeliveryDocumentItemDatumRels is where relationship names are stored.
var DataPlatformDeliveryDocumentItemDatumRels = struct {
	BuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum        string
	BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationDatum string
	OrderIDDataPlatformOrdersItemDatum                                   string
	PaymentTerm                                                          string
	PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum             string
	CountryOfOriginLanguageDataPlatformLanguageLanguageDatum             string
	BillFromPartyDataPlatformSupplyChainRelationshipPaymentRelationDatum string
	ProductGroupDataPlatformProductGroupProductGroupDatum                string
}{
	BuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum:        "BuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum",
	BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationDatum: "BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationDatum",
	OrderIDDataPlatformOrdersItemDatum:                                   "OrderIDDataPlatformOrdersItemDatum",
	PaymentTerm:                                                          "PaymentTerm",
	PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum:             "PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum",
	CountryOfOriginLanguageDataPlatformLanguageLanguageDatum:             "CountryOfOriginLanguageDataPlatformLanguageLanguageDatum",
	BillFromPartyDataPlatformSupplyChainRelationshipPaymentRelationDatum: "BillFromPartyDataPlatformSupplyChainRelationshipPaymentRelationDatum",
	ProductGroupDataPlatformProductGroupProductGroupDatum:                "ProductGroupDataPlatformProductGroupProductGroupDatum",
}

// dataPlatformDeliveryDocumentItemDatumR is where relationships are stored.
type dataPlatformDeliveryDocumentItemDatumR struct {
	BuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum        *DataPlatformSupplyChainRelationshipDeliveryRelationDatum `boil:"BuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum" json:"BuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum" toml:"BuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum" yaml:"BuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum"`
	BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationDatum *DataPlatformSupplyChainRelationshipBillingRelationDatum  `boil:"BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationDatum" json:"BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationDatum" toml:"BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationDatum" yaml:"BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationDatum"`
	OrderIDDataPlatformOrdersItemDatum                                   *DataPlatformOrdersItemDatum                              `boil:"OrderIDDataPlatformOrdersItemDatum" json:"OrderIDDataPlatformOrdersItemDatum" toml:"OrderIDDataPlatformOrdersItemDatum" yaml:"OrderIDDataPlatformOrdersItemDatum"`
	PaymentTerm                                                          *DataPlatformPaymentTermsPaymentTermsDatum                `boil:"PaymentTerm" json:"PaymentTerm" toml:"PaymentTerm" yaml:"PaymentTerm"`
	PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum             *DataPlatformPaymentMethodPaymentMethodDatum              `boil:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum" json:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum" toml:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum" yaml:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum"`
	CountryOfOriginLanguageDataPlatformLanguageLanguageDatum             *DataPlatformLanguageLanguageDatum                        `boil:"CountryOfOriginLanguageDataPlatformLanguageLanguageDatum" json:"CountryOfOriginLanguageDataPlatformLanguageLanguageDatum" toml:"CountryOfOriginLanguageDataPlatformLanguageLanguageDatum" yaml:"CountryOfOriginLanguageDataPlatformLanguageLanguageDatum"`
	BillFromPartyDataPlatformSupplyChainRelationshipPaymentRelationDatum *DataPlatformSupplyChainRelationshipPaymentRelationDatum  `boil:"BillFromPartyDataPlatformSupplyChainRelationshipPaymentRelationDatum" json:"BillFromPartyDataPlatformSupplyChainRelationshipPaymentRelationDatum" toml:"BillFromPartyDataPlatformSupplyChainRelationshipPaymentRelationDatum" yaml:"BillFromPartyDataPlatformSupplyChainRelationshipPaymentRelationDatum"`
	ProductGroupDataPlatformProductGroupProductGroupDatum                *DataPlatformProductGroupProductGroupDatum                `boil:"ProductGroupDataPlatformProductGroupProductGroupDatum" json:"ProductGroupDataPlatformProductGroupProductGroupDatum" toml:"ProductGroupDataPlatformProductGroupProductGroupDatum" yaml:"ProductGroupDataPlatformProductGroupProductGroupDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformDeliveryDocumentItemDatumR) NewStruct() *dataPlatformDeliveryDocumentItemDatumR {
	return &dataPlatformDeliveryDocumentItemDatumR{}
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetBuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum() *DataPlatformSupplyChainRelationshipDeliveryRelationDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetBillFromPartyDataPlatformSupplyChainRelationshipBillingRelationDatum() *DataPlatformSupplyChainRelationshipBillingRelationDatum {
	if r == nil {
		return nil
	}
	return r.BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetOrderIDDataPlatformOrdersItemDatum() *DataPlatformOrdersItemDatum {
	if r == nil {
		return nil
	}
	return r.OrderIDDataPlatformOrdersItemDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetPaymentTerm() *DataPlatformPaymentTermsPaymentTermsDatum {
	if r == nil {
		return nil
	}
	return r.PaymentTerm
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum() *DataPlatformPaymentMethodPaymentMethodDatum {
	if r == nil {
		return nil
	}
	return r.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetCountryOfOriginLanguageDataPlatformLanguageLanguageDatum() *DataPlatformLanguageLanguageDatum {
	if r == nil {
		return nil
	}
	return r.CountryOfOriginLanguageDataPlatformLanguageLanguageDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetBillFromPartyDataPlatformSupplyChainRelationshipPaymentRelationDatum() *DataPlatformSupplyChainRelationshipPaymentRelationDatum {
	if r == nil {
		return nil
	}
	return r.BillFromPartyDataPlatformSupplyChainRelationshipPaymentRelationDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetProductGroupDataPlatformProductGroupProductGroupDatum() *DataPlatformProductGroupProductGroupDatum {
	if r == nil {
		return nil
	}
	return r.ProductGroupDataPlatformProductGroupProductGroupDatum
}

// dataPlatformDeliveryDocumentItemDatumL is where Load methods for each relationship are stored.
type dataPlatformDeliveryDocumentItemDatumL struct{}

var (
	dataPlatformDeliveryDocumentItemDatumAllColumns            = []string{"DeliveryDocument", "DeliveryDocumentItem", "DeliveryDocumentItemCategory", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "SupplyChainRelationshipStockConfPlantID", "SupplyChainRelationshipProductionPlantID", "SupplyChainRelationshipBillingID", "SupplyChainRelationshipPaymentID", "Buyer", "Seller", "DeliverToParty", "DeliverFromParty", "DeliverToPlant", "DeliverFromPlant", "BillToParty", "BillFromParty", "BillToCountry", "BillFromCountry", "Payer", "Payee", "DeliverToPlantStorageLocation", "ProductIsBatchManagedInDeliverToPlant", "BatchMgmtPolicyInDeliverToPlant", "DeliverToPlantBatch", "DeliverToPlantBatchValidityStartDate", "DeliverToPlantBatchValidityStartTime", "DeliverToPlantBatchValidityEndDate", "DeliverToPlantBatchValidityEndTime", "DeliverFromPlantStorageLocation", "ProductIsBatchManagedInDeliverFromPlant", "BatchMgmtPolicyInDeliverFromPlant", "DeliverFromPlantBatch", "DeliverFromPlantBatchValidityStartDate", "DeliverFromPlantBatchValidityStartTime", "DeliverFromPlantBatchValidityEndDate", "DeliverFromPlantBatchValidityEndTime", "StockConfirmationBusinessPartner", "StockConfirmationPlant", "ProductIsBatchManagedInStockConfirmationPlant", "BatchMgmtPolicyInStockConfirmationPlant", "StockConfirmationPlantBatch", "StockConfirmationPlantBatchValidityStartDate", "StockConfirmationPlantBatchValidityStartTime", "StockConfirmationPlantBatchValidityEndDate", "StockConfirmationPlantBatchValidityEndTime", "StockConfirmationPolicy", "StockConfirmationStatus", "ProductionPlantBusinessPartner", "ProductionPlant", "ProductionPlantStorageLocation", "ProductIsBatchManagedInProductionPlant", "BatchMgmtPolicyInProductionPlant", "ProductionPlantBatch", "ProductionPlantBatchValidityStartDate", "ProductionPlantBatchValidityStartTime", "ProductionPlantBatchValidityEndDate", "ProductionPlantBatchValidityEndTime", "DeliveryDocumentItemText", "DeliveryDocumentItemTextByBuyer", "DeliveryDocumentItemTextBySeller", "Product", "ProductStandardID", "ProductGroup", "BaseUnit", "OriginalQuantityInBaseUnit", "DeliveryUnit", "PlannedGoodsIssueDate", "PlannedGoodsIssueTime", "PlannedGoodsReceiptDate", "PlannedGoodsReceiptTime", "PlannedGoodsIssueQuantity", "PlannedGoodsIssueQtyInBaseUnit", "PlannedGoodsReceiptQuantity", "PlannedGoodsReceiptQtyInBaseUnit", "ActualGoodsIssueDate", "ActualGoodsIssueTime", "ActualGoodsReceiptDate", "ActualGoodsReceiptTime", "ActualGoodsIssueQuantity", "ActualGoodsIssueQtyInBaseUnit", "ActualGoodsReceiptQuantity", "ActualGoodsReceiptQtyInBaseUnit", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "ItemBillingStatus", "ItemCompleteDeliveryIsDefined", "ItemGrossWeight", "ItemNetWeight", "ItemWeightUnit", "InternalCapacityQuantity", "InternalCapacityQuantityUnit", "ItemIsBillingRelevant", "NetAmount", "TaxAmount", "GrossAmount", "OrderID", "OrderItem", "OrderType", "ContractType", "OrderValidityStartDate", "OrderValidityEndDate", "PaymentTerms", "DueCalculationBaseDate", "PaymentDueDate", "NetPaymentDays", "PaymentMethod", "InvoicePeriodStartDate", "InvoicePeriodEndDate", "ConfirmedDeliveryDate", "Project", "ReferenceDocument", "ReferenceDocumentItem", "TransactionTaxClassification", "ProductTaxClassificationBillToCountry", "ProductTaxClassificationBillFromCountry", "DefinedTaxClassification", "AccountAssignmentGroup", "ProductAccountAssignmentGroup", "TaxCode", "TaxRate", "CountryOfOrigin", "CountryOfOriginLanguage", "ItemDeliveryBlockStatus", "ItemIssuingBlockStatus", "ItemReceivingBlockStatus", "ItemBillingBlockStatus", "IsCancelled", "IsMarkedForDeletion", "ProductionOrder", "ProductionOrderItem", "Operations", "OperationsItem", "BillOfMaterial", "BillOfMaterialItem"}
	dataPlatformDeliveryDocumentItemDatumColumnsWithoutDefault = []string{"DeliveryDocument", "DeliveryDocumentItem", "DeliveryDocumentItemCategory", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "SupplyChainRelationshipStockConfPlantID", "SupplyChainRelationshipProductionPlantID", "SupplyChainRelationshipBillingID", "SupplyChainRelationshipPaymentID", "Buyer", "Seller", "DeliverToParty", "DeliverFromParty", "DeliverToPlant", "DeliverFromPlant", "BillToParty", "BillFromParty", "BillToCountry", "BillFromCountry", "Payer", "Payee", "DeliverToPlantStorageLocation", "ProductIsBatchManagedInDeliverToPlant", "BatchMgmtPolicyInDeliverToPlant", "DeliverToPlantBatch", "DeliverToPlantBatchValidityStartDate", "DeliverToPlantBatchValidityStartTime", "DeliverToPlantBatchValidityEndDate", "DeliverToPlantBatchValidityEndTime", "DeliverFromPlantStorageLocation", "ProductIsBatchManagedInDeliverFromPlant", "BatchMgmtPolicyInDeliverFromPlant", "DeliverFromPlantBatch", "DeliverFromPlantBatchValidityStartDate", "DeliverFromPlantBatchValidityStartTime", "DeliverFromPlantBatchValidityEndDate", "DeliverFromPlantBatchValidityEndTime", "StockConfirmationBusinessPartner", "StockConfirmationPlant", "ProductIsBatchManagedInStockConfirmationPlant", "BatchMgmtPolicyInStockConfirmationPlant", "StockConfirmationPlantBatch", "StockConfirmationPlantBatchValidityStartDate", "StockConfirmationPlantBatchValidityStartTime", "StockConfirmationPlantBatchValidityEndDate", "StockConfirmationPlantBatchValidityEndTime", "StockConfirmationPolicy", "StockConfirmationStatus", "ProductionPlantBusinessPartner", "ProductionPlant", "ProductionPlantStorageLocation", "ProductIsBatchManagedInProductionPlant", "BatchMgmtPolicyInProductionPlant", "ProductionPlantBatch", "ProductionPlantBatchValidityStartDate", "ProductionPlantBatchValidityStartTime", "ProductionPlantBatchValidityEndDate", "ProductionPlantBatchValidityEndTime", "DeliveryDocumentItemText", "DeliveryDocumentItemTextByBuyer", "DeliveryDocumentItemTextBySeller", "Product", "ProductStandardID", "ProductGroup", "BaseUnit", "OriginalQuantityInBaseUnit", "DeliveryUnit", "PlannedGoodsIssueDate", "PlannedGoodsIssueTime", "PlannedGoodsReceiptDate", "PlannedGoodsReceiptTime", "PlannedGoodsIssueQuantity", "PlannedGoodsIssueQtyInBaseUnit", "PlannedGoodsReceiptQuantity", "PlannedGoodsReceiptQtyInBaseUnit", "ActualGoodsIssueDate", "ActualGoodsIssueTime", "ActualGoodsReceiptDate", "ActualGoodsReceiptTime", "ActualGoodsIssueQuantity", "ActualGoodsIssueQtyInBaseUnit", "ActualGoodsReceiptQuantity", "ActualGoodsReceiptQtyInBaseUnit", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "ItemBillingStatus", "ItemCompleteDeliveryIsDefined", "ItemGrossWeight", "ItemNetWeight", "ItemWeightUnit", "InternalCapacityQuantity", "InternalCapacityQuantityUnit", "ItemIsBillingRelevant", "NetAmount", "TaxAmount", "GrossAmount", "OrderID", "OrderItem", "OrderType", "ContractType", "OrderValidityStartDate", "OrderValidityEndDate", "PaymentTerms", "DueCalculationBaseDate", "PaymentDueDate", "NetPaymentDays", "PaymentMethod", "InvoicePeriodStartDate", "InvoicePeriodEndDate", "ConfirmedDeliveryDate", "Project", "ReferenceDocument", "ReferenceDocumentItem", "TransactionTaxClassification", "ProductTaxClassificationBillToCountry", "ProductTaxClassificationBillFromCountry", "DefinedTaxClassification", "AccountAssignmentGroup", "ProductAccountAssignmentGroup", "TaxCode", "TaxRate", "CountryOfOrigin", "CountryOfOriginLanguage", "ItemDeliveryBlockStatus", "ItemIssuingBlockStatus", "ItemReceivingBlockStatus", "ItemBillingBlockStatus", "IsCancelled", "IsMarkedForDeletion", "ProductionOrder", "ProductionOrderItem", "Operations", "OperationsItem", "BillOfMaterial", "BillOfMaterialItem"}
	dataPlatformDeliveryDocumentItemDatumColumnsWithDefault    = []string{}
	dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns     = []string{"DeliveryDocument", "DeliveryDocumentItem"}
	dataPlatformDeliveryDocumentItemDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformDeliveryDocumentItemDatumSlice is an alias for a slice of pointers to DataPlatformDeliveryDocumentItemDatum.
	// This should almost always be used instead of []DataPlatformDeliveryDocumentItemDatum.
	DataPlatformDeliveryDocumentItemDatumSlice []*DataPlatformDeliveryDocumentItemDatum

	dataPlatformDeliveryDocumentItemDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformDeliveryDocumentItemDatumType                 = reflect.TypeOf(&DataPlatformDeliveryDocumentItemDatum{})
	dataPlatformDeliveryDocumentItemDatumMapping              = queries.MakeStructMapping(dataPlatformDeliveryDocumentItemDatumType)
	dataPlatformDeliveryDocumentItemDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformDeliveryDocumentItemDatumType, dataPlatformDeliveryDocumentItemDatumMapping, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns)
	dataPlatformDeliveryDocumentItemDatumInsertCacheMut       sync.RWMutex
	dataPlatformDeliveryDocumentItemDatumInsertCache          = make(map[string]insertCache)
	dataPlatformDeliveryDocumentItemDatumUpdateCacheMut       sync.RWMutex
	dataPlatformDeliveryDocumentItemDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformDeliveryDocumentItemDatumUpsertCacheMut       sync.RWMutex
	dataPlatformDeliveryDocumentItemDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformDeliveryDocumentItemDatum record from the query.
func (q dataPlatformDeliveryDocumentItemDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformDeliveryDocumentItemDatum, error) {
	o := &DataPlatformDeliveryDocumentItemDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_delivery_document_item_data")
	}

	return o, nil
}

// All returns all DataPlatformDeliveryDocumentItemDatum records from the query.
func (q dataPlatformDeliveryDocumentItemDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformDeliveryDocumentItemDatumSlice, error) {
	var o []*DataPlatformDeliveryDocumentItemDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformDeliveryDocumentItemDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformDeliveryDocumentItemDatum records in the query.
func (q dataPlatformDeliveryDocumentItemDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_delivery_document_item_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformDeliveryDocumentItemDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_delivery_document_item_data exists")
	}

	return count > 0, nil
}

// BuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) BuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum(mods ...qm.QueryMod) dataPlatformSupplyChainRelationshipDeliveryRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSupplyChainRelationshipDeliveryRelationData(queryMods...)
}

// BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationDatum(mods ...qm.QueryMod) dataPlatformSupplyChainRelationshipBillingRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BillFromParty` = ?", o.BillFromParty),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSupplyChainRelationshipBillingRelationData(queryMods...)
}

// OrderIDDataPlatformOrdersItemDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) OrderIDDataPlatformOrdersItemDatum(mods ...qm.QueryMod) dataPlatformOrdersItemDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`OrderID` = ?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformOrdersItemData(queryMods...)
}

// PaymentTerm pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) PaymentTerm(mods ...qm.QueryMod) dataPlatformPaymentTermsPaymentTermsDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PaymentTerms` = ?", o.PaymentTerms),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPaymentTermsPaymentTermsData(queryMods...)
}

// PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum(mods ...qm.QueryMod) dataPlatformPaymentMethodPaymentMethodDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PaymentMethod` = ?", o.PaymentMethod),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPaymentMethodPaymentMethodData(queryMods...)
}

// CountryOfOriginLanguageDataPlatformLanguageLanguageDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) CountryOfOriginLanguageDataPlatformLanguageLanguageDatum(mods ...qm.QueryMod) dataPlatformLanguageLanguageDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Language` = ?", o.CountryOfOriginLanguage),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformLanguageLanguageData(queryMods...)
}

// BillFromPartyDataPlatformSupplyChainRelationshipPaymentRelationDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) BillFromPartyDataPlatformSupplyChainRelationshipPaymentRelationDatum(mods ...qm.QueryMod) dataPlatformSupplyChainRelationshipPaymentRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BillFromParty` = ?", o.BillFromParty),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSupplyChainRelationshipPaymentRelationData(queryMods...)
}

// ProductGroupDataPlatformProductGroupProductGroupDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) ProductGroupDataPlatformProductGroupProductGroupDatum(mods ...qm.QueryMod) dataPlatformProductGroupProductGroupDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ProductGroup` = ?", o.ProductGroup),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformProductGroupProductGroupData(queryMods...)
}

// LoadBuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadBuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_supply_chain_relationship_delivery_relation_data`),
		qm.WhereIn(`data_platform_supply_chain_relationship_delivery_relation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSupplyChainRelationshipDeliveryRelationDatum")
	}

	var resultSlice []*DataPlatformSupplyChainRelationshipDeliveryRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSupplyChainRelationshipDeliveryRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_supply_chain_relationship_delivery_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_supply_chain_relationship_delivery_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBillFromPartyDataPlatformSupplyChainRelationshipBillingRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadBillFromPartyDataPlatformSupplyChainRelationshipBillingRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		if !queries.IsNil(object.BillFromParty) {
			args = append(args, object.BillFromParty)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BillFromParty) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BillFromParty) {
				args = append(args, obj.BillFromParty)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_supply_chain_relationship_billing_relation_data`),
		qm.WhereIn(`data_platform_supply_chain_relationship_billing_relation_data.BillFromParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSupplyChainRelationshipBillingRelationDatum")
	}

	var resultSlice []*DataPlatformSupplyChainRelationshipBillingRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSupplyChainRelationshipBillingRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_supply_chain_relationship_billing_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_supply_chain_relationship_billing_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BillFromParty, foreign.BillFromParty) {
				local.R.BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadOrderIDDataPlatformOrdersItemDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadOrderIDDataPlatformOrdersItemDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		if !queries.IsNil(object.OrderID) {
			args = append(args, object.OrderID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OrderID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OrderID) {
				args = append(args, obj.OrderID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_data`),
		qm.WhereIn(`data_platform_orders_item_data.OrderID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformOrdersItemDatum")
	}

	var resultSlice []*DataPlatformOrdersItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformOrdersItemDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_orders_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrderIDDataPlatformOrdersItemDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OrderID, foreign.OrderID) {
				local.R.OrderIDDataPlatformOrdersItemDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadPaymentTerm allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadPaymentTerm(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		if !queries.IsNil(object.PaymentTerms) {
			args = append(args, object.PaymentTerms)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PaymentTerms) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PaymentTerms) {
				args = append(args, obj.PaymentTerms)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_payment_terms_payment_terms_data`),
		qm.WhereIn(`data_platform_payment_terms_payment_terms_data.PaymentTerms in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPaymentTermsPaymentTermsDatum")
	}

	var resultSlice []*DataPlatformPaymentTermsPaymentTermsDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPaymentTermsPaymentTermsDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_payment_terms_payment_terms_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_payment_terms_payment_terms_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PaymentTerm = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PaymentTerms, foreign.PaymentTerms) {
				local.R.PaymentTerm = foreign
				break
			}
		}
	}

	return nil
}

// LoadPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		if !queries.IsNil(object.PaymentMethod) {
			args = append(args, object.PaymentMethod)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PaymentMethod) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PaymentMethod) {
				args = append(args, obj.PaymentMethod)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_payment_method_payment_method_data`),
		qm.WhereIn(`data_platform_payment_method_payment_method_data.PaymentMethod in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPaymentMethodPaymentMethodDatum")
	}

	var resultSlice []*DataPlatformPaymentMethodPaymentMethodDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPaymentMethodPaymentMethodDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_payment_method_payment_method_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_payment_method_payment_method_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PaymentMethod, foreign.PaymentMethod) {
				local.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadCountryOfOriginLanguageDataPlatformLanguageLanguageDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadCountryOfOriginLanguageDataPlatformLanguageLanguageDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		if !queries.IsNil(object.CountryOfOriginLanguage) {
			args = append(args, object.CountryOfOriginLanguage)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CountryOfOriginLanguage) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CountryOfOriginLanguage) {
				args = append(args, obj.CountryOfOriginLanguage)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_language_language_data`),
		qm.WhereIn(`data_platform_language_language_data.Language in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformLanguageLanguageDatum")
	}

	var resultSlice []*DataPlatformLanguageLanguageDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformLanguageLanguageDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_language_language_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_language_language_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CountryOfOriginLanguageDataPlatformLanguageLanguageDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CountryOfOriginLanguage, foreign.Language) {
				local.R.CountryOfOriginLanguageDataPlatformLanguageLanguageDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBillFromPartyDataPlatformSupplyChainRelationshipPaymentRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadBillFromPartyDataPlatformSupplyChainRelationshipPaymentRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		if !queries.IsNil(object.BillFromParty) {
			args = append(args, object.BillFromParty)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BillFromParty) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BillFromParty) {
				args = append(args, obj.BillFromParty)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_supply_chain_relationship_payment_relation_data`),
		qm.WhereIn(`data_platform_supply_chain_relationship_payment_relation_data.BillFromParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSupplyChainRelationshipPaymentRelationDatum")
	}

	var resultSlice []*DataPlatformSupplyChainRelationshipPaymentRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSupplyChainRelationshipPaymentRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_supply_chain_relationship_payment_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_supply_chain_relationship_payment_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillFromPartyDataPlatformSupplyChainRelationshipPaymentRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BillFromParty, foreign.BillFromParty) {
				local.R.BillFromPartyDataPlatformSupplyChainRelationshipPaymentRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductGroupDataPlatformProductGroupProductGroupDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadProductGroupDataPlatformProductGroupProductGroupDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		if !queries.IsNil(object.ProductGroup) {
			args = append(args, object.ProductGroup)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductGroup) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProductGroup) {
				args = append(args, obj.ProductGroup)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_group_product_group_data`),
		qm.WhereIn(`data_platform_product_group_product_group_data.ProductGroup in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformProductGroupProductGroupDatum")
	}

	var resultSlice []*DataPlatformProductGroupProductGroupDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformProductGroupProductGroupDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_product_group_product_group_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_group_product_group_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductGroupDataPlatformProductGroupProductGroupDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProductGroup, foreign.ProductGroup) {
				local.R.ProductGroupDataPlatformProductGroupProductGroupDatum = foreign
				break
			}
		}
	}

	return nil
}

// SetBuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.BuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetBuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSupplyChainRelationshipDeliveryRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			BuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum = related
	}

	return nil
}

// SetBillFromPartyDataPlatformSupplyChainRelationshipBillingRelationDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetBillFromPartyDataPlatformSupplyChainRelationshipBillingRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSupplyChainRelationshipBillingRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BillFromParty"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BillFromParty, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BillFromParty, related.BillFromParty)
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationDatum: related,
		}
	} else {
		o.R.BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationDatum = related
	}

	return nil
}

// RemoveBillFromPartyDataPlatformSupplyChainRelationshipBillingRelationDatum relationship.
// Sets o.R.BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationDatum to nil.
func (o *DataPlatformDeliveryDocumentItemDatum) RemoveBillFromPartyDataPlatformSupplyChainRelationshipBillingRelationDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformSupplyChainRelationshipBillingRelationDatum) error {
	var err error

	queries.SetScanner(&o.BillFromParty, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("BillFromParty")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetOrderIDDataPlatformOrdersItemDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.OrderIDDataPlatformOrdersItemDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetOrderIDDataPlatformOrdersItemDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformOrdersItemDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"OrderID"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.OrderID, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OrderID, related.OrderID)
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			OrderIDDataPlatformOrdersItemDatum: related,
		}
	} else {
		o.R.OrderIDDataPlatformOrdersItemDatum = related
	}

	return nil
}

// RemoveOrderIDDataPlatformOrdersItemDatum relationship.
// Sets o.R.OrderIDDataPlatformOrdersItemDatum to nil.
func (o *DataPlatformDeliveryDocumentItemDatum) RemoveOrderIDDataPlatformOrdersItemDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformOrdersItemDatum) error {
	var err error

	queries.SetScanner(&o.OrderID, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("OrderID")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.OrderIDDataPlatformOrdersItemDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetPaymentTerm of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.PaymentTerm to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetPaymentTerm(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPaymentTermsPaymentTermsDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PaymentTerms"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PaymentTerms, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PaymentTerms, related.PaymentTerms)
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			PaymentTerm: related,
		}
	} else {
		o.R.PaymentTerm = related
	}

	return nil
}

// RemovePaymentTerm relationship.
// Sets o.R.PaymentTerm to nil.
func (o *DataPlatformDeliveryDocumentItemDatum) RemovePaymentTerm(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformPaymentTermsPaymentTermsDatum) error {
	var err error

	queries.SetScanner(&o.PaymentTerms, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("PaymentTerms")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.PaymentTerm = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPaymentMethodPaymentMethodDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PaymentMethod"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PaymentMethod, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PaymentMethod, related.PaymentMethod)
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum: related,
		}
	} else {
		o.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = related
	}

	return nil
}

// RemovePaymentMethodDataPlatformPaymentMethodPaymentMethodDatum relationship.
// Sets o.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum to nil.
func (o *DataPlatformDeliveryDocumentItemDatum) RemovePaymentMethodDataPlatformPaymentMethodPaymentMethodDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformPaymentMethodPaymentMethodDatum) error {
	var err error

	queries.SetScanner(&o.PaymentMethod, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("PaymentMethod")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetCountryOfOriginLanguageDataPlatformLanguageLanguageDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.CountryOfOriginLanguageDataPlatformLanguageLanguageDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetCountryOfOriginLanguageDataPlatformLanguageLanguageDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformLanguageLanguageDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"CountryOfOriginLanguage"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Language, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CountryOfOriginLanguage, related.Language)
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			CountryOfOriginLanguageDataPlatformLanguageLanguageDatum: related,
		}
	} else {
		o.R.CountryOfOriginLanguageDataPlatformLanguageLanguageDatum = related
	}

	return nil
}

// RemoveCountryOfOriginLanguageDataPlatformLanguageLanguageDatum relationship.
// Sets o.R.CountryOfOriginLanguageDataPlatformLanguageLanguageDatum to nil.
func (o *DataPlatformDeliveryDocumentItemDatum) RemoveCountryOfOriginLanguageDataPlatformLanguageLanguageDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformLanguageLanguageDatum) error {
	var err error

	queries.SetScanner(&o.CountryOfOriginLanguage, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("CountryOfOriginLanguage")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CountryOfOriginLanguageDataPlatformLanguageLanguageDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetBillFromPartyDataPlatformSupplyChainRelationshipPaymentRelationDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.BillFromPartyDataPlatformSupplyChainRelationshipPaymentRelationDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetBillFromPartyDataPlatformSupplyChainRelationshipPaymentRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSupplyChainRelationshipPaymentRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BillFromParty"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BillFromParty, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BillFromParty, related.BillFromParty)
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			BillFromPartyDataPlatformSupplyChainRelationshipPaymentRelationDatum: related,
		}
	} else {
		o.R.BillFromPartyDataPlatformSupplyChainRelationshipPaymentRelationDatum = related
	}

	return nil
}

// RemoveBillFromPartyDataPlatformSupplyChainRelationshipPaymentRelationDatum relationship.
// Sets o.R.BillFromPartyDataPlatformSupplyChainRelationshipPaymentRelationDatum to nil.
func (o *DataPlatformDeliveryDocumentItemDatum) RemoveBillFromPartyDataPlatformSupplyChainRelationshipPaymentRelationDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformSupplyChainRelationshipPaymentRelationDatum) error {
	var err error

	queries.SetScanner(&o.BillFromParty, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("BillFromParty")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.BillFromPartyDataPlatformSupplyChainRelationshipPaymentRelationDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetProductGroupDataPlatformProductGroupProductGroupDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.ProductGroupDataPlatformProductGroupProductGroupDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetProductGroupDataPlatformProductGroupProductGroupDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformProductGroupProductGroupDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductGroup"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.ProductGroup, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProductGroup, related.ProductGroup)
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			ProductGroupDataPlatformProductGroupProductGroupDatum: related,
		}
	} else {
		o.R.ProductGroupDataPlatformProductGroupProductGroupDatum = related
	}

	return nil
}

// RemoveProductGroupDataPlatformProductGroupProductGroupDatum relationship.
// Sets o.R.ProductGroupDataPlatformProductGroupProductGroupDatum to nil.
func (o *DataPlatformDeliveryDocumentItemDatum) RemoveProductGroupDataPlatformProductGroupProductGroupDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformProductGroupProductGroupDatum) error {
	var err error

	queries.SetScanner(&o.ProductGroup, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("ProductGroup")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductGroupDataPlatformProductGroupProductGroupDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// DataPlatformDeliveryDocumentItemData retrieves all the records using an executor.
func DataPlatformDeliveryDocumentItemData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentItemDatumQuery {
	mods = append(mods, qm.From("`data_platform_delivery_document_item_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_delivery_document_item_data`.*"})
	}

	return dataPlatformDeliveryDocumentItemDatumQuery{q}
}

// FindDataPlatformDeliveryDocumentItemDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformDeliveryDocumentItemDatum(ctx context.Context, exec boil.ContextExecutor, deliveryDocument int, deliveryDocumentItem int, selectCols ...string) (*DataPlatformDeliveryDocumentItemDatum, error) {
	dataPlatformDeliveryDocumentItemDatumObj := &DataPlatformDeliveryDocumentItemDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_delivery_document_item_data` where `DeliveryDocument`=? AND `DeliveryDocumentItem`=?", sel,
	)

	q := queries.Raw(query, deliveryDocument, deliveryDocumentItem)

	err := q.Bind(ctx, exec, dataPlatformDeliveryDocumentItemDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_delivery_document_item_data")
	}

	return dataPlatformDeliveryDocumentItemDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformDeliveryDocumentItemDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_delivery_document_item_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformDeliveryDocumentItemDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformDeliveryDocumentItemDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformDeliveryDocumentItemDatumInsertCache[key]
	dataPlatformDeliveryDocumentItemDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformDeliveryDocumentItemDatumAllColumns,
			dataPlatformDeliveryDocumentItemDatumColumnsWithDefault,
			dataPlatformDeliveryDocumentItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformDeliveryDocumentItemDatumType, dataPlatformDeliveryDocumentItemDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformDeliveryDocumentItemDatumType, dataPlatformDeliveryDocumentItemDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_delivery_document_item_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_delivery_document_item_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_delivery_document_item_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_delivery_document_item_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.DeliveryDocument,
		o.DeliveryDocumentItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_delivery_document_item_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformDeliveryDocumentItemDatumInsertCacheMut.Lock()
		dataPlatformDeliveryDocumentItemDatumInsertCache[key] = cache
		dataPlatformDeliveryDocumentItemDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformDeliveryDocumentItemDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformDeliveryDocumentItemDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformDeliveryDocumentItemDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformDeliveryDocumentItemDatumUpdateCache[key]
	dataPlatformDeliveryDocumentItemDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformDeliveryDocumentItemDatumAllColumns,
			dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_delivery_document_item_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformDeliveryDocumentItemDatumType, dataPlatformDeliveryDocumentItemDatumMapping, append(wl, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_delivery_document_item_data row")
	}

	if !cached {
		dataPlatformDeliveryDocumentItemDatumUpdateCacheMut.Lock()
		dataPlatformDeliveryDocumentItemDatumUpdateCache[key] = cache
		dataPlatformDeliveryDocumentItemDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformDeliveryDocumentItemDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_delivery_document_item_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformDeliveryDocumentItemDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformDeliveryDocumentItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformDeliveryDocumentItemDatum slice")
	}

	return nil
}

var mySQLDataPlatformDeliveryDocumentItemDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformDeliveryDocumentItemDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_delivery_document_item_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformDeliveryDocumentItemDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformDeliveryDocumentItemDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformDeliveryDocumentItemDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformDeliveryDocumentItemDatumUpsertCache[key]
	dataPlatformDeliveryDocumentItemDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformDeliveryDocumentItemDatumAllColumns,
			dataPlatformDeliveryDocumentItemDatumColumnsWithDefault,
			dataPlatformDeliveryDocumentItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformDeliveryDocumentItemDatumAllColumns,
			dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_delivery_document_item_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_delivery_document_item_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_delivery_document_item_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformDeliveryDocumentItemDatumType, dataPlatformDeliveryDocumentItemDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformDeliveryDocumentItemDatumType, dataPlatformDeliveryDocumentItemDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_delivery_document_item_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformDeliveryDocumentItemDatumType, dataPlatformDeliveryDocumentItemDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_delivery_document_item_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_delivery_document_item_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformDeliveryDocumentItemDatumUpsertCacheMut.Lock()
		dataPlatformDeliveryDocumentItemDatumUpsertCache[key] = cache
		dataPlatformDeliveryDocumentItemDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformDeliveryDocumentItemDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformDeliveryDocumentItemDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformDeliveryDocumentItemDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformDeliveryDocumentItemDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_delivery_document_item_data` WHERE `DeliveryDocument`=? AND `DeliveryDocumentItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_delivery_document_item_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformDeliveryDocumentItemDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformDeliveryDocumentItemDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_delivery_document_item_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformDeliveryDocumentItemDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformDeliveryDocumentItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_delivery_document_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformDeliveryDocumentItemDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformDeliveryDocumentItemDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformDeliveryDocumentItemDatum(ctx, exec, o.DeliveryDocument, o.DeliveryDocumentItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformDeliveryDocumentItemDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformDeliveryDocumentItemDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformDeliveryDocumentItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_delivery_document_item_data`.* FROM `data_platform_delivery_document_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformDeliveryDocumentItemDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformDeliveryDocumentItemDatumExists checks if the DataPlatformDeliveryDocumentItemDatum row exists.
func DataPlatformDeliveryDocumentItemDatumExists(ctx context.Context, exec boil.ContextExecutor, deliveryDocument int, deliveryDocumentItem int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_delivery_document_item_data` where `DeliveryDocument`=? AND `DeliveryDocumentItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, deliveryDocument, deliveryDocumentItem)
	}
	row := exec.QueryRowContext(ctx, sql, deliveryDocument, deliveryDocumentItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_delivery_document_item_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformDeliveryDocumentItemDatum row exists.
func (o *DataPlatformDeliveryDocumentItemDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformDeliveryDocumentItemDatumExists(ctx, exec, o.DeliveryDocument, o.DeliveryDocumentItem)
}
