// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformDeliveryDocumentItemDatum is an object representing the database table.
type DataPlatformDeliveryDocumentItemDatum struct {
	DeliveryDocument                              int          `boil:"DeliveryDocument" json:"DeliveryDocument" toml:"DeliveryDocument" yaml:"DeliveryDocument"`
	DeliveryDocumentItem                          int          `boil:"DeliveryDocumentItem" json:"DeliveryDocumentItem" toml:"DeliveryDocumentItem" yaml:"DeliveryDocumentItem"`
	DeliveryDocumentItemCategory                  string       `boil:"DeliveryDocumentItemCategory" json:"DeliveryDocumentItemCategory" toml:"DeliveryDocumentItemCategory" yaml:"DeliveryDocumentItemCategory"`
	SupplyChainRelationshipID                     int          `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipDeliveryID             int          `boil:"SupplyChainRelationshipDeliveryID" json:"SupplyChainRelationshipDeliveryID" toml:"SupplyChainRelationshipDeliveryID" yaml:"SupplyChainRelationshipDeliveryID"`
	SupplyChainRelationshipDeliveryPlantID        int          `boil:"SupplyChainRelationshipDeliveryPlantID" json:"SupplyChainRelationshipDeliveryPlantID" toml:"SupplyChainRelationshipDeliveryPlantID" yaml:"SupplyChainRelationshipDeliveryPlantID"`
	SupplyChainRelationshipStockConfPlantID       int          `boil:"SupplyChainRelationshipStockConfPlantID" json:"SupplyChainRelationshipStockConfPlantID" toml:"SupplyChainRelationshipStockConfPlantID" yaml:"SupplyChainRelationshipStockConfPlantID"`
	SupplyChainRelationshipProductionPlantID      int          `boil:"SupplyChainRelationshipProductionPlantID" json:"SupplyChainRelationshipProductionPlantID" toml:"SupplyChainRelationshipProductionPlantID" yaml:"SupplyChainRelationshipProductionPlantID"`
	SupplyChainRelationshipBillingID              null.Int     `boil:"SupplyChainRelationshipBillingID" json:"SupplyChainRelationshipBillingID,omitempty" toml:"SupplyChainRelationshipBillingID" yaml:"SupplyChainRelationshipBillingID,omitempty"`
	SupplyChainRelationshipPaymentID              null.Int     `boil:"SupplyChainRelationshipPaymentID" json:"SupplyChainRelationshipPaymentID,omitempty" toml:"SupplyChainRelationshipPaymentID" yaml:"SupplyChainRelationshipPaymentID,omitempty"`
	SupplyChainRelationshipFreightID              null.Int     `boil:"SupplyChainRelationshipFreightID" json:"SupplyChainRelationshipFreightID,omitempty" toml:"SupplyChainRelationshipFreightID" yaml:"SupplyChainRelationshipFreightID,omitempty"`
	Buyer                                         int          `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                                        int          `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	DeliverToParty                                int          `boil:"DeliverToParty" json:"DeliverToParty" toml:"DeliverToParty" yaml:"DeliverToParty"`
	DeliverFromParty                              int          `boil:"DeliverFromParty" json:"DeliverFromParty" toml:"DeliverFromParty" yaml:"DeliverFromParty"`
	DeliverToPlant                                string       `boil:"DeliverToPlant" json:"DeliverToPlant" toml:"DeliverToPlant" yaml:"DeliverToPlant"`
	DeliverFromPlant                              string       `boil:"DeliverFromPlant" json:"DeliverFromPlant" toml:"DeliverFromPlant" yaml:"DeliverFromPlant"`
	BillToParty                                   null.Int     `boil:"BillToParty" json:"BillToParty,omitempty" toml:"BillToParty" yaml:"BillToParty,omitempty"`
	BillFromParty                                 null.Int     `boil:"BillFromParty" json:"BillFromParty,omitempty" toml:"BillFromParty" yaml:"BillFromParty,omitempty"`
	BillToCountry                                 null.String  `boil:"BillToCountry" json:"BillToCountry,omitempty" toml:"BillToCountry" yaml:"BillToCountry,omitempty"`
	BillFromCountry                               null.String  `boil:"BillFromCountry" json:"BillFromCountry,omitempty" toml:"BillFromCountry" yaml:"BillFromCountry,omitempty"`
	Payer                                         null.Int     `boil:"Payer" json:"Payer,omitempty" toml:"Payer" yaml:"Payer,omitempty"`
	Payee                                         null.Int     `boil:"Payee" json:"Payee,omitempty" toml:"Payee" yaml:"Payee,omitempty"`
	FreightPartner                                null.Int     `boil:"FreightPartner" json:"FreightPartner,omitempty" toml:"FreightPartner" yaml:"FreightPartner,omitempty"`
	Product                                       string       `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	SizeOrDimensionText                           null.String  `boil:"SizeOrDimensionText" json:"SizeOrDimensionText,omitempty" toml:"SizeOrDimensionText" yaml:"SizeOrDimensionText,omitempty"`
	ProductStandardID                             null.String  `boil:"ProductStandardID" json:"ProductStandardID,omitempty" toml:"ProductStandardID" yaml:"ProductStandardID,omitempty"`
	ProductGroup                                  null.String  `boil:"ProductGroup" json:"ProductGroup,omitempty" toml:"ProductGroup" yaml:"ProductGroup,omitempty"`
	ProductSpecification                          null.String  `boil:"ProductSpecification" json:"ProductSpecification,omitempty" toml:"ProductSpecification" yaml:"ProductSpecification,omitempty"`
	MarkingOfMaterial                             null.String  `boil:"MarkingOfMaterial" json:"MarkingOfMaterial,omitempty" toml:"MarkingOfMaterial" yaml:"MarkingOfMaterial,omitempty"`
	BaseUnit                                      string       `boil:"BaseUnit" json:"BaseUnit" toml:"BaseUnit" yaml:"BaseUnit"`
	DeliveryUnit                                  string       `boil:"DeliveryUnit" json:"DeliveryUnit" toml:"DeliveryUnit" yaml:"DeliveryUnit"`
	OriginalQuantityInBaseUnit                    float32      `boil:"OriginalQuantityInBaseUnit" json:"OriginalQuantityInBaseUnit" toml:"OriginalQuantityInBaseUnit" yaml:"OriginalQuantityInBaseUnit"`
	OriginalQuantityInDeliveryUnit                float32      `boil:"OriginalQuantityInDeliveryUnit" json:"OriginalQuantityInDeliveryUnit" toml:"OriginalQuantityInDeliveryUnit" yaml:"OriginalQuantityInDeliveryUnit"`
	DeliverToPlantStorageLocation                 null.String  `boil:"DeliverToPlantStorageLocation" json:"DeliverToPlantStorageLocation,omitempty" toml:"DeliverToPlantStorageLocation" yaml:"DeliverToPlantStorageLocation,omitempty"`
	ProductIsBatchManagedInDeliverToPlant         null.Bool    `boil:"ProductIsBatchManagedInDeliverToPlant" json:"ProductIsBatchManagedInDeliverToPlant,omitempty" toml:"ProductIsBatchManagedInDeliverToPlant" yaml:"ProductIsBatchManagedInDeliverToPlant,omitempty"`
	BatchMgmtPolicyInDeliverToPlant               null.String  `boil:"BatchMgmtPolicyInDeliverToPlant" json:"BatchMgmtPolicyInDeliverToPlant,omitempty" toml:"BatchMgmtPolicyInDeliverToPlant" yaml:"BatchMgmtPolicyInDeliverToPlant,omitempty"`
	DeliverToPlantBatch                           null.String  `boil:"DeliverToPlantBatch" json:"DeliverToPlantBatch,omitempty" toml:"DeliverToPlantBatch" yaml:"DeliverToPlantBatch,omitempty"`
	DeliverToPlantBatchValidityStartDate          null.String  `boil:"DeliverToPlantBatchValidityStartDate" json:"DeliverToPlantBatchValidityStartDate,omitempty" toml:"DeliverToPlantBatchValidityStartDate" yaml:"DeliverToPlantBatchValidityStartDate,omitempty"`
	DeliverToPlantBatchValidityStartTime          null.String  `boil:"DeliverToPlantBatchValidityStartTime" json:"DeliverToPlantBatchValidityStartTime,omitempty" toml:"DeliverToPlantBatchValidityStartTime" yaml:"DeliverToPlantBatchValidityStartTime,omitempty"`
	DeliverToPlantBatchValidityEndDate            null.String  `boil:"DeliverToPlantBatchValidityEndDate" json:"DeliverToPlantBatchValidityEndDate,omitempty" toml:"DeliverToPlantBatchValidityEndDate" yaml:"DeliverToPlantBatchValidityEndDate,omitempty"`
	DeliverToPlantBatchValidityEndTime            null.String  `boil:"DeliverToPlantBatchValidityEndTime" json:"DeliverToPlantBatchValidityEndTime,omitempty" toml:"DeliverToPlantBatchValidityEndTime" yaml:"DeliverToPlantBatchValidityEndTime,omitempty"`
	DeliverFromPlantStorageLocation               null.String  `boil:"DeliverFromPlantStorageLocation" json:"DeliverFromPlantStorageLocation,omitempty" toml:"DeliverFromPlantStorageLocation" yaml:"DeliverFromPlantStorageLocation,omitempty"`
	ProductIsBatchManagedInDeliverFromPlant       null.Bool    `boil:"ProductIsBatchManagedInDeliverFromPlant" json:"ProductIsBatchManagedInDeliverFromPlant,omitempty" toml:"ProductIsBatchManagedInDeliverFromPlant" yaml:"ProductIsBatchManagedInDeliverFromPlant,omitempty"`
	BatchMgmtPolicyInDeliverFromPlant             null.String  `boil:"BatchMgmtPolicyInDeliverFromPlant" json:"BatchMgmtPolicyInDeliverFromPlant,omitempty" toml:"BatchMgmtPolicyInDeliverFromPlant" yaml:"BatchMgmtPolicyInDeliverFromPlant,omitempty"`
	DeliverFromPlantBatch                         null.String  `boil:"DeliverFromPlantBatch" json:"DeliverFromPlantBatch,omitempty" toml:"DeliverFromPlantBatch" yaml:"DeliverFromPlantBatch,omitempty"`
	DeliverFromPlantBatchValidityStartDate        null.String  `boil:"DeliverFromPlantBatchValidityStartDate" json:"DeliverFromPlantBatchValidityStartDate,omitempty" toml:"DeliverFromPlantBatchValidityStartDate" yaml:"DeliverFromPlantBatchValidityStartDate,omitempty"`
	DeliverFromPlantBatchValidityStartTime        null.String  `boil:"DeliverFromPlantBatchValidityStartTime" json:"DeliverFromPlantBatchValidityStartTime,omitempty" toml:"DeliverFromPlantBatchValidityStartTime" yaml:"DeliverFromPlantBatchValidityStartTime,omitempty"`
	DeliverFromPlantBatchValidityEndDate          null.String  `boil:"DeliverFromPlantBatchValidityEndDate" json:"DeliverFromPlantBatchValidityEndDate,omitempty" toml:"DeliverFromPlantBatchValidityEndDate" yaml:"DeliverFromPlantBatchValidityEndDate,omitempty"`
	DeliverFromPlantBatchValidityEndTime          null.String  `boil:"DeliverFromPlantBatchValidityEndTime" json:"DeliverFromPlantBatchValidityEndTime,omitempty" toml:"DeliverFromPlantBatchValidityEndTime" yaml:"DeliverFromPlantBatchValidityEndTime,omitempty"`
	StockConfirmationBusinessPartner              int          `boil:"StockConfirmationBusinessPartner" json:"StockConfirmationBusinessPartner" toml:"StockConfirmationBusinessPartner" yaml:"StockConfirmationBusinessPartner"`
	StockConfirmationPlant                        string       `boil:"StockConfirmationPlant" json:"StockConfirmationPlant" toml:"StockConfirmationPlant" yaml:"StockConfirmationPlant"`
	ProductIsBatchManagedInStockConfirmationPlant null.Bool    `boil:"ProductIsBatchManagedInStockConfirmationPlant" json:"ProductIsBatchManagedInStockConfirmationPlant,omitempty" toml:"ProductIsBatchManagedInStockConfirmationPlant" yaml:"ProductIsBatchManagedInStockConfirmationPlant,omitempty"`
	BatchMgmtPolicyInStockConfirmationPlant       null.String  `boil:"BatchMgmtPolicyInStockConfirmationPlant" json:"BatchMgmtPolicyInStockConfirmationPlant,omitempty" toml:"BatchMgmtPolicyInStockConfirmationPlant" yaml:"BatchMgmtPolicyInStockConfirmationPlant,omitempty"`
	StockConfirmationPlantBatch                   null.String  `boil:"StockConfirmationPlantBatch" json:"StockConfirmationPlantBatch,omitempty" toml:"StockConfirmationPlantBatch" yaml:"StockConfirmationPlantBatch,omitempty"`
	StockConfirmationPlantBatchValidityStartDate  null.String  `boil:"StockConfirmationPlantBatchValidityStartDate" json:"StockConfirmationPlantBatchValidityStartDate,omitempty" toml:"StockConfirmationPlantBatchValidityStartDate" yaml:"StockConfirmationPlantBatchValidityStartDate,omitempty"`
	StockConfirmationPlantBatchValidityStartTime  null.String  `boil:"StockConfirmationPlantBatchValidityStartTime" json:"StockConfirmationPlantBatchValidityStartTime,omitempty" toml:"StockConfirmationPlantBatchValidityStartTime" yaml:"StockConfirmationPlantBatchValidityStartTime,omitempty"`
	StockConfirmationPlantBatchValidityEndDate    null.String  `boil:"StockConfirmationPlantBatchValidityEndDate" json:"StockConfirmationPlantBatchValidityEndDate,omitempty" toml:"StockConfirmationPlantBatchValidityEndDate" yaml:"StockConfirmationPlantBatchValidityEndDate,omitempty"`
	StockConfirmationPlantBatchValidityEndTime    null.String  `boil:"StockConfirmationPlantBatchValidityEndTime" json:"StockConfirmationPlantBatchValidityEndTime,omitempty" toml:"StockConfirmationPlantBatchValidityEndTime" yaml:"StockConfirmationPlantBatchValidityEndTime,omitempty"`
	StockConfirmationPolicy                       null.String  `boil:"StockConfirmationPolicy" json:"StockConfirmationPolicy,omitempty" toml:"StockConfirmationPolicy" yaml:"StockConfirmationPolicy,omitempty"`
	StockConfirmationStatus                       null.String  `boil:"StockConfirmationStatus" json:"StockConfirmationStatus,omitempty" toml:"StockConfirmationStatus" yaml:"StockConfirmationStatus,omitempty"`
	ProductionPlantBusinessPartner                null.Int     `boil:"ProductionPlantBusinessPartner" json:"ProductionPlantBusinessPartner,omitempty" toml:"ProductionPlantBusinessPartner" yaml:"ProductionPlantBusinessPartner,omitempty"`
	ProductionPlant                               null.String  `boil:"ProductionPlant" json:"ProductionPlant,omitempty" toml:"ProductionPlant" yaml:"ProductionPlant,omitempty"`
	ProductionPlantStorageLocation                null.String  `boil:"ProductionPlantStorageLocation" json:"ProductionPlantStorageLocation,omitempty" toml:"ProductionPlantStorageLocation" yaml:"ProductionPlantStorageLocation,omitempty"`
	ProductIsBatchManagedInProductionPlant        null.Bool    `boil:"ProductIsBatchManagedInProductionPlant" json:"ProductIsBatchManagedInProductionPlant,omitempty" toml:"ProductIsBatchManagedInProductionPlant" yaml:"ProductIsBatchManagedInProductionPlant,omitempty"`
	BatchMgmtPolicyInProductionPlant              null.String  `boil:"BatchMgmtPolicyInProductionPlant" json:"BatchMgmtPolicyInProductionPlant,omitempty" toml:"BatchMgmtPolicyInProductionPlant" yaml:"BatchMgmtPolicyInProductionPlant,omitempty"`
	ProductionPlantBatch                          null.String  `boil:"ProductionPlantBatch" json:"ProductionPlantBatch,omitempty" toml:"ProductionPlantBatch" yaml:"ProductionPlantBatch,omitempty"`
	ProductionPlantBatchValidityStartDate         null.String  `boil:"ProductionPlantBatchValidityStartDate" json:"ProductionPlantBatchValidityStartDate,omitempty" toml:"ProductionPlantBatchValidityStartDate" yaml:"ProductionPlantBatchValidityStartDate,omitempty"`
	ProductionPlantBatchValidityStartTime         null.String  `boil:"ProductionPlantBatchValidityStartTime" json:"ProductionPlantBatchValidityStartTime,omitempty" toml:"ProductionPlantBatchValidityStartTime" yaml:"ProductionPlantBatchValidityStartTime,omitempty"`
	ProductionPlantBatchValidityEndDate           null.String  `boil:"ProductionPlantBatchValidityEndDate" json:"ProductionPlantBatchValidityEndDate,omitempty" toml:"ProductionPlantBatchValidityEndDate" yaml:"ProductionPlantBatchValidityEndDate,omitempty"`
	ProductionPlantBatchValidityEndTime           null.String  `boil:"ProductionPlantBatchValidityEndTime" json:"ProductionPlantBatchValidityEndTime,omitempty" toml:"ProductionPlantBatchValidityEndTime" yaml:"ProductionPlantBatchValidityEndTime,omitempty"`
	InspectionPlantBusinessPartner                null.Int     `boil:"InspectionPlantBusinessPartner" json:"InspectionPlantBusinessPartner,omitempty" toml:"InspectionPlantBusinessPartner" yaml:"InspectionPlantBusinessPartner,omitempty"`
	InspectionPlant                               null.String  `boil:"InspectionPlant" json:"InspectionPlant,omitempty" toml:"InspectionPlant" yaml:"InspectionPlant,omitempty"`
	InspectionPlan                                null.Int     `boil:"InspectionPlan" json:"InspectionPlan,omitempty" toml:"InspectionPlan" yaml:"InspectionPlan,omitempty"`
	InspectionLot                                 null.Int     `boil:"InspectionLot" json:"InspectionLot,omitempty" toml:"InspectionLot" yaml:"InspectionLot,omitempty"`
	DeliveryDocumentItemText                      null.String  `boil:"DeliveryDocumentItemText" json:"DeliveryDocumentItemText,omitempty" toml:"DeliveryDocumentItemText" yaml:"DeliveryDocumentItemText,omitempty"`
	DeliveryDocumentItemTextByBuyer               string       `boil:"DeliveryDocumentItemTextByBuyer" json:"DeliveryDocumentItemTextByBuyer" toml:"DeliveryDocumentItemTextByBuyer" yaml:"DeliveryDocumentItemTextByBuyer"`
	DeliveryDocumentItemTextBySeller              string       `boil:"DeliveryDocumentItemTextBySeller" json:"DeliveryDocumentItemTextBySeller" toml:"DeliveryDocumentItemTextBySeller" yaml:"DeliveryDocumentItemTextBySeller"`
	PlannedGoodsIssueDate                         string       `boil:"PlannedGoodsIssueDate" json:"PlannedGoodsIssueDate" toml:"PlannedGoodsIssueDate" yaml:"PlannedGoodsIssueDate"`
	PlannedGoodsIssueTime                         string       `boil:"PlannedGoodsIssueTime" json:"PlannedGoodsIssueTime" toml:"PlannedGoodsIssueTime" yaml:"PlannedGoodsIssueTime"`
	PlannedGoodsReceiptDate                       string       `boil:"PlannedGoodsReceiptDate" json:"PlannedGoodsReceiptDate" toml:"PlannedGoodsReceiptDate" yaml:"PlannedGoodsReceiptDate"`
	PlannedGoodsReceiptTime                       string       `boil:"PlannedGoodsReceiptTime" json:"PlannedGoodsReceiptTime" toml:"PlannedGoodsReceiptTime" yaml:"PlannedGoodsReceiptTime"`
	PlannedGoodsIssueQuantity                     float32      `boil:"PlannedGoodsIssueQuantity" json:"PlannedGoodsIssueQuantity" toml:"PlannedGoodsIssueQuantity" yaml:"PlannedGoodsIssueQuantity"`
	PlannedGoodsIssueQtyInBaseUnit                float32      `boil:"PlannedGoodsIssueQtyInBaseUnit" json:"PlannedGoodsIssueQtyInBaseUnit" toml:"PlannedGoodsIssueQtyInBaseUnit" yaml:"PlannedGoodsIssueQtyInBaseUnit"`
	PlannedGoodsReceiptQuantity                   float32      `boil:"PlannedGoodsReceiptQuantity" json:"PlannedGoodsReceiptQuantity" toml:"PlannedGoodsReceiptQuantity" yaml:"PlannedGoodsReceiptQuantity"`
	PlannedGoodsReceiptQtyInBaseUnit              float32      `boil:"PlannedGoodsReceiptQtyInBaseUnit" json:"PlannedGoodsReceiptQtyInBaseUnit" toml:"PlannedGoodsReceiptQtyInBaseUnit" yaml:"PlannedGoodsReceiptQtyInBaseUnit"`
	ActualGoodsIssueDate                          null.String  `boil:"ActualGoodsIssueDate" json:"ActualGoodsIssueDate,omitempty" toml:"ActualGoodsIssueDate" yaml:"ActualGoodsIssueDate,omitempty"`
	ActualGoodsIssueTime                          null.String  `boil:"ActualGoodsIssueTime" json:"ActualGoodsIssueTime,omitempty" toml:"ActualGoodsIssueTime" yaml:"ActualGoodsIssueTime,omitempty"`
	ActualGoodsReceiptDate                        null.String  `boil:"ActualGoodsReceiptDate" json:"ActualGoodsReceiptDate,omitempty" toml:"ActualGoodsReceiptDate" yaml:"ActualGoodsReceiptDate,omitempty"`
	ActualGoodsReceiptTime                        null.String  `boil:"ActualGoodsReceiptTime" json:"ActualGoodsReceiptTime,omitempty" toml:"ActualGoodsReceiptTime" yaml:"ActualGoodsReceiptTime,omitempty"`
	ActualGoodsIssueQuantity                      null.Float32 `boil:"ActualGoodsIssueQuantity" json:"ActualGoodsIssueQuantity,omitempty" toml:"ActualGoodsIssueQuantity" yaml:"ActualGoodsIssueQuantity,omitempty"`
	ActualGoodsIssueQtyInBaseUnit                 null.Float32 `boil:"ActualGoodsIssueQtyInBaseUnit" json:"ActualGoodsIssueQtyInBaseUnit,omitempty" toml:"ActualGoodsIssueQtyInBaseUnit" yaml:"ActualGoodsIssueQtyInBaseUnit,omitempty"`
	ActualGoodsReceiptQuantity                    null.Float32 `boil:"ActualGoodsReceiptQuantity" json:"ActualGoodsReceiptQuantity,omitempty" toml:"ActualGoodsReceiptQuantity" yaml:"ActualGoodsReceiptQuantity,omitempty"`
	ActualGoodsReceiptQtyInBaseUnit               null.Float32 `boil:"ActualGoodsReceiptQtyInBaseUnit" json:"ActualGoodsReceiptQtyInBaseUnit,omitempty" toml:"ActualGoodsReceiptQtyInBaseUnit" yaml:"ActualGoodsReceiptQtyInBaseUnit,omitempty"`
	QuantityPerPackage                            null.Float32 `boil:"QuantityPerPackage" json:"QuantityPerPackage,omitempty" toml:"QuantityPerPackage" yaml:"QuantityPerPackage,omitempty"`
	ItemBillingStatus                             null.String  `boil:"ItemBillingStatus" json:"ItemBillingStatus,omitempty" toml:"ItemBillingStatus" yaml:"ItemBillingStatus,omitempty"`
	ItemCompleteDeliveryIsDefined                 null.Bool    `boil:"ItemCompleteDeliveryIsDefined" json:"ItemCompleteDeliveryIsDefined,omitempty" toml:"ItemCompleteDeliveryIsDefined" yaml:"ItemCompleteDeliveryIsDefined,omitempty"`
	ItemWeightUnit                                null.String  `boil:"ItemWeightUnit" json:"ItemWeightUnit,omitempty" toml:"ItemWeightUnit" yaml:"ItemWeightUnit,omitempty"`
	ItemNetWeight                                 null.Float32 `boil:"ItemNetWeight" json:"ItemNetWeight,omitempty" toml:"ItemNetWeight" yaml:"ItemNetWeight,omitempty"`
	ItemGrossWeight                               null.Float32 `boil:"ItemGrossWeight" json:"ItemGrossWeight,omitempty" toml:"ItemGrossWeight" yaml:"ItemGrossWeight,omitempty"`
	InternalCapacityQuantity                      null.Float32 `boil:"InternalCapacityQuantity" json:"InternalCapacityQuantity,omitempty" toml:"InternalCapacityQuantity" yaml:"InternalCapacityQuantity,omitempty"`
	InternalCapacityQuantityUnit                  null.String  `boil:"InternalCapacityQuantityUnit" json:"InternalCapacityQuantityUnit,omitempty" toml:"InternalCapacityQuantityUnit" yaml:"InternalCapacityQuantityUnit,omitempty"`
	ItemIsBillingRelevant                         null.Bool    `boil:"ItemIsBillingRelevant" json:"ItemIsBillingRelevant,omitempty" toml:"ItemIsBillingRelevant" yaml:"ItemIsBillingRelevant,omitempty"`
	NetAmount                                     null.Float32 `boil:"NetAmount" json:"NetAmount,omitempty" toml:"NetAmount" yaml:"NetAmount,omitempty"`
	TaxAmount                                     null.Float32 `boil:"TaxAmount" json:"TaxAmount,omitempty" toml:"TaxAmount" yaml:"TaxAmount,omitempty"`
	GrossAmount                                   null.Float32 `boil:"GrossAmount" json:"GrossAmount,omitempty" toml:"GrossAmount" yaml:"GrossAmount,omitempty"`
	OrderID                                       null.Int     `boil:"OrderID" json:"OrderID,omitempty" toml:"OrderID" yaml:"OrderID,omitempty"`
	OrderItem                                     null.Int     `boil:"OrderItem" json:"OrderItem,omitempty" toml:"OrderItem" yaml:"OrderItem,omitempty"`
	Contract                                      null.Int     `boil:"Contract" json:"Contract,omitempty" toml:"Contract" yaml:"Contract,omitempty"`
	ContractItem                                  null.Int     `boil:"ContractItem" json:"ContractItem,omitempty" toml:"ContractItem" yaml:"ContractItem,omitempty"`
	ProductionVersion                             null.Int     `boil:"ProductionVersion" json:"ProductionVersion,omitempty" toml:"ProductionVersion" yaml:"ProductionVersion,omitempty"`
	ProductionVersionItem                         null.Int     `boil:"ProductionVersionItem" json:"ProductionVersionItem,omitempty" toml:"ProductionVersionItem" yaml:"ProductionVersionItem,omitempty"`
	ProductionOrder                               null.Int     `boil:"ProductionOrder" json:"ProductionOrder,omitempty" toml:"ProductionOrder" yaml:"ProductionOrder,omitempty"`
	ProductionOrderItem                           null.Int     `boil:"ProductionOrderItem" json:"ProductionOrderItem,omitempty" toml:"ProductionOrderItem" yaml:"ProductionOrderItem,omitempty"`
	BillOfMaterial                                null.Int     `boil:"BillOfMaterial" json:"BillOfMaterial,omitempty" toml:"BillOfMaterial" yaml:"BillOfMaterial,omitempty"`
	BillOfMaterialItem                            null.Int     `boil:"BillOfMaterialItem" json:"BillOfMaterialItem,omitempty" toml:"BillOfMaterialItem" yaml:"BillOfMaterialItem,omitempty"`
	Operations                                    null.Int     `boil:"Operations" json:"Operations,omitempty" toml:"Operations" yaml:"Operations,omitempty"`
	OperationsItem                                null.Int     `boil:"OperationsItem" json:"OperationsItem,omitempty" toml:"OperationsItem" yaml:"OperationsItem,omitempty"`
	OperationID                                   null.Int     `boil:"OperationID" json:"OperationID,omitempty" toml:"OperationID" yaml:"OperationID,omitempty"`
	OrderType                                     null.String  `boil:"OrderType" json:"OrderType,omitempty" toml:"OrderType" yaml:"OrderType,omitempty"`
	ContractType                                  null.String  `boil:"ContractType" json:"ContractType,omitempty" toml:"ContractType" yaml:"ContractType,omitempty"`
	OrderValidityStartDate                        null.String  `boil:"OrderValidityStartDate" json:"OrderValidityStartDate,omitempty" toml:"OrderValidityStartDate" yaml:"OrderValidityStartDate,omitempty"`
	OrderValidityEndDate                          null.String  `boil:"OrderValidityEndDate" json:"OrderValidityEndDate,omitempty" toml:"OrderValidityEndDate" yaml:"OrderValidityEndDate,omitempty"`
	PaymentTerms                                  null.String  `boil:"PaymentTerms" json:"PaymentTerms,omitempty" toml:"PaymentTerms" yaml:"PaymentTerms,omitempty"`
	DueCalculationBaseDate                        null.String  `boil:"DueCalculationBaseDate" json:"DueCalculationBaseDate,omitempty" toml:"DueCalculationBaseDate" yaml:"DueCalculationBaseDate,omitempty"`
	PaymentDueDate                                null.String  `boil:"PaymentDueDate" json:"PaymentDueDate,omitempty" toml:"PaymentDueDate" yaml:"PaymentDueDate,omitempty"`
	NetPaymentDays                                null.Int     `boil:"NetPaymentDays" json:"NetPaymentDays,omitempty" toml:"NetPaymentDays" yaml:"NetPaymentDays,omitempty"`
	PaymentMethod                                 null.String  `boil:"PaymentMethod" json:"PaymentMethod,omitempty" toml:"PaymentMethod" yaml:"PaymentMethod,omitempty"`
	InvoicePeriodStartDate                        null.String  `boil:"InvoicePeriodStartDate" json:"InvoicePeriodStartDate,omitempty" toml:"InvoicePeriodStartDate" yaml:"InvoicePeriodStartDate,omitempty"`
	InvoicePeriodEndDate                          null.String  `boil:"InvoicePeriodEndDate" json:"InvoicePeriodEndDate,omitempty" toml:"InvoicePeriodEndDate" yaml:"InvoicePeriodEndDate,omitempty"`
	ConfirmedDeliveryDate                         null.String  `boil:"ConfirmedDeliveryDate" json:"ConfirmedDeliveryDate,omitempty" toml:"ConfirmedDeliveryDate" yaml:"ConfirmedDeliveryDate,omitempty"`
	Project                                       null.Int     `boil:"Project" json:"Project,omitempty" toml:"Project" yaml:"Project,omitempty"`
	WBSElement                                    null.Int     `boil:"WBSElement" json:"WBSElement,omitempty" toml:"WBSElement" yaml:"WBSElement,omitempty"`
	ReferenceDocument                             null.Int     `boil:"ReferenceDocument" json:"ReferenceDocument,omitempty" toml:"ReferenceDocument" yaml:"ReferenceDocument,omitempty"`
	ReferenceDocumentItem                         null.Int     `boil:"ReferenceDocumentItem" json:"ReferenceDocumentItem,omitempty" toml:"ReferenceDocumentItem" yaml:"ReferenceDocumentItem,omitempty"`
	TransactionTaxClassification                  string       `boil:"TransactionTaxClassification" json:"TransactionTaxClassification" toml:"TransactionTaxClassification" yaml:"TransactionTaxClassification"`
	ProductTaxClassificationBillToCountry         string       `boil:"ProductTaxClassificationBillToCountry" json:"ProductTaxClassificationBillToCountry" toml:"ProductTaxClassificationBillToCountry" yaml:"ProductTaxClassificationBillToCountry"`
	ProductTaxClassificationBillFromCountry       string       `boil:"ProductTaxClassificationBillFromCountry" json:"ProductTaxClassificationBillFromCountry" toml:"ProductTaxClassificationBillFromCountry" yaml:"ProductTaxClassificationBillFromCountry"`
	DefinedTaxClassification                      string       `boil:"DefinedTaxClassification" json:"DefinedTaxClassification" toml:"DefinedTaxClassification" yaml:"DefinedTaxClassification"`
	AccountAssignmentGroup                        string       `boil:"AccountAssignmentGroup" json:"AccountAssignmentGroup" toml:"AccountAssignmentGroup" yaml:"AccountAssignmentGroup"`
	ProductAccountAssignmentGroup                 string       `boil:"ProductAccountAssignmentGroup" json:"ProductAccountAssignmentGroup" toml:"ProductAccountAssignmentGroup" yaml:"ProductAccountAssignmentGroup"`
	TaxCode                                       null.String  `boil:"TaxCode" json:"TaxCode,omitempty" toml:"TaxCode" yaml:"TaxCode,omitempty"`
	TaxRate                                       null.Float32 `boil:"TaxRate" json:"TaxRate,omitempty" toml:"TaxRate" yaml:"TaxRate,omitempty"`
	CountryOfOrigin                               null.String  `boil:"CountryOfOrigin" json:"CountryOfOrigin,omitempty" toml:"CountryOfOrigin" yaml:"CountryOfOrigin,omitempty"`
	CountryOfOriginLanguage                       null.String  `boil:"CountryOfOriginLanguage" json:"CountryOfOriginLanguage,omitempty" toml:"CountryOfOriginLanguage" yaml:"CountryOfOriginLanguage,omitempty"`
	Equipment                                     null.Int     `boil:"Equipment" json:"Equipment,omitempty" toml:"Equipment" yaml:"Equipment,omitempty"`
	FreightOrder                                  null.Int     `boil:"FreightOrder" json:"FreightOrder,omitempty" toml:"FreightOrder" yaml:"FreightOrder,omitempty"`
	ItemDeliveryBlockStatus                       null.Bool    `boil:"ItemDeliveryBlockStatus" json:"ItemDeliveryBlockStatus,omitempty" toml:"ItemDeliveryBlockStatus" yaml:"ItemDeliveryBlockStatus,omitempty"`
	ItemIssuingBlockStatus                        null.Bool    `boil:"ItemIssuingBlockStatus" json:"ItemIssuingBlockStatus,omitempty" toml:"ItemIssuingBlockStatus" yaml:"ItemIssuingBlockStatus,omitempty"`
	ItemReceivingBlockStatus                      null.Bool    `boil:"ItemReceivingBlockStatus" json:"ItemReceivingBlockStatus,omitempty" toml:"ItemReceivingBlockStatus" yaml:"ItemReceivingBlockStatus,omitempty"`
	ItemBillingBlockStatus                        null.Bool    `boil:"ItemBillingBlockStatus" json:"ItemBillingBlockStatus,omitempty" toml:"ItemBillingBlockStatus" yaml:"ItemBillingBlockStatus,omitempty"`
	ExternalReferenceDocument                     null.String  `boil:"ExternalReferenceDocument" json:"ExternalReferenceDocument,omitempty" toml:"ExternalReferenceDocument" yaml:"ExternalReferenceDocument,omitempty"`
	ExternalReferenceDocumentItem                 null.String  `boil:"ExternalReferenceDocumentItem" json:"ExternalReferenceDocumentItem,omitempty" toml:"ExternalReferenceDocumentItem" yaml:"ExternalReferenceDocumentItem,omitempty"`
	CreationDate                                  string       `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	CreationTime                                  string       `boil:"CreationTime" json:"CreationTime" toml:"CreationTime" yaml:"CreationTime"`
	LastChangeDate                                string       `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	LastChangeTime                                string       `boil:"LastChangeTime" json:"LastChangeTime" toml:"LastChangeTime" yaml:"LastChangeTime"`
	IsCancelled                                   null.Bool    `boil:"IsCancelled" json:"IsCancelled,omitempty" toml:"IsCancelled" yaml:"IsCancelled,omitempty"`
	IsMarkedForDeletion                           null.Bool    `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformDeliveryDocumentItemDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformDeliveryDocumentItemDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformDeliveryDocumentItemDatumColumns = struct {
	DeliveryDocument                              string
	DeliveryDocumentItem                          string
	DeliveryDocumentItemCategory                  string
	SupplyChainRelationshipID                     string
	SupplyChainRelationshipDeliveryID             string
	SupplyChainRelationshipDeliveryPlantID        string
	SupplyChainRelationshipStockConfPlantID       string
	SupplyChainRelationshipProductionPlantID      string
	SupplyChainRelationshipBillingID              string
	SupplyChainRelationshipPaymentID              string
	SupplyChainRelationshipFreightID              string
	Buyer                                         string
	Seller                                        string
	DeliverToParty                                string
	DeliverFromParty                              string
	DeliverToPlant                                string
	DeliverFromPlant                              string
	BillToParty                                   string
	BillFromParty                                 string
	BillToCountry                                 string
	BillFromCountry                               string
	Payer                                         string
	Payee                                         string
	FreightPartner                                string
	Product                                       string
	SizeOrDimensionText                           string
	ProductStandardID                             string
	ProductGroup                                  string
	ProductSpecification                          string
	MarkingOfMaterial                             string
	BaseUnit                                      string
	DeliveryUnit                                  string
	OriginalQuantityInBaseUnit                    string
	OriginalQuantityInDeliveryUnit                string
	DeliverToPlantStorageLocation                 string
	ProductIsBatchManagedInDeliverToPlant         string
	BatchMgmtPolicyInDeliverToPlant               string
	DeliverToPlantBatch                           string
	DeliverToPlantBatchValidityStartDate          string
	DeliverToPlantBatchValidityStartTime          string
	DeliverToPlantBatchValidityEndDate            string
	DeliverToPlantBatchValidityEndTime            string
	DeliverFromPlantStorageLocation               string
	ProductIsBatchManagedInDeliverFromPlant       string
	BatchMgmtPolicyInDeliverFromPlant             string
	DeliverFromPlantBatch                         string
	DeliverFromPlantBatchValidityStartDate        string
	DeliverFromPlantBatchValidityStartTime        string
	DeliverFromPlantBatchValidityEndDate          string
	DeliverFromPlantBatchValidityEndTime          string
	StockConfirmationBusinessPartner              string
	StockConfirmationPlant                        string
	ProductIsBatchManagedInStockConfirmationPlant string
	BatchMgmtPolicyInStockConfirmationPlant       string
	StockConfirmationPlantBatch                   string
	StockConfirmationPlantBatchValidityStartDate  string
	StockConfirmationPlantBatchValidityStartTime  string
	StockConfirmationPlantBatchValidityEndDate    string
	StockConfirmationPlantBatchValidityEndTime    string
	StockConfirmationPolicy                       string
	StockConfirmationStatus                       string
	ProductionPlantBusinessPartner                string
	ProductionPlant                               string
	ProductionPlantStorageLocation                string
	ProductIsBatchManagedInProductionPlant        string
	BatchMgmtPolicyInProductionPlant              string
	ProductionPlantBatch                          string
	ProductionPlantBatchValidityStartDate         string
	ProductionPlantBatchValidityStartTime         string
	ProductionPlantBatchValidityEndDate           string
	ProductionPlantBatchValidityEndTime           string
	InspectionPlantBusinessPartner                string
	InspectionPlant                               string
	InspectionPlan                                string
	InspectionLot                                 string
	DeliveryDocumentItemText                      string
	DeliveryDocumentItemTextByBuyer               string
	DeliveryDocumentItemTextBySeller              string
	PlannedGoodsIssueDate                         string
	PlannedGoodsIssueTime                         string
	PlannedGoodsReceiptDate                       string
	PlannedGoodsReceiptTime                       string
	PlannedGoodsIssueQuantity                     string
	PlannedGoodsIssueQtyInBaseUnit                string
	PlannedGoodsReceiptQuantity                   string
	PlannedGoodsReceiptQtyInBaseUnit              string
	ActualGoodsIssueDate                          string
	ActualGoodsIssueTime                          string
	ActualGoodsReceiptDate                        string
	ActualGoodsReceiptTime                        string
	ActualGoodsIssueQuantity                      string
	ActualGoodsIssueQtyInBaseUnit                 string
	ActualGoodsReceiptQuantity                    string
	ActualGoodsReceiptQtyInBaseUnit               string
	QuantityPerPackage                            string
	ItemBillingStatus                             string
	ItemCompleteDeliveryIsDefined                 string
	ItemWeightUnit                                string
	ItemNetWeight                                 string
	ItemGrossWeight                               string
	InternalCapacityQuantity                      string
	InternalCapacityQuantityUnit                  string
	ItemIsBillingRelevant                         string
	NetAmount                                     string
	TaxAmount                                     string
	GrossAmount                                   string
	OrderID                                       string
	OrderItem                                     string
	Contract                                      string
	ContractItem                                  string
	ProductionVersion                             string
	ProductionVersionItem                         string
	ProductionOrder                               string
	ProductionOrderItem                           string
	BillOfMaterial                                string
	BillOfMaterialItem                            string
	Operations                                    string
	OperationsItem                                string
	OperationID                                   string
	OrderType                                     string
	ContractType                                  string
	OrderValidityStartDate                        string
	OrderValidityEndDate                          string
	PaymentTerms                                  string
	DueCalculationBaseDate                        string
	PaymentDueDate                                string
	NetPaymentDays                                string
	PaymentMethod                                 string
	InvoicePeriodStartDate                        string
	InvoicePeriodEndDate                          string
	ConfirmedDeliveryDate                         string
	Project                                       string
	WBSElement                                    string
	ReferenceDocument                             string
	ReferenceDocumentItem                         string
	TransactionTaxClassification                  string
	ProductTaxClassificationBillToCountry         string
	ProductTaxClassificationBillFromCountry       string
	DefinedTaxClassification                      string
	AccountAssignmentGroup                        string
	ProductAccountAssignmentGroup                 string
	TaxCode                                       string
	TaxRate                                       string
	CountryOfOrigin                               string
	CountryOfOriginLanguage                       string
	Equipment                                     string
	FreightOrder                                  string
	ItemDeliveryBlockStatus                       string
	ItemIssuingBlockStatus                        string
	ItemReceivingBlockStatus                      string
	ItemBillingBlockStatus                        string
	ExternalReferenceDocument                     string
	ExternalReferenceDocumentItem                 string
	CreationDate                                  string
	CreationTime                                  string
	LastChangeDate                                string
	LastChangeTime                                string
	IsCancelled                                   string
	IsMarkedForDeletion                           string
}{
	DeliveryDocument:                              "DeliveryDocument",
	DeliveryDocumentItem:                          "DeliveryDocumentItem",
	DeliveryDocumentItemCategory:                  "DeliveryDocumentItemCategory",
	SupplyChainRelationshipID:                     "SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:             "SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:        "SupplyChainRelationshipDeliveryPlantID",
	SupplyChainRelationshipStockConfPlantID:       "SupplyChainRelationshipStockConfPlantID",
	SupplyChainRelationshipProductionPlantID:      "SupplyChainRelationshipProductionPlantID",
	SupplyChainRelationshipBillingID:              "SupplyChainRelationshipBillingID",
	SupplyChainRelationshipPaymentID:              "SupplyChainRelationshipPaymentID",
	SupplyChainRelationshipFreightID:              "SupplyChainRelationshipFreightID",
	Buyer:                                         "Buyer",
	Seller:                                        "Seller",
	DeliverToParty:                                "DeliverToParty",
	DeliverFromParty:                              "DeliverFromParty",
	DeliverToPlant:                                "DeliverToPlant",
	DeliverFromPlant:                              "DeliverFromPlant",
	BillToParty:                                   "BillToParty",
	BillFromParty:                                 "BillFromParty",
	BillToCountry:                                 "BillToCountry",
	BillFromCountry:                               "BillFromCountry",
	Payer:                                         "Payer",
	Payee:                                         "Payee",
	FreightPartner:                                "FreightPartner",
	Product:                                       "Product",
	SizeOrDimensionText:                           "SizeOrDimensionText",
	ProductStandardID:                             "ProductStandardID",
	ProductGroup:                                  "ProductGroup",
	ProductSpecification:                          "ProductSpecification",
	MarkingOfMaterial:                             "MarkingOfMaterial",
	BaseUnit:                                      "BaseUnit",
	DeliveryUnit:                                  "DeliveryUnit",
	OriginalQuantityInBaseUnit:                    "OriginalQuantityInBaseUnit",
	OriginalQuantityInDeliveryUnit:                "OriginalQuantityInDeliveryUnit",
	DeliverToPlantStorageLocation:                 "DeliverToPlantStorageLocation",
	ProductIsBatchManagedInDeliverToPlant:         "ProductIsBatchManagedInDeliverToPlant",
	BatchMgmtPolicyInDeliverToPlant:               "BatchMgmtPolicyInDeliverToPlant",
	DeliverToPlantBatch:                           "DeliverToPlantBatch",
	DeliverToPlantBatchValidityStartDate:          "DeliverToPlantBatchValidityStartDate",
	DeliverToPlantBatchValidityStartTime:          "DeliverToPlantBatchValidityStartTime",
	DeliverToPlantBatchValidityEndDate:            "DeliverToPlantBatchValidityEndDate",
	DeliverToPlantBatchValidityEndTime:            "DeliverToPlantBatchValidityEndTime",
	DeliverFromPlantStorageLocation:               "DeliverFromPlantStorageLocation",
	ProductIsBatchManagedInDeliverFromPlant:       "ProductIsBatchManagedInDeliverFromPlant",
	BatchMgmtPolicyInDeliverFromPlant:             "BatchMgmtPolicyInDeliverFromPlant",
	DeliverFromPlantBatch:                         "DeliverFromPlantBatch",
	DeliverFromPlantBatchValidityStartDate:        "DeliverFromPlantBatchValidityStartDate",
	DeliverFromPlantBatchValidityStartTime:        "DeliverFromPlantBatchValidityStartTime",
	DeliverFromPlantBatchValidityEndDate:          "DeliverFromPlantBatchValidityEndDate",
	DeliverFromPlantBatchValidityEndTime:          "DeliverFromPlantBatchValidityEndTime",
	StockConfirmationBusinessPartner:              "StockConfirmationBusinessPartner",
	StockConfirmationPlant:                        "StockConfirmationPlant",
	ProductIsBatchManagedInStockConfirmationPlant: "ProductIsBatchManagedInStockConfirmationPlant",
	BatchMgmtPolicyInStockConfirmationPlant:       "BatchMgmtPolicyInStockConfirmationPlant",
	StockConfirmationPlantBatch:                   "StockConfirmationPlantBatch",
	StockConfirmationPlantBatchValidityStartDate:  "StockConfirmationPlantBatchValidityStartDate",
	StockConfirmationPlantBatchValidityStartTime:  "StockConfirmationPlantBatchValidityStartTime",
	StockConfirmationPlantBatchValidityEndDate:    "StockConfirmationPlantBatchValidityEndDate",
	StockConfirmationPlantBatchValidityEndTime:    "StockConfirmationPlantBatchValidityEndTime",
	StockConfirmationPolicy:                       "StockConfirmationPolicy",
	StockConfirmationStatus:                       "StockConfirmationStatus",
	ProductionPlantBusinessPartner:                "ProductionPlantBusinessPartner",
	ProductionPlant:                               "ProductionPlant",
	ProductionPlantStorageLocation:                "ProductionPlantStorageLocation",
	ProductIsBatchManagedInProductionPlant:        "ProductIsBatchManagedInProductionPlant",
	BatchMgmtPolicyInProductionPlant:              "BatchMgmtPolicyInProductionPlant",
	ProductionPlantBatch:                          "ProductionPlantBatch",
	ProductionPlantBatchValidityStartDate:         "ProductionPlantBatchValidityStartDate",
	ProductionPlantBatchValidityStartTime:         "ProductionPlantBatchValidityStartTime",
	ProductionPlantBatchValidityEndDate:           "ProductionPlantBatchValidityEndDate",
	ProductionPlantBatchValidityEndTime:           "ProductionPlantBatchValidityEndTime",
	InspectionPlantBusinessPartner:                "InspectionPlantBusinessPartner",
	InspectionPlant:                               "InspectionPlant",
	InspectionPlan:                                "InspectionPlan",
	InspectionLot:                                 "InspectionLot",
	DeliveryDocumentItemText:                      "DeliveryDocumentItemText",
	DeliveryDocumentItemTextByBuyer:               "DeliveryDocumentItemTextByBuyer",
	DeliveryDocumentItemTextBySeller:              "DeliveryDocumentItemTextBySeller",
	PlannedGoodsIssueDate:                         "PlannedGoodsIssueDate",
	PlannedGoodsIssueTime:                         "PlannedGoodsIssueTime",
	PlannedGoodsReceiptDate:                       "PlannedGoodsReceiptDate",
	PlannedGoodsReceiptTime:                       "PlannedGoodsReceiptTime",
	PlannedGoodsIssueQuantity:                     "PlannedGoodsIssueQuantity",
	PlannedGoodsIssueQtyInBaseUnit:                "PlannedGoodsIssueQtyInBaseUnit",
	PlannedGoodsReceiptQuantity:                   "PlannedGoodsReceiptQuantity",
	PlannedGoodsReceiptQtyInBaseUnit:              "PlannedGoodsReceiptQtyInBaseUnit",
	ActualGoodsIssueDate:                          "ActualGoodsIssueDate",
	ActualGoodsIssueTime:                          "ActualGoodsIssueTime",
	ActualGoodsReceiptDate:                        "ActualGoodsReceiptDate",
	ActualGoodsReceiptTime:                        "ActualGoodsReceiptTime",
	ActualGoodsIssueQuantity:                      "ActualGoodsIssueQuantity",
	ActualGoodsIssueQtyInBaseUnit:                 "ActualGoodsIssueQtyInBaseUnit",
	ActualGoodsReceiptQuantity:                    "ActualGoodsReceiptQuantity",
	ActualGoodsReceiptQtyInBaseUnit:               "ActualGoodsReceiptQtyInBaseUnit",
	QuantityPerPackage:                            "QuantityPerPackage",
	ItemBillingStatus:                             "ItemBillingStatus",
	ItemCompleteDeliveryIsDefined:                 "ItemCompleteDeliveryIsDefined",
	ItemWeightUnit:                                "ItemWeightUnit",
	ItemNetWeight:                                 "ItemNetWeight",
	ItemGrossWeight:                               "ItemGrossWeight",
	InternalCapacityQuantity:                      "InternalCapacityQuantity",
	InternalCapacityQuantityUnit:                  "InternalCapacityQuantityUnit",
	ItemIsBillingRelevant:                         "ItemIsBillingRelevant",
	NetAmount:                                     "NetAmount",
	TaxAmount:                                     "TaxAmount",
	GrossAmount:                                   "GrossAmount",
	OrderID:                                       "OrderID",
	OrderItem:                                     "OrderItem",
	Contract:                                      "Contract",
	ContractItem:                                  "ContractItem",
	ProductionVersion:                             "ProductionVersion",
	ProductionVersionItem:                         "ProductionVersionItem",
	ProductionOrder:                               "ProductionOrder",
	ProductionOrderItem:                           "ProductionOrderItem",
	BillOfMaterial:                                "BillOfMaterial",
	BillOfMaterialItem:                            "BillOfMaterialItem",
	Operations:                                    "Operations",
	OperationsItem:                                "OperationsItem",
	OperationID:                                   "OperationID",
	OrderType:                                     "OrderType",
	ContractType:                                  "ContractType",
	OrderValidityStartDate:                        "OrderValidityStartDate",
	OrderValidityEndDate:                          "OrderValidityEndDate",
	PaymentTerms:                                  "PaymentTerms",
	DueCalculationBaseDate:                        "DueCalculationBaseDate",
	PaymentDueDate:                                "PaymentDueDate",
	NetPaymentDays:                                "NetPaymentDays",
	PaymentMethod:                                 "PaymentMethod",
	InvoicePeriodStartDate:                        "InvoicePeriodStartDate",
	InvoicePeriodEndDate:                          "InvoicePeriodEndDate",
	ConfirmedDeliveryDate:                         "ConfirmedDeliveryDate",
	Project:                                       "Project",
	WBSElement:                                    "WBSElement",
	ReferenceDocument:                             "ReferenceDocument",
	ReferenceDocumentItem:                         "ReferenceDocumentItem",
	TransactionTaxClassification:                  "TransactionTaxClassification",
	ProductTaxClassificationBillToCountry:         "ProductTaxClassificationBillToCountry",
	ProductTaxClassificationBillFromCountry:       "ProductTaxClassificationBillFromCountry",
	DefinedTaxClassification:                      "DefinedTaxClassification",
	AccountAssignmentGroup:                        "AccountAssignmentGroup",
	ProductAccountAssignmentGroup:                 "ProductAccountAssignmentGroup",
	TaxCode:                                       "TaxCode",
	TaxRate:                                       "TaxRate",
	CountryOfOrigin:                               "CountryOfOrigin",
	CountryOfOriginLanguage:                       "CountryOfOriginLanguage",
	Equipment:                                     "Equipment",
	FreightOrder:                                  "FreightOrder",
	ItemDeliveryBlockStatus:                       "ItemDeliveryBlockStatus",
	ItemIssuingBlockStatus:                        "ItemIssuingBlockStatus",
	ItemReceivingBlockStatus:                      "ItemReceivingBlockStatus",
	ItemBillingBlockStatus:                        "ItemBillingBlockStatus",
	ExternalReferenceDocument:                     "ExternalReferenceDocument",
	ExternalReferenceDocumentItem:                 "ExternalReferenceDocumentItem",
	CreationDate:                                  "CreationDate",
	CreationTime:                                  "CreationTime",
	LastChangeDate:                                "LastChangeDate",
	LastChangeTime:                                "LastChangeTime",
	IsCancelled:                                   "IsCancelled",
	IsMarkedForDeletion:                           "IsMarkedForDeletion",
}

var DataPlatformDeliveryDocumentItemDatumTableColumns = struct {
	DeliveryDocument                              string
	DeliveryDocumentItem                          string
	DeliveryDocumentItemCategory                  string
	SupplyChainRelationshipID                     string
	SupplyChainRelationshipDeliveryID             string
	SupplyChainRelationshipDeliveryPlantID        string
	SupplyChainRelationshipStockConfPlantID       string
	SupplyChainRelationshipProductionPlantID      string
	SupplyChainRelationshipBillingID              string
	SupplyChainRelationshipPaymentID              string
	SupplyChainRelationshipFreightID              string
	Buyer                                         string
	Seller                                        string
	DeliverToParty                                string
	DeliverFromParty                              string
	DeliverToPlant                                string
	DeliverFromPlant                              string
	BillToParty                                   string
	BillFromParty                                 string
	BillToCountry                                 string
	BillFromCountry                               string
	Payer                                         string
	Payee                                         string
	FreightPartner                                string
	Product                                       string
	SizeOrDimensionText                           string
	ProductStandardID                             string
	ProductGroup                                  string
	ProductSpecification                          string
	MarkingOfMaterial                             string
	BaseUnit                                      string
	DeliveryUnit                                  string
	OriginalQuantityInBaseUnit                    string
	OriginalQuantityInDeliveryUnit                string
	DeliverToPlantStorageLocation                 string
	ProductIsBatchManagedInDeliverToPlant         string
	BatchMgmtPolicyInDeliverToPlant               string
	DeliverToPlantBatch                           string
	DeliverToPlantBatchValidityStartDate          string
	DeliverToPlantBatchValidityStartTime          string
	DeliverToPlantBatchValidityEndDate            string
	DeliverToPlantBatchValidityEndTime            string
	DeliverFromPlantStorageLocation               string
	ProductIsBatchManagedInDeliverFromPlant       string
	BatchMgmtPolicyInDeliverFromPlant             string
	DeliverFromPlantBatch                         string
	DeliverFromPlantBatchValidityStartDate        string
	DeliverFromPlantBatchValidityStartTime        string
	DeliverFromPlantBatchValidityEndDate          string
	DeliverFromPlantBatchValidityEndTime          string
	StockConfirmationBusinessPartner              string
	StockConfirmationPlant                        string
	ProductIsBatchManagedInStockConfirmationPlant string
	BatchMgmtPolicyInStockConfirmationPlant       string
	StockConfirmationPlantBatch                   string
	StockConfirmationPlantBatchValidityStartDate  string
	StockConfirmationPlantBatchValidityStartTime  string
	StockConfirmationPlantBatchValidityEndDate    string
	StockConfirmationPlantBatchValidityEndTime    string
	StockConfirmationPolicy                       string
	StockConfirmationStatus                       string
	ProductionPlantBusinessPartner                string
	ProductionPlant                               string
	ProductionPlantStorageLocation                string
	ProductIsBatchManagedInProductionPlant        string
	BatchMgmtPolicyInProductionPlant              string
	ProductionPlantBatch                          string
	ProductionPlantBatchValidityStartDate         string
	ProductionPlantBatchValidityStartTime         string
	ProductionPlantBatchValidityEndDate           string
	ProductionPlantBatchValidityEndTime           string
	InspectionPlantBusinessPartner                string
	InspectionPlant                               string
	InspectionPlan                                string
	InspectionLot                                 string
	DeliveryDocumentItemText                      string
	DeliveryDocumentItemTextByBuyer               string
	DeliveryDocumentItemTextBySeller              string
	PlannedGoodsIssueDate                         string
	PlannedGoodsIssueTime                         string
	PlannedGoodsReceiptDate                       string
	PlannedGoodsReceiptTime                       string
	PlannedGoodsIssueQuantity                     string
	PlannedGoodsIssueQtyInBaseUnit                string
	PlannedGoodsReceiptQuantity                   string
	PlannedGoodsReceiptQtyInBaseUnit              string
	ActualGoodsIssueDate                          string
	ActualGoodsIssueTime                          string
	ActualGoodsReceiptDate                        string
	ActualGoodsReceiptTime                        string
	ActualGoodsIssueQuantity                      string
	ActualGoodsIssueQtyInBaseUnit                 string
	ActualGoodsReceiptQuantity                    string
	ActualGoodsReceiptQtyInBaseUnit               string
	QuantityPerPackage                            string
	ItemBillingStatus                             string
	ItemCompleteDeliveryIsDefined                 string
	ItemWeightUnit                                string
	ItemNetWeight                                 string
	ItemGrossWeight                               string
	InternalCapacityQuantity                      string
	InternalCapacityQuantityUnit                  string
	ItemIsBillingRelevant                         string
	NetAmount                                     string
	TaxAmount                                     string
	GrossAmount                                   string
	OrderID                                       string
	OrderItem                                     string
	Contract                                      string
	ContractItem                                  string
	ProductionVersion                             string
	ProductionVersionItem                         string
	ProductionOrder                               string
	ProductionOrderItem                           string
	BillOfMaterial                                string
	BillOfMaterialItem                            string
	Operations                                    string
	OperationsItem                                string
	OperationID                                   string
	OrderType                                     string
	ContractType                                  string
	OrderValidityStartDate                        string
	OrderValidityEndDate                          string
	PaymentTerms                                  string
	DueCalculationBaseDate                        string
	PaymentDueDate                                string
	NetPaymentDays                                string
	PaymentMethod                                 string
	InvoicePeriodStartDate                        string
	InvoicePeriodEndDate                          string
	ConfirmedDeliveryDate                         string
	Project                                       string
	WBSElement                                    string
	ReferenceDocument                             string
	ReferenceDocumentItem                         string
	TransactionTaxClassification                  string
	ProductTaxClassificationBillToCountry         string
	ProductTaxClassificationBillFromCountry       string
	DefinedTaxClassification                      string
	AccountAssignmentGroup                        string
	ProductAccountAssignmentGroup                 string
	TaxCode                                       string
	TaxRate                                       string
	CountryOfOrigin                               string
	CountryOfOriginLanguage                       string
	Equipment                                     string
	FreightOrder                                  string
	ItemDeliveryBlockStatus                       string
	ItemIssuingBlockStatus                        string
	ItemReceivingBlockStatus                      string
	ItemBillingBlockStatus                        string
	ExternalReferenceDocument                     string
	ExternalReferenceDocumentItem                 string
	CreationDate                                  string
	CreationTime                                  string
	LastChangeDate                                string
	LastChangeTime                                string
	IsCancelled                                   string
	IsMarkedForDeletion                           string
}{
	DeliveryDocument:                              "data_platform_delivery_document_item_data.DeliveryDocument",
	DeliveryDocumentItem:                          "data_platform_delivery_document_item_data.DeliveryDocumentItem",
	DeliveryDocumentItemCategory:                  "data_platform_delivery_document_item_data.DeliveryDocumentItemCategory",
	SupplyChainRelationshipID:                     "data_platform_delivery_document_item_data.SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:             "data_platform_delivery_document_item_data.SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:        "data_platform_delivery_document_item_data.SupplyChainRelationshipDeliveryPlantID",
	SupplyChainRelationshipStockConfPlantID:       "data_platform_delivery_document_item_data.SupplyChainRelationshipStockConfPlantID",
	SupplyChainRelationshipProductionPlantID:      "data_platform_delivery_document_item_data.SupplyChainRelationshipProductionPlantID",
	SupplyChainRelationshipBillingID:              "data_platform_delivery_document_item_data.SupplyChainRelationshipBillingID",
	SupplyChainRelationshipPaymentID:              "data_platform_delivery_document_item_data.SupplyChainRelationshipPaymentID",
	SupplyChainRelationshipFreightID:              "data_platform_delivery_document_item_data.SupplyChainRelationshipFreightID",
	Buyer:                                         "data_platform_delivery_document_item_data.Buyer",
	Seller:                                        "data_platform_delivery_document_item_data.Seller",
	DeliverToParty:                                "data_platform_delivery_document_item_data.DeliverToParty",
	DeliverFromParty:                              "data_platform_delivery_document_item_data.DeliverFromParty",
	DeliverToPlant:                                "data_platform_delivery_document_item_data.DeliverToPlant",
	DeliverFromPlant:                              "data_platform_delivery_document_item_data.DeliverFromPlant",
	BillToParty:                                   "data_platform_delivery_document_item_data.BillToParty",
	BillFromParty:                                 "data_platform_delivery_document_item_data.BillFromParty",
	BillToCountry:                                 "data_platform_delivery_document_item_data.BillToCountry",
	BillFromCountry:                               "data_platform_delivery_document_item_data.BillFromCountry",
	Payer:                                         "data_platform_delivery_document_item_data.Payer",
	Payee:                                         "data_platform_delivery_document_item_data.Payee",
	FreightPartner:                                "data_platform_delivery_document_item_data.FreightPartner",
	Product:                                       "data_platform_delivery_document_item_data.Product",
	SizeOrDimensionText:                           "data_platform_delivery_document_item_data.SizeOrDimensionText",
	ProductStandardID:                             "data_platform_delivery_document_item_data.ProductStandardID",
	ProductGroup:                                  "data_platform_delivery_document_item_data.ProductGroup",
	ProductSpecification:                          "data_platform_delivery_document_item_data.ProductSpecification",
	MarkingOfMaterial:                             "data_platform_delivery_document_item_data.MarkingOfMaterial",
	BaseUnit:                                      "data_platform_delivery_document_item_data.BaseUnit",
	DeliveryUnit:                                  "data_platform_delivery_document_item_data.DeliveryUnit",
	OriginalQuantityInBaseUnit:                    "data_platform_delivery_document_item_data.OriginalQuantityInBaseUnit",
	OriginalQuantityInDeliveryUnit:                "data_platform_delivery_document_item_data.OriginalQuantityInDeliveryUnit",
	DeliverToPlantStorageLocation:                 "data_platform_delivery_document_item_data.DeliverToPlantStorageLocation",
	ProductIsBatchManagedInDeliverToPlant:         "data_platform_delivery_document_item_data.ProductIsBatchManagedInDeliverToPlant",
	BatchMgmtPolicyInDeliverToPlant:               "data_platform_delivery_document_item_data.BatchMgmtPolicyInDeliverToPlant",
	DeliverToPlantBatch:                           "data_platform_delivery_document_item_data.DeliverToPlantBatch",
	DeliverToPlantBatchValidityStartDate:          "data_platform_delivery_document_item_data.DeliverToPlantBatchValidityStartDate",
	DeliverToPlantBatchValidityStartTime:          "data_platform_delivery_document_item_data.DeliverToPlantBatchValidityStartTime",
	DeliverToPlantBatchValidityEndDate:            "data_platform_delivery_document_item_data.DeliverToPlantBatchValidityEndDate",
	DeliverToPlantBatchValidityEndTime:            "data_platform_delivery_document_item_data.DeliverToPlantBatchValidityEndTime",
	DeliverFromPlantStorageLocation:               "data_platform_delivery_document_item_data.DeliverFromPlantStorageLocation",
	ProductIsBatchManagedInDeliverFromPlant:       "data_platform_delivery_document_item_data.ProductIsBatchManagedInDeliverFromPlant",
	BatchMgmtPolicyInDeliverFromPlant:             "data_platform_delivery_document_item_data.BatchMgmtPolicyInDeliverFromPlant",
	DeliverFromPlantBatch:                         "data_platform_delivery_document_item_data.DeliverFromPlantBatch",
	DeliverFromPlantBatchValidityStartDate:        "data_platform_delivery_document_item_data.DeliverFromPlantBatchValidityStartDate",
	DeliverFromPlantBatchValidityStartTime:        "data_platform_delivery_document_item_data.DeliverFromPlantBatchValidityStartTime",
	DeliverFromPlantBatchValidityEndDate:          "data_platform_delivery_document_item_data.DeliverFromPlantBatchValidityEndDate",
	DeliverFromPlantBatchValidityEndTime:          "data_platform_delivery_document_item_data.DeliverFromPlantBatchValidityEndTime",
	StockConfirmationBusinessPartner:              "data_platform_delivery_document_item_data.StockConfirmationBusinessPartner",
	StockConfirmationPlant:                        "data_platform_delivery_document_item_data.StockConfirmationPlant",
	ProductIsBatchManagedInStockConfirmationPlant: "data_platform_delivery_document_item_data.ProductIsBatchManagedInStockConfirmationPlant",
	BatchMgmtPolicyInStockConfirmationPlant:       "data_platform_delivery_document_item_data.BatchMgmtPolicyInStockConfirmationPlant",
	StockConfirmationPlantBatch:                   "data_platform_delivery_document_item_data.StockConfirmationPlantBatch",
	StockConfirmationPlantBatchValidityStartDate:  "data_platform_delivery_document_item_data.StockConfirmationPlantBatchValidityStartDate",
	StockConfirmationPlantBatchValidityStartTime:  "data_platform_delivery_document_item_data.StockConfirmationPlantBatchValidityStartTime",
	StockConfirmationPlantBatchValidityEndDate:    "data_platform_delivery_document_item_data.StockConfirmationPlantBatchValidityEndDate",
	StockConfirmationPlantBatchValidityEndTime:    "data_platform_delivery_document_item_data.StockConfirmationPlantBatchValidityEndTime",
	StockConfirmationPolicy:                       "data_platform_delivery_document_item_data.StockConfirmationPolicy",
	StockConfirmationStatus:                       "data_platform_delivery_document_item_data.StockConfirmationStatus",
	ProductionPlantBusinessPartner:                "data_platform_delivery_document_item_data.ProductionPlantBusinessPartner",
	ProductionPlant:                               "data_platform_delivery_document_item_data.ProductionPlant",
	ProductionPlantStorageLocation:                "data_platform_delivery_document_item_data.ProductionPlantStorageLocation",
	ProductIsBatchManagedInProductionPlant:        "data_platform_delivery_document_item_data.ProductIsBatchManagedInProductionPlant",
	BatchMgmtPolicyInProductionPlant:              "data_platform_delivery_document_item_data.BatchMgmtPolicyInProductionPlant",
	ProductionPlantBatch:                          "data_platform_delivery_document_item_data.ProductionPlantBatch",
	ProductionPlantBatchValidityStartDate:         "data_platform_delivery_document_item_data.ProductionPlantBatchValidityStartDate",
	ProductionPlantBatchValidityStartTime:         "data_platform_delivery_document_item_data.ProductionPlantBatchValidityStartTime",
	ProductionPlantBatchValidityEndDate:           "data_platform_delivery_document_item_data.ProductionPlantBatchValidityEndDate",
	ProductionPlantBatchValidityEndTime:           "data_platform_delivery_document_item_data.ProductionPlantBatchValidityEndTime",
	InspectionPlantBusinessPartner:                "data_platform_delivery_document_item_data.InspectionPlantBusinessPartner",
	InspectionPlant:                               "data_platform_delivery_document_item_data.InspectionPlant",
	InspectionPlan:                                "data_platform_delivery_document_item_data.InspectionPlan",
	InspectionLot:                                 "data_platform_delivery_document_item_data.InspectionLot",
	DeliveryDocumentItemText:                      "data_platform_delivery_document_item_data.DeliveryDocumentItemText",
	DeliveryDocumentItemTextByBuyer:               "data_platform_delivery_document_item_data.DeliveryDocumentItemTextByBuyer",
	DeliveryDocumentItemTextBySeller:              "data_platform_delivery_document_item_data.DeliveryDocumentItemTextBySeller",
	PlannedGoodsIssueDate:                         "data_platform_delivery_document_item_data.PlannedGoodsIssueDate",
	PlannedGoodsIssueTime:                         "data_platform_delivery_document_item_data.PlannedGoodsIssueTime",
	PlannedGoodsReceiptDate:                       "data_platform_delivery_document_item_data.PlannedGoodsReceiptDate",
	PlannedGoodsReceiptTime:                       "data_platform_delivery_document_item_data.PlannedGoodsReceiptTime",
	PlannedGoodsIssueQuantity:                     "data_platform_delivery_document_item_data.PlannedGoodsIssueQuantity",
	PlannedGoodsIssueQtyInBaseUnit:                "data_platform_delivery_document_item_data.PlannedGoodsIssueQtyInBaseUnit",
	PlannedGoodsReceiptQuantity:                   "data_platform_delivery_document_item_data.PlannedGoodsReceiptQuantity",
	PlannedGoodsReceiptQtyInBaseUnit:              "data_platform_delivery_document_item_data.PlannedGoodsReceiptQtyInBaseUnit",
	ActualGoodsIssueDate:                          "data_platform_delivery_document_item_data.ActualGoodsIssueDate",
	ActualGoodsIssueTime:                          "data_platform_delivery_document_item_data.ActualGoodsIssueTime",
	ActualGoodsReceiptDate:                        "data_platform_delivery_document_item_data.ActualGoodsReceiptDate",
	ActualGoodsReceiptTime:                        "data_platform_delivery_document_item_data.ActualGoodsReceiptTime",
	ActualGoodsIssueQuantity:                      "data_platform_delivery_document_item_data.ActualGoodsIssueQuantity",
	ActualGoodsIssueQtyInBaseUnit:                 "data_platform_delivery_document_item_data.ActualGoodsIssueQtyInBaseUnit",
	ActualGoodsReceiptQuantity:                    "data_platform_delivery_document_item_data.ActualGoodsReceiptQuantity",
	ActualGoodsReceiptQtyInBaseUnit:               "data_platform_delivery_document_item_data.ActualGoodsReceiptQtyInBaseUnit",
	QuantityPerPackage:                            "data_platform_delivery_document_item_data.QuantityPerPackage",
	ItemBillingStatus:                             "data_platform_delivery_document_item_data.ItemBillingStatus",
	ItemCompleteDeliveryIsDefined:                 "data_platform_delivery_document_item_data.ItemCompleteDeliveryIsDefined",
	ItemWeightUnit:                                "data_platform_delivery_document_item_data.ItemWeightUnit",
	ItemNetWeight:                                 "data_platform_delivery_document_item_data.ItemNetWeight",
	ItemGrossWeight:                               "data_platform_delivery_document_item_data.ItemGrossWeight",
	InternalCapacityQuantity:                      "data_platform_delivery_document_item_data.InternalCapacityQuantity",
	InternalCapacityQuantityUnit:                  "data_platform_delivery_document_item_data.InternalCapacityQuantityUnit",
	ItemIsBillingRelevant:                         "data_platform_delivery_document_item_data.ItemIsBillingRelevant",
	NetAmount:                                     "data_platform_delivery_document_item_data.NetAmount",
	TaxAmount:                                     "data_platform_delivery_document_item_data.TaxAmount",
	GrossAmount:                                   "data_platform_delivery_document_item_data.GrossAmount",
	OrderID:                                       "data_platform_delivery_document_item_data.OrderID",
	OrderItem:                                     "data_platform_delivery_document_item_data.OrderItem",
	Contract:                                      "data_platform_delivery_document_item_data.Contract",
	ContractItem:                                  "data_platform_delivery_document_item_data.ContractItem",
	ProductionVersion:                             "data_platform_delivery_document_item_data.ProductionVersion",
	ProductionVersionItem:                         "data_platform_delivery_document_item_data.ProductionVersionItem",
	ProductionOrder:                               "data_platform_delivery_document_item_data.ProductionOrder",
	ProductionOrderItem:                           "data_platform_delivery_document_item_data.ProductionOrderItem",
	BillOfMaterial:                                "data_platform_delivery_document_item_data.BillOfMaterial",
	BillOfMaterialItem:                            "data_platform_delivery_document_item_data.BillOfMaterialItem",
	Operations:                                    "data_platform_delivery_document_item_data.Operations",
	OperationsItem:                                "data_platform_delivery_document_item_data.OperationsItem",
	OperationID:                                   "data_platform_delivery_document_item_data.OperationID",
	OrderType:                                     "data_platform_delivery_document_item_data.OrderType",
	ContractType:                                  "data_platform_delivery_document_item_data.ContractType",
	OrderValidityStartDate:                        "data_platform_delivery_document_item_data.OrderValidityStartDate",
	OrderValidityEndDate:                          "data_platform_delivery_document_item_data.OrderValidityEndDate",
	PaymentTerms:                                  "data_platform_delivery_document_item_data.PaymentTerms",
	DueCalculationBaseDate:                        "data_platform_delivery_document_item_data.DueCalculationBaseDate",
	PaymentDueDate:                                "data_platform_delivery_document_item_data.PaymentDueDate",
	NetPaymentDays:                                "data_platform_delivery_document_item_data.NetPaymentDays",
	PaymentMethod:                                 "data_platform_delivery_document_item_data.PaymentMethod",
	InvoicePeriodStartDate:                        "data_platform_delivery_document_item_data.InvoicePeriodStartDate",
	InvoicePeriodEndDate:                          "data_platform_delivery_document_item_data.InvoicePeriodEndDate",
	ConfirmedDeliveryDate:                         "data_platform_delivery_document_item_data.ConfirmedDeliveryDate",
	Project:                                       "data_platform_delivery_document_item_data.Project",
	WBSElement:                                    "data_platform_delivery_document_item_data.WBSElement",
	ReferenceDocument:                             "data_platform_delivery_document_item_data.ReferenceDocument",
	ReferenceDocumentItem:                         "data_platform_delivery_document_item_data.ReferenceDocumentItem",
	TransactionTaxClassification:                  "data_platform_delivery_document_item_data.TransactionTaxClassification",
	ProductTaxClassificationBillToCountry:         "data_platform_delivery_document_item_data.ProductTaxClassificationBillToCountry",
	ProductTaxClassificationBillFromCountry:       "data_platform_delivery_document_item_data.ProductTaxClassificationBillFromCountry",
	DefinedTaxClassification:                      "data_platform_delivery_document_item_data.DefinedTaxClassification",
	AccountAssignmentGroup:                        "data_platform_delivery_document_item_data.AccountAssignmentGroup",
	ProductAccountAssignmentGroup:                 "data_platform_delivery_document_item_data.ProductAccountAssignmentGroup",
	TaxCode:                                       "data_platform_delivery_document_item_data.TaxCode",
	TaxRate:                                       "data_platform_delivery_document_item_data.TaxRate",
	CountryOfOrigin:                               "data_platform_delivery_document_item_data.CountryOfOrigin",
	CountryOfOriginLanguage:                       "data_platform_delivery_document_item_data.CountryOfOriginLanguage",
	Equipment:                                     "data_platform_delivery_document_item_data.Equipment",
	FreightOrder:                                  "data_platform_delivery_document_item_data.FreightOrder",
	ItemDeliveryBlockStatus:                       "data_platform_delivery_document_item_data.ItemDeliveryBlockStatus",
	ItemIssuingBlockStatus:                        "data_platform_delivery_document_item_data.ItemIssuingBlockStatus",
	ItemReceivingBlockStatus:                      "data_platform_delivery_document_item_data.ItemReceivingBlockStatus",
	ItemBillingBlockStatus:                        "data_platform_delivery_document_item_data.ItemBillingBlockStatus",
	ExternalReferenceDocument:                     "data_platform_delivery_document_item_data.ExternalReferenceDocument",
	ExternalReferenceDocumentItem:                 "data_platform_delivery_document_item_data.ExternalReferenceDocumentItem",
	CreationDate:                                  "data_platform_delivery_document_item_data.CreationDate",
	CreationTime:                                  "data_platform_delivery_document_item_data.CreationTime",
	LastChangeDate:                                "data_platform_delivery_document_item_data.LastChangeDate",
	LastChangeTime:                                "data_platform_delivery_document_item_data.LastChangeTime",
	IsCancelled:                                   "data_platform_delivery_document_item_data.IsCancelled",
	IsMarkedForDeletion:                           "data_platform_delivery_document_item_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformDeliveryDocumentItemDatumWhere = struct {
	DeliveryDocument                              whereHelperint
	DeliveryDocumentItem                          whereHelperint
	DeliveryDocumentItemCategory                  whereHelperstring
	SupplyChainRelationshipID                     whereHelperint
	SupplyChainRelationshipDeliveryID             whereHelperint
	SupplyChainRelationshipDeliveryPlantID        whereHelperint
	SupplyChainRelationshipStockConfPlantID       whereHelperint
	SupplyChainRelationshipProductionPlantID      whereHelperint
	SupplyChainRelationshipBillingID              whereHelpernull_Int
	SupplyChainRelationshipPaymentID              whereHelpernull_Int
	SupplyChainRelationshipFreightID              whereHelpernull_Int
	Buyer                                         whereHelperint
	Seller                                        whereHelperint
	DeliverToParty                                whereHelperint
	DeliverFromParty                              whereHelperint
	DeliverToPlant                                whereHelperstring
	DeliverFromPlant                              whereHelperstring
	BillToParty                                   whereHelpernull_Int
	BillFromParty                                 whereHelpernull_Int
	BillToCountry                                 whereHelpernull_String
	BillFromCountry                               whereHelpernull_String
	Payer                                         whereHelpernull_Int
	Payee                                         whereHelpernull_Int
	FreightPartner                                whereHelpernull_Int
	Product                                       whereHelperstring
	SizeOrDimensionText                           whereHelpernull_String
	ProductStandardID                             whereHelpernull_String
	ProductGroup                                  whereHelpernull_String
	ProductSpecification                          whereHelpernull_String
	MarkingOfMaterial                             whereHelpernull_String
	BaseUnit                                      whereHelperstring
	DeliveryUnit                                  whereHelperstring
	OriginalQuantityInBaseUnit                    whereHelperfloat32
	OriginalQuantityInDeliveryUnit                whereHelperfloat32
	DeliverToPlantStorageLocation                 whereHelpernull_String
	ProductIsBatchManagedInDeliverToPlant         whereHelpernull_Bool
	BatchMgmtPolicyInDeliverToPlant               whereHelpernull_String
	DeliverToPlantBatch                           whereHelpernull_String
	DeliverToPlantBatchValidityStartDate          whereHelpernull_String
	DeliverToPlantBatchValidityStartTime          whereHelpernull_String
	DeliverToPlantBatchValidityEndDate            whereHelpernull_String
	DeliverToPlantBatchValidityEndTime            whereHelpernull_String
	DeliverFromPlantStorageLocation               whereHelpernull_String
	ProductIsBatchManagedInDeliverFromPlant       whereHelpernull_Bool
	BatchMgmtPolicyInDeliverFromPlant             whereHelpernull_String
	DeliverFromPlantBatch                         whereHelpernull_String
	DeliverFromPlantBatchValidityStartDate        whereHelpernull_String
	DeliverFromPlantBatchValidityStartTime        whereHelpernull_String
	DeliverFromPlantBatchValidityEndDate          whereHelpernull_String
	DeliverFromPlantBatchValidityEndTime          whereHelpernull_String
	StockConfirmationBusinessPartner              whereHelperint
	StockConfirmationPlant                        whereHelperstring
	ProductIsBatchManagedInStockConfirmationPlant whereHelpernull_Bool
	BatchMgmtPolicyInStockConfirmationPlant       whereHelpernull_String
	StockConfirmationPlantBatch                   whereHelpernull_String
	StockConfirmationPlantBatchValidityStartDate  whereHelpernull_String
	StockConfirmationPlantBatchValidityStartTime  whereHelpernull_String
	StockConfirmationPlantBatchValidityEndDate    whereHelpernull_String
	StockConfirmationPlantBatchValidityEndTime    whereHelpernull_String
	StockConfirmationPolicy                       whereHelpernull_String
	StockConfirmationStatus                       whereHelpernull_String
	ProductionPlantBusinessPartner                whereHelpernull_Int
	ProductionPlant                               whereHelpernull_String
	ProductionPlantStorageLocation                whereHelpernull_String
	ProductIsBatchManagedInProductionPlant        whereHelpernull_Bool
	BatchMgmtPolicyInProductionPlant              whereHelpernull_String
	ProductionPlantBatch                          whereHelpernull_String
	ProductionPlantBatchValidityStartDate         whereHelpernull_String
	ProductionPlantBatchValidityStartTime         whereHelpernull_String
	ProductionPlantBatchValidityEndDate           whereHelpernull_String
	ProductionPlantBatchValidityEndTime           whereHelpernull_String
	InspectionPlantBusinessPartner                whereHelpernull_Int
	InspectionPlant                               whereHelpernull_String
	InspectionPlan                                whereHelpernull_Int
	InspectionLot                                 whereHelpernull_Int
	DeliveryDocumentItemText                      whereHelpernull_String
	DeliveryDocumentItemTextByBuyer               whereHelperstring
	DeliveryDocumentItemTextBySeller              whereHelperstring
	PlannedGoodsIssueDate                         whereHelperstring
	PlannedGoodsIssueTime                         whereHelperstring
	PlannedGoodsReceiptDate                       whereHelperstring
	PlannedGoodsReceiptTime                       whereHelperstring
	PlannedGoodsIssueQuantity                     whereHelperfloat32
	PlannedGoodsIssueQtyInBaseUnit                whereHelperfloat32
	PlannedGoodsReceiptQuantity                   whereHelperfloat32
	PlannedGoodsReceiptQtyInBaseUnit              whereHelperfloat32
	ActualGoodsIssueDate                          whereHelpernull_String
	ActualGoodsIssueTime                          whereHelpernull_String
	ActualGoodsReceiptDate                        whereHelpernull_String
	ActualGoodsReceiptTime                        whereHelpernull_String
	ActualGoodsIssueQuantity                      whereHelpernull_Float32
	ActualGoodsIssueQtyInBaseUnit                 whereHelpernull_Float32
	ActualGoodsReceiptQuantity                    whereHelpernull_Float32
	ActualGoodsReceiptQtyInBaseUnit               whereHelpernull_Float32
	QuantityPerPackage                            whereHelpernull_Float32
	ItemBillingStatus                             whereHelpernull_String
	ItemCompleteDeliveryIsDefined                 whereHelpernull_Bool
	ItemWeightUnit                                whereHelpernull_String
	ItemNetWeight                                 whereHelpernull_Float32
	ItemGrossWeight                               whereHelpernull_Float32
	InternalCapacityQuantity                      whereHelpernull_Float32
	InternalCapacityQuantityUnit                  whereHelpernull_String
	ItemIsBillingRelevant                         whereHelpernull_Bool
	NetAmount                                     whereHelpernull_Float32
	TaxAmount                                     whereHelpernull_Float32
	GrossAmount                                   whereHelpernull_Float32
	OrderID                                       whereHelpernull_Int
	OrderItem                                     whereHelpernull_Int
	Contract                                      whereHelpernull_Int
	ContractItem                                  whereHelpernull_Int
	ProductionVersion                             whereHelpernull_Int
	ProductionVersionItem                         whereHelpernull_Int
	ProductionOrder                               whereHelpernull_Int
	ProductionOrderItem                           whereHelpernull_Int
	BillOfMaterial                                whereHelpernull_Int
	BillOfMaterialItem                            whereHelpernull_Int
	Operations                                    whereHelpernull_Int
	OperationsItem                                whereHelpernull_Int
	OperationID                                   whereHelpernull_Int
	OrderType                                     whereHelpernull_String
	ContractType                                  whereHelpernull_String
	OrderValidityStartDate                        whereHelpernull_String
	OrderValidityEndDate                          whereHelpernull_String
	PaymentTerms                                  whereHelpernull_String
	DueCalculationBaseDate                        whereHelpernull_String
	PaymentDueDate                                whereHelpernull_String
	NetPaymentDays                                whereHelpernull_Int
	PaymentMethod                                 whereHelpernull_String
	InvoicePeriodStartDate                        whereHelpernull_String
	InvoicePeriodEndDate                          whereHelpernull_String
	ConfirmedDeliveryDate                         whereHelpernull_String
	Project                                       whereHelpernull_Int
	WBSElement                                    whereHelpernull_Int
	ReferenceDocument                             whereHelpernull_Int
	ReferenceDocumentItem                         whereHelpernull_Int
	TransactionTaxClassification                  whereHelperstring
	ProductTaxClassificationBillToCountry         whereHelperstring
	ProductTaxClassificationBillFromCountry       whereHelperstring
	DefinedTaxClassification                      whereHelperstring
	AccountAssignmentGroup                        whereHelperstring
	ProductAccountAssignmentGroup                 whereHelperstring
	TaxCode                                       whereHelpernull_String
	TaxRate                                       whereHelpernull_Float32
	CountryOfOrigin                               whereHelpernull_String
	CountryOfOriginLanguage                       whereHelpernull_String
	Equipment                                     whereHelpernull_Int
	FreightOrder                                  whereHelpernull_Int
	ItemDeliveryBlockStatus                       whereHelpernull_Bool
	ItemIssuingBlockStatus                        whereHelpernull_Bool
	ItemReceivingBlockStatus                      whereHelpernull_Bool
	ItemBillingBlockStatus                        whereHelpernull_Bool
	ExternalReferenceDocument                     whereHelpernull_String
	ExternalReferenceDocumentItem                 whereHelpernull_String
	CreationDate                                  whereHelperstring
	CreationTime                                  whereHelperstring
	LastChangeDate                                whereHelperstring
	LastChangeTime                                whereHelperstring
	IsCancelled                                   whereHelpernull_Bool
	IsMarkedForDeletion                           whereHelpernull_Bool
}{
	DeliveryDocument:                              whereHelperint{field: "`data_platform_delivery_document_item_data`.`DeliveryDocument`"},
	DeliveryDocumentItem:                          whereHelperint{field: "`data_platform_delivery_document_item_data`.`DeliveryDocumentItem`"},
	DeliveryDocumentItemCategory:                  whereHelperstring{field: "`data_platform_delivery_document_item_data`.`DeliveryDocumentItemCategory`"},
	SupplyChainRelationshipID:                     whereHelperint{field: "`data_platform_delivery_document_item_data`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipDeliveryID:             whereHelperint{field: "`data_platform_delivery_document_item_data`.`SupplyChainRelationshipDeliveryID`"},
	SupplyChainRelationshipDeliveryPlantID:        whereHelperint{field: "`data_platform_delivery_document_item_data`.`SupplyChainRelationshipDeliveryPlantID`"},
	SupplyChainRelationshipStockConfPlantID:       whereHelperint{field: "`data_platform_delivery_document_item_data`.`SupplyChainRelationshipStockConfPlantID`"},
	SupplyChainRelationshipProductionPlantID:      whereHelperint{field: "`data_platform_delivery_document_item_data`.`SupplyChainRelationshipProductionPlantID`"},
	SupplyChainRelationshipBillingID:              whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`SupplyChainRelationshipBillingID`"},
	SupplyChainRelationshipPaymentID:              whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`SupplyChainRelationshipPaymentID`"},
	SupplyChainRelationshipFreightID:              whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`SupplyChainRelationshipFreightID`"},
	Buyer:                                         whereHelperint{field: "`data_platform_delivery_document_item_data`.`Buyer`"},
	Seller:                                        whereHelperint{field: "`data_platform_delivery_document_item_data`.`Seller`"},
	DeliverToParty:                                whereHelperint{field: "`data_platform_delivery_document_item_data`.`DeliverToParty`"},
	DeliverFromParty:                              whereHelperint{field: "`data_platform_delivery_document_item_data`.`DeliverFromParty`"},
	DeliverToPlant:                                whereHelperstring{field: "`data_platform_delivery_document_item_data`.`DeliverToPlant`"},
	DeliverFromPlant:                              whereHelperstring{field: "`data_platform_delivery_document_item_data`.`DeliverFromPlant`"},
	BillToParty:                                   whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`BillToParty`"},
	BillFromParty:                                 whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`BillFromParty`"},
	BillToCountry:                                 whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`BillToCountry`"},
	BillFromCountry:                               whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`BillFromCountry`"},
	Payer:                                         whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`Payer`"},
	Payee:                                         whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`Payee`"},
	FreightPartner:                                whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`FreightPartner`"},
	Product:                                       whereHelperstring{field: "`data_platform_delivery_document_item_data`.`Product`"},
	SizeOrDimensionText:                           whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`SizeOrDimensionText`"},
	ProductStandardID:                             whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`ProductStandardID`"},
	ProductGroup:                                  whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`ProductGroup`"},
	ProductSpecification:                          whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`ProductSpecification`"},
	MarkingOfMaterial:                             whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`MarkingOfMaterial`"},
	BaseUnit:                                      whereHelperstring{field: "`data_platform_delivery_document_item_data`.`BaseUnit`"},
	DeliveryUnit:                                  whereHelperstring{field: "`data_platform_delivery_document_item_data`.`DeliveryUnit`"},
	OriginalQuantityInBaseUnit:                    whereHelperfloat32{field: "`data_platform_delivery_document_item_data`.`OriginalQuantityInBaseUnit`"},
	OriginalQuantityInDeliveryUnit:                whereHelperfloat32{field: "`data_platform_delivery_document_item_data`.`OriginalQuantityInDeliveryUnit`"},
	DeliverToPlantStorageLocation:                 whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`DeliverToPlantStorageLocation`"},
	ProductIsBatchManagedInDeliverToPlant:         whereHelpernull_Bool{field: "`data_platform_delivery_document_item_data`.`ProductIsBatchManagedInDeliverToPlant`"},
	BatchMgmtPolicyInDeliverToPlant:               whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`BatchMgmtPolicyInDeliverToPlant`"},
	DeliverToPlantBatch:                           whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`DeliverToPlantBatch`"},
	DeliverToPlantBatchValidityStartDate:          whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`DeliverToPlantBatchValidityStartDate`"},
	DeliverToPlantBatchValidityStartTime:          whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`DeliverToPlantBatchValidityStartTime`"},
	DeliverToPlantBatchValidityEndDate:            whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`DeliverToPlantBatchValidityEndDate`"},
	DeliverToPlantBatchValidityEndTime:            whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`DeliverToPlantBatchValidityEndTime`"},
	DeliverFromPlantStorageLocation:               whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`DeliverFromPlantStorageLocation`"},
	ProductIsBatchManagedInDeliverFromPlant:       whereHelpernull_Bool{field: "`data_platform_delivery_document_item_data`.`ProductIsBatchManagedInDeliverFromPlant`"},
	BatchMgmtPolicyInDeliverFromPlant:             whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`BatchMgmtPolicyInDeliverFromPlant`"},
	DeliverFromPlantBatch:                         whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`DeliverFromPlantBatch`"},
	DeliverFromPlantBatchValidityStartDate:        whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`DeliverFromPlantBatchValidityStartDate`"},
	DeliverFromPlantBatchValidityStartTime:        whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`DeliverFromPlantBatchValidityStartTime`"},
	DeliverFromPlantBatchValidityEndDate:          whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`DeliverFromPlantBatchValidityEndDate`"},
	DeliverFromPlantBatchValidityEndTime:          whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`DeliverFromPlantBatchValidityEndTime`"},
	StockConfirmationBusinessPartner:              whereHelperint{field: "`data_platform_delivery_document_item_data`.`StockConfirmationBusinessPartner`"},
	StockConfirmationPlant:                        whereHelperstring{field: "`data_platform_delivery_document_item_data`.`StockConfirmationPlant`"},
	ProductIsBatchManagedInStockConfirmationPlant: whereHelpernull_Bool{field: "`data_platform_delivery_document_item_data`.`ProductIsBatchManagedInStockConfirmationPlant`"},
	BatchMgmtPolicyInStockConfirmationPlant:       whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`BatchMgmtPolicyInStockConfirmationPlant`"},
	StockConfirmationPlantBatch:                   whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`StockConfirmationPlantBatch`"},
	StockConfirmationPlantBatchValidityStartDate:  whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`StockConfirmationPlantBatchValidityStartDate`"},
	StockConfirmationPlantBatchValidityStartTime:  whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`StockConfirmationPlantBatchValidityStartTime`"},
	StockConfirmationPlantBatchValidityEndDate:    whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`StockConfirmationPlantBatchValidityEndDate`"},
	StockConfirmationPlantBatchValidityEndTime:    whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`StockConfirmationPlantBatchValidityEndTime`"},
	StockConfirmationPolicy:                       whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`StockConfirmationPolicy`"},
	StockConfirmationStatus:                       whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`StockConfirmationStatus`"},
	ProductionPlantBusinessPartner:                whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`ProductionPlantBusinessPartner`"},
	ProductionPlant:                               whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`ProductionPlant`"},
	ProductionPlantStorageLocation:                whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`ProductionPlantStorageLocation`"},
	ProductIsBatchManagedInProductionPlant:        whereHelpernull_Bool{field: "`data_platform_delivery_document_item_data`.`ProductIsBatchManagedInProductionPlant`"},
	BatchMgmtPolicyInProductionPlant:              whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`BatchMgmtPolicyInProductionPlant`"},
	ProductionPlantBatch:                          whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`ProductionPlantBatch`"},
	ProductionPlantBatchValidityStartDate:         whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`ProductionPlantBatchValidityStartDate`"},
	ProductionPlantBatchValidityStartTime:         whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`ProductionPlantBatchValidityStartTime`"},
	ProductionPlantBatchValidityEndDate:           whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`ProductionPlantBatchValidityEndDate`"},
	ProductionPlantBatchValidityEndTime:           whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`ProductionPlantBatchValidityEndTime`"},
	InspectionPlantBusinessPartner:                whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`InspectionPlantBusinessPartner`"},
	InspectionPlant:                               whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`InspectionPlant`"},
	InspectionPlan:                                whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`InspectionPlan`"},
	InspectionLot:                                 whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`InspectionLot`"},
	DeliveryDocumentItemText:                      whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`DeliveryDocumentItemText`"},
	DeliveryDocumentItemTextByBuyer:               whereHelperstring{field: "`data_platform_delivery_document_item_data`.`DeliveryDocumentItemTextByBuyer`"},
	DeliveryDocumentItemTextBySeller:              whereHelperstring{field: "`data_platform_delivery_document_item_data`.`DeliveryDocumentItemTextBySeller`"},
	PlannedGoodsIssueDate:                         whereHelperstring{field: "`data_platform_delivery_document_item_data`.`PlannedGoodsIssueDate`"},
	PlannedGoodsIssueTime:                         whereHelperstring{field: "`data_platform_delivery_document_item_data`.`PlannedGoodsIssueTime`"},
	PlannedGoodsReceiptDate:                       whereHelperstring{field: "`data_platform_delivery_document_item_data`.`PlannedGoodsReceiptDate`"},
	PlannedGoodsReceiptTime:                       whereHelperstring{field: "`data_platform_delivery_document_item_data`.`PlannedGoodsReceiptTime`"},
	PlannedGoodsIssueQuantity:                     whereHelperfloat32{field: "`data_platform_delivery_document_item_data`.`PlannedGoodsIssueQuantity`"},
	PlannedGoodsIssueQtyInBaseUnit:                whereHelperfloat32{field: "`data_platform_delivery_document_item_data`.`PlannedGoodsIssueQtyInBaseUnit`"},
	PlannedGoodsReceiptQuantity:                   whereHelperfloat32{field: "`data_platform_delivery_document_item_data`.`PlannedGoodsReceiptQuantity`"},
	PlannedGoodsReceiptQtyInBaseUnit:              whereHelperfloat32{field: "`data_platform_delivery_document_item_data`.`PlannedGoodsReceiptQtyInBaseUnit`"},
	ActualGoodsIssueDate:                          whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`ActualGoodsIssueDate`"},
	ActualGoodsIssueTime:                          whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`ActualGoodsIssueTime`"},
	ActualGoodsReceiptDate:                        whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`ActualGoodsReceiptDate`"},
	ActualGoodsReceiptTime:                        whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`ActualGoodsReceiptTime`"},
	ActualGoodsIssueQuantity:                      whereHelpernull_Float32{field: "`data_platform_delivery_document_item_data`.`ActualGoodsIssueQuantity`"},
	ActualGoodsIssueQtyInBaseUnit:                 whereHelpernull_Float32{field: "`data_platform_delivery_document_item_data`.`ActualGoodsIssueQtyInBaseUnit`"},
	ActualGoodsReceiptQuantity:                    whereHelpernull_Float32{field: "`data_platform_delivery_document_item_data`.`ActualGoodsReceiptQuantity`"},
	ActualGoodsReceiptQtyInBaseUnit:               whereHelpernull_Float32{field: "`data_platform_delivery_document_item_data`.`ActualGoodsReceiptQtyInBaseUnit`"},
	QuantityPerPackage:                            whereHelpernull_Float32{field: "`data_platform_delivery_document_item_data`.`QuantityPerPackage`"},
	ItemBillingStatus:                             whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`ItemBillingStatus`"},
	ItemCompleteDeliveryIsDefined:                 whereHelpernull_Bool{field: "`data_platform_delivery_document_item_data`.`ItemCompleteDeliveryIsDefined`"},
	ItemWeightUnit:                                whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`ItemWeightUnit`"},
	ItemNetWeight:                                 whereHelpernull_Float32{field: "`data_platform_delivery_document_item_data`.`ItemNetWeight`"},
	ItemGrossWeight:                               whereHelpernull_Float32{field: "`data_platform_delivery_document_item_data`.`ItemGrossWeight`"},
	InternalCapacityQuantity:                      whereHelpernull_Float32{field: "`data_platform_delivery_document_item_data`.`InternalCapacityQuantity`"},
	InternalCapacityQuantityUnit:                  whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`InternalCapacityQuantityUnit`"},
	ItemIsBillingRelevant:                         whereHelpernull_Bool{field: "`data_platform_delivery_document_item_data`.`ItemIsBillingRelevant`"},
	NetAmount:                                     whereHelpernull_Float32{field: "`data_platform_delivery_document_item_data`.`NetAmount`"},
	TaxAmount:                                     whereHelpernull_Float32{field: "`data_platform_delivery_document_item_data`.`TaxAmount`"},
	GrossAmount:                                   whereHelpernull_Float32{field: "`data_platform_delivery_document_item_data`.`GrossAmount`"},
	OrderID:                                       whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`OrderID`"},
	OrderItem:                                     whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`OrderItem`"},
	Contract:                                      whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`Contract`"},
	ContractItem:                                  whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`ContractItem`"},
	ProductionVersion:                             whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`ProductionVersion`"},
	ProductionVersionItem:                         whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`ProductionVersionItem`"},
	ProductionOrder:                               whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`ProductionOrder`"},
	ProductionOrderItem:                           whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`ProductionOrderItem`"},
	BillOfMaterial:                                whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`BillOfMaterial`"},
	BillOfMaterialItem:                            whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`BillOfMaterialItem`"},
	Operations:                                    whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`Operations`"},
	OperationsItem:                                whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`OperationsItem`"},
	OperationID:                                   whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`OperationID`"},
	OrderType:                                     whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`OrderType`"},
	ContractType:                                  whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`ContractType`"},
	OrderValidityStartDate:                        whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`OrderValidityStartDate`"},
	OrderValidityEndDate:                          whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`OrderValidityEndDate`"},
	PaymentTerms:                                  whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`PaymentTerms`"},
	DueCalculationBaseDate:                        whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`DueCalculationBaseDate`"},
	PaymentDueDate:                                whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`PaymentDueDate`"},
	NetPaymentDays:                                whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`NetPaymentDays`"},
	PaymentMethod:                                 whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`PaymentMethod`"},
	InvoicePeriodStartDate:                        whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`InvoicePeriodStartDate`"},
	InvoicePeriodEndDate:                          whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`InvoicePeriodEndDate`"},
	ConfirmedDeliveryDate:                         whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`ConfirmedDeliveryDate`"},
	Project:                                       whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`Project`"},
	WBSElement:                                    whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`WBSElement`"},
	ReferenceDocument:                             whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`ReferenceDocument`"},
	ReferenceDocumentItem:                         whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`ReferenceDocumentItem`"},
	TransactionTaxClassification:                  whereHelperstring{field: "`data_platform_delivery_document_item_data`.`TransactionTaxClassification`"},
	ProductTaxClassificationBillToCountry:         whereHelperstring{field: "`data_platform_delivery_document_item_data`.`ProductTaxClassificationBillToCountry`"},
	ProductTaxClassificationBillFromCountry:       whereHelperstring{field: "`data_platform_delivery_document_item_data`.`ProductTaxClassificationBillFromCountry`"},
	DefinedTaxClassification:                      whereHelperstring{field: "`data_platform_delivery_document_item_data`.`DefinedTaxClassification`"},
	AccountAssignmentGroup:                        whereHelperstring{field: "`data_platform_delivery_document_item_data`.`AccountAssignmentGroup`"},
	ProductAccountAssignmentGroup:                 whereHelperstring{field: "`data_platform_delivery_document_item_data`.`ProductAccountAssignmentGroup`"},
	TaxCode:                                       whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`TaxCode`"},
	TaxRate:                                       whereHelpernull_Float32{field: "`data_platform_delivery_document_item_data`.`TaxRate`"},
	CountryOfOrigin:                               whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`CountryOfOrigin`"},
	CountryOfOriginLanguage:                       whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`CountryOfOriginLanguage`"},
	Equipment:                                     whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`Equipment`"},
	FreightOrder:                                  whereHelpernull_Int{field: "`data_platform_delivery_document_item_data`.`FreightOrder`"},
	ItemDeliveryBlockStatus:                       whereHelpernull_Bool{field: "`data_platform_delivery_document_item_data`.`ItemDeliveryBlockStatus`"},
	ItemIssuingBlockStatus:                        whereHelpernull_Bool{field: "`data_platform_delivery_document_item_data`.`ItemIssuingBlockStatus`"},
	ItemReceivingBlockStatus:                      whereHelpernull_Bool{field: "`data_platform_delivery_document_item_data`.`ItemReceivingBlockStatus`"},
	ItemBillingBlockStatus:                        whereHelpernull_Bool{field: "`data_platform_delivery_document_item_data`.`ItemBillingBlockStatus`"},
	ExternalReferenceDocument:                     whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`ExternalReferenceDocument`"},
	ExternalReferenceDocumentItem:                 whereHelpernull_String{field: "`data_platform_delivery_document_item_data`.`ExternalReferenceDocumentItem`"},
	CreationDate:                                  whereHelperstring{field: "`data_platform_delivery_document_item_data`.`CreationDate`"},
	CreationTime:                                  whereHelperstring{field: "`data_platform_delivery_document_item_data`.`CreationTime`"},
	LastChangeDate:                                whereHelperstring{field: "`data_platform_delivery_document_item_data`.`LastChangeDate`"},
	LastChangeTime:                                whereHelperstring{field: "`data_platform_delivery_document_item_data`.`LastChangeTime`"},
	IsCancelled:                                   whereHelpernull_Bool{field: "`data_platform_delivery_document_item_data`.`IsCancelled`"},
	IsMarkedForDeletion:                           whereHelpernull_Bool{field: "`data_platform_delivery_document_item_data`.`IsMarkedForDeletion`"},
}

// DataPlatformDeliveryDocumentItemDatumRels is where relationship names are stored.
var DataPlatformDeliveryDocumentItemDatumRels = struct {
	BaseUnitDataPlatformQuantityUnitQuantityUnitDatum                     string
	BillOfMaterialDataPlatformBillOfMaterialItemDatum                     string
	BillOfMaterialDataPlatformBillOfMaterialHeaderDatum                   string
	ContractDataPlatformContractItemDatum                                 string
	ContractDataPlatformContractHeaderDatum                               string
	CountryOfOriginLanguageDataPlatformLanguageLanguageDatum              string
	CountryOfOriginDataPlatformCountryCountryDatum                        string
	DeliverFromPartyDataPlatformBatchMasterRecordBatchDatum               string
	DeliverFromPartyDataPlatformPlantStorageLocationDatum                 string
	DeliverToPartyDataPlatformBatchMasterRecordBatchDatum                 string
	DeliverToPartyDataPlatformPlantStorageLocationDatum                   string
	DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum                 string
	EquipmentDataPlatformEquipmentMasterGeneralDatum                      string
	InspectionLotDataPlatformInspectionLotHeaderDatum                     string
	InspectionPlantDataPlatformPlantGeneralDatum                          string
	InspectionPlanDataPlatformInspectionPlanHeaderDatum                   string
	InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum string
	ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum               string
	OrderIDDataPlatformOrdersItemDatum                                    string
	PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum              string
	PaymentTerm                                                           string
	ProductGroupDataPlatformProductGroupProductGroupDatum                 string
	OperationIDDataPlatformProductionOrderItemOperationDatum              string
	ProductionOrderDataPlatformProductionOrderItemDatum                   string
	ProductDataPlatformBatchMasterRecordBatchDatum                        string
	ProductionPlantDataPlatformPlantStorageLocationDatum                  string
	ProjectDataPlatformProjectProjectDatum                                string
	BillFromPartyDataPlatformSCRBillingRelationDatum                      string
	BuyerDataPlatformSCRDeliveryRelationDatum                             string
	BuyerDataPlatformSCRDeliveryPlantRelationDatum                        string
	BillFromPartyDataPlatformSCRPaymentRelationDatum                      string
	BuyerDataPlatformSCRProductionPlantRelationDatum                      string
	BuyerDataPlatformSCRStockConfPlantRelationDatum                       string
	ProjectDataPlatformProjectWBSElementDatum                             string
	DeliveryDocumentDataPlatformDeliveryDocumentHeaderDatum               string
	DeliveryDocumentDataPlatformDeliveryDocumentItemDocData               string
	DeliveryDocumentDataPlatformDeliveryDocumentItemFreightAgreementData  string
	DeliveryDocumentDataPlatformInvoiceDocumentItemData                   string
}{
	BaseUnitDataPlatformQuantityUnitQuantityUnitDatum:                     "BaseUnitDataPlatformQuantityUnitQuantityUnitDatum",
	BillOfMaterialDataPlatformBillOfMaterialItemDatum:                     "BillOfMaterialDataPlatformBillOfMaterialItemDatum",
	BillOfMaterialDataPlatformBillOfMaterialHeaderDatum:                   "BillOfMaterialDataPlatformBillOfMaterialHeaderDatum",
	ContractDataPlatformContractItemDatum:                                 "ContractDataPlatformContractItemDatum",
	ContractDataPlatformContractHeaderDatum:                               "ContractDataPlatformContractHeaderDatum",
	CountryOfOriginLanguageDataPlatformLanguageLanguageDatum:              "CountryOfOriginLanguageDataPlatformLanguageLanguageDatum",
	CountryOfOriginDataPlatformCountryCountryDatum:                        "CountryOfOriginDataPlatformCountryCountryDatum",
	DeliverFromPartyDataPlatformBatchMasterRecordBatchDatum:               "DeliverFromPartyDataPlatformBatchMasterRecordBatchDatum",
	DeliverFromPartyDataPlatformPlantStorageLocationDatum:                 "DeliverFromPartyDataPlatformPlantStorageLocationDatum",
	DeliverToPartyDataPlatformBatchMasterRecordBatchDatum:                 "DeliverToPartyDataPlatformBatchMasterRecordBatchDatum",
	DeliverToPartyDataPlatformPlantStorageLocationDatum:                   "DeliverToPartyDataPlatformPlantStorageLocationDatum",
	DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum:                 "DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum",
	EquipmentDataPlatformEquipmentMasterGeneralDatum:                      "EquipmentDataPlatformEquipmentMasterGeneralDatum",
	InspectionLotDataPlatformInspectionLotHeaderDatum:                     "InspectionLotDataPlatformInspectionLotHeaderDatum",
	InspectionPlantDataPlatformPlantGeneralDatum:                          "InspectionPlantDataPlatformPlantGeneralDatum",
	InspectionPlanDataPlatformInspectionPlanHeaderDatum:                   "InspectionPlanDataPlatformInspectionPlanHeaderDatum",
	InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum: "InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum",
	ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum:               "ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum",
	OrderIDDataPlatformOrdersItemDatum:                                    "OrderIDDataPlatformOrdersItemDatum",
	PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum:              "PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum",
	PaymentTerm: "PaymentTerm",
	ProductGroupDataPlatformProductGroupProductGroupDatum:                "ProductGroupDataPlatformProductGroupProductGroupDatum",
	OperationIDDataPlatformProductionOrderItemOperationDatum:             "OperationIDDataPlatformProductionOrderItemOperationDatum",
	ProductionOrderDataPlatformProductionOrderItemDatum:                  "ProductionOrderDataPlatformProductionOrderItemDatum",
	ProductDataPlatformBatchMasterRecordBatchDatum:                       "ProductDataPlatformBatchMasterRecordBatchDatum",
	ProductionPlantDataPlatformPlantStorageLocationDatum:                 "ProductionPlantDataPlatformPlantStorageLocationDatum",
	ProjectDataPlatformProjectProjectDatum:                               "ProjectDataPlatformProjectProjectDatum",
	BillFromPartyDataPlatformSCRBillingRelationDatum:                     "BillFromPartyDataPlatformSCRBillingRelationDatum",
	BuyerDataPlatformSCRDeliveryRelationDatum:                            "BuyerDataPlatformSCRDeliveryRelationDatum",
	BuyerDataPlatformSCRDeliveryPlantRelationDatum:                       "BuyerDataPlatformSCRDeliveryPlantRelationDatum",
	BillFromPartyDataPlatformSCRPaymentRelationDatum:                     "BillFromPartyDataPlatformSCRPaymentRelationDatum",
	BuyerDataPlatformSCRProductionPlantRelationDatum:                     "BuyerDataPlatformSCRProductionPlantRelationDatum",
	BuyerDataPlatformSCRStockConfPlantRelationDatum:                      "BuyerDataPlatformSCRStockConfPlantRelationDatum",
	ProjectDataPlatformProjectWBSElementDatum:                            "ProjectDataPlatformProjectWBSElementDatum",
	DeliveryDocumentDataPlatformDeliveryDocumentHeaderDatum:              "DeliveryDocumentDataPlatformDeliveryDocumentHeaderDatum",
	DeliveryDocumentDataPlatformDeliveryDocumentItemDocData:              "DeliveryDocumentDataPlatformDeliveryDocumentItemDocData",
	DeliveryDocumentDataPlatformDeliveryDocumentItemFreightAgreementData: "DeliveryDocumentDataPlatformDeliveryDocumentItemFreightAgreementData",
	DeliveryDocumentDataPlatformInvoiceDocumentItemData:                  "DeliveryDocumentDataPlatformInvoiceDocumentItemData",
}

// dataPlatformDeliveryDocumentItemDatumR is where relationships are stored.
type dataPlatformDeliveryDocumentItemDatumR struct {
	BaseUnitDataPlatformQuantityUnitQuantityUnitDatum                     *DataPlatformQuantityUnitQuantityUnitDatum                 `boil:"BaseUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"BaseUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"BaseUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"BaseUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	BillOfMaterialDataPlatformBillOfMaterialItemDatum                     *DataPlatformBillOfMaterialItemDatum                       `boil:"BillOfMaterialDataPlatformBillOfMaterialItemDatum" json:"BillOfMaterialDataPlatformBillOfMaterialItemDatum" toml:"BillOfMaterialDataPlatformBillOfMaterialItemDatum" yaml:"BillOfMaterialDataPlatformBillOfMaterialItemDatum"`
	BillOfMaterialDataPlatformBillOfMaterialHeaderDatum                   *DataPlatformBillOfMaterialHeaderDatum                     `boil:"BillOfMaterialDataPlatformBillOfMaterialHeaderDatum" json:"BillOfMaterialDataPlatformBillOfMaterialHeaderDatum" toml:"BillOfMaterialDataPlatformBillOfMaterialHeaderDatum" yaml:"BillOfMaterialDataPlatformBillOfMaterialHeaderDatum"`
	ContractDataPlatformContractItemDatum                                 *DataPlatformContractItemDatum                             `boil:"ContractDataPlatformContractItemDatum" json:"ContractDataPlatformContractItemDatum" toml:"ContractDataPlatformContractItemDatum" yaml:"ContractDataPlatformContractItemDatum"`
	ContractDataPlatformContractHeaderDatum                               *DataPlatformContractHeaderDatum                           `boil:"ContractDataPlatformContractHeaderDatum" json:"ContractDataPlatformContractHeaderDatum" toml:"ContractDataPlatformContractHeaderDatum" yaml:"ContractDataPlatformContractHeaderDatum"`
	CountryOfOriginLanguageDataPlatformLanguageLanguageDatum              *DataPlatformLanguageLanguageDatum                         `boil:"CountryOfOriginLanguageDataPlatformLanguageLanguageDatum" json:"CountryOfOriginLanguageDataPlatformLanguageLanguageDatum" toml:"CountryOfOriginLanguageDataPlatformLanguageLanguageDatum" yaml:"CountryOfOriginLanguageDataPlatformLanguageLanguageDatum"`
	CountryOfOriginDataPlatformCountryCountryDatum                        *DataPlatformCountryCountryDatum                           `boil:"CountryOfOriginDataPlatformCountryCountryDatum" json:"CountryOfOriginDataPlatformCountryCountryDatum" toml:"CountryOfOriginDataPlatformCountryCountryDatum" yaml:"CountryOfOriginDataPlatformCountryCountryDatum"`
	DeliverFromPartyDataPlatformBatchMasterRecordBatchDatum               *DataPlatformBatchMasterRecordBatchDatum                   `boil:"DeliverFromPartyDataPlatformBatchMasterRecordBatchDatum" json:"DeliverFromPartyDataPlatformBatchMasterRecordBatchDatum" toml:"DeliverFromPartyDataPlatformBatchMasterRecordBatchDatum" yaml:"DeliverFromPartyDataPlatformBatchMasterRecordBatchDatum"`
	DeliverFromPartyDataPlatformPlantStorageLocationDatum                 *DataPlatformPlantStorageLocationDatum                     `boil:"DeliverFromPartyDataPlatformPlantStorageLocationDatum" json:"DeliverFromPartyDataPlatformPlantStorageLocationDatum" toml:"DeliverFromPartyDataPlatformPlantStorageLocationDatum" yaml:"DeliverFromPartyDataPlatformPlantStorageLocationDatum"`
	DeliverToPartyDataPlatformBatchMasterRecordBatchDatum                 *DataPlatformBatchMasterRecordBatchDatum                   `boil:"DeliverToPartyDataPlatformBatchMasterRecordBatchDatum" json:"DeliverToPartyDataPlatformBatchMasterRecordBatchDatum" toml:"DeliverToPartyDataPlatformBatchMasterRecordBatchDatum" yaml:"DeliverToPartyDataPlatformBatchMasterRecordBatchDatum"`
	DeliverToPartyDataPlatformPlantStorageLocationDatum                   *DataPlatformPlantStorageLocationDatum                     `boil:"DeliverToPartyDataPlatformPlantStorageLocationDatum" json:"DeliverToPartyDataPlatformPlantStorageLocationDatum" toml:"DeliverToPartyDataPlatformPlantStorageLocationDatum" yaml:"DeliverToPartyDataPlatformPlantStorageLocationDatum"`
	DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum                 *DataPlatformQuantityUnitQuantityUnitDatum                 `boil:"DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	EquipmentDataPlatformEquipmentMasterGeneralDatum                      *DataPlatformEquipmentMasterGeneralDatum                   `boil:"EquipmentDataPlatformEquipmentMasterGeneralDatum" json:"EquipmentDataPlatformEquipmentMasterGeneralDatum" toml:"EquipmentDataPlatformEquipmentMasterGeneralDatum" yaml:"EquipmentDataPlatformEquipmentMasterGeneralDatum"`
	InspectionLotDataPlatformInspectionLotHeaderDatum                     *DataPlatformInspectionLotHeaderDatum                      `boil:"InspectionLotDataPlatformInspectionLotHeaderDatum" json:"InspectionLotDataPlatformInspectionLotHeaderDatum" toml:"InspectionLotDataPlatformInspectionLotHeaderDatum" yaml:"InspectionLotDataPlatformInspectionLotHeaderDatum"`
	InspectionPlantDataPlatformPlantGeneralDatum                          *DataPlatformPlantGeneralDatum                             `boil:"InspectionPlantDataPlatformPlantGeneralDatum" json:"InspectionPlantDataPlatformPlantGeneralDatum" toml:"InspectionPlantDataPlatformPlantGeneralDatum" yaml:"InspectionPlantDataPlatformPlantGeneralDatum"`
	InspectionPlanDataPlatformInspectionPlanHeaderDatum                   *DataPlatformInspectionPlanHeaderDatum                     `boil:"InspectionPlanDataPlatformInspectionPlanHeaderDatum" json:"InspectionPlanDataPlatformInspectionPlanHeaderDatum" toml:"InspectionPlanDataPlatformInspectionPlanHeaderDatum" yaml:"InspectionPlanDataPlatformInspectionPlanHeaderDatum"`
	InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum *DataPlatformQuantityUnitQuantityUnitDatum                 `boil:"InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum               *DataPlatformQuantityUnitQuantityUnitDatum                 `boil:"ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	OrderIDDataPlatformOrdersItemDatum                                    *DataPlatformOrdersItemDatum                               `boil:"OrderIDDataPlatformOrdersItemDatum" json:"OrderIDDataPlatformOrdersItemDatum" toml:"OrderIDDataPlatformOrdersItemDatum" yaml:"OrderIDDataPlatformOrdersItemDatum"`
	PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum              *DataPlatformPaymentMethodPaymentMethodDatum               `boil:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum" json:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum" toml:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum" yaml:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum"`
	PaymentTerm                                                           *DataPlatformPaymentTermsPaymentTermsDatum                 `boil:"PaymentTerm" json:"PaymentTerm" toml:"PaymentTerm" yaml:"PaymentTerm"`
	ProductGroupDataPlatformProductGroupProductGroupDatum                 *DataPlatformProductGroupProductGroupDatum                 `boil:"ProductGroupDataPlatformProductGroupProductGroupDatum" json:"ProductGroupDataPlatformProductGroupProductGroupDatum" toml:"ProductGroupDataPlatformProductGroupProductGroupDatum" yaml:"ProductGroupDataPlatformProductGroupProductGroupDatum"`
	OperationIDDataPlatformProductionOrderItemOperationDatum              *DataPlatformProductionOrderItemOperationDatum             `boil:"OperationIDDataPlatformProductionOrderItemOperationDatum" json:"OperationIDDataPlatformProductionOrderItemOperationDatum" toml:"OperationIDDataPlatformProductionOrderItemOperationDatum" yaml:"OperationIDDataPlatformProductionOrderItemOperationDatum"`
	ProductionOrderDataPlatformProductionOrderItemDatum                   *DataPlatformProductionOrderItemDatum                      `boil:"ProductionOrderDataPlatformProductionOrderItemDatum" json:"ProductionOrderDataPlatformProductionOrderItemDatum" toml:"ProductionOrderDataPlatformProductionOrderItemDatum" yaml:"ProductionOrderDataPlatformProductionOrderItemDatum"`
	ProductDataPlatformBatchMasterRecordBatchDatum                        *DataPlatformBatchMasterRecordBatchDatum                   `boil:"ProductDataPlatformBatchMasterRecordBatchDatum" json:"ProductDataPlatformBatchMasterRecordBatchDatum" toml:"ProductDataPlatformBatchMasterRecordBatchDatum" yaml:"ProductDataPlatformBatchMasterRecordBatchDatum"`
	ProductionPlantDataPlatformPlantStorageLocationDatum                  *DataPlatformPlantStorageLocationDatum                     `boil:"ProductionPlantDataPlatformPlantStorageLocationDatum" json:"ProductionPlantDataPlatformPlantStorageLocationDatum" toml:"ProductionPlantDataPlatformPlantStorageLocationDatum" yaml:"ProductionPlantDataPlatformPlantStorageLocationDatum"`
	ProjectDataPlatformProjectProjectDatum                                *DataPlatformProjectProjectDatum                           `boil:"ProjectDataPlatformProjectProjectDatum" json:"ProjectDataPlatformProjectProjectDatum" toml:"ProjectDataPlatformProjectProjectDatum" yaml:"ProjectDataPlatformProjectProjectDatum"`
	BillFromPartyDataPlatformSCRBillingRelationDatum                      *DataPlatformSCRBillingRelationDatum                       `boil:"BillFromPartyDataPlatformSCRBillingRelationDatum" json:"BillFromPartyDataPlatformSCRBillingRelationDatum" toml:"BillFromPartyDataPlatformSCRBillingRelationDatum" yaml:"BillFromPartyDataPlatformSCRBillingRelationDatum"`
	BuyerDataPlatformSCRDeliveryRelationDatum                             *DataPlatformSCRDeliveryRelationDatum                      `boil:"BuyerDataPlatformSCRDeliveryRelationDatum" json:"BuyerDataPlatformSCRDeliveryRelationDatum" toml:"BuyerDataPlatformSCRDeliveryRelationDatum" yaml:"BuyerDataPlatformSCRDeliveryRelationDatum"`
	BuyerDataPlatformSCRDeliveryPlantRelationDatum                        *DataPlatformSCRDeliveryPlantRelationDatum                 `boil:"BuyerDataPlatformSCRDeliveryPlantRelationDatum" json:"BuyerDataPlatformSCRDeliveryPlantRelationDatum" toml:"BuyerDataPlatformSCRDeliveryPlantRelationDatum" yaml:"BuyerDataPlatformSCRDeliveryPlantRelationDatum"`
	BillFromPartyDataPlatformSCRPaymentRelationDatum                      *DataPlatformSCRPaymentRelationDatum                       `boil:"BillFromPartyDataPlatformSCRPaymentRelationDatum" json:"BillFromPartyDataPlatformSCRPaymentRelationDatum" toml:"BillFromPartyDataPlatformSCRPaymentRelationDatum" yaml:"BillFromPartyDataPlatformSCRPaymentRelationDatum"`
	BuyerDataPlatformSCRProductionPlantRelationDatum                      *DataPlatformSCRProductionPlantRelationDatum               `boil:"BuyerDataPlatformSCRProductionPlantRelationDatum" json:"BuyerDataPlatformSCRProductionPlantRelationDatum" toml:"BuyerDataPlatformSCRProductionPlantRelationDatum" yaml:"BuyerDataPlatformSCRProductionPlantRelationDatum"`
	BuyerDataPlatformSCRStockConfPlantRelationDatum                       *DataPlatformSCRStockConfPlantRelationDatum                `boil:"BuyerDataPlatformSCRStockConfPlantRelationDatum" json:"BuyerDataPlatformSCRStockConfPlantRelationDatum" toml:"BuyerDataPlatformSCRStockConfPlantRelationDatum" yaml:"BuyerDataPlatformSCRStockConfPlantRelationDatum"`
	ProjectDataPlatformProjectWBSElementDatum                             *DataPlatformProjectWBSElementDatum                        `boil:"ProjectDataPlatformProjectWBSElementDatum" json:"ProjectDataPlatformProjectWBSElementDatum" toml:"ProjectDataPlatformProjectWBSElementDatum" yaml:"ProjectDataPlatformProjectWBSElementDatum"`
	DeliveryDocumentDataPlatformDeliveryDocumentHeaderDatum               *DataPlatformDeliveryDocumentHeaderDatum                   `boil:"DeliveryDocumentDataPlatformDeliveryDocumentHeaderDatum" json:"DeliveryDocumentDataPlatformDeliveryDocumentHeaderDatum" toml:"DeliveryDocumentDataPlatformDeliveryDocumentHeaderDatum" yaml:"DeliveryDocumentDataPlatformDeliveryDocumentHeaderDatum"`
	DeliveryDocumentDataPlatformDeliveryDocumentItemDocData               DataPlatformDeliveryDocumentItemDocDatumSlice              `boil:"DeliveryDocumentDataPlatformDeliveryDocumentItemDocData" json:"DeliveryDocumentDataPlatformDeliveryDocumentItemDocData" toml:"DeliveryDocumentDataPlatformDeliveryDocumentItemDocData" yaml:"DeliveryDocumentDataPlatformDeliveryDocumentItemDocData"`
	DeliveryDocumentDataPlatformDeliveryDocumentItemFreightAgreementData  DataPlatformDeliveryDocumentItemFreightAgreementDatumSlice `boil:"DeliveryDocumentDataPlatformDeliveryDocumentItemFreightAgreementData" json:"DeliveryDocumentDataPlatformDeliveryDocumentItemFreightAgreementData" toml:"DeliveryDocumentDataPlatformDeliveryDocumentItemFreightAgreementData" yaml:"DeliveryDocumentDataPlatformDeliveryDocumentItemFreightAgreementData"`
	DeliveryDocumentDataPlatformInvoiceDocumentItemData                   DataPlatformInvoiceDocumentItemDatumSlice                  `boil:"DeliveryDocumentDataPlatformInvoiceDocumentItemData" json:"DeliveryDocumentDataPlatformInvoiceDocumentItemData" toml:"DeliveryDocumentDataPlatformInvoiceDocumentItemData" yaml:"DeliveryDocumentDataPlatformInvoiceDocumentItemData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformDeliveryDocumentItemDatumR) NewStruct() *dataPlatformDeliveryDocumentItemDatumR {
	return &dataPlatformDeliveryDocumentItemDatumR{}
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetBaseUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.BaseUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetBillOfMaterialDataPlatformBillOfMaterialItemDatum() *DataPlatformBillOfMaterialItemDatum {
	if r == nil {
		return nil
	}
	return r.BillOfMaterialDataPlatformBillOfMaterialItemDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetBillOfMaterialDataPlatformBillOfMaterialHeaderDatum() *DataPlatformBillOfMaterialHeaderDatum {
	if r == nil {
		return nil
	}
	return r.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetContractDataPlatformContractItemDatum() *DataPlatformContractItemDatum {
	if r == nil {
		return nil
	}
	return r.ContractDataPlatformContractItemDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetContractDataPlatformContractHeaderDatum() *DataPlatformContractHeaderDatum {
	if r == nil {
		return nil
	}
	return r.ContractDataPlatformContractHeaderDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetCountryOfOriginLanguageDataPlatformLanguageLanguageDatum() *DataPlatformLanguageLanguageDatum {
	if r == nil {
		return nil
	}
	return r.CountryOfOriginLanguageDataPlatformLanguageLanguageDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetCountryOfOriginDataPlatformCountryCountryDatum() *DataPlatformCountryCountryDatum {
	if r == nil {
		return nil
	}
	return r.CountryOfOriginDataPlatformCountryCountryDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetDeliverFromPartyDataPlatformBatchMasterRecordBatchDatum() *DataPlatformBatchMasterRecordBatchDatum {
	if r == nil {
		return nil
	}
	return r.DeliverFromPartyDataPlatformBatchMasterRecordBatchDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetDeliverFromPartyDataPlatformPlantStorageLocationDatum() *DataPlatformPlantStorageLocationDatum {
	if r == nil {
		return nil
	}
	return r.DeliverFromPartyDataPlatformPlantStorageLocationDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetDeliverToPartyDataPlatformBatchMasterRecordBatchDatum() *DataPlatformBatchMasterRecordBatchDatum {
	if r == nil {
		return nil
	}
	return r.DeliverToPartyDataPlatformBatchMasterRecordBatchDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetDeliverToPartyDataPlatformPlantStorageLocationDatum() *DataPlatformPlantStorageLocationDatum {
	if r == nil {
		return nil
	}
	return r.DeliverToPartyDataPlatformPlantStorageLocationDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetEquipmentDataPlatformEquipmentMasterGeneralDatum() *DataPlatformEquipmentMasterGeneralDatum {
	if r == nil {
		return nil
	}
	return r.EquipmentDataPlatformEquipmentMasterGeneralDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetInspectionLotDataPlatformInspectionLotHeaderDatum() *DataPlatformInspectionLotHeaderDatum {
	if r == nil {
		return nil
	}
	return r.InspectionLotDataPlatformInspectionLotHeaderDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetInspectionPlantDataPlatformPlantGeneralDatum() *DataPlatformPlantGeneralDatum {
	if r == nil {
		return nil
	}
	return r.InspectionPlantDataPlatformPlantGeneralDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetInspectionPlanDataPlatformInspectionPlanHeaderDatum() *DataPlatformInspectionPlanHeaderDatum {
	if r == nil {
		return nil
	}
	return r.InspectionPlanDataPlatformInspectionPlanHeaderDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetInternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetOrderIDDataPlatformOrdersItemDatum() *DataPlatformOrdersItemDatum {
	if r == nil {
		return nil
	}
	return r.OrderIDDataPlatformOrdersItemDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum() *DataPlatformPaymentMethodPaymentMethodDatum {
	if r == nil {
		return nil
	}
	return r.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetPaymentTerm() *DataPlatformPaymentTermsPaymentTermsDatum {
	if r == nil {
		return nil
	}
	return r.PaymentTerm
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetProductGroupDataPlatformProductGroupProductGroupDatum() *DataPlatformProductGroupProductGroupDatum {
	if r == nil {
		return nil
	}
	return r.ProductGroupDataPlatformProductGroupProductGroupDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetOperationIDDataPlatformProductionOrderItemOperationDatum() *DataPlatformProductionOrderItemOperationDatum {
	if r == nil {
		return nil
	}
	return r.OperationIDDataPlatformProductionOrderItemOperationDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetProductionOrderDataPlatformProductionOrderItemDatum() *DataPlatformProductionOrderItemDatum {
	if r == nil {
		return nil
	}
	return r.ProductionOrderDataPlatformProductionOrderItemDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetProductDataPlatformBatchMasterRecordBatchDatum() *DataPlatformBatchMasterRecordBatchDatum {
	if r == nil {
		return nil
	}
	return r.ProductDataPlatformBatchMasterRecordBatchDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetProductionPlantDataPlatformPlantStorageLocationDatum() *DataPlatformPlantStorageLocationDatum {
	if r == nil {
		return nil
	}
	return r.ProductionPlantDataPlatformPlantStorageLocationDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetProjectDataPlatformProjectProjectDatum() *DataPlatformProjectProjectDatum {
	if r == nil {
		return nil
	}
	return r.ProjectDataPlatformProjectProjectDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetBillFromPartyDataPlatformSCRBillingRelationDatum() *DataPlatformSCRBillingRelationDatum {
	if r == nil {
		return nil
	}
	return r.BillFromPartyDataPlatformSCRBillingRelationDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetBuyerDataPlatformSCRDeliveryRelationDatum() *DataPlatformSCRDeliveryRelationDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRDeliveryRelationDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetBuyerDataPlatformSCRDeliveryPlantRelationDatum() *DataPlatformSCRDeliveryPlantRelationDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRDeliveryPlantRelationDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetBillFromPartyDataPlatformSCRPaymentRelationDatum() *DataPlatformSCRPaymentRelationDatum {
	if r == nil {
		return nil
	}
	return r.BillFromPartyDataPlatformSCRPaymentRelationDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetBuyerDataPlatformSCRProductionPlantRelationDatum() *DataPlatformSCRProductionPlantRelationDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRProductionPlantRelationDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetBuyerDataPlatformSCRStockConfPlantRelationDatum() *DataPlatformSCRStockConfPlantRelationDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRStockConfPlantRelationDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetProjectDataPlatformProjectWBSElementDatum() *DataPlatformProjectWBSElementDatum {
	if r == nil {
		return nil
	}
	return r.ProjectDataPlatformProjectWBSElementDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetDeliveryDocumentDataPlatformDeliveryDocumentHeaderDatum() *DataPlatformDeliveryDocumentHeaderDatum {
	if r == nil {
		return nil
	}
	return r.DeliveryDocumentDataPlatformDeliveryDocumentHeaderDatum
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetDeliveryDocumentDataPlatformDeliveryDocumentItemDocData() DataPlatformDeliveryDocumentItemDocDatumSlice {
	if r == nil {
		return nil
	}
	return r.DeliveryDocumentDataPlatformDeliveryDocumentItemDocData
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetDeliveryDocumentDataPlatformDeliveryDocumentItemFreightAgreementData() DataPlatformDeliveryDocumentItemFreightAgreementDatumSlice {
	if r == nil {
		return nil
	}
	return r.DeliveryDocumentDataPlatformDeliveryDocumentItemFreightAgreementData
}

func (r *dataPlatformDeliveryDocumentItemDatumR) GetDeliveryDocumentDataPlatformInvoiceDocumentItemData() DataPlatformInvoiceDocumentItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.DeliveryDocumentDataPlatformInvoiceDocumentItemData
}

// dataPlatformDeliveryDocumentItemDatumL is where Load methods for each relationship are stored.
type dataPlatformDeliveryDocumentItemDatumL struct{}

var (
	dataPlatformDeliveryDocumentItemDatumAllColumns            = []string{"DeliveryDocument", "DeliveryDocumentItem", "DeliveryDocumentItemCategory", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "SupplyChainRelationshipStockConfPlantID", "SupplyChainRelationshipProductionPlantID", "SupplyChainRelationshipBillingID", "SupplyChainRelationshipPaymentID", "SupplyChainRelationshipFreightID", "Buyer", "Seller", "DeliverToParty", "DeliverFromParty", "DeliverToPlant", "DeliverFromPlant", "BillToParty", "BillFromParty", "BillToCountry", "BillFromCountry", "Payer", "Payee", "FreightPartner", "Product", "SizeOrDimensionText", "ProductStandardID", "ProductGroup", "ProductSpecification", "MarkingOfMaterial", "BaseUnit", "DeliveryUnit", "OriginalQuantityInBaseUnit", "OriginalQuantityInDeliveryUnit", "DeliverToPlantStorageLocation", "ProductIsBatchManagedInDeliverToPlant", "BatchMgmtPolicyInDeliverToPlant", "DeliverToPlantBatch", "DeliverToPlantBatchValidityStartDate", "DeliverToPlantBatchValidityStartTime", "DeliverToPlantBatchValidityEndDate", "DeliverToPlantBatchValidityEndTime", "DeliverFromPlantStorageLocation", "ProductIsBatchManagedInDeliverFromPlant", "BatchMgmtPolicyInDeliverFromPlant", "DeliverFromPlantBatch", "DeliverFromPlantBatchValidityStartDate", "DeliverFromPlantBatchValidityStartTime", "DeliverFromPlantBatchValidityEndDate", "DeliverFromPlantBatchValidityEndTime", "StockConfirmationBusinessPartner", "StockConfirmationPlant", "ProductIsBatchManagedInStockConfirmationPlant", "BatchMgmtPolicyInStockConfirmationPlant", "StockConfirmationPlantBatch", "StockConfirmationPlantBatchValidityStartDate", "StockConfirmationPlantBatchValidityStartTime", "StockConfirmationPlantBatchValidityEndDate", "StockConfirmationPlantBatchValidityEndTime", "StockConfirmationPolicy", "StockConfirmationStatus", "ProductionPlantBusinessPartner", "ProductionPlant", "ProductionPlantStorageLocation", "ProductIsBatchManagedInProductionPlant", "BatchMgmtPolicyInProductionPlant", "ProductionPlantBatch", "ProductionPlantBatchValidityStartDate", "ProductionPlantBatchValidityStartTime", "ProductionPlantBatchValidityEndDate", "ProductionPlantBatchValidityEndTime", "InspectionPlantBusinessPartner", "InspectionPlant", "InspectionPlan", "InspectionLot", "DeliveryDocumentItemText", "DeliveryDocumentItemTextByBuyer", "DeliveryDocumentItemTextBySeller", "PlannedGoodsIssueDate", "PlannedGoodsIssueTime", "PlannedGoodsReceiptDate", "PlannedGoodsReceiptTime", "PlannedGoodsIssueQuantity", "PlannedGoodsIssueQtyInBaseUnit", "PlannedGoodsReceiptQuantity", "PlannedGoodsReceiptQtyInBaseUnit", "ActualGoodsIssueDate", "ActualGoodsIssueTime", "ActualGoodsReceiptDate", "ActualGoodsReceiptTime", "ActualGoodsIssueQuantity", "ActualGoodsIssueQtyInBaseUnit", "ActualGoodsReceiptQuantity", "ActualGoodsReceiptQtyInBaseUnit", "QuantityPerPackage", "ItemBillingStatus", "ItemCompleteDeliveryIsDefined", "ItemWeightUnit", "ItemNetWeight", "ItemGrossWeight", "InternalCapacityQuantity", "InternalCapacityQuantityUnit", "ItemIsBillingRelevant", "NetAmount", "TaxAmount", "GrossAmount", "OrderID", "OrderItem", "Contract", "ContractItem", "ProductionVersion", "ProductionVersionItem", "ProductionOrder", "ProductionOrderItem", "BillOfMaterial", "BillOfMaterialItem", "Operations", "OperationsItem", "OperationID", "OrderType", "ContractType", "OrderValidityStartDate", "OrderValidityEndDate", "PaymentTerms", "DueCalculationBaseDate", "PaymentDueDate", "NetPaymentDays", "PaymentMethod", "InvoicePeriodStartDate", "InvoicePeriodEndDate", "ConfirmedDeliveryDate", "Project", "WBSElement", "ReferenceDocument", "ReferenceDocumentItem", "TransactionTaxClassification", "ProductTaxClassificationBillToCountry", "ProductTaxClassificationBillFromCountry", "DefinedTaxClassification", "AccountAssignmentGroup", "ProductAccountAssignmentGroup", "TaxCode", "TaxRate", "CountryOfOrigin", "CountryOfOriginLanguage", "Equipment", "FreightOrder", "ItemDeliveryBlockStatus", "ItemIssuingBlockStatus", "ItemReceivingBlockStatus", "ItemBillingBlockStatus", "ExternalReferenceDocument", "ExternalReferenceDocumentItem", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsCancelled", "IsMarkedForDeletion"}
	dataPlatformDeliveryDocumentItemDatumColumnsWithoutDefault = []string{"DeliveryDocument", "DeliveryDocumentItem", "DeliveryDocumentItemCategory", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "SupplyChainRelationshipStockConfPlantID", "SupplyChainRelationshipProductionPlantID", "SupplyChainRelationshipBillingID", "SupplyChainRelationshipPaymentID", "SupplyChainRelationshipFreightID", "Buyer", "Seller", "DeliverToParty", "DeliverFromParty", "DeliverToPlant", "DeliverFromPlant", "BillToParty", "BillFromParty", "BillToCountry", "BillFromCountry", "Payer", "Payee", "FreightPartner", "Product", "SizeOrDimensionText", "ProductStandardID", "ProductGroup", "ProductSpecification", "MarkingOfMaterial", "BaseUnit", "DeliveryUnit", "OriginalQuantityInBaseUnit", "OriginalQuantityInDeliveryUnit", "DeliverToPlantStorageLocation", "ProductIsBatchManagedInDeliverToPlant", "BatchMgmtPolicyInDeliverToPlant", "DeliverToPlantBatch", "DeliverToPlantBatchValidityStartDate", "DeliverToPlantBatchValidityStartTime", "DeliverToPlantBatchValidityEndDate", "DeliverToPlantBatchValidityEndTime", "DeliverFromPlantStorageLocation", "ProductIsBatchManagedInDeliverFromPlant", "BatchMgmtPolicyInDeliverFromPlant", "DeliverFromPlantBatch", "DeliverFromPlantBatchValidityStartDate", "DeliverFromPlantBatchValidityStartTime", "DeliverFromPlantBatchValidityEndDate", "DeliverFromPlantBatchValidityEndTime", "StockConfirmationBusinessPartner", "StockConfirmationPlant", "ProductIsBatchManagedInStockConfirmationPlant", "BatchMgmtPolicyInStockConfirmationPlant", "StockConfirmationPlantBatch", "StockConfirmationPlantBatchValidityStartDate", "StockConfirmationPlantBatchValidityStartTime", "StockConfirmationPlantBatchValidityEndDate", "StockConfirmationPlantBatchValidityEndTime", "StockConfirmationPolicy", "StockConfirmationStatus", "ProductionPlantBusinessPartner", "ProductionPlant", "ProductionPlantStorageLocation", "ProductIsBatchManagedInProductionPlant", "BatchMgmtPolicyInProductionPlant", "ProductionPlantBatch", "ProductionPlantBatchValidityStartDate", "ProductionPlantBatchValidityStartTime", "ProductionPlantBatchValidityEndDate", "ProductionPlantBatchValidityEndTime", "InspectionPlantBusinessPartner", "InspectionPlant", "InspectionPlan", "InspectionLot", "DeliveryDocumentItemText", "DeliveryDocumentItemTextByBuyer", "DeliveryDocumentItemTextBySeller", "PlannedGoodsIssueDate", "PlannedGoodsIssueTime", "PlannedGoodsReceiptDate", "PlannedGoodsReceiptTime", "PlannedGoodsIssueQuantity", "PlannedGoodsIssueQtyInBaseUnit", "PlannedGoodsReceiptQuantity", "PlannedGoodsReceiptQtyInBaseUnit", "ActualGoodsIssueDate", "ActualGoodsIssueTime", "ActualGoodsReceiptDate", "ActualGoodsReceiptTime", "ActualGoodsIssueQuantity", "ActualGoodsIssueQtyInBaseUnit", "ActualGoodsReceiptQuantity", "ActualGoodsReceiptQtyInBaseUnit", "QuantityPerPackage", "ItemBillingStatus", "ItemCompleteDeliveryIsDefined", "ItemWeightUnit", "ItemNetWeight", "ItemGrossWeight", "InternalCapacityQuantity", "InternalCapacityQuantityUnit", "ItemIsBillingRelevant", "NetAmount", "TaxAmount", "GrossAmount", "OrderID", "OrderItem", "Contract", "ContractItem", "ProductionVersion", "ProductionVersionItem", "ProductionOrder", "ProductionOrderItem", "BillOfMaterial", "BillOfMaterialItem", "Operations", "OperationsItem", "OperationID", "OrderType", "ContractType", "OrderValidityStartDate", "OrderValidityEndDate", "PaymentTerms", "DueCalculationBaseDate", "PaymentDueDate", "NetPaymentDays", "PaymentMethod", "InvoicePeriodStartDate", "InvoicePeriodEndDate", "ConfirmedDeliveryDate", "Project", "WBSElement", "ReferenceDocument", "ReferenceDocumentItem", "TransactionTaxClassification", "ProductTaxClassificationBillToCountry", "ProductTaxClassificationBillFromCountry", "DefinedTaxClassification", "AccountAssignmentGroup", "ProductAccountAssignmentGroup", "TaxCode", "TaxRate", "CountryOfOrigin", "CountryOfOriginLanguage", "Equipment", "FreightOrder", "ItemDeliveryBlockStatus", "ItemIssuingBlockStatus", "ItemReceivingBlockStatus", "ItemBillingBlockStatus", "ExternalReferenceDocument", "ExternalReferenceDocumentItem", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsCancelled", "IsMarkedForDeletion"}
	dataPlatformDeliveryDocumentItemDatumColumnsWithDefault    = []string{}
	dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns     = []string{"DeliveryDocument", "DeliveryDocumentItem"}
	dataPlatformDeliveryDocumentItemDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformDeliveryDocumentItemDatumSlice is an alias for a slice of pointers to DataPlatformDeliveryDocumentItemDatum.
	// This should almost always be used instead of []DataPlatformDeliveryDocumentItemDatum.
	DataPlatformDeliveryDocumentItemDatumSlice []*DataPlatformDeliveryDocumentItemDatum

	dataPlatformDeliveryDocumentItemDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformDeliveryDocumentItemDatumType                 = reflect.TypeOf(&DataPlatformDeliveryDocumentItemDatum{})
	dataPlatformDeliveryDocumentItemDatumMapping              = queries.MakeStructMapping(dataPlatformDeliveryDocumentItemDatumType)
	dataPlatformDeliveryDocumentItemDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformDeliveryDocumentItemDatumType, dataPlatformDeliveryDocumentItemDatumMapping, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns)
	dataPlatformDeliveryDocumentItemDatumInsertCacheMut       sync.RWMutex
	dataPlatformDeliveryDocumentItemDatumInsertCache          = make(map[string]insertCache)
	dataPlatformDeliveryDocumentItemDatumUpdateCacheMut       sync.RWMutex
	dataPlatformDeliveryDocumentItemDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformDeliveryDocumentItemDatumUpsertCacheMut       sync.RWMutex
	dataPlatformDeliveryDocumentItemDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformDeliveryDocumentItemDatum record from the query.
func (q dataPlatformDeliveryDocumentItemDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformDeliveryDocumentItemDatum, error) {
	o := &DataPlatformDeliveryDocumentItemDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_delivery_document_item_data")
	}

	return o, nil
}

// All returns all DataPlatformDeliveryDocumentItemDatum records from the query.
func (q dataPlatformDeliveryDocumentItemDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformDeliveryDocumentItemDatumSlice, error) {
	var o []*DataPlatformDeliveryDocumentItemDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformDeliveryDocumentItemDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformDeliveryDocumentItemDatum records in the query.
func (q dataPlatformDeliveryDocumentItemDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_delivery_document_item_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformDeliveryDocumentItemDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_delivery_document_item_data exists")
	}

	return count > 0, nil
}

// BaseUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) BaseUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.BaseUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// BillOfMaterialDataPlatformBillOfMaterialItemDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) BillOfMaterialDataPlatformBillOfMaterialItemDatum(mods ...qm.QueryMod) dataPlatformBillOfMaterialItemDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BillOfMaterial` = ?", o.BillOfMaterial),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBillOfMaterialItemData(queryMods...)
}

// BillOfMaterialDataPlatformBillOfMaterialHeaderDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) BillOfMaterialDataPlatformBillOfMaterialHeaderDatum(mods ...qm.QueryMod) dataPlatformBillOfMaterialHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BillOfMaterial` = ?", o.BillOfMaterial),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBillOfMaterialHeaderData(queryMods...)
}

// ContractDataPlatformContractItemDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) ContractDataPlatformContractItemDatum(mods ...qm.QueryMod) dataPlatformContractItemDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Contract` = ?", o.Contract),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformContractItemData(queryMods...)
}

// ContractDataPlatformContractHeaderDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) ContractDataPlatformContractHeaderDatum(mods ...qm.QueryMod) dataPlatformContractHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Contract` = ?", o.Contract),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformContractHeaderData(queryMods...)
}

// CountryOfOriginLanguageDataPlatformLanguageLanguageDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) CountryOfOriginLanguageDataPlatformLanguageLanguageDatum(mods ...qm.QueryMod) dataPlatformLanguageLanguageDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Language` = ?", o.CountryOfOriginLanguage),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformLanguageLanguageData(queryMods...)
}

// CountryOfOriginDataPlatformCountryCountryDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) CountryOfOriginDataPlatformCountryCountryDatum(mods ...qm.QueryMod) dataPlatformCountryCountryDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Country` = ?", o.CountryOfOrigin),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformCountryCountryData(queryMods...)
}

// DeliverFromPartyDataPlatformBatchMasterRecordBatchDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) DeliverFromPartyDataPlatformBatchMasterRecordBatchDatum(mods ...qm.QueryMod) dataPlatformBatchMasterRecordBatchDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.DeliverFromParty),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBatchMasterRecordBatchData(queryMods...)
}

// DeliverFromPartyDataPlatformPlantStorageLocationDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) DeliverFromPartyDataPlatformPlantStorageLocationDatum(mods ...qm.QueryMod) dataPlatformPlantStorageLocationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.DeliverFromParty),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPlantStorageLocationData(queryMods...)
}

// DeliverToPartyDataPlatformBatchMasterRecordBatchDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) DeliverToPartyDataPlatformBatchMasterRecordBatchDatum(mods ...qm.QueryMod) dataPlatformBatchMasterRecordBatchDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.DeliverToParty),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBatchMasterRecordBatchData(queryMods...)
}

// DeliverToPartyDataPlatformPlantStorageLocationDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) DeliverToPartyDataPlatformPlantStorageLocationDatum(mods ...qm.QueryMod) dataPlatformPlantStorageLocationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.DeliverToParty),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPlantStorageLocationData(queryMods...)
}

// DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.DeliveryUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// EquipmentDataPlatformEquipmentMasterGeneralDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) EquipmentDataPlatformEquipmentMasterGeneralDatum(mods ...qm.QueryMod) dataPlatformEquipmentMasterGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Equipment` = ?", o.Equipment),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformEquipmentMasterGeneralData(queryMods...)
}

// InspectionLotDataPlatformInspectionLotHeaderDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) InspectionLotDataPlatformInspectionLotHeaderDatum(mods ...qm.QueryMod) dataPlatformInspectionLotHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`InspectionLot` = ?", o.InspectionLot),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformInspectionLotHeaderData(queryMods...)
}

// InspectionPlantDataPlatformPlantGeneralDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) InspectionPlantDataPlatformPlantGeneralDatum(mods ...qm.QueryMod) dataPlatformPlantGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Plant` = ?", o.InspectionPlant),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPlantGeneralData(queryMods...)
}

// InspectionPlanDataPlatformInspectionPlanHeaderDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) InspectionPlanDataPlatformInspectionPlanHeaderDatum(mods ...qm.QueryMod) dataPlatformInspectionPlanHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`InspectionPlan` = ?", o.InspectionPlan),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformInspectionPlanHeaderData(queryMods...)
}

// InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.InternalCapacityQuantityUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.ItemWeightUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// OrderIDDataPlatformOrdersItemDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) OrderIDDataPlatformOrdersItemDatum(mods ...qm.QueryMod) dataPlatformOrdersItemDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`OrderID` = ?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformOrdersItemData(queryMods...)
}

// PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum(mods ...qm.QueryMod) dataPlatformPaymentMethodPaymentMethodDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PaymentMethod` = ?", o.PaymentMethod),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPaymentMethodPaymentMethodData(queryMods...)
}

// PaymentTerm pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) PaymentTerm(mods ...qm.QueryMod) dataPlatformPaymentTermsPaymentTermsDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PaymentTerms` = ?", o.PaymentTerms),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPaymentTermsPaymentTermsData(queryMods...)
}

// ProductGroupDataPlatformProductGroupProductGroupDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) ProductGroupDataPlatformProductGroupProductGroupDatum(mods ...qm.QueryMod) dataPlatformProductGroupProductGroupDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ProductGroup` = ?", o.ProductGroup),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformProductGroupProductGroupData(queryMods...)
}

// OperationIDDataPlatformProductionOrderItemOperationDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) OperationIDDataPlatformProductionOrderItemOperationDatum(mods ...qm.QueryMod) dataPlatformProductionOrderItemOperationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`OperationID` = ?", o.OperationID),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformProductionOrderItemOperationData(queryMods...)
}

// ProductionOrderDataPlatformProductionOrderItemDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) ProductionOrderDataPlatformProductionOrderItemDatum(mods ...qm.QueryMod) dataPlatformProductionOrderItemDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ProductionOrder` = ?", o.ProductionOrder),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformProductionOrderItemData(queryMods...)
}

// ProductDataPlatformBatchMasterRecordBatchDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) ProductDataPlatformBatchMasterRecordBatchDatum(mods ...qm.QueryMod) dataPlatformBatchMasterRecordBatchDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Product` = ?", o.Product),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBatchMasterRecordBatchData(queryMods...)
}

// ProductionPlantDataPlatformPlantStorageLocationDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) ProductionPlantDataPlatformPlantStorageLocationDatum(mods ...qm.QueryMod) dataPlatformPlantStorageLocationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Plant` = ?", o.ProductionPlant),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPlantStorageLocationData(queryMods...)
}

// ProjectDataPlatformProjectProjectDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) ProjectDataPlatformProjectProjectDatum(mods ...qm.QueryMod) dataPlatformProjectProjectDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Project` = ?", o.Project),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformProjectProjectData(queryMods...)
}

// BillFromPartyDataPlatformSCRBillingRelationDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) BillFromPartyDataPlatformSCRBillingRelationDatum(mods ...qm.QueryMod) dataPlatformSCRBillingRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BillFromParty` = ?", o.BillFromParty),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRBillingRelationData(queryMods...)
}

// BuyerDataPlatformSCRDeliveryRelationDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) BuyerDataPlatformSCRDeliveryRelationDatum(mods ...qm.QueryMod) dataPlatformSCRDeliveryRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRDeliveryRelationData(queryMods...)
}

// BuyerDataPlatformSCRDeliveryPlantRelationDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) BuyerDataPlatformSCRDeliveryPlantRelationDatum(mods ...qm.QueryMod) dataPlatformSCRDeliveryPlantRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRDeliveryPlantRelationData(queryMods...)
}

// BillFromPartyDataPlatformSCRPaymentRelationDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) BillFromPartyDataPlatformSCRPaymentRelationDatum(mods ...qm.QueryMod) dataPlatformSCRPaymentRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BillFromParty` = ?", o.BillFromParty),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRPaymentRelationData(queryMods...)
}

// BuyerDataPlatformSCRProductionPlantRelationDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) BuyerDataPlatformSCRProductionPlantRelationDatum(mods ...qm.QueryMod) dataPlatformSCRProductionPlantRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRProductionPlantRelationData(queryMods...)
}

// BuyerDataPlatformSCRStockConfPlantRelationDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) BuyerDataPlatformSCRStockConfPlantRelationDatum(mods ...qm.QueryMod) dataPlatformSCRStockConfPlantRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRStockConfPlantRelationData(queryMods...)
}

// ProjectDataPlatformProjectWBSElementDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) ProjectDataPlatformProjectWBSElementDatum(mods ...qm.QueryMod) dataPlatformProjectWBSElementDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Project` = ?", o.Project),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformProjectWBSElementData(queryMods...)
}

// DeliveryDocumentDataPlatformDeliveryDocumentHeaderDatum pointed to by the foreign key.
func (o *DataPlatformDeliveryDocumentItemDatum) DeliveryDocumentDataPlatformDeliveryDocumentHeaderDatum(mods ...qm.QueryMod) dataPlatformDeliveryDocumentHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`DeliveryDocument` = ?", o.DeliveryDocument),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformDeliveryDocumentHeaderData(queryMods...)
}

// DeliveryDocumentDataPlatformDeliveryDocumentItemDocData retrieves all the data_platform_delivery_document_item_doc_datum's DataPlatformDeliveryDocumentItemDocData with an executor via DeliveryDocument column.
func (o *DataPlatformDeliveryDocumentItemDatum) DeliveryDocumentDataPlatformDeliveryDocumentItemDocData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentItemDocDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_item_doc_data`.`DeliveryDocument`=?", o.DeliveryDocument),
	)

	return DataPlatformDeliveryDocumentItemDocData(queryMods...)
}

// DeliveryDocumentDataPlatformDeliveryDocumentItemFreightAgreementData retrieves all the data_platform_delivery_document_item_freight_agreement_datum's DataPlatformDeliveryDocumentItemFreightAgreementData with an executor via DeliveryDocument column.
func (o *DataPlatformDeliveryDocumentItemDatum) DeliveryDocumentDataPlatformDeliveryDocumentItemFreightAgreementData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentItemFreightAgreementDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_item_freight_agreement_data`.`DeliveryDocument`=?", o.DeliveryDocument),
	)

	return DataPlatformDeliveryDocumentItemFreightAgreementData(queryMods...)
}

// DeliveryDocumentDataPlatformInvoiceDocumentItemData retrieves all the data_platform_invoice_document_item_datum's DataPlatformInvoiceDocumentItemData with an executor via DeliveryDocument column.
func (o *DataPlatformDeliveryDocumentItemDatum) DeliveryDocumentDataPlatformInvoiceDocumentItemData(mods ...qm.QueryMod) dataPlatformInvoiceDocumentItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_invoice_document_item_data`.`DeliveryDocument`=?", o.DeliveryDocument),
	)

	return DataPlatformInvoiceDocumentItemData(queryMods...)
}

// LoadBaseUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		args = append(args, object.BaseUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if a == obj.BaseUnit {
					continue Outer
				}
			}

			args = append(args, obj.BaseUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BaseUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BaseUnit == foreign.QuantityUnit {
				local.R.BaseUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBillOfMaterialDataPlatformBillOfMaterialItemDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadBillOfMaterialDataPlatformBillOfMaterialItemDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		if !queries.IsNil(object.BillOfMaterial) {
			args = append(args, object.BillOfMaterial)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BillOfMaterial) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BillOfMaterial) {
				args = append(args, obj.BillOfMaterial)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_bill_of_material_item_data`),
		qm.WhereIn(`data_platform_bill_of_material_item_data.BillOfMaterial in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBillOfMaterialItemDatum")
	}

	var resultSlice []*DataPlatformBillOfMaterialItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBillOfMaterialItemDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_bill_of_material_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_bill_of_material_item_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillOfMaterialDataPlatformBillOfMaterialItemDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BillOfMaterial, foreign.BillOfMaterial) {
				local.R.BillOfMaterialDataPlatformBillOfMaterialItemDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBillOfMaterialDataPlatformBillOfMaterialHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadBillOfMaterialDataPlatformBillOfMaterialHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		if !queries.IsNil(object.BillOfMaterial) {
			args = append(args, object.BillOfMaterial)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BillOfMaterial) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BillOfMaterial) {
				args = append(args, obj.BillOfMaterial)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_bill_of_material_header_data`),
		qm.WhereIn(`data_platform_bill_of_material_header_data.BillOfMaterial in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBillOfMaterialHeaderDatum")
	}

	var resultSlice []*DataPlatformBillOfMaterialHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBillOfMaterialHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_bill_of_material_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_bill_of_material_header_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BillOfMaterial, foreign.BillOfMaterial) {
				local.R.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadContractDataPlatformContractItemDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadContractDataPlatformContractItemDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		if !queries.IsNil(object.Contract) {
			args = append(args, object.Contract)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Contract) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Contract) {
				args = append(args, obj.Contract)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_contract_item_data`),
		qm.WhereIn(`data_platform_contract_item_data.Contract in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformContractItemDatum")
	}

	var resultSlice []*DataPlatformContractItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformContractItemDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_contract_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_contract_item_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ContractDataPlatformContractItemDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Contract, foreign.Contract) {
				local.R.ContractDataPlatformContractItemDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadContractDataPlatformContractHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadContractDataPlatformContractHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		if !queries.IsNil(object.Contract) {
			args = append(args, object.Contract)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Contract) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Contract) {
				args = append(args, obj.Contract)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_contract_header_data`),
		qm.WhereIn(`data_platform_contract_header_data.Contract in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformContractHeaderDatum")
	}

	var resultSlice []*DataPlatformContractHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformContractHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_contract_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_contract_header_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ContractDataPlatformContractHeaderDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Contract, foreign.Contract) {
				local.R.ContractDataPlatformContractHeaderDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadCountryOfOriginLanguageDataPlatformLanguageLanguageDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadCountryOfOriginLanguageDataPlatformLanguageLanguageDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		if !queries.IsNil(object.CountryOfOriginLanguage) {
			args = append(args, object.CountryOfOriginLanguage)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CountryOfOriginLanguage) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CountryOfOriginLanguage) {
				args = append(args, obj.CountryOfOriginLanguage)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_language_language_data`),
		qm.WhereIn(`data_platform_language_language_data.Language in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformLanguageLanguageDatum")
	}

	var resultSlice []*DataPlatformLanguageLanguageDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformLanguageLanguageDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_language_language_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_language_language_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CountryOfOriginLanguageDataPlatformLanguageLanguageDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CountryOfOriginLanguage, foreign.Language) {
				local.R.CountryOfOriginLanguageDataPlatformLanguageLanguageDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadCountryOfOriginDataPlatformCountryCountryDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadCountryOfOriginDataPlatformCountryCountryDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		if !queries.IsNil(object.CountryOfOrigin) {
			args = append(args, object.CountryOfOrigin)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CountryOfOrigin) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CountryOfOrigin) {
				args = append(args, obj.CountryOfOrigin)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_country_country_data`),
		qm.WhereIn(`data_platform_country_country_data.Country in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformCountryCountryDatum")
	}

	var resultSlice []*DataPlatformCountryCountryDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformCountryCountryDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_country_country_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_country_country_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CountryOfOriginDataPlatformCountryCountryDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CountryOfOrigin, foreign.Country) {
				local.R.CountryOfOriginDataPlatformCountryCountryDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadDeliverFromPartyDataPlatformBatchMasterRecordBatchDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadDeliverFromPartyDataPlatformBatchMasterRecordBatchDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		args = append(args, object.DeliverFromParty)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if a == obj.DeliverFromParty {
					continue Outer
				}
			}

			args = append(args, obj.DeliverFromParty)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_batch_master_record_batch_data`),
		qm.WhereIn(`data_platform_batch_master_record_batch_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBatchMasterRecordBatchDatum")
	}

	var resultSlice []*DataPlatformBatchMasterRecordBatchDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBatchMasterRecordBatchDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_batch_master_record_batch_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_batch_master_record_batch_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DeliverFromPartyDataPlatformBatchMasterRecordBatchDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DeliverFromParty == foreign.BusinessPartner {
				local.R.DeliverFromPartyDataPlatformBatchMasterRecordBatchDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadDeliverFromPartyDataPlatformPlantStorageLocationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadDeliverFromPartyDataPlatformPlantStorageLocationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		args = append(args, object.DeliverFromParty)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if a == obj.DeliverFromParty {
					continue Outer
				}
			}

			args = append(args, obj.DeliverFromParty)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_storage_location_data`),
		qm.WhereIn(`data_platform_plant_storage_location_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPlantStorageLocationDatum")
	}

	var resultSlice []*DataPlatformPlantStorageLocationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPlantStorageLocationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_plant_storage_location_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_storage_location_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DeliverFromPartyDataPlatformPlantStorageLocationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DeliverFromParty == foreign.BusinessPartner {
				local.R.DeliverFromPartyDataPlatformPlantStorageLocationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadDeliverToPartyDataPlatformBatchMasterRecordBatchDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadDeliverToPartyDataPlatformBatchMasterRecordBatchDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		args = append(args, object.DeliverToParty)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if a == obj.DeliverToParty {
					continue Outer
				}
			}

			args = append(args, obj.DeliverToParty)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_batch_master_record_batch_data`),
		qm.WhereIn(`data_platform_batch_master_record_batch_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBatchMasterRecordBatchDatum")
	}

	var resultSlice []*DataPlatformBatchMasterRecordBatchDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBatchMasterRecordBatchDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_batch_master_record_batch_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_batch_master_record_batch_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DeliverToPartyDataPlatformBatchMasterRecordBatchDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DeliverToParty == foreign.BusinessPartner {
				local.R.DeliverToPartyDataPlatformBatchMasterRecordBatchDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadDeliverToPartyDataPlatformPlantStorageLocationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadDeliverToPartyDataPlatformPlantStorageLocationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		args = append(args, object.DeliverToParty)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if a == obj.DeliverToParty {
					continue Outer
				}
			}

			args = append(args, obj.DeliverToParty)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_storage_location_data`),
		qm.WhereIn(`data_platform_plant_storage_location_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPlantStorageLocationDatum")
	}

	var resultSlice []*DataPlatformPlantStorageLocationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPlantStorageLocationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_plant_storage_location_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_storage_location_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DeliverToPartyDataPlatformPlantStorageLocationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DeliverToParty == foreign.BusinessPartner {
				local.R.DeliverToPartyDataPlatformPlantStorageLocationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		args = append(args, object.DeliveryUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if a == obj.DeliveryUnit {
					continue Outer
				}
			}

			args = append(args, obj.DeliveryUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DeliveryUnit == foreign.QuantityUnit {
				local.R.DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadEquipmentDataPlatformEquipmentMasterGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadEquipmentDataPlatformEquipmentMasterGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		if !queries.IsNil(object.Equipment) {
			args = append(args, object.Equipment)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Equipment) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Equipment) {
				args = append(args, obj.Equipment)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_equipment_master_general_data`),
		qm.WhereIn(`data_platform_equipment_master_general_data.Equipment in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformEquipmentMasterGeneralDatum")
	}

	var resultSlice []*DataPlatformEquipmentMasterGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformEquipmentMasterGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_equipment_master_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_equipment_master_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.EquipmentDataPlatformEquipmentMasterGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Equipment, foreign.Equipment) {
				local.R.EquipmentDataPlatformEquipmentMasterGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadInspectionLotDataPlatformInspectionLotHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadInspectionLotDataPlatformInspectionLotHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		if !queries.IsNil(object.InspectionLot) {
			args = append(args, object.InspectionLot)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.InspectionLot) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.InspectionLot) {
				args = append(args, obj.InspectionLot)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_inspection_lot_header_data`),
		qm.WhereIn(`data_platform_inspection_lot_header_data.InspectionLot in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformInspectionLotHeaderDatum")
	}

	var resultSlice []*DataPlatformInspectionLotHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformInspectionLotHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_inspection_lot_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_inspection_lot_header_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.InspectionLotDataPlatformInspectionLotHeaderDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.InspectionLot, foreign.InspectionLot) {
				local.R.InspectionLotDataPlatformInspectionLotHeaderDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadInspectionPlantDataPlatformPlantGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadInspectionPlantDataPlatformPlantGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		if !queries.IsNil(object.InspectionPlant) {
			args = append(args, object.InspectionPlant)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.InspectionPlant) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.InspectionPlant) {
				args = append(args, obj.InspectionPlant)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_general_data`),
		qm.WhereIn(`data_platform_plant_general_data.Plant in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPlantGeneralDatum")
	}

	var resultSlice []*DataPlatformPlantGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPlantGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_plant_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.InspectionPlantDataPlatformPlantGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.InspectionPlant, foreign.Plant) {
				local.R.InspectionPlantDataPlatformPlantGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadInspectionPlanDataPlatformInspectionPlanHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadInspectionPlanDataPlatformInspectionPlanHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		if !queries.IsNil(object.InspectionPlan) {
			args = append(args, object.InspectionPlan)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.InspectionPlan) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.InspectionPlan) {
				args = append(args, obj.InspectionPlan)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_inspection_plan_header_data`),
		qm.WhereIn(`data_platform_inspection_plan_header_data.InspectionPlan in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformInspectionPlanHeaderDatum")
	}

	var resultSlice []*DataPlatformInspectionPlanHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformInspectionPlanHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_inspection_plan_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_inspection_plan_header_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.InspectionPlanDataPlatformInspectionPlanHeaderDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.InspectionPlan, foreign.InspectionPlan) {
				local.R.InspectionPlanDataPlatformInspectionPlanHeaderDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadInternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadInternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		if !queries.IsNil(object.InternalCapacityQuantityUnit) {
			args = append(args, object.InternalCapacityQuantityUnit)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.InternalCapacityQuantityUnit) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.InternalCapacityQuantityUnit) {
				args = append(args, obj.InternalCapacityQuantityUnit)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.InternalCapacityQuantityUnit, foreign.QuantityUnit) {
				local.R.InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		if !queries.IsNil(object.ItemWeightUnit) {
			args = append(args, object.ItemWeightUnit)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ItemWeightUnit) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ItemWeightUnit) {
				args = append(args, obj.ItemWeightUnit)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ItemWeightUnit, foreign.QuantityUnit) {
				local.R.ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadOrderIDDataPlatformOrdersItemDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadOrderIDDataPlatformOrdersItemDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		if !queries.IsNil(object.OrderID) {
			args = append(args, object.OrderID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OrderID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OrderID) {
				args = append(args, obj.OrderID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_data`),
		qm.WhereIn(`data_platform_orders_item_data.OrderID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformOrdersItemDatum")
	}

	var resultSlice []*DataPlatformOrdersItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformOrdersItemDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_orders_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrderIDDataPlatformOrdersItemDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OrderID, foreign.OrderID) {
				local.R.OrderIDDataPlatformOrdersItemDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		if !queries.IsNil(object.PaymentMethod) {
			args = append(args, object.PaymentMethod)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PaymentMethod) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PaymentMethod) {
				args = append(args, obj.PaymentMethod)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_payment_method_payment_method_data`),
		qm.WhereIn(`data_platform_payment_method_payment_method_data.PaymentMethod in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPaymentMethodPaymentMethodDatum")
	}

	var resultSlice []*DataPlatformPaymentMethodPaymentMethodDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPaymentMethodPaymentMethodDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_payment_method_payment_method_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_payment_method_payment_method_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PaymentMethod, foreign.PaymentMethod) {
				local.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadPaymentTerm allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadPaymentTerm(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		if !queries.IsNil(object.PaymentTerms) {
			args = append(args, object.PaymentTerms)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PaymentTerms) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PaymentTerms) {
				args = append(args, obj.PaymentTerms)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_payment_terms_payment_terms_data`),
		qm.WhereIn(`data_platform_payment_terms_payment_terms_data.PaymentTerms in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPaymentTermsPaymentTermsDatum")
	}

	var resultSlice []*DataPlatformPaymentTermsPaymentTermsDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPaymentTermsPaymentTermsDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_payment_terms_payment_terms_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_payment_terms_payment_terms_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PaymentTerm = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PaymentTerms, foreign.PaymentTerms) {
				local.R.PaymentTerm = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductGroupDataPlatformProductGroupProductGroupDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadProductGroupDataPlatformProductGroupProductGroupDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		if !queries.IsNil(object.ProductGroup) {
			args = append(args, object.ProductGroup)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductGroup) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProductGroup) {
				args = append(args, obj.ProductGroup)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_group_product_group_data`),
		qm.WhereIn(`data_platform_product_group_product_group_data.ProductGroup in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformProductGroupProductGroupDatum")
	}

	var resultSlice []*DataPlatformProductGroupProductGroupDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformProductGroupProductGroupDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_product_group_product_group_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_group_product_group_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductGroupDataPlatformProductGroupProductGroupDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProductGroup, foreign.ProductGroup) {
				local.R.ProductGroupDataPlatformProductGroupProductGroupDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadOperationIDDataPlatformProductionOrderItemOperationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadOperationIDDataPlatformProductionOrderItemOperationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		if !queries.IsNil(object.OperationID) {
			args = append(args, object.OperationID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OperationID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OperationID) {
				args = append(args, obj.OperationID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_item_operation_data`),
		qm.WhereIn(`data_platform_production_order_item_operation_data.OperationID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformProductionOrderItemOperationDatum")
	}

	var resultSlice []*DataPlatformProductionOrderItemOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformProductionOrderItemOperationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_production_order_item_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_item_operation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OperationIDDataPlatformProductionOrderItemOperationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OperationID, foreign.OperationID) {
				local.R.OperationIDDataPlatformProductionOrderItemOperationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductionOrderDataPlatformProductionOrderItemDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadProductionOrderDataPlatformProductionOrderItemDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		if !queries.IsNil(object.ProductionOrder) {
			args = append(args, object.ProductionOrder)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductionOrder) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProductionOrder) {
				args = append(args, obj.ProductionOrder)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_item_data`),
		qm.WhereIn(`data_platform_production_order_item_data.ProductionOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformProductionOrderItemDatum")
	}

	var resultSlice []*DataPlatformProductionOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformProductionOrderItemDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_production_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_item_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductionOrderDataPlatformProductionOrderItemDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProductionOrder, foreign.ProductionOrder) {
				local.R.ProductionOrderDataPlatformProductionOrderItemDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductDataPlatformBatchMasterRecordBatchDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadProductDataPlatformBatchMasterRecordBatchDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		args = append(args, object.Product)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if a == obj.Product {
					continue Outer
				}
			}

			args = append(args, obj.Product)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_batch_master_record_batch_data`),
		qm.WhereIn(`data_platform_batch_master_record_batch_data.Product in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBatchMasterRecordBatchDatum")
	}

	var resultSlice []*DataPlatformBatchMasterRecordBatchDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBatchMasterRecordBatchDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_batch_master_record_batch_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_batch_master_record_batch_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductDataPlatformBatchMasterRecordBatchDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Product == foreign.Product {
				local.R.ProductDataPlatformBatchMasterRecordBatchDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductionPlantDataPlatformPlantStorageLocationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadProductionPlantDataPlatformPlantStorageLocationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		if !queries.IsNil(object.ProductionPlant) {
			args = append(args, object.ProductionPlant)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductionPlant) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProductionPlant) {
				args = append(args, obj.ProductionPlant)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_storage_location_data`),
		qm.WhereIn(`data_platform_plant_storage_location_data.Plant in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPlantStorageLocationDatum")
	}

	var resultSlice []*DataPlatformPlantStorageLocationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPlantStorageLocationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_plant_storage_location_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_storage_location_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductionPlantDataPlatformPlantStorageLocationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProductionPlant, foreign.Plant) {
				local.R.ProductionPlantDataPlatformPlantStorageLocationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProjectDataPlatformProjectProjectDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadProjectDataPlatformProjectProjectDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		if !queries.IsNil(object.Project) {
			args = append(args, object.Project)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Project) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Project) {
				args = append(args, obj.Project)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_project_project_data`),
		qm.WhereIn(`data_platform_project_project_data.Project in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformProjectProjectDatum")
	}

	var resultSlice []*DataPlatformProjectProjectDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformProjectProjectDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_project_project_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_project_project_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProjectDataPlatformProjectProjectDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Project, foreign.Project) {
				local.R.ProjectDataPlatformProjectProjectDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBillFromPartyDataPlatformSCRBillingRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadBillFromPartyDataPlatformSCRBillingRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		if !queries.IsNil(object.BillFromParty) {
			args = append(args, object.BillFromParty)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BillFromParty) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BillFromParty) {
				args = append(args, obj.BillFromParty)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_billing_relation_data`),
		qm.WhereIn(`data_platform_scr_billing_relation_data.BillFromParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRBillingRelationDatum")
	}

	var resultSlice []*DataPlatformSCRBillingRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRBillingRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_billing_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_billing_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillFromPartyDataPlatformSCRBillingRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BillFromParty, foreign.BillFromParty) {
				local.R.BillFromPartyDataPlatformSCRBillingRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRDeliveryRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadBuyerDataPlatformSCRDeliveryRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_delivery_relation_data`),
		qm.WhereIn(`data_platform_scr_delivery_relation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRDeliveryRelationDatum")
	}

	var resultSlice []*DataPlatformSCRDeliveryRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRDeliveryRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_delivery_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_delivery_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRDeliveryRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRDeliveryRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRDeliveryPlantRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadBuyerDataPlatformSCRDeliveryPlantRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_delivery_plant_relation_data`),
		qm.WhereIn(`data_platform_scr_delivery_plant_relation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRDeliveryPlantRelationDatum")
	}

	var resultSlice []*DataPlatformSCRDeliveryPlantRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRDeliveryPlantRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_delivery_plant_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_delivery_plant_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRDeliveryPlantRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRDeliveryPlantRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBillFromPartyDataPlatformSCRPaymentRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadBillFromPartyDataPlatformSCRPaymentRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		if !queries.IsNil(object.BillFromParty) {
			args = append(args, object.BillFromParty)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BillFromParty) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BillFromParty) {
				args = append(args, obj.BillFromParty)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_payment_relation_data`),
		qm.WhereIn(`data_platform_scr_payment_relation_data.BillFromParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRPaymentRelationDatum")
	}

	var resultSlice []*DataPlatformSCRPaymentRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRPaymentRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_payment_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_payment_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillFromPartyDataPlatformSCRPaymentRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BillFromParty, foreign.BillFromParty) {
				local.R.BillFromPartyDataPlatformSCRPaymentRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRProductionPlantRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadBuyerDataPlatformSCRProductionPlantRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_production_plant_relation_data`),
		qm.WhereIn(`data_platform_scr_production_plant_relation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRProductionPlantRelationDatum")
	}

	var resultSlice []*DataPlatformSCRProductionPlantRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRProductionPlantRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_production_plant_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_production_plant_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRProductionPlantRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRProductionPlantRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRStockConfPlantRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadBuyerDataPlatformSCRStockConfPlantRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_stock_conf_plant_relation_data`),
		qm.WhereIn(`data_platform_scr_stock_conf_plant_relation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRStockConfPlantRelationDatum")
	}

	var resultSlice []*DataPlatformSCRStockConfPlantRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRStockConfPlantRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_stock_conf_plant_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_stock_conf_plant_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRStockConfPlantRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRStockConfPlantRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProjectDataPlatformProjectWBSElementDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadProjectDataPlatformProjectWBSElementDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		if !queries.IsNil(object.Project) {
			args = append(args, object.Project)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Project) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Project) {
				args = append(args, obj.Project)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_project_wbs_element_data`),
		qm.WhereIn(`data_platform_project_wbs_element_data.Project in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformProjectWBSElementDatum")
	}

	var resultSlice []*DataPlatformProjectWBSElementDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformProjectWBSElementDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_project_wbs_element_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_project_wbs_element_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProjectDataPlatformProjectWBSElementDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Project, foreign.Project) {
				local.R.ProjectDataPlatformProjectWBSElementDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadDeliveryDocumentDataPlatformDeliveryDocumentHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadDeliveryDocumentDataPlatformDeliveryDocumentHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		args = append(args, object.DeliveryDocument)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if a == obj.DeliveryDocument {
					continue Outer
				}
			}

			args = append(args, obj.DeliveryDocument)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_header_data`),
		qm.WhereIn(`data_platform_delivery_document_header_data.DeliveryDocument in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformDeliveryDocumentHeaderDatum")
	}

	var resultSlice []*DataPlatformDeliveryDocumentHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformDeliveryDocumentHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_delivery_document_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_header_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DeliveryDocumentDataPlatformDeliveryDocumentHeaderDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DeliveryDocument == foreign.DeliveryDocument {
				local.R.DeliveryDocumentDataPlatformDeliveryDocumentHeaderDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadDeliveryDocumentDataPlatformDeliveryDocumentItemDocData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadDeliveryDocumentDataPlatformDeliveryDocumentItemDocData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		args = append(args, object.DeliveryDocument)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if a == obj.DeliveryDocument {
					continue Outer
				}
			}

			args = append(args, obj.DeliveryDocument)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_item_doc_data`),
		qm.WhereIn(`data_platform_delivery_document_item_doc_data.DeliveryDocument in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_item_doc_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentItemDocDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_item_doc_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_item_doc_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_item_doc_data")
	}

	if singular {
		object.R.DeliveryDocumentDataPlatformDeliveryDocumentItemDocData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.DeliveryDocument == foreign.DeliveryDocument {
				local.R.DeliveryDocumentDataPlatformDeliveryDocumentItemDocData = append(local.R.DeliveryDocumentDataPlatformDeliveryDocumentItemDocData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDeliveryDocumentDataPlatformDeliveryDocumentItemFreightAgreementData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadDeliveryDocumentDataPlatformDeliveryDocumentItemFreightAgreementData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		args = append(args, object.DeliveryDocument)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if a == obj.DeliveryDocument {
					continue Outer
				}
			}

			args = append(args, obj.DeliveryDocument)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_item_freight_agreement_data`),
		qm.WhereIn(`data_platform_delivery_document_item_freight_agreement_data.DeliveryDocument in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_item_freight_agreement_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentItemFreightAgreementDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_item_freight_agreement_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_item_freight_agreement_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_item_freight_agreement_data")
	}

	if singular {
		object.R.DeliveryDocumentDataPlatformDeliveryDocumentItemFreightAgreementData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.DeliveryDocument == foreign.DeliveryDocument {
				local.R.DeliveryDocumentDataPlatformDeliveryDocumentItemFreightAgreementData = append(local.R.DeliveryDocumentDataPlatformDeliveryDocumentItemFreightAgreementData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDeliveryDocumentDataPlatformInvoiceDocumentItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformDeliveryDocumentItemDatumL) LoadDeliveryDocumentDataPlatformInvoiceDocumentItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDeliveryDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDeliveryDocumentItemDatum
	var object *DataPlatformDeliveryDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDeliveryDocumentItemDatum.(*DataPlatformDeliveryDocumentItemDatum)
		if !ok {
			object = new(DataPlatformDeliveryDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDeliveryDocumentItemDatum.(*[]*DataPlatformDeliveryDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDeliveryDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDeliveryDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDeliveryDocumentItemDatumR{}
		}
		args = append(args, object.DeliveryDocument)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDeliveryDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DeliveryDocument) {
					continue Outer
				}
			}

			args = append(args, obj.DeliveryDocument)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_invoice_document_item_data`),
		qm.WhereIn(`data_platform_invoice_document_item_data.DeliveryDocument in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_invoice_document_item_data")
	}

	var resultSlice []*DataPlatformInvoiceDocumentItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_invoice_document_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_invoice_document_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_invoice_document_item_data")
	}

	if singular {
		object.R.DeliveryDocumentDataPlatformInvoiceDocumentItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.DeliveryDocument, foreign.DeliveryDocument) {
				local.R.DeliveryDocumentDataPlatformInvoiceDocumentItemData = append(local.R.DeliveryDocumentDataPlatformInvoiceDocumentItemData, foreign)
				break
			}
		}
	}

	return nil
}

// SetBaseUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.BaseUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BaseUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BaseUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			BaseUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.BaseUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetBillOfMaterialDataPlatformBillOfMaterialItemDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.BillOfMaterialDataPlatformBillOfMaterialItemDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetBillOfMaterialDataPlatformBillOfMaterialItemDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBillOfMaterialItemDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BillOfMaterial"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BillOfMaterial, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BillOfMaterial, related.BillOfMaterial)
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			BillOfMaterialDataPlatformBillOfMaterialItemDatum: related,
		}
	} else {
		o.R.BillOfMaterialDataPlatformBillOfMaterialItemDatum = related
	}

	return nil
}

// RemoveBillOfMaterialDataPlatformBillOfMaterialItemDatum relationship.
// Sets o.R.BillOfMaterialDataPlatformBillOfMaterialItemDatum to nil.
func (o *DataPlatformDeliveryDocumentItemDatum) RemoveBillOfMaterialDataPlatformBillOfMaterialItemDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformBillOfMaterialItemDatum) error {
	var err error

	queries.SetScanner(&o.BillOfMaterial, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("BillOfMaterial")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.BillOfMaterialDataPlatformBillOfMaterialItemDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetBillOfMaterialDataPlatformBillOfMaterialHeaderDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetBillOfMaterialDataPlatformBillOfMaterialHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBillOfMaterialHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BillOfMaterial"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BillOfMaterial, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BillOfMaterial, related.BillOfMaterial)
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			BillOfMaterialDataPlatformBillOfMaterialHeaderDatum: related,
		}
	} else {
		o.R.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum = related
	}

	return nil
}

// RemoveBillOfMaterialDataPlatformBillOfMaterialHeaderDatum relationship.
// Sets o.R.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum to nil.
func (o *DataPlatformDeliveryDocumentItemDatum) RemoveBillOfMaterialDataPlatformBillOfMaterialHeaderDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformBillOfMaterialHeaderDatum) error {
	var err error

	queries.SetScanner(&o.BillOfMaterial, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("BillOfMaterial")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetContractDataPlatformContractItemDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.ContractDataPlatformContractItemDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetContractDataPlatformContractItemDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformContractItemDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Contract"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Contract, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Contract, related.Contract)
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			ContractDataPlatformContractItemDatum: related,
		}
	} else {
		o.R.ContractDataPlatformContractItemDatum = related
	}

	return nil
}

// RemoveContractDataPlatformContractItemDatum relationship.
// Sets o.R.ContractDataPlatformContractItemDatum to nil.
func (o *DataPlatformDeliveryDocumentItemDatum) RemoveContractDataPlatformContractItemDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformContractItemDatum) error {
	var err error

	queries.SetScanner(&o.Contract, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("Contract")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ContractDataPlatformContractItemDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetContractDataPlatformContractHeaderDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.ContractDataPlatformContractHeaderDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetContractDataPlatformContractHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformContractHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Contract"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Contract, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Contract, related.Contract)
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			ContractDataPlatformContractHeaderDatum: related,
		}
	} else {
		o.R.ContractDataPlatformContractHeaderDatum = related
	}

	return nil
}

// RemoveContractDataPlatformContractHeaderDatum relationship.
// Sets o.R.ContractDataPlatformContractHeaderDatum to nil.
func (o *DataPlatformDeliveryDocumentItemDatum) RemoveContractDataPlatformContractHeaderDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformContractHeaderDatum) error {
	var err error

	queries.SetScanner(&o.Contract, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("Contract")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ContractDataPlatformContractHeaderDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetCountryOfOriginLanguageDataPlatformLanguageLanguageDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.CountryOfOriginLanguageDataPlatformLanguageLanguageDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetCountryOfOriginLanguageDataPlatformLanguageLanguageDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformLanguageLanguageDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"CountryOfOriginLanguage"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Language, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CountryOfOriginLanguage, related.Language)
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			CountryOfOriginLanguageDataPlatformLanguageLanguageDatum: related,
		}
	} else {
		o.R.CountryOfOriginLanguageDataPlatformLanguageLanguageDatum = related
	}

	return nil
}

// RemoveCountryOfOriginLanguageDataPlatformLanguageLanguageDatum relationship.
// Sets o.R.CountryOfOriginLanguageDataPlatformLanguageLanguageDatum to nil.
func (o *DataPlatformDeliveryDocumentItemDatum) RemoveCountryOfOriginLanguageDataPlatformLanguageLanguageDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformLanguageLanguageDatum) error {
	var err error

	queries.SetScanner(&o.CountryOfOriginLanguage, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("CountryOfOriginLanguage")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CountryOfOriginLanguageDataPlatformLanguageLanguageDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetCountryOfOriginDataPlatformCountryCountryDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.CountryOfOriginDataPlatformCountryCountryDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetCountryOfOriginDataPlatformCountryCountryDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformCountryCountryDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"CountryOfOrigin"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Country, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CountryOfOrigin, related.Country)
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			CountryOfOriginDataPlatformCountryCountryDatum: related,
		}
	} else {
		o.R.CountryOfOriginDataPlatformCountryCountryDatum = related
	}

	return nil
}

// RemoveCountryOfOriginDataPlatformCountryCountryDatum relationship.
// Sets o.R.CountryOfOriginDataPlatformCountryCountryDatum to nil.
func (o *DataPlatformDeliveryDocumentItemDatum) RemoveCountryOfOriginDataPlatformCountryCountryDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformCountryCountryDatum) error {
	var err error

	queries.SetScanner(&o.CountryOfOrigin, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("CountryOfOrigin")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CountryOfOriginDataPlatformCountryCountryDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetDeliverFromPartyDataPlatformBatchMasterRecordBatchDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.DeliverFromPartyDataPlatformBatchMasterRecordBatchDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetDeliverFromPartyDataPlatformBatchMasterRecordBatchDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBatchMasterRecordBatchDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"DeliverFromParty"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DeliverFromParty = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			DeliverFromPartyDataPlatformBatchMasterRecordBatchDatum: related,
		}
	} else {
		o.R.DeliverFromPartyDataPlatformBatchMasterRecordBatchDatum = related
	}

	return nil
}

// SetDeliverFromPartyDataPlatformPlantStorageLocationDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.DeliverFromPartyDataPlatformPlantStorageLocationDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetDeliverFromPartyDataPlatformPlantStorageLocationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPlantStorageLocationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"DeliverFromParty"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DeliverFromParty = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			DeliverFromPartyDataPlatformPlantStorageLocationDatum: related,
		}
	} else {
		o.R.DeliverFromPartyDataPlatformPlantStorageLocationDatum = related
	}

	return nil
}

// SetDeliverToPartyDataPlatformBatchMasterRecordBatchDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.DeliverToPartyDataPlatformBatchMasterRecordBatchDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetDeliverToPartyDataPlatformBatchMasterRecordBatchDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBatchMasterRecordBatchDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"DeliverToParty"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DeliverToParty = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			DeliverToPartyDataPlatformBatchMasterRecordBatchDatum: related,
		}
	} else {
		o.R.DeliverToPartyDataPlatformBatchMasterRecordBatchDatum = related
	}

	return nil
}

// SetDeliverToPartyDataPlatformPlantStorageLocationDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.DeliverToPartyDataPlatformPlantStorageLocationDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetDeliverToPartyDataPlatformPlantStorageLocationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPlantStorageLocationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"DeliverToParty"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DeliverToParty = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			DeliverToPartyDataPlatformPlantStorageLocationDatum: related,
		}
	} else {
		o.R.DeliverToPartyDataPlatformPlantStorageLocationDatum = related
	}

	return nil
}

// SetDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"DeliveryUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DeliveryUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetEquipmentDataPlatformEquipmentMasterGeneralDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.EquipmentDataPlatformEquipmentMasterGeneralDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetEquipmentDataPlatformEquipmentMasterGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformEquipmentMasterGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Equipment"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Equipment, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Equipment, related.Equipment)
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			EquipmentDataPlatformEquipmentMasterGeneralDatum: related,
		}
	} else {
		o.R.EquipmentDataPlatformEquipmentMasterGeneralDatum = related
	}

	return nil
}

// RemoveEquipmentDataPlatformEquipmentMasterGeneralDatum relationship.
// Sets o.R.EquipmentDataPlatformEquipmentMasterGeneralDatum to nil.
func (o *DataPlatformDeliveryDocumentItemDatum) RemoveEquipmentDataPlatformEquipmentMasterGeneralDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformEquipmentMasterGeneralDatum) error {
	var err error

	queries.SetScanner(&o.Equipment, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("Equipment")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.EquipmentDataPlatformEquipmentMasterGeneralDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetInspectionLotDataPlatformInspectionLotHeaderDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.InspectionLotDataPlatformInspectionLotHeaderDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetInspectionLotDataPlatformInspectionLotHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformInspectionLotHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"InspectionLot"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.InspectionLot, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.InspectionLot, related.InspectionLot)
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			InspectionLotDataPlatformInspectionLotHeaderDatum: related,
		}
	} else {
		o.R.InspectionLotDataPlatformInspectionLotHeaderDatum = related
	}

	return nil
}

// RemoveInspectionLotDataPlatformInspectionLotHeaderDatum relationship.
// Sets o.R.InspectionLotDataPlatformInspectionLotHeaderDatum to nil.
func (o *DataPlatformDeliveryDocumentItemDatum) RemoveInspectionLotDataPlatformInspectionLotHeaderDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformInspectionLotHeaderDatum) error {
	var err error

	queries.SetScanner(&o.InspectionLot, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("InspectionLot")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.InspectionLotDataPlatformInspectionLotHeaderDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetInspectionPlantDataPlatformPlantGeneralDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.InspectionPlantDataPlatformPlantGeneralDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetInspectionPlantDataPlatformPlantGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPlantGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"InspectionPlant"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Plant, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.InspectionPlant, related.Plant)
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			InspectionPlantDataPlatformPlantGeneralDatum: related,
		}
	} else {
		o.R.InspectionPlantDataPlatformPlantGeneralDatum = related
	}

	return nil
}

// RemoveInspectionPlantDataPlatformPlantGeneralDatum relationship.
// Sets o.R.InspectionPlantDataPlatformPlantGeneralDatum to nil.
func (o *DataPlatformDeliveryDocumentItemDatum) RemoveInspectionPlantDataPlatformPlantGeneralDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformPlantGeneralDatum) error {
	var err error

	queries.SetScanner(&o.InspectionPlant, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("InspectionPlant")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.InspectionPlantDataPlatformPlantGeneralDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetInspectionPlanDataPlatformInspectionPlanHeaderDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.InspectionPlanDataPlatformInspectionPlanHeaderDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetInspectionPlanDataPlatformInspectionPlanHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformInspectionPlanHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"InspectionPlan"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.InspectionPlan, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.InspectionPlan, related.InspectionPlan)
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			InspectionPlanDataPlatformInspectionPlanHeaderDatum: related,
		}
	} else {
		o.R.InspectionPlanDataPlatformInspectionPlanHeaderDatum = related
	}

	return nil
}

// RemoveInspectionPlanDataPlatformInspectionPlanHeaderDatum relationship.
// Sets o.R.InspectionPlanDataPlatformInspectionPlanHeaderDatum to nil.
func (o *DataPlatformDeliveryDocumentItemDatum) RemoveInspectionPlanDataPlatformInspectionPlanHeaderDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformInspectionPlanHeaderDatum) error {
	var err error

	queries.SetScanner(&o.InspectionPlan, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("InspectionPlan")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.InspectionPlanDataPlatformInspectionPlanHeaderDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetInternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetInternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"InternalCapacityQuantityUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.InternalCapacityQuantityUnit, related.QuantityUnit)
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// RemoveInternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum relationship.
// Sets o.R.InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum to nil.
func (o *DataPlatformDeliveryDocumentItemDatum) RemoveInternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error

	queries.SetScanner(&o.InternalCapacityQuantityUnit, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("InternalCapacityQuantityUnit")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ItemWeightUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ItemWeightUnit, related.QuantityUnit)
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// RemoveItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum relationship.
// Sets o.R.ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum to nil.
func (o *DataPlatformDeliveryDocumentItemDatum) RemoveItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error

	queries.SetScanner(&o.ItemWeightUnit, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("ItemWeightUnit")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetOrderIDDataPlatformOrdersItemDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.OrderIDDataPlatformOrdersItemDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetOrderIDDataPlatformOrdersItemDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformOrdersItemDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"OrderID"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.OrderID, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OrderID, related.OrderID)
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			OrderIDDataPlatformOrdersItemDatum: related,
		}
	} else {
		o.R.OrderIDDataPlatformOrdersItemDatum = related
	}

	return nil
}

// RemoveOrderIDDataPlatformOrdersItemDatum relationship.
// Sets o.R.OrderIDDataPlatformOrdersItemDatum to nil.
func (o *DataPlatformDeliveryDocumentItemDatum) RemoveOrderIDDataPlatformOrdersItemDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformOrdersItemDatum) error {
	var err error

	queries.SetScanner(&o.OrderID, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("OrderID")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.OrderIDDataPlatformOrdersItemDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPaymentMethodPaymentMethodDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PaymentMethod"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PaymentMethod, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PaymentMethod, related.PaymentMethod)
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum: related,
		}
	} else {
		o.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = related
	}

	return nil
}

// RemovePaymentMethodDataPlatformPaymentMethodPaymentMethodDatum relationship.
// Sets o.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum to nil.
func (o *DataPlatformDeliveryDocumentItemDatum) RemovePaymentMethodDataPlatformPaymentMethodPaymentMethodDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformPaymentMethodPaymentMethodDatum) error {
	var err error

	queries.SetScanner(&o.PaymentMethod, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("PaymentMethod")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetPaymentTerm of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.PaymentTerm to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetPaymentTerm(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPaymentTermsPaymentTermsDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PaymentTerms"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PaymentTerms, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PaymentTerms, related.PaymentTerms)
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			PaymentTerm: related,
		}
	} else {
		o.R.PaymentTerm = related
	}

	return nil
}

// RemovePaymentTerm relationship.
// Sets o.R.PaymentTerm to nil.
func (o *DataPlatformDeliveryDocumentItemDatum) RemovePaymentTerm(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformPaymentTermsPaymentTermsDatum) error {
	var err error

	queries.SetScanner(&o.PaymentTerms, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("PaymentTerms")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.PaymentTerm = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetProductGroupDataPlatformProductGroupProductGroupDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.ProductGroupDataPlatformProductGroupProductGroupDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetProductGroupDataPlatformProductGroupProductGroupDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformProductGroupProductGroupDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductGroup"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.ProductGroup, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProductGroup, related.ProductGroup)
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			ProductGroupDataPlatformProductGroupProductGroupDatum: related,
		}
	} else {
		o.R.ProductGroupDataPlatformProductGroupProductGroupDatum = related
	}

	return nil
}

// RemoveProductGroupDataPlatformProductGroupProductGroupDatum relationship.
// Sets o.R.ProductGroupDataPlatformProductGroupProductGroupDatum to nil.
func (o *DataPlatformDeliveryDocumentItemDatum) RemoveProductGroupDataPlatformProductGroupProductGroupDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformProductGroupProductGroupDatum) error {
	var err error

	queries.SetScanner(&o.ProductGroup, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("ProductGroup")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductGroupDataPlatformProductGroupProductGroupDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetOperationIDDataPlatformProductionOrderItemOperationDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.OperationIDDataPlatformProductionOrderItemOperationDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetOperationIDDataPlatformProductionOrderItemOperationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformProductionOrderItemOperationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"OperationID"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.OperationID, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OperationID, related.OperationID)
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			OperationIDDataPlatformProductionOrderItemOperationDatum: related,
		}
	} else {
		o.R.OperationIDDataPlatformProductionOrderItemOperationDatum = related
	}

	return nil
}

// RemoveOperationIDDataPlatformProductionOrderItemOperationDatum relationship.
// Sets o.R.OperationIDDataPlatformProductionOrderItemOperationDatum to nil.
func (o *DataPlatformDeliveryDocumentItemDatum) RemoveOperationIDDataPlatformProductionOrderItemOperationDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformProductionOrderItemOperationDatum) error {
	var err error

	queries.SetScanner(&o.OperationID, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("OperationID")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.OperationIDDataPlatformProductionOrderItemOperationDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetProductionOrderDataPlatformProductionOrderItemDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.ProductionOrderDataPlatformProductionOrderItemDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetProductionOrderDataPlatformProductionOrderItemDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformProductionOrderItemDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductionOrder"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.ProductionOrder, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProductionOrder, related.ProductionOrder)
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			ProductionOrderDataPlatformProductionOrderItemDatum: related,
		}
	} else {
		o.R.ProductionOrderDataPlatformProductionOrderItemDatum = related
	}

	return nil
}

// RemoveProductionOrderDataPlatformProductionOrderItemDatum relationship.
// Sets o.R.ProductionOrderDataPlatformProductionOrderItemDatum to nil.
func (o *DataPlatformDeliveryDocumentItemDatum) RemoveProductionOrderDataPlatformProductionOrderItemDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformProductionOrderItemDatum) error {
	var err error

	queries.SetScanner(&o.ProductionOrder, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("ProductionOrder")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductionOrderDataPlatformProductionOrderItemDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetProductDataPlatformBatchMasterRecordBatchDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.ProductDataPlatformBatchMasterRecordBatchDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetProductDataPlatformBatchMasterRecordBatchDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBatchMasterRecordBatchDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Product"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Product, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Product = related.Product
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			ProductDataPlatformBatchMasterRecordBatchDatum: related,
		}
	} else {
		o.R.ProductDataPlatformBatchMasterRecordBatchDatum = related
	}

	return nil
}

// SetProductionPlantDataPlatformPlantStorageLocationDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.ProductionPlantDataPlatformPlantStorageLocationDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetProductionPlantDataPlatformPlantStorageLocationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPlantStorageLocationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductionPlant"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Plant, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProductionPlant, related.Plant)
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			ProductionPlantDataPlatformPlantStorageLocationDatum: related,
		}
	} else {
		o.R.ProductionPlantDataPlatformPlantStorageLocationDatum = related
	}

	return nil
}

// RemoveProductionPlantDataPlatformPlantStorageLocationDatum relationship.
// Sets o.R.ProductionPlantDataPlatformPlantStorageLocationDatum to nil.
func (o *DataPlatformDeliveryDocumentItemDatum) RemoveProductionPlantDataPlatformPlantStorageLocationDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformPlantStorageLocationDatum) error {
	var err error

	queries.SetScanner(&o.ProductionPlant, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("ProductionPlant")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductionPlantDataPlatformPlantStorageLocationDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetProjectDataPlatformProjectProjectDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.ProjectDataPlatformProjectProjectDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetProjectDataPlatformProjectProjectDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformProjectProjectDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Project"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Project, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Project, related.Project)
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			ProjectDataPlatformProjectProjectDatum: related,
		}
	} else {
		o.R.ProjectDataPlatformProjectProjectDatum = related
	}

	return nil
}

// RemoveProjectDataPlatformProjectProjectDatum relationship.
// Sets o.R.ProjectDataPlatformProjectProjectDatum to nil.
func (o *DataPlatformDeliveryDocumentItemDatum) RemoveProjectDataPlatformProjectProjectDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformProjectProjectDatum) error {
	var err error

	queries.SetScanner(&o.Project, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("Project")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProjectDataPlatformProjectProjectDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetBillFromPartyDataPlatformSCRBillingRelationDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.BillFromPartyDataPlatformSCRBillingRelationDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetBillFromPartyDataPlatformSCRBillingRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRBillingRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BillFromParty"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BillFromParty, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BillFromParty, related.BillFromParty)
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			BillFromPartyDataPlatformSCRBillingRelationDatum: related,
		}
	} else {
		o.R.BillFromPartyDataPlatformSCRBillingRelationDatum = related
	}

	return nil
}

// RemoveBillFromPartyDataPlatformSCRBillingRelationDatum relationship.
// Sets o.R.BillFromPartyDataPlatformSCRBillingRelationDatum to nil.
func (o *DataPlatformDeliveryDocumentItemDatum) RemoveBillFromPartyDataPlatformSCRBillingRelationDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformSCRBillingRelationDatum) error {
	var err error

	queries.SetScanner(&o.BillFromParty, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("BillFromParty")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.BillFromPartyDataPlatformSCRBillingRelationDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetBuyerDataPlatformSCRDeliveryRelationDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRDeliveryRelationDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetBuyerDataPlatformSCRDeliveryRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRDeliveryRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			BuyerDataPlatformSCRDeliveryRelationDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRDeliveryRelationDatum = related
	}

	return nil
}

// SetBuyerDataPlatformSCRDeliveryPlantRelationDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRDeliveryPlantRelationDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetBuyerDataPlatformSCRDeliveryPlantRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRDeliveryPlantRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			BuyerDataPlatformSCRDeliveryPlantRelationDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRDeliveryPlantRelationDatum = related
	}

	return nil
}

// SetBillFromPartyDataPlatformSCRPaymentRelationDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.BillFromPartyDataPlatformSCRPaymentRelationDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetBillFromPartyDataPlatformSCRPaymentRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRPaymentRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BillFromParty"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BillFromParty, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BillFromParty, related.BillFromParty)
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			BillFromPartyDataPlatformSCRPaymentRelationDatum: related,
		}
	} else {
		o.R.BillFromPartyDataPlatformSCRPaymentRelationDatum = related
	}

	return nil
}

// RemoveBillFromPartyDataPlatformSCRPaymentRelationDatum relationship.
// Sets o.R.BillFromPartyDataPlatformSCRPaymentRelationDatum to nil.
func (o *DataPlatformDeliveryDocumentItemDatum) RemoveBillFromPartyDataPlatformSCRPaymentRelationDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformSCRPaymentRelationDatum) error {
	var err error

	queries.SetScanner(&o.BillFromParty, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("BillFromParty")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.BillFromPartyDataPlatformSCRPaymentRelationDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetBuyerDataPlatformSCRProductionPlantRelationDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRProductionPlantRelationDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetBuyerDataPlatformSCRProductionPlantRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRProductionPlantRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			BuyerDataPlatformSCRProductionPlantRelationDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRProductionPlantRelationDatum = related
	}

	return nil
}

// SetBuyerDataPlatformSCRStockConfPlantRelationDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRStockConfPlantRelationDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetBuyerDataPlatformSCRStockConfPlantRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRStockConfPlantRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			BuyerDataPlatformSCRStockConfPlantRelationDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRStockConfPlantRelationDatum = related
	}

	return nil
}

// SetProjectDataPlatformProjectWBSElementDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.ProjectDataPlatformProjectWBSElementDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetProjectDataPlatformProjectWBSElementDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformProjectWBSElementDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Project"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Project, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Project, related.Project)
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			ProjectDataPlatformProjectWBSElementDatum: related,
		}
	} else {
		o.R.ProjectDataPlatformProjectWBSElementDatum = related
	}

	return nil
}

// RemoveProjectDataPlatformProjectWBSElementDatum relationship.
// Sets o.R.ProjectDataPlatformProjectWBSElementDatum to nil.
func (o *DataPlatformDeliveryDocumentItemDatum) RemoveProjectDataPlatformProjectWBSElementDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformProjectWBSElementDatum) error {
	var err error

	queries.SetScanner(&o.Project, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("Project")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProjectDataPlatformProjectWBSElementDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetDeliveryDocumentDataPlatformDeliveryDocumentHeaderDatum of the dataPlatformDeliveryDocumentItemDatum to the related item.
// Sets o.R.DeliveryDocumentDataPlatformDeliveryDocumentHeaderDatum to related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetDeliveryDocumentDataPlatformDeliveryDocumentHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformDeliveryDocumentHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"DeliveryDocument"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.DeliveryDocument, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DeliveryDocument = related.DeliveryDocument
	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			DeliveryDocumentDataPlatformDeliveryDocumentHeaderDatum: related,
		}
	} else {
		o.R.DeliveryDocumentDataPlatformDeliveryDocumentHeaderDatum = related
	}

	return nil
}

// AddDeliveryDocumentDataPlatformDeliveryDocumentItemDocData adds the given related objects to the existing relationships
// of the data_platform_delivery_document_item_datum, optionally inserting them as new records.
// Appends related to o.R.DeliveryDocumentDataPlatformDeliveryDocumentItemDocData.
func (o *DataPlatformDeliveryDocumentItemDatum) AddDeliveryDocumentDataPlatformDeliveryDocumentItemDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentItemDocDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DeliveryDocument = o.DeliveryDocument
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_item_doc_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DeliveryDocument"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDocDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.DeliveryDocument, rel.DeliveryDocument, rel.DeliveryDocumentItem, rel.DocType, rel.DocVersionID, rel.DocID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DeliveryDocument = o.DeliveryDocument
		}
	}

	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			DeliveryDocumentDataPlatformDeliveryDocumentItemDocData: related,
		}
	} else {
		o.R.DeliveryDocumentDataPlatformDeliveryDocumentItemDocData = append(o.R.DeliveryDocumentDataPlatformDeliveryDocumentItemDocData, related...)
	}

	return nil
}

// AddDeliveryDocumentDataPlatformDeliveryDocumentItemFreightAgreementData adds the given related objects to the existing relationships
// of the data_platform_delivery_document_item_datum, optionally inserting them as new records.
// Appends related to o.R.DeliveryDocumentDataPlatformDeliveryDocumentItemFreightAgreementData.
func (o *DataPlatformDeliveryDocumentItemDatum) AddDeliveryDocumentDataPlatformDeliveryDocumentItemFreightAgreementData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentItemFreightAgreementDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DeliveryDocument = o.DeliveryDocument
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_item_freight_agreement_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DeliveryDocument"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemFreightAgreementDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.DeliveryDocument, rel.DeliveryDocument, rel.DeliveryDocumentItem, rel.DeliveryDocumentItemFreightAgreement}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DeliveryDocument = o.DeliveryDocument
		}
	}

	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			DeliveryDocumentDataPlatformDeliveryDocumentItemFreightAgreementData: related,
		}
	} else {
		o.R.DeliveryDocumentDataPlatformDeliveryDocumentItemFreightAgreementData = append(o.R.DeliveryDocumentDataPlatformDeliveryDocumentItemFreightAgreementData, related...)
	}

	return nil
}

// AddDeliveryDocumentDataPlatformInvoiceDocumentItemData adds the given related objects to the existing relationships
// of the data_platform_delivery_document_item_datum, optionally inserting them as new records.
// Appends related to o.R.DeliveryDocumentDataPlatformInvoiceDocumentItemData.
func (o *DataPlatformDeliveryDocumentItemDatum) AddDeliveryDocumentDataPlatformInvoiceDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInvoiceDocumentItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DeliveryDocument, o.DeliveryDocument)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_invoice_document_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DeliveryDocument"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.DeliveryDocument, rel.InvoiceDocument, rel.InvoiceDocumentItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DeliveryDocument, o.DeliveryDocument)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformDeliveryDocumentItemDatumR{
			DeliveryDocumentDataPlatformInvoiceDocumentItemData: related,
		}
	} else {
		o.R.DeliveryDocumentDataPlatformInvoiceDocumentItemData = append(o.R.DeliveryDocumentDataPlatformInvoiceDocumentItemData, related...)
	}

	return nil
}

// SetDeliveryDocumentDataPlatformInvoiceDocumentItemData removes all previously related items of the
// data_platform_delivery_document_item_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DeliveryDocumentDataPlatformDeliveryDocumentItemDatum's DeliveryDocumentDataPlatformInvoiceDocumentItemData accordingly.
// Replaces o.R.DeliveryDocumentDataPlatformInvoiceDocumentItemData with related.
func (o *DataPlatformDeliveryDocumentItemDatum) SetDeliveryDocumentDataPlatformInvoiceDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInvoiceDocumentItemDatum) error {
	query := "update `data_platform_invoice_document_item_data` set `DeliveryDocument` = null where `DeliveryDocument` = ?"
	values := []interface{}{o.DeliveryDocument}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.DeliveryDocumentDataPlatformInvoiceDocumentItemData = nil
	}

	return o.AddDeliveryDocumentDataPlatformInvoiceDocumentItemData(ctx, exec, insert, related...)
}

// RemoveDeliveryDocumentDataPlatformInvoiceDocumentItemData relationships from objects passed in.
// Removes related items from R.DeliveryDocumentDataPlatformInvoiceDocumentItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformDeliveryDocumentItemDatum) RemoveDeliveryDocumentDataPlatformInvoiceDocumentItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformInvoiceDocumentItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DeliveryDocument, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("DeliveryDocument")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DeliveryDocumentDataPlatformInvoiceDocumentItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.DeliveryDocumentDataPlatformInvoiceDocumentItemData)
			if ln > 1 && i < ln-1 {
				o.R.DeliveryDocumentDataPlatformInvoiceDocumentItemData[i] = o.R.DeliveryDocumentDataPlatformInvoiceDocumentItemData[ln-1]
			}
			o.R.DeliveryDocumentDataPlatformInvoiceDocumentItemData = o.R.DeliveryDocumentDataPlatformInvoiceDocumentItemData[:ln-1]
			break
		}
	}

	return nil
}

// DataPlatformDeliveryDocumentItemData retrieves all the records using an executor.
func DataPlatformDeliveryDocumentItemData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentItemDatumQuery {
	mods = append(mods, qm.From("`data_platform_delivery_document_item_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_delivery_document_item_data`.*"})
	}

	return dataPlatformDeliveryDocumentItemDatumQuery{q}
}

// FindDataPlatformDeliveryDocumentItemDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformDeliveryDocumentItemDatum(ctx context.Context, exec boil.ContextExecutor, deliveryDocument int, deliveryDocumentItem int, selectCols ...string) (*DataPlatformDeliveryDocumentItemDatum, error) {
	dataPlatformDeliveryDocumentItemDatumObj := &DataPlatformDeliveryDocumentItemDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_delivery_document_item_data` where `DeliveryDocument`=? AND `DeliveryDocumentItem`=?", sel,
	)

	q := queries.Raw(query, deliveryDocument, deliveryDocumentItem)

	err := q.Bind(ctx, exec, dataPlatformDeliveryDocumentItemDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_delivery_document_item_data")
	}

	return dataPlatformDeliveryDocumentItemDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformDeliveryDocumentItemDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_delivery_document_item_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformDeliveryDocumentItemDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformDeliveryDocumentItemDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformDeliveryDocumentItemDatumInsertCache[key]
	dataPlatformDeliveryDocumentItemDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformDeliveryDocumentItemDatumAllColumns,
			dataPlatformDeliveryDocumentItemDatumColumnsWithDefault,
			dataPlatformDeliveryDocumentItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformDeliveryDocumentItemDatumType, dataPlatformDeliveryDocumentItemDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformDeliveryDocumentItemDatumType, dataPlatformDeliveryDocumentItemDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_delivery_document_item_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_delivery_document_item_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_delivery_document_item_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_delivery_document_item_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.DeliveryDocument,
		o.DeliveryDocumentItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_delivery_document_item_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformDeliveryDocumentItemDatumInsertCacheMut.Lock()
		dataPlatformDeliveryDocumentItemDatumInsertCache[key] = cache
		dataPlatformDeliveryDocumentItemDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformDeliveryDocumentItemDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformDeliveryDocumentItemDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformDeliveryDocumentItemDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformDeliveryDocumentItemDatumUpdateCache[key]
	dataPlatformDeliveryDocumentItemDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformDeliveryDocumentItemDatumAllColumns,
			dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_delivery_document_item_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformDeliveryDocumentItemDatumType, dataPlatformDeliveryDocumentItemDatumMapping, append(wl, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_delivery_document_item_data row")
	}

	if !cached {
		dataPlatformDeliveryDocumentItemDatumUpdateCacheMut.Lock()
		dataPlatformDeliveryDocumentItemDatumUpdateCache[key] = cache
		dataPlatformDeliveryDocumentItemDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformDeliveryDocumentItemDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_delivery_document_item_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformDeliveryDocumentItemDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformDeliveryDocumentItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformDeliveryDocumentItemDatum slice")
	}

	return nil
}

var mySQLDataPlatformDeliveryDocumentItemDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformDeliveryDocumentItemDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_delivery_document_item_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformDeliveryDocumentItemDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformDeliveryDocumentItemDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformDeliveryDocumentItemDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformDeliveryDocumentItemDatumUpsertCache[key]
	dataPlatformDeliveryDocumentItemDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformDeliveryDocumentItemDatumAllColumns,
			dataPlatformDeliveryDocumentItemDatumColumnsWithDefault,
			dataPlatformDeliveryDocumentItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformDeliveryDocumentItemDatumAllColumns,
			dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_delivery_document_item_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_delivery_document_item_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_delivery_document_item_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformDeliveryDocumentItemDatumType, dataPlatformDeliveryDocumentItemDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformDeliveryDocumentItemDatumType, dataPlatformDeliveryDocumentItemDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_delivery_document_item_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformDeliveryDocumentItemDatumType, dataPlatformDeliveryDocumentItemDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_delivery_document_item_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_delivery_document_item_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformDeliveryDocumentItemDatumUpsertCacheMut.Lock()
		dataPlatformDeliveryDocumentItemDatumUpsertCache[key] = cache
		dataPlatformDeliveryDocumentItemDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformDeliveryDocumentItemDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformDeliveryDocumentItemDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformDeliveryDocumentItemDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformDeliveryDocumentItemDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_delivery_document_item_data` WHERE `DeliveryDocument`=? AND `DeliveryDocumentItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_delivery_document_item_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformDeliveryDocumentItemDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformDeliveryDocumentItemDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_delivery_document_item_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformDeliveryDocumentItemDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformDeliveryDocumentItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_delivery_document_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformDeliveryDocumentItemDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformDeliveryDocumentItemDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformDeliveryDocumentItemDatum(ctx, exec, o.DeliveryDocument, o.DeliveryDocumentItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformDeliveryDocumentItemDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformDeliveryDocumentItemDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformDeliveryDocumentItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_delivery_document_item_data`.* FROM `data_platform_delivery_document_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformDeliveryDocumentItemDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformDeliveryDocumentItemDatumExists checks if the DataPlatformDeliveryDocumentItemDatum row exists.
func DataPlatformDeliveryDocumentItemDatumExists(ctx context.Context, exec boil.ContextExecutor, deliveryDocument int, deliveryDocumentItem int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_delivery_document_item_data` where `DeliveryDocument`=? AND `DeliveryDocumentItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, deliveryDocument, deliveryDocumentItem)
	}
	row := exec.QueryRowContext(ctx, sql, deliveryDocument, deliveryDocumentItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_delivery_document_item_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformDeliveryDocumentItemDatum row exists.
func (o *DataPlatformDeliveryDocumentItemDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformDeliveryDocumentItemDatumExists(ctx, exec, o.DeliveryDocument, o.DeliveryDocumentItem)
}
