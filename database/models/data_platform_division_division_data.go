// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformDivisionDivisionDatum is an object representing the database table.
type DataPlatformDivisionDivisionDatum struct {
	Division string `boil:"Division" json:"Division" toml:"Division" yaml:"Division"`

	R *dataPlatformDivisionDivisionDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformDivisionDivisionDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformDivisionDivisionDatumColumns = struct {
	Division string
}{
	Division: "Division",
}

var DataPlatformDivisionDivisionDatumTableColumns = struct {
	Division string
}{
	Division: "data_platform_division_division_data.Division",
}

// Generated where

var DataPlatformDivisionDivisionDatumWhere = struct {
	Division whereHelperstring
}{
	Division: whereHelperstring{field: "`data_platform_division_division_data`.`Division`"},
}

// DataPlatformDivisionDivisionDatumRels is where relationship names are stored.
var DataPlatformDivisionDivisionDatumRels = struct {
}{}

// dataPlatformDivisionDivisionDatumR is where relationships are stored.
type dataPlatformDivisionDivisionDatumR struct {
}

// NewStruct creates a new relationship struct
func (*dataPlatformDivisionDivisionDatumR) NewStruct() *dataPlatformDivisionDivisionDatumR {
	return &dataPlatformDivisionDivisionDatumR{}
}

// dataPlatformDivisionDivisionDatumL is where Load methods for each relationship are stored.
type dataPlatformDivisionDivisionDatumL struct{}

var (
	dataPlatformDivisionDivisionDatumAllColumns            = []string{"Division"}
	dataPlatformDivisionDivisionDatumColumnsWithoutDefault = []string{"Division"}
	dataPlatformDivisionDivisionDatumColumnsWithDefault    = []string{}
	dataPlatformDivisionDivisionDatumPrimaryKeyColumns     = []string{"Division"}
	dataPlatformDivisionDivisionDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformDivisionDivisionDatumSlice is an alias for a slice of pointers to DataPlatformDivisionDivisionDatum.
	// This should almost always be used instead of []DataPlatformDivisionDivisionDatum.
	DataPlatformDivisionDivisionDatumSlice []*DataPlatformDivisionDivisionDatum

	dataPlatformDivisionDivisionDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformDivisionDivisionDatumType                 = reflect.TypeOf(&DataPlatformDivisionDivisionDatum{})
	dataPlatformDivisionDivisionDatumMapping              = queries.MakeStructMapping(dataPlatformDivisionDivisionDatumType)
	dataPlatformDivisionDivisionDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformDivisionDivisionDatumType, dataPlatformDivisionDivisionDatumMapping, dataPlatformDivisionDivisionDatumPrimaryKeyColumns)
	dataPlatformDivisionDivisionDatumInsertCacheMut       sync.RWMutex
	dataPlatformDivisionDivisionDatumInsertCache          = make(map[string]insertCache)
	dataPlatformDivisionDivisionDatumUpdateCacheMut       sync.RWMutex
	dataPlatformDivisionDivisionDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformDivisionDivisionDatumUpsertCacheMut       sync.RWMutex
	dataPlatformDivisionDivisionDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformDivisionDivisionDatum record from the query.
func (q dataPlatformDivisionDivisionDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformDivisionDivisionDatum, error) {
	o := &DataPlatformDivisionDivisionDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_division_division_data")
	}

	return o, nil
}

// All returns all DataPlatformDivisionDivisionDatum records from the query.
func (q dataPlatformDivisionDivisionDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformDivisionDivisionDatumSlice, error) {
	var o []*DataPlatformDivisionDivisionDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformDivisionDivisionDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformDivisionDivisionDatum records in the query.
func (q dataPlatformDivisionDivisionDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_division_division_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformDivisionDivisionDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_division_division_data exists")
	}

	return count > 0, nil
}

// DataPlatformDivisionDivisionData retrieves all the records using an executor.
func DataPlatformDivisionDivisionData(mods ...qm.QueryMod) dataPlatformDivisionDivisionDatumQuery {
	mods = append(mods, qm.From("`data_platform_division_division_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_division_division_data`.*"})
	}

	return dataPlatformDivisionDivisionDatumQuery{q}
}

// FindDataPlatformDivisionDivisionDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformDivisionDivisionDatum(ctx context.Context, exec boil.ContextExecutor, division string, selectCols ...string) (*DataPlatformDivisionDivisionDatum, error) {
	dataPlatformDivisionDivisionDatumObj := &DataPlatformDivisionDivisionDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_division_division_data` where `Division`=?", sel,
	)

	q := queries.Raw(query, division)

	err := q.Bind(ctx, exec, dataPlatformDivisionDivisionDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_division_division_data")
	}

	return dataPlatformDivisionDivisionDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformDivisionDivisionDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_division_division_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformDivisionDivisionDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformDivisionDivisionDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformDivisionDivisionDatumInsertCache[key]
	dataPlatformDivisionDivisionDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformDivisionDivisionDatumAllColumns,
			dataPlatformDivisionDivisionDatumColumnsWithDefault,
			dataPlatformDivisionDivisionDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformDivisionDivisionDatumType, dataPlatformDivisionDivisionDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformDivisionDivisionDatumType, dataPlatformDivisionDivisionDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_division_division_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_division_division_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_division_division_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformDivisionDivisionDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_division_division_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Division,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_division_division_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformDivisionDivisionDatumInsertCacheMut.Lock()
		dataPlatformDivisionDivisionDatumInsertCache[key] = cache
		dataPlatformDivisionDivisionDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformDivisionDivisionDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformDivisionDivisionDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformDivisionDivisionDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformDivisionDivisionDatumUpdateCache[key]
	dataPlatformDivisionDivisionDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformDivisionDivisionDatumAllColumns,
			dataPlatformDivisionDivisionDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_division_division_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_division_division_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformDivisionDivisionDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformDivisionDivisionDatumType, dataPlatformDivisionDivisionDatumMapping, append(wl, dataPlatformDivisionDivisionDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_division_division_data row")
	}

	if !cached {
		dataPlatformDivisionDivisionDatumUpdateCacheMut.Lock()
		dataPlatformDivisionDivisionDatumUpdateCache[key] = cache
		dataPlatformDivisionDivisionDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformDivisionDivisionDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_division_division_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformDivisionDivisionDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformDivisionDivisionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_division_division_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformDivisionDivisionDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformDivisionDivisionDatum slice")
	}

	return nil
}

var mySQLDataPlatformDivisionDivisionDatumUniqueColumns = []string{
	"Division",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformDivisionDivisionDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_division_division_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformDivisionDivisionDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformDivisionDivisionDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformDivisionDivisionDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformDivisionDivisionDatumUpsertCache[key]
	dataPlatformDivisionDivisionDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformDivisionDivisionDatumAllColumns,
			dataPlatformDivisionDivisionDatumColumnsWithDefault,
			dataPlatformDivisionDivisionDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformDivisionDivisionDatumAllColumns,
			dataPlatformDivisionDivisionDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_division_division_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_division_division_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_division_division_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformDivisionDivisionDatumType, dataPlatformDivisionDivisionDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformDivisionDivisionDatumType, dataPlatformDivisionDivisionDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_division_division_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformDivisionDivisionDatumType, dataPlatformDivisionDivisionDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_division_division_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_division_division_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformDivisionDivisionDatumUpsertCacheMut.Lock()
		dataPlatformDivisionDivisionDatumUpsertCache[key] = cache
		dataPlatformDivisionDivisionDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformDivisionDivisionDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformDivisionDivisionDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformDivisionDivisionDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformDivisionDivisionDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_division_division_data` WHERE `Division`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_division_division_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformDivisionDivisionDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformDivisionDivisionDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_division_division_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformDivisionDivisionDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformDivisionDivisionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_division_division_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformDivisionDivisionDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformDivisionDivisionDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformDivisionDivisionDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformDivisionDivisionDatum(ctx, exec, o.Division)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformDivisionDivisionDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformDivisionDivisionDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformDivisionDivisionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_division_division_data`.* FROM `data_platform_division_division_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformDivisionDivisionDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformDivisionDivisionDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformDivisionDivisionDatumExists checks if the DataPlatformDivisionDivisionDatum row exists.
func DataPlatformDivisionDivisionDatumExists(ctx context.Context, exec boil.ContextExecutor, division string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_division_division_data` where `Division`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, division)
	}
	row := exec.QueryRowContext(ctx, sql, division)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_division_division_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformDivisionDivisionDatum row exists.
func (o *DataPlatformDivisionDivisionDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformDivisionDivisionDatumExists(ctx, exec, o.Division)
}
