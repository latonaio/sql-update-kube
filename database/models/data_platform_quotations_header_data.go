// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformQuotationsHeaderDatum is an object representing the database table.
type DataPlatformQuotationsHeaderDatum struct {
	Quotation                      int          `boil:"Quotation" json:"Quotation" toml:"Quotation" yaml:"Quotation"`
	QuotationDate                  null.String  `boil:"QuotationDate" json:"QuotationDate,omitempty" toml:"QuotationDate" yaml:"QuotationDate,omitempty"`
	DistributionChannel            null.String  `boil:"DistributionChannel" json:"DistributionChannel,omitempty" toml:"DistributionChannel" yaml:"DistributionChannel,omitempty"`
	BusinessArea                   null.String  `boil:"BusinessArea" json:"BusinessArea,omitempty" toml:"BusinessArea" yaml:"BusinessArea,omitempty"`
	District                       null.String  `boil:"District" json:"District,omitempty" toml:"District" yaml:"District,omitempty"`
	CreationDate                   null.String  `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	LastChangeDate                 null.String  `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	ContractType                   null.String  `boil:"ContractType" json:"ContractType,omitempty" toml:"ContractType" yaml:"ContractType,omitempty"`
	ValidityStartDate              null.String  `boil:"ValidityStartDate" json:"ValidityStartDate,omitempty" toml:"ValidityStartDate" yaml:"ValidityStartDate,omitempty"`
	ValidityEndDate                null.String  `boil:"ValidityEndDate" json:"ValidityEndDate,omitempty" toml:"ValidityEndDate" yaml:"ValidityEndDate,omitempty"`
	InvoiceScheduleStartDate       null.String  `boil:"InvoiceScheduleStartDate" json:"InvoiceScheduleStartDate,omitempty" toml:"InvoiceScheduleStartDate" yaml:"InvoiceScheduleStartDate,omitempty"`
	InvoiceScheduleEndDate         null.String  `boil:"InvoiceScheduleEndDate" json:"InvoiceScheduleEndDate,omitempty" toml:"InvoiceScheduleEndDate" yaml:"InvoiceScheduleEndDate,omitempty"`
	TotalNetAmount                 null.Float32 `boil:"TotalNetAmount" json:"TotalNetAmount,omitempty" toml:"TotalNetAmount" yaml:"TotalNetAmount,omitempty"`
	TransactionCurrency            null.String  `boil:"TransactionCurrency" json:"TransactionCurrency,omitempty" toml:"TransactionCurrency" yaml:"TransactionCurrency,omitempty"`
	PricingDate                    null.String  `boil:"PricingDate" json:"PricingDate,omitempty" toml:"PricingDate" yaml:"PricingDate,omitempty"`
	RequestedDeliveryDate          null.String  `boil:"RequestedDeliveryDate" json:"RequestedDeliveryDate,omitempty" toml:"RequestedDeliveryDate" yaml:"RequestedDeliveryDate,omitempty"`
	BindingPeriodValidityStartDate null.String  `boil:"BindingPeriodValidityStartDate" json:"BindingPeriodValidityStartDate,omitempty" toml:"BindingPeriodValidityStartDate" yaml:"BindingPeriodValidityStartDate,omitempty"`
	BindingPeriodValidityEndDate   null.String  `boil:"BindingPeriodValidityEndDate" json:"BindingPeriodValidityEndDate,omitempty" toml:"BindingPeriodValidityEndDate" yaml:"BindingPeriodValidityEndDate,omitempty"`
	OrderProbabilityInPercent      null.Float32 `boil:"OrderProbabilityInPercent" json:"OrderProbabilityInPercent,omitempty" toml:"OrderProbabilityInPercent" yaml:"OrderProbabilityInPercent,omitempty"`
	ExpectedOrderNetAmount         null.Float32 `boil:"ExpectedOrderNetAmount" json:"ExpectedOrderNetAmount,omitempty" toml:"ExpectedOrderNetAmount" yaml:"ExpectedOrderNetAmount,omitempty"`
	Incoterms                      null.String  `boil:"Incoterms" json:"Incoterms,omitempty" toml:"Incoterms" yaml:"Incoterms,omitempty"`
	PaymentTerms                   null.String  `boil:"PaymentTerms" json:"PaymentTerms,omitempty" toml:"PaymentTerms" yaml:"PaymentTerms,omitempty"`
	PaymentMethod                  null.String  `boil:"PaymentMethod" json:"PaymentMethod,omitempty" toml:"PaymentMethod" yaml:"PaymentMethod,omitempty"`
	TaxClassification              null.String  `boil:"TaxClassification" json:"TaxClassification,omitempty" toml:"TaxClassification" yaml:"TaxClassification,omitempty"`
	ReferenceInquiry               null.Int     `boil:"ReferenceInquiry" json:"ReferenceInquiry,omitempty" toml:"ReferenceInquiry" yaml:"ReferenceInquiry,omitempty"`

	R *dataPlatformQuotationsHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformQuotationsHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformQuotationsHeaderDatumColumns = struct {
	Quotation                      string
	QuotationDate                  string
	DistributionChannel            string
	BusinessArea                   string
	District                       string
	CreationDate                   string
	LastChangeDate                 string
	ContractType                   string
	ValidityStartDate              string
	ValidityEndDate                string
	InvoiceScheduleStartDate       string
	InvoiceScheduleEndDate         string
	TotalNetAmount                 string
	TransactionCurrency            string
	PricingDate                    string
	RequestedDeliveryDate          string
	BindingPeriodValidityStartDate string
	BindingPeriodValidityEndDate   string
	OrderProbabilityInPercent      string
	ExpectedOrderNetAmount         string
	Incoterms                      string
	PaymentTerms                   string
	PaymentMethod                  string
	TaxClassification              string
	ReferenceInquiry               string
}{
	Quotation:                      "Quotation",
	QuotationDate:                  "QuotationDate",
	DistributionChannel:            "DistributionChannel",
	BusinessArea:                   "BusinessArea",
	District:                       "District",
	CreationDate:                   "CreationDate",
	LastChangeDate:                 "LastChangeDate",
	ContractType:                   "ContractType",
	ValidityStartDate:              "ValidityStartDate",
	ValidityEndDate:                "ValidityEndDate",
	InvoiceScheduleStartDate:       "InvoiceScheduleStartDate",
	InvoiceScheduleEndDate:         "InvoiceScheduleEndDate",
	TotalNetAmount:                 "TotalNetAmount",
	TransactionCurrency:            "TransactionCurrency",
	PricingDate:                    "PricingDate",
	RequestedDeliveryDate:          "RequestedDeliveryDate",
	BindingPeriodValidityStartDate: "BindingPeriodValidityStartDate",
	BindingPeriodValidityEndDate:   "BindingPeriodValidityEndDate",
	OrderProbabilityInPercent:      "OrderProbabilityInPercent",
	ExpectedOrderNetAmount:         "ExpectedOrderNetAmount",
	Incoterms:                      "Incoterms",
	PaymentTerms:                   "PaymentTerms",
	PaymentMethod:                  "PaymentMethod",
	TaxClassification:              "TaxClassification",
	ReferenceInquiry:               "ReferenceInquiry",
}

var DataPlatformQuotationsHeaderDatumTableColumns = struct {
	Quotation                      string
	QuotationDate                  string
	DistributionChannel            string
	BusinessArea                   string
	District                       string
	CreationDate                   string
	LastChangeDate                 string
	ContractType                   string
	ValidityStartDate              string
	ValidityEndDate                string
	InvoiceScheduleStartDate       string
	InvoiceScheduleEndDate         string
	TotalNetAmount                 string
	TransactionCurrency            string
	PricingDate                    string
	RequestedDeliveryDate          string
	BindingPeriodValidityStartDate string
	BindingPeriodValidityEndDate   string
	OrderProbabilityInPercent      string
	ExpectedOrderNetAmount         string
	Incoterms                      string
	PaymentTerms                   string
	PaymentMethod                  string
	TaxClassification              string
	ReferenceInquiry               string
}{
	Quotation:                      "data_platform_quotations_header_data.Quotation",
	QuotationDate:                  "data_platform_quotations_header_data.QuotationDate",
	DistributionChannel:            "data_platform_quotations_header_data.DistributionChannel",
	BusinessArea:                   "data_platform_quotations_header_data.BusinessArea",
	District:                       "data_platform_quotations_header_data.District",
	CreationDate:                   "data_platform_quotations_header_data.CreationDate",
	LastChangeDate:                 "data_platform_quotations_header_data.LastChangeDate",
	ContractType:                   "data_platform_quotations_header_data.ContractType",
	ValidityStartDate:              "data_platform_quotations_header_data.ValidityStartDate",
	ValidityEndDate:                "data_platform_quotations_header_data.ValidityEndDate",
	InvoiceScheduleStartDate:       "data_platform_quotations_header_data.InvoiceScheduleStartDate",
	InvoiceScheduleEndDate:         "data_platform_quotations_header_data.InvoiceScheduleEndDate",
	TotalNetAmount:                 "data_platform_quotations_header_data.TotalNetAmount",
	TransactionCurrency:            "data_platform_quotations_header_data.TransactionCurrency",
	PricingDate:                    "data_platform_quotations_header_data.PricingDate",
	RequestedDeliveryDate:          "data_platform_quotations_header_data.RequestedDeliveryDate",
	BindingPeriodValidityStartDate: "data_platform_quotations_header_data.BindingPeriodValidityStartDate",
	BindingPeriodValidityEndDate:   "data_platform_quotations_header_data.BindingPeriodValidityEndDate",
	OrderProbabilityInPercent:      "data_platform_quotations_header_data.OrderProbabilityInPercent",
	ExpectedOrderNetAmount:         "data_platform_quotations_header_data.ExpectedOrderNetAmount",
	Incoterms:                      "data_platform_quotations_header_data.Incoterms",
	PaymentTerms:                   "data_platform_quotations_header_data.PaymentTerms",
	PaymentMethod:                  "data_platform_quotations_header_data.PaymentMethod",
	TaxClassification:              "data_platform_quotations_header_data.TaxClassification",
	ReferenceInquiry:               "data_platform_quotations_header_data.ReferenceInquiry",
}

// Generated where

var DataPlatformQuotationsHeaderDatumWhere = struct {
	Quotation                      whereHelperint
	QuotationDate                  whereHelpernull_String
	DistributionChannel            whereHelpernull_String
	BusinessArea                   whereHelpernull_String
	District                       whereHelpernull_String
	CreationDate                   whereHelpernull_String
	LastChangeDate                 whereHelpernull_String
	ContractType                   whereHelpernull_String
	ValidityStartDate              whereHelpernull_String
	ValidityEndDate                whereHelpernull_String
	InvoiceScheduleStartDate       whereHelpernull_String
	InvoiceScheduleEndDate         whereHelpernull_String
	TotalNetAmount                 whereHelpernull_Float32
	TransactionCurrency            whereHelpernull_String
	PricingDate                    whereHelpernull_String
	RequestedDeliveryDate          whereHelpernull_String
	BindingPeriodValidityStartDate whereHelpernull_String
	BindingPeriodValidityEndDate   whereHelpernull_String
	OrderProbabilityInPercent      whereHelpernull_Float32
	ExpectedOrderNetAmount         whereHelpernull_Float32
	Incoterms                      whereHelpernull_String
	PaymentTerms                   whereHelpernull_String
	PaymentMethod                  whereHelpernull_String
	TaxClassification              whereHelpernull_String
	ReferenceInquiry               whereHelpernull_Int
}{
	Quotation:                      whereHelperint{field: "`data_platform_quotations_header_data`.`Quotation`"},
	QuotationDate:                  whereHelpernull_String{field: "`data_platform_quotations_header_data`.`QuotationDate`"},
	DistributionChannel:            whereHelpernull_String{field: "`data_platform_quotations_header_data`.`DistributionChannel`"},
	BusinessArea:                   whereHelpernull_String{field: "`data_platform_quotations_header_data`.`BusinessArea`"},
	District:                       whereHelpernull_String{field: "`data_platform_quotations_header_data`.`District`"},
	CreationDate:                   whereHelpernull_String{field: "`data_platform_quotations_header_data`.`CreationDate`"},
	LastChangeDate:                 whereHelpernull_String{field: "`data_platform_quotations_header_data`.`LastChangeDate`"},
	ContractType:                   whereHelpernull_String{field: "`data_platform_quotations_header_data`.`ContractType`"},
	ValidityStartDate:              whereHelpernull_String{field: "`data_platform_quotations_header_data`.`ValidityStartDate`"},
	ValidityEndDate:                whereHelpernull_String{field: "`data_platform_quotations_header_data`.`ValidityEndDate`"},
	InvoiceScheduleStartDate:       whereHelpernull_String{field: "`data_platform_quotations_header_data`.`InvoiceScheduleStartDate`"},
	InvoiceScheduleEndDate:         whereHelpernull_String{field: "`data_platform_quotations_header_data`.`InvoiceScheduleEndDate`"},
	TotalNetAmount:                 whereHelpernull_Float32{field: "`data_platform_quotations_header_data`.`TotalNetAmount`"},
	TransactionCurrency:            whereHelpernull_String{field: "`data_platform_quotations_header_data`.`TransactionCurrency`"},
	PricingDate:                    whereHelpernull_String{field: "`data_platform_quotations_header_data`.`PricingDate`"},
	RequestedDeliveryDate:          whereHelpernull_String{field: "`data_platform_quotations_header_data`.`RequestedDeliveryDate`"},
	BindingPeriodValidityStartDate: whereHelpernull_String{field: "`data_platform_quotations_header_data`.`BindingPeriodValidityStartDate`"},
	BindingPeriodValidityEndDate:   whereHelpernull_String{field: "`data_platform_quotations_header_data`.`BindingPeriodValidityEndDate`"},
	OrderProbabilityInPercent:      whereHelpernull_Float32{field: "`data_platform_quotations_header_data`.`OrderProbabilityInPercent`"},
	ExpectedOrderNetAmount:         whereHelpernull_Float32{field: "`data_platform_quotations_header_data`.`ExpectedOrderNetAmount`"},
	Incoterms:                      whereHelpernull_String{field: "`data_platform_quotations_header_data`.`Incoterms`"},
	PaymentTerms:                   whereHelpernull_String{field: "`data_platform_quotations_header_data`.`PaymentTerms`"},
	PaymentMethod:                  whereHelpernull_String{field: "`data_platform_quotations_header_data`.`PaymentMethod`"},
	TaxClassification:              whereHelpernull_String{field: "`data_platform_quotations_header_data`.`TaxClassification`"},
	ReferenceInquiry:               whereHelpernull_Int{field: "`data_platform_quotations_header_data`.`ReferenceInquiry`"},
}

// DataPlatformQuotationsHeaderDatumRels is where relationship names are stored.
var DataPlatformQuotationsHeaderDatumRels = struct {
	QuotationDataPlatformQuotationsAddressData       string
	QuotationDataPlatformQuotationsHeaderPartnerData string
	QuotationDataPlatformQuotationsItemData          string
}{
	QuotationDataPlatformQuotationsAddressData:       "QuotationDataPlatformQuotationsAddressData",
	QuotationDataPlatformQuotationsHeaderPartnerData: "QuotationDataPlatformQuotationsHeaderPartnerData",
	QuotationDataPlatformQuotationsItemData:          "QuotationDataPlatformQuotationsItemData",
}

// dataPlatformQuotationsHeaderDatumR is where relationships are stored.
type dataPlatformQuotationsHeaderDatumR struct {
	QuotationDataPlatformQuotationsAddressData       DataPlatformQuotationsAddressDatumSlice       `boil:"QuotationDataPlatformQuotationsAddressData" json:"QuotationDataPlatformQuotationsAddressData" toml:"QuotationDataPlatformQuotationsAddressData" yaml:"QuotationDataPlatformQuotationsAddressData"`
	QuotationDataPlatformQuotationsHeaderPartnerData DataPlatformQuotationsHeaderPartnerDatumSlice `boil:"QuotationDataPlatformQuotationsHeaderPartnerData" json:"QuotationDataPlatformQuotationsHeaderPartnerData" toml:"QuotationDataPlatformQuotationsHeaderPartnerData" yaml:"QuotationDataPlatformQuotationsHeaderPartnerData"`
	QuotationDataPlatformQuotationsItemData          DataPlatformQuotationsItemDatumSlice          `boil:"QuotationDataPlatformQuotationsItemData" json:"QuotationDataPlatformQuotationsItemData" toml:"QuotationDataPlatformQuotationsItemData" yaml:"QuotationDataPlatformQuotationsItemData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformQuotationsHeaderDatumR) NewStruct() *dataPlatformQuotationsHeaderDatumR {
	return &dataPlatformQuotationsHeaderDatumR{}
}

func (r *dataPlatformQuotationsHeaderDatumR) GetQuotationDataPlatformQuotationsAddressData() DataPlatformQuotationsAddressDatumSlice {
	if r == nil {
		return nil
	}
	return r.QuotationDataPlatformQuotationsAddressData
}

func (r *dataPlatformQuotationsHeaderDatumR) GetQuotationDataPlatformQuotationsHeaderPartnerData() DataPlatformQuotationsHeaderPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.QuotationDataPlatformQuotationsHeaderPartnerData
}

func (r *dataPlatformQuotationsHeaderDatumR) GetQuotationDataPlatformQuotationsItemData() DataPlatformQuotationsItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.QuotationDataPlatformQuotationsItemData
}

// dataPlatformQuotationsHeaderDatumL is where Load methods for each relationship are stored.
type dataPlatformQuotationsHeaderDatumL struct{}

var (
	dataPlatformQuotationsHeaderDatumAllColumns            = []string{"Quotation", "QuotationDate", "DistributionChannel", "BusinessArea", "District", "CreationDate", "LastChangeDate", "ContractType", "ValidityStartDate", "ValidityEndDate", "InvoiceScheduleStartDate", "InvoiceScheduleEndDate", "TotalNetAmount", "TransactionCurrency", "PricingDate", "RequestedDeliveryDate", "BindingPeriodValidityStartDate", "BindingPeriodValidityEndDate", "OrderProbabilityInPercent", "ExpectedOrderNetAmount", "Incoterms", "PaymentTerms", "PaymentMethod", "TaxClassification", "ReferenceInquiry"}
	dataPlatformQuotationsHeaderDatumColumnsWithoutDefault = []string{"Quotation", "QuotationDate", "DistributionChannel", "BusinessArea", "District", "CreationDate", "LastChangeDate", "ContractType", "ValidityStartDate", "ValidityEndDate", "InvoiceScheduleStartDate", "InvoiceScheduleEndDate", "TotalNetAmount", "TransactionCurrency", "PricingDate", "RequestedDeliveryDate", "BindingPeriodValidityStartDate", "BindingPeriodValidityEndDate", "OrderProbabilityInPercent", "ExpectedOrderNetAmount", "Incoterms", "PaymentTerms", "PaymentMethod", "TaxClassification", "ReferenceInquiry"}
	dataPlatformQuotationsHeaderDatumColumnsWithDefault    = []string{}
	dataPlatformQuotationsHeaderDatumPrimaryKeyColumns     = []string{"Quotation"}
	dataPlatformQuotationsHeaderDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformQuotationsHeaderDatumSlice is an alias for a slice of pointers to DataPlatformQuotationsHeaderDatum.
	// This should almost always be used instead of []DataPlatformQuotationsHeaderDatum.
	DataPlatformQuotationsHeaderDatumSlice []*DataPlatformQuotationsHeaderDatum

	dataPlatformQuotationsHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformQuotationsHeaderDatumType                 = reflect.TypeOf(&DataPlatformQuotationsHeaderDatum{})
	dataPlatformQuotationsHeaderDatumMapping              = queries.MakeStructMapping(dataPlatformQuotationsHeaderDatumType)
	dataPlatformQuotationsHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformQuotationsHeaderDatumType, dataPlatformQuotationsHeaderDatumMapping, dataPlatformQuotationsHeaderDatumPrimaryKeyColumns)
	dataPlatformQuotationsHeaderDatumInsertCacheMut       sync.RWMutex
	dataPlatformQuotationsHeaderDatumInsertCache          = make(map[string]insertCache)
	dataPlatformQuotationsHeaderDatumUpdateCacheMut       sync.RWMutex
	dataPlatformQuotationsHeaderDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformQuotationsHeaderDatumUpsertCacheMut       sync.RWMutex
	dataPlatformQuotationsHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformQuotationsHeaderDatum record from the query.
func (q dataPlatformQuotationsHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformQuotationsHeaderDatum, error) {
	o := &DataPlatformQuotationsHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_quotations_header_data")
	}

	return o, nil
}

// All returns all DataPlatformQuotationsHeaderDatum records from the query.
func (q dataPlatformQuotationsHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformQuotationsHeaderDatumSlice, error) {
	var o []*DataPlatformQuotationsHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformQuotationsHeaderDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformQuotationsHeaderDatum records in the query.
func (q dataPlatformQuotationsHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_quotations_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformQuotationsHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_quotations_header_data exists")
	}

	return count > 0, nil
}

// QuotationDataPlatformQuotationsAddressData retrieves all the data_platform_quotations_address_datum's DataPlatformQuotationsAddressData with an executor via Quotation column.
func (o *DataPlatformQuotationsHeaderDatum) QuotationDataPlatformQuotationsAddressData(mods ...qm.QueryMod) dataPlatformQuotationsAddressDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_quotations_address_data`.`Quotation`=?", o.Quotation),
	)

	return DataPlatformQuotationsAddressData(queryMods...)
}

// QuotationDataPlatformQuotationsHeaderPartnerData retrieves all the data_platform_quotations_header_partner_datum's DataPlatformQuotationsHeaderPartnerData with an executor via Quotation column.
func (o *DataPlatformQuotationsHeaderDatum) QuotationDataPlatformQuotationsHeaderPartnerData(mods ...qm.QueryMod) dataPlatformQuotationsHeaderPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_quotations_header_partner_data`.`Quotation`=?", o.Quotation),
	)

	return DataPlatformQuotationsHeaderPartnerData(queryMods...)
}

// QuotationDataPlatformQuotationsItemData retrieves all the data_platform_quotations_item_datum's DataPlatformQuotationsItemData with an executor via Quotation column.
func (o *DataPlatformQuotationsHeaderDatum) QuotationDataPlatformQuotationsItemData(mods ...qm.QueryMod) dataPlatformQuotationsItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_quotations_item_data`.`Quotation`=?", o.Quotation),
	)

	return DataPlatformQuotationsItemData(queryMods...)
}

// LoadQuotationDataPlatformQuotationsAddressData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuotationsHeaderDatumL) LoadQuotationDataPlatformQuotationsAddressData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuotationsHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuotationsHeaderDatum
	var object *DataPlatformQuotationsHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuotationsHeaderDatum.(*DataPlatformQuotationsHeaderDatum)
		if !ok {
			object = new(DataPlatformQuotationsHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuotationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuotationsHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuotationsHeaderDatum.(*[]*DataPlatformQuotationsHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuotationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuotationsHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuotationsHeaderDatumR{}
		}
		args = append(args, object.Quotation)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuotationsHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.Quotation {
					continue Outer
				}
			}

			args = append(args, obj.Quotation)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quotations_address_data`),
		qm.WhereIn(`data_platform_quotations_address_data.Quotation in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_quotations_address_data")
	}

	var resultSlice []*DataPlatformQuotationsAddressDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_quotations_address_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_quotations_address_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quotations_address_data")
	}

	if singular {
		object.R.QuotationDataPlatformQuotationsAddressData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Quotation == foreign.Quotation {
				local.R.QuotationDataPlatformQuotationsAddressData = append(local.R.QuotationDataPlatformQuotationsAddressData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadQuotationDataPlatformQuotationsHeaderPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuotationsHeaderDatumL) LoadQuotationDataPlatformQuotationsHeaderPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuotationsHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuotationsHeaderDatum
	var object *DataPlatformQuotationsHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuotationsHeaderDatum.(*DataPlatformQuotationsHeaderDatum)
		if !ok {
			object = new(DataPlatformQuotationsHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuotationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuotationsHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuotationsHeaderDatum.(*[]*DataPlatformQuotationsHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuotationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuotationsHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuotationsHeaderDatumR{}
		}
		args = append(args, object.Quotation)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuotationsHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.Quotation {
					continue Outer
				}
			}

			args = append(args, obj.Quotation)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quotations_header_partner_data`),
		qm.WhereIn(`data_platform_quotations_header_partner_data.Quotation in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_quotations_header_partner_data")
	}

	var resultSlice []*DataPlatformQuotationsHeaderPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_quotations_header_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_quotations_header_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quotations_header_partner_data")
	}

	if singular {
		object.R.QuotationDataPlatformQuotationsHeaderPartnerData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Quotation == foreign.Quotation {
				local.R.QuotationDataPlatformQuotationsHeaderPartnerData = append(local.R.QuotationDataPlatformQuotationsHeaderPartnerData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadQuotationDataPlatformQuotationsItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuotationsHeaderDatumL) LoadQuotationDataPlatformQuotationsItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuotationsHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuotationsHeaderDatum
	var object *DataPlatformQuotationsHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuotationsHeaderDatum.(*DataPlatformQuotationsHeaderDatum)
		if !ok {
			object = new(DataPlatformQuotationsHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuotationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuotationsHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuotationsHeaderDatum.(*[]*DataPlatformQuotationsHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuotationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuotationsHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuotationsHeaderDatumR{}
		}
		args = append(args, object.Quotation)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuotationsHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.Quotation {
					continue Outer
				}
			}

			args = append(args, obj.Quotation)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quotations_item_data`),
		qm.WhereIn(`data_platform_quotations_item_data.Quotation in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_quotations_item_data")
	}

	var resultSlice []*DataPlatformQuotationsItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_quotations_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_quotations_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quotations_item_data")
	}

	if singular {
		object.R.QuotationDataPlatformQuotationsItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Quotation == foreign.Quotation {
				local.R.QuotationDataPlatformQuotationsItemData = append(local.R.QuotationDataPlatformQuotationsItemData, foreign)
				break
			}
		}
	}

	return nil
}

// AddQuotationDataPlatformQuotationsAddressData adds the given related objects to the existing relationships
// of the data_platform_quotations_header_datum, optionally inserting them as new records.
// Appends related to o.R.QuotationDataPlatformQuotationsAddressData.
func (o *DataPlatformQuotationsHeaderDatum) AddQuotationDataPlatformQuotationsAddressData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuotationsAddressDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Quotation = o.Quotation
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_quotations_address_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Quotation"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsAddressDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Quotation, rel.Quotation, rel.AddressID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Quotation = o.Quotation
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuotationsHeaderDatumR{
			QuotationDataPlatformQuotationsAddressData: related,
		}
	} else {
		o.R.QuotationDataPlatformQuotationsAddressData = append(o.R.QuotationDataPlatformQuotationsAddressData, related...)
	}

	return nil
}

// AddQuotationDataPlatformQuotationsHeaderPartnerData adds the given related objects to the existing relationships
// of the data_platform_quotations_header_datum, optionally inserting them as new records.
// Appends related to o.R.QuotationDataPlatformQuotationsHeaderPartnerData.
func (o *DataPlatformQuotationsHeaderDatum) AddQuotationDataPlatformQuotationsHeaderPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuotationsHeaderPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Quotation = o.Quotation
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_quotations_header_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Quotation"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsHeaderPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Quotation, rel.Quotation, rel.PartnerFunction}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Quotation = o.Quotation
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuotationsHeaderDatumR{
			QuotationDataPlatformQuotationsHeaderPartnerData: related,
		}
	} else {
		o.R.QuotationDataPlatformQuotationsHeaderPartnerData = append(o.R.QuotationDataPlatformQuotationsHeaderPartnerData, related...)
	}

	return nil
}

// AddQuotationDataPlatformQuotationsItemData adds the given related objects to the existing relationships
// of the data_platform_quotations_header_datum, optionally inserting them as new records.
// Appends related to o.R.QuotationDataPlatformQuotationsItemData.
func (o *DataPlatformQuotationsHeaderDatum) AddQuotationDataPlatformQuotationsItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuotationsItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Quotation = o.Quotation
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_quotations_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Quotation"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Quotation, rel.Quotation, rel.QuotationItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Quotation = o.Quotation
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuotationsHeaderDatumR{
			QuotationDataPlatformQuotationsItemData: related,
		}
	} else {
		o.R.QuotationDataPlatformQuotationsItemData = append(o.R.QuotationDataPlatformQuotationsItemData, related...)
	}

	return nil
}

// DataPlatformQuotationsHeaderData retrieves all the records using an executor.
func DataPlatformQuotationsHeaderData(mods ...qm.QueryMod) dataPlatformQuotationsHeaderDatumQuery {
	mods = append(mods, qm.From("`data_platform_quotations_header_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_quotations_header_data`.*"})
	}

	return dataPlatformQuotationsHeaderDatumQuery{q}
}

// FindDataPlatformQuotationsHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformQuotationsHeaderDatum(ctx context.Context, exec boil.ContextExecutor, quotation int, selectCols ...string) (*DataPlatformQuotationsHeaderDatum, error) {
	dataPlatformQuotationsHeaderDatumObj := &DataPlatformQuotationsHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_quotations_header_data` where `Quotation`=?", sel,
	)

	q := queries.Raw(query, quotation)

	err := q.Bind(ctx, exec, dataPlatformQuotationsHeaderDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_quotations_header_data")
	}

	return dataPlatformQuotationsHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformQuotationsHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_quotations_header_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformQuotationsHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformQuotationsHeaderDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformQuotationsHeaderDatumInsertCache[key]
	dataPlatformQuotationsHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformQuotationsHeaderDatumAllColumns,
			dataPlatformQuotationsHeaderDatumColumnsWithDefault,
			dataPlatformQuotationsHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformQuotationsHeaderDatumType, dataPlatformQuotationsHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformQuotationsHeaderDatumType, dataPlatformQuotationsHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_quotations_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_quotations_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_quotations_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_quotations_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Quotation,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_quotations_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformQuotationsHeaderDatumInsertCacheMut.Lock()
		dataPlatformQuotationsHeaderDatumInsertCache[key] = cache
		dataPlatformQuotationsHeaderDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformQuotationsHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformQuotationsHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformQuotationsHeaderDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformQuotationsHeaderDatumUpdateCache[key]
	dataPlatformQuotationsHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformQuotationsHeaderDatumAllColumns,
			dataPlatformQuotationsHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_quotations_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_quotations_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformQuotationsHeaderDatumType, dataPlatformQuotationsHeaderDatumMapping, append(wl, dataPlatformQuotationsHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_quotations_header_data row")
	}

	if !cached {
		dataPlatformQuotationsHeaderDatumUpdateCacheMut.Lock()
		dataPlatformQuotationsHeaderDatumUpdateCache[key] = cache
		dataPlatformQuotationsHeaderDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformQuotationsHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_quotations_header_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformQuotationsHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformQuotationsHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_quotations_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformQuotationsHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformQuotationsHeaderDatum slice")
	}

	return nil
}

var mySQLDataPlatformQuotationsHeaderDatumUniqueColumns = []string{
	"Quotation",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformQuotationsHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_quotations_header_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformQuotationsHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformQuotationsHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformQuotationsHeaderDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformQuotationsHeaderDatumUpsertCache[key]
	dataPlatformQuotationsHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformQuotationsHeaderDatumAllColumns,
			dataPlatformQuotationsHeaderDatumColumnsWithDefault,
			dataPlatformQuotationsHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformQuotationsHeaderDatumAllColumns,
			dataPlatformQuotationsHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_quotations_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_quotations_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_quotations_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformQuotationsHeaderDatumType, dataPlatformQuotationsHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformQuotationsHeaderDatumType, dataPlatformQuotationsHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_quotations_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformQuotationsHeaderDatumType, dataPlatformQuotationsHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_quotations_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_quotations_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformQuotationsHeaderDatumUpsertCacheMut.Lock()
		dataPlatformQuotationsHeaderDatumUpsertCache[key] = cache
		dataPlatformQuotationsHeaderDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformQuotationsHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformQuotationsHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformQuotationsHeaderDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformQuotationsHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_quotations_header_data` WHERE `Quotation`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_quotations_header_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformQuotationsHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformQuotationsHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_quotations_header_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformQuotationsHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformQuotationsHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_quotations_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformQuotationsHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformQuotationsHeaderDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformQuotationsHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformQuotationsHeaderDatum(ctx, exec, o.Quotation)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformQuotationsHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformQuotationsHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformQuotationsHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_quotations_header_data`.* FROM `data_platform_quotations_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformQuotationsHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformQuotationsHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformQuotationsHeaderDatumExists checks if the DataPlatformQuotationsHeaderDatum row exists.
func DataPlatformQuotationsHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, quotation int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_quotations_header_data` where `Quotation`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, quotation)
	}
	row := exec.QueryRowContext(ctx, sql, quotation)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_quotations_header_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformQuotationsHeaderDatum row exists.
func (o *DataPlatformQuotationsHeaderDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformQuotationsHeaderDatumExists(ctx, exec, o.Quotation)
}
