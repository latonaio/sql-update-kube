// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformQuotationsHeaderDatum is an object representing the database table.
type DataPlatformQuotationsHeaderDatum struct {
	Quotation                        int          `boil:"Quotation" json:"Quotation" toml:"Quotation" yaml:"Quotation"`
	QuotationDate                    string       `boil:"QuotationDate" json:"QuotationDate" toml:"QuotationDate" yaml:"QuotationDate"`
	QuotationType                    string       `boil:"QuotationType" json:"QuotationType" toml:"QuotationType" yaml:"QuotationType"`
	QuotationStatus                  string       `boil:"QuotationStatus" json:"QuotationStatus" toml:"QuotationStatus" yaml:"QuotationStatus"`
	SupplyChainRelationshipID        int          `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipBillingID null.Int     `boil:"SupplyChainRelationshipBillingID" json:"SupplyChainRelationshipBillingID,omitempty" toml:"SupplyChainRelationshipBillingID" yaml:"SupplyChainRelationshipBillingID,omitempty"`
	SupplyChainRelationshipPaymentID null.Int     `boil:"SupplyChainRelationshipPaymentID" json:"SupplyChainRelationshipPaymentID,omitempty" toml:"SupplyChainRelationshipPaymentID" yaml:"SupplyChainRelationshipPaymentID,omitempty"`
	Buyer                            int          `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                           int          `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	BillToParty                      null.Int     `boil:"BillToParty" json:"BillToParty,omitempty" toml:"BillToParty" yaml:"BillToParty,omitempty"`
	BillFromParty                    null.Int     `boil:"BillFromParty" json:"BillFromParty,omitempty" toml:"BillFromParty" yaml:"BillFromParty,omitempty"`
	BillToCountry                    null.String  `boil:"BillToCountry" json:"BillToCountry,omitempty" toml:"BillToCountry" yaml:"BillToCountry,omitempty"`
	BillFromCountry                  null.String  `boil:"BillFromCountry" json:"BillFromCountry,omitempty" toml:"BillFromCountry" yaml:"BillFromCountry,omitempty"`
	Payer                            null.Int     `boil:"Payer" json:"Payer,omitempty" toml:"Payer" yaml:"Payer,omitempty"`
	Payee                            null.Int     `boil:"Payee" json:"Payee,omitempty" toml:"Payee" yaml:"Payee,omitempty"`
	ContractType                     null.String  `boil:"ContractType" json:"ContractType,omitempty" toml:"ContractType" yaml:"ContractType,omitempty"`
	BindingPeriodValidityStartDate   null.String  `boil:"BindingPeriodValidityStartDate" json:"BindingPeriodValidityStartDate,omitempty" toml:"BindingPeriodValidityStartDate" yaml:"BindingPeriodValidityStartDate,omitempty"`
	BindingPeriodValidityEndDate     null.String  `boil:"BindingPeriodValidityEndDate" json:"BindingPeriodValidityEndDate,omitempty" toml:"BindingPeriodValidityEndDate" yaml:"BindingPeriodValidityEndDate,omitempty"`
	OrderValidityStartDate           null.String  `boil:"OrderValidityStartDate" json:"OrderValidityStartDate,omitempty" toml:"OrderValidityStartDate" yaml:"OrderValidityStartDate,omitempty"`
	OrderValidityEndDate             null.String  `boil:"OrderValidityEndDate" json:"OrderValidityEndDate,omitempty" toml:"OrderValidityEndDate" yaml:"OrderValidityEndDate,omitempty"`
	InvoicePeriodStartDate           null.String  `boil:"InvoicePeriodStartDate" json:"InvoicePeriodStartDate,omitempty" toml:"InvoicePeriodStartDate" yaml:"InvoicePeriodStartDate,omitempty"`
	InvoicePeriodEndDate             null.String  `boil:"InvoicePeriodEndDate" json:"InvoicePeriodEndDate,omitempty" toml:"InvoicePeriodEndDate" yaml:"InvoicePeriodEndDate,omitempty"`
	TotalNetAmount                   float32      `boil:"TotalNetAmount" json:"TotalNetAmount" toml:"TotalNetAmount" yaml:"TotalNetAmount"`
	TotalTaxAmount                   float32      `boil:"TotalTaxAmount" json:"TotalTaxAmount" toml:"TotalTaxAmount" yaml:"TotalTaxAmount"`
	TotalGrossAmount                 float32      `boil:"TotalGrossAmount" json:"TotalGrossAmount" toml:"TotalGrossAmount" yaml:"TotalGrossAmount"`
	HeaderOrderIsDefined             null.Bool    `boil:"HeaderOrderIsDefined" json:"HeaderOrderIsDefined,omitempty" toml:"HeaderOrderIsDefined" yaml:"HeaderOrderIsDefined,omitempty"`
	TransactionCurrency              string       `boil:"TransactionCurrency" json:"TransactionCurrency" toml:"TransactionCurrency" yaml:"TransactionCurrency"`
	PricingDate                      string       `boil:"PricingDate" json:"PricingDate" toml:"PricingDate" yaml:"PricingDate"`
	PriceDetnExchangeRate            null.Float32 `boil:"PriceDetnExchangeRate" json:"PriceDetnExchangeRate,omitempty" toml:"PriceDetnExchangeRate" yaml:"PriceDetnExchangeRate,omitempty"`
	RequestedDeliveryDate            string       `boil:"RequestedDeliveryDate" json:"RequestedDeliveryDate" toml:"RequestedDeliveryDate" yaml:"RequestedDeliveryDate"`
	OrderProbabilityInPercent        null.Float32 `boil:"OrderProbabilityInPercent" json:"OrderProbabilityInPercent,omitempty" toml:"OrderProbabilityInPercent" yaml:"OrderProbabilityInPercent,omitempty"`
	ExpectedOrderNetAmount           null.Float32 `boil:"ExpectedOrderNetAmount" json:"ExpectedOrderNetAmount,omitempty" toml:"ExpectedOrderNetAmount" yaml:"ExpectedOrderNetAmount,omitempty"`
	Incoterms                        null.String  `boil:"Incoterms" json:"Incoterms,omitempty" toml:"Incoterms" yaml:"Incoterms,omitempty"`
	PaymentTerms                     string       `boil:"PaymentTerms" json:"PaymentTerms" toml:"PaymentTerms" yaml:"PaymentTerms"`
	PaymentMethod                    string       `boil:"PaymentMethod" json:"PaymentMethod" toml:"PaymentMethod" yaml:"PaymentMethod"`
	ReferenceDocument                null.Int     `boil:"ReferenceDocument" json:"ReferenceDocument,omitempty" toml:"ReferenceDocument" yaml:"ReferenceDocument,omitempty"`
	AccountAssignmentGroup           string       `boil:"AccountAssignmentGroup" json:"AccountAssignmentGroup" toml:"AccountAssignmentGroup" yaml:"AccountAssignmentGroup"`
	AccountingExchangeRate           null.Float32 `boil:"AccountingExchangeRate" json:"AccountingExchangeRate,omitempty" toml:"AccountingExchangeRate" yaml:"AccountingExchangeRate,omitempty"`
	InvoiceDocumentDate              null.String  `boil:"InvoiceDocumentDate" json:"InvoiceDocumentDate,omitempty" toml:"InvoiceDocumentDate" yaml:"InvoiceDocumentDate,omitempty"`
	IsExportImport                   null.Bool    `boil:"IsExportImport" json:"IsExportImport,omitempty" toml:"IsExportImport" yaml:"IsExportImport,omitempty"`
	HeaderText                       null.String  `boil:"HeaderText" json:"HeaderText,omitempty" toml:"HeaderText" yaml:"HeaderText,omitempty"`
	HeaderIsClosed                   null.Bool    `boil:"HeaderIsClosed" json:"HeaderIsClosed,omitempty" toml:"HeaderIsClosed" yaml:"HeaderIsClosed,omitempty"`
	HeaderBlockStatus                null.Bool    `boil:"HeaderBlockStatus" json:"HeaderBlockStatus,omitempty" toml:"HeaderBlockStatus" yaml:"HeaderBlockStatus,omitempty"`
	CreationDate                     string       `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	LastChangeDate                   string       `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	IsCancelled                      null.Bool    `boil:"IsCancelled" json:"IsCancelled,omitempty" toml:"IsCancelled" yaml:"IsCancelled,omitempty"`
	IsMarkedForDeletion              null.Bool    `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformQuotationsHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformQuotationsHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformQuotationsHeaderDatumColumns = struct {
	Quotation                        string
	QuotationDate                    string
	QuotationType                    string
	QuotationStatus                  string
	SupplyChainRelationshipID        string
	SupplyChainRelationshipBillingID string
	SupplyChainRelationshipPaymentID string
	Buyer                            string
	Seller                           string
	BillToParty                      string
	BillFromParty                    string
	BillToCountry                    string
	BillFromCountry                  string
	Payer                            string
	Payee                            string
	ContractType                     string
	BindingPeriodValidityStartDate   string
	BindingPeriodValidityEndDate     string
	OrderValidityStartDate           string
	OrderValidityEndDate             string
	InvoicePeriodStartDate           string
	InvoicePeriodEndDate             string
	TotalNetAmount                   string
	TotalTaxAmount                   string
	TotalGrossAmount                 string
	HeaderOrderIsDefined             string
	TransactionCurrency              string
	PricingDate                      string
	PriceDetnExchangeRate            string
	RequestedDeliveryDate            string
	OrderProbabilityInPercent        string
	ExpectedOrderNetAmount           string
	Incoterms                        string
	PaymentTerms                     string
	PaymentMethod                    string
	ReferenceDocument                string
	AccountAssignmentGroup           string
	AccountingExchangeRate           string
	InvoiceDocumentDate              string
	IsExportImport                   string
	HeaderText                       string
	HeaderIsClosed                   string
	HeaderBlockStatus                string
	CreationDate                     string
	LastChangeDate                   string
	IsCancelled                      string
	IsMarkedForDeletion              string
}{
	Quotation:                        "Quotation",
	QuotationDate:                    "QuotationDate",
	QuotationType:                    "QuotationType",
	QuotationStatus:                  "QuotationStatus",
	SupplyChainRelationshipID:        "SupplyChainRelationshipID",
	SupplyChainRelationshipBillingID: "SupplyChainRelationshipBillingID",
	SupplyChainRelationshipPaymentID: "SupplyChainRelationshipPaymentID",
	Buyer:                            "Buyer",
	Seller:                           "Seller",
	BillToParty:                      "BillToParty",
	BillFromParty:                    "BillFromParty",
	BillToCountry:                    "BillToCountry",
	BillFromCountry:                  "BillFromCountry",
	Payer:                            "Payer",
	Payee:                            "Payee",
	ContractType:                     "ContractType",
	BindingPeriodValidityStartDate:   "BindingPeriodValidityStartDate",
	BindingPeriodValidityEndDate:     "BindingPeriodValidityEndDate",
	OrderValidityStartDate:           "OrderValidityStartDate",
	OrderValidityEndDate:             "OrderValidityEndDate",
	InvoicePeriodStartDate:           "InvoicePeriodStartDate",
	InvoicePeriodEndDate:             "InvoicePeriodEndDate",
	TotalNetAmount:                   "TotalNetAmount",
	TotalTaxAmount:                   "TotalTaxAmount",
	TotalGrossAmount:                 "TotalGrossAmount",
	HeaderOrderIsDefined:             "HeaderOrderIsDefined",
	TransactionCurrency:              "TransactionCurrency",
	PricingDate:                      "PricingDate",
	PriceDetnExchangeRate:            "PriceDetnExchangeRate",
	RequestedDeliveryDate:            "RequestedDeliveryDate",
	OrderProbabilityInPercent:        "OrderProbabilityInPercent",
	ExpectedOrderNetAmount:           "ExpectedOrderNetAmount",
	Incoterms:                        "Incoterms",
	PaymentTerms:                     "PaymentTerms",
	PaymentMethod:                    "PaymentMethod",
	ReferenceDocument:                "ReferenceDocument",
	AccountAssignmentGroup:           "AccountAssignmentGroup",
	AccountingExchangeRate:           "AccountingExchangeRate",
	InvoiceDocumentDate:              "InvoiceDocumentDate",
	IsExportImport:                   "IsExportImport",
	HeaderText:                       "HeaderText",
	HeaderIsClosed:                   "HeaderIsClosed",
	HeaderBlockStatus:                "HeaderBlockStatus",
	CreationDate:                     "CreationDate",
	LastChangeDate:                   "LastChangeDate",
	IsCancelled:                      "IsCancelled",
	IsMarkedForDeletion:              "IsMarkedForDeletion",
}

var DataPlatformQuotationsHeaderDatumTableColumns = struct {
	Quotation                        string
	QuotationDate                    string
	QuotationType                    string
	QuotationStatus                  string
	SupplyChainRelationshipID        string
	SupplyChainRelationshipBillingID string
	SupplyChainRelationshipPaymentID string
	Buyer                            string
	Seller                           string
	BillToParty                      string
	BillFromParty                    string
	BillToCountry                    string
	BillFromCountry                  string
	Payer                            string
	Payee                            string
	ContractType                     string
	BindingPeriodValidityStartDate   string
	BindingPeriodValidityEndDate     string
	OrderValidityStartDate           string
	OrderValidityEndDate             string
	InvoicePeriodStartDate           string
	InvoicePeriodEndDate             string
	TotalNetAmount                   string
	TotalTaxAmount                   string
	TotalGrossAmount                 string
	HeaderOrderIsDefined             string
	TransactionCurrency              string
	PricingDate                      string
	PriceDetnExchangeRate            string
	RequestedDeliveryDate            string
	OrderProbabilityInPercent        string
	ExpectedOrderNetAmount           string
	Incoterms                        string
	PaymentTerms                     string
	PaymentMethod                    string
	ReferenceDocument                string
	AccountAssignmentGroup           string
	AccountingExchangeRate           string
	InvoiceDocumentDate              string
	IsExportImport                   string
	HeaderText                       string
	HeaderIsClosed                   string
	HeaderBlockStatus                string
	CreationDate                     string
	LastChangeDate                   string
	IsCancelled                      string
	IsMarkedForDeletion              string
}{
	Quotation:                        "data_platform_quotations_header_data.Quotation",
	QuotationDate:                    "data_platform_quotations_header_data.QuotationDate",
	QuotationType:                    "data_platform_quotations_header_data.QuotationType",
	QuotationStatus:                  "data_platform_quotations_header_data.QuotationStatus",
	SupplyChainRelationshipID:        "data_platform_quotations_header_data.SupplyChainRelationshipID",
	SupplyChainRelationshipBillingID: "data_platform_quotations_header_data.SupplyChainRelationshipBillingID",
	SupplyChainRelationshipPaymentID: "data_platform_quotations_header_data.SupplyChainRelationshipPaymentID",
	Buyer:                            "data_platform_quotations_header_data.Buyer",
	Seller:                           "data_platform_quotations_header_data.Seller",
	BillToParty:                      "data_platform_quotations_header_data.BillToParty",
	BillFromParty:                    "data_platform_quotations_header_data.BillFromParty",
	BillToCountry:                    "data_platform_quotations_header_data.BillToCountry",
	BillFromCountry:                  "data_platform_quotations_header_data.BillFromCountry",
	Payer:                            "data_platform_quotations_header_data.Payer",
	Payee:                            "data_platform_quotations_header_data.Payee",
	ContractType:                     "data_platform_quotations_header_data.ContractType",
	BindingPeriodValidityStartDate:   "data_platform_quotations_header_data.BindingPeriodValidityStartDate",
	BindingPeriodValidityEndDate:     "data_platform_quotations_header_data.BindingPeriodValidityEndDate",
	OrderValidityStartDate:           "data_platform_quotations_header_data.OrderValidityStartDate",
	OrderValidityEndDate:             "data_platform_quotations_header_data.OrderValidityEndDate",
	InvoicePeriodStartDate:           "data_platform_quotations_header_data.InvoicePeriodStartDate",
	InvoicePeriodEndDate:             "data_platform_quotations_header_data.InvoicePeriodEndDate",
	TotalNetAmount:                   "data_platform_quotations_header_data.TotalNetAmount",
	TotalTaxAmount:                   "data_platform_quotations_header_data.TotalTaxAmount",
	TotalGrossAmount:                 "data_platform_quotations_header_data.TotalGrossAmount",
	HeaderOrderIsDefined:             "data_platform_quotations_header_data.HeaderOrderIsDefined",
	TransactionCurrency:              "data_platform_quotations_header_data.TransactionCurrency",
	PricingDate:                      "data_platform_quotations_header_data.PricingDate",
	PriceDetnExchangeRate:            "data_platform_quotations_header_data.PriceDetnExchangeRate",
	RequestedDeliveryDate:            "data_platform_quotations_header_data.RequestedDeliveryDate",
	OrderProbabilityInPercent:        "data_platform_quotations_header_data.OrderProbabilityInPercent",
	ExpectedOrderNetAmount:           "data_platform_quotations_header_data.ExpectedOrderNetAmount",
	Incoterms:                        "data_platform_quotations_header_data.Incoterms",
	PaymentTerms:                     "data_platform_quotations_header_data.PaymentTerms",
	PaymentMethod:                    "data_platform_quotations_header_data.PaymentMethod",
	ReferenceDocument:                "data_platform_quotations_header_data.ReferenceDocument",
	AccountAssignmentGroup:           "data_platform_quotations_header_data.AccountAssignmentGroup",
	AccountingExchangeRate:           "data_platform_quotations_header_data.AccountingExchangeRate",
	InvoiceDocumentDate:              "data_platform_quotations_header_data.InvoiceDocumentDate",
	IsExportImport:                   "data_platform_quotations_header_data.IsExportImport",
	HeaderText:                       "data_platform_quotations_header_data.HeaderText",
	HeaderIsClosed:                   "data_platform_quotations_header_data.HeaderIsClosed",
	HeaderBlockStatus:                "data_platform_quotations_header_data.HeaderBlockStatus",
	CreationDate:                     "data_platform_quotations_header_data.CreationDate",
	LastChangeDate:                   "data_platform_quotations_header_data.LastChangeDate",
	IsCancelled:                      "data_platform_quotations_header_data.IsCancelled",
	IsMarkedForDeletion:              "data_platform_quotations_header_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformQuotationsHeaderDatumWhere = struct {
	Quotation                        whereHelperint
	QuotationDate                    whereHelperstring
	QuotationType                    whereHelperstring
	QuotationStatus                  whereHelperstring
	SupplyChainRelationshipID        whereHelperint
	SupplyChainRelationshipBillingID whereHelpernull_Int
	SupplyChainRelationshipPaymentID whereHelpernull_Int
	Buyer                            whereHelperint
	Seller                           whereHelperint
	BillToParty                      whereHelpernull_Int
	BillFromParty                    whereHelpernull_Int
	BillToCountry                    whereHelpernull_String
	BillFromCountry                  whereHelpernull_String
	Payer                            whereHelpernull_Int
	Payee                            whereHelpernull_Int
	ContractType                     whereHelpernull_String
	BindingPeriodValidityStartDate   whereHelpernull_String
	BindingPeriodValidityEndDate     whereHelpernull_String
	OrderValidityStartDate           whereHelpernull_String
	OrderValidityEndDate             whereHelpernull_String
	InvoicePeriodStartDate           whereHelpernull_String
	InvoicePeriodEndDate             whereHelpernull_String
	TotalNetAmount                   whereHelperfloat32
	TotalTaxAmount                   whereHelperfloat32
	TotalGrossAmount                 whereHelperfloat32
	HeaderOrderIsDefined             whereHelpernull_Bool
	TransactionCurrency              whereHelperstring
	PricingDate                      whereHelperstring
	PriceDetnExchangeRate            whereHelpernull_Float32
	RequestedDeliveryDate            whereHelperstring
	OrderProbabilityInPercent        whereHelpernull_Float32
	ExpectedOrderNetAmount           whereHelpernull_Float32
	Incoterms                        whereHelpernull_String
	PaymentTerms                     whereHelperstring
	PaymentMethod                    whereHelperstring
	ReferenceDocument                whereHelpernull_Int
	AccountAssignmentGroup           whereHelperstring
	AccountingExchangeRate           whereHelpernull_Float32
	InvoiceDocumentDate              whereHelpernull_String
	IsExportImport                   whereHelpernull_Bool
	HeaderText                       whereHelpernull_String
	HeaderIsClosed                   whereHelpernull_Bool
	HeaderBlockStatus                whereHelpernull_Bool
	CreationDate                     whereHelperstring
	LastChangeDate                   whereHelperstring
	IsCancelled                      whereHelpernull_Bool
	IsMarkedForDeletion              whereHelpernull_Bool
}{
	Quotation:                        whereHelperint{field: "`data_platform_quotations_header_data`.`Quotation`"},
	QuotationDate:                    whereHelperstring{field: "`data_platform_quotations_header_data`.`QuotationDate`"},
	QuotationType:                    whereHelperstring{field: "`data_platform_quotations_header_data`.`QuotationType`"},
	QuotationStatus:                  whereHelperstring{field: "`data_platform_quotations_header_data`.`QuotationStatus`"},
	SupplyChainRelationshipID:        whereHelperint{field: "`data_platform_quotations_header_data`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipBillingID: whereHelpernull_Int{field: "`data_platform_quotations_header_data`.`SupplyChainRelationshipBillingID`"},
	SupplyChainRelationshipPaymentID: whereHelpernull_Int{field: "`data_platform_quotations_header_data`.`SupplyChainRelationshipPaymentID`"},
	Buyer:                            whereHelperint{field: "`data_platform_quotations_header_data`.`Buyer`"},
	Seller:                           whereHelperint{field: "`data_platform_quotations_header_data`.`Seller`"},
	BillToParty:                      whereHelpernull_Int{field: "`data_platform_quotations_header_data`.`BillToParty`"},
	BillFromParty:                    whereHelpernull_Int{field: "`data_platform_quotations_header_data`.`BillFromParty`"},
	BillToCountry:                    whereHelpernull_String{field: "`data_platform_quotations_header_data`.`BillToCountry`"},
	BillFromCountry:                  whereHelpernull_String{field: "`data_platform_quotations_header_data`.`BillFromCountry`"},
	Payer:                            whereHelpernull_Int{field: "`data_platform_quotations_header_data`.`Payer`"},
	Payee:                            whereHelpernull_Int{field: "`data_platform_quotations_header_data`.`Payee`"},
	ContractType:                     whereHelpernull_String{field: "`data_platform_quotations_header_data`.`ContractType`"},
	BindingPeriodValidityStartDate:   whereHelpernull_String{field: "`data_platform_quotations_header_data`.`BindingPeriodValidityStartDate`"},
	BindingPeriodValidityEndDate:     whereHelpernull_String{field: "`data_platform_quotations_header_data`.`BindingPeriodValidityEndDate`"},
	OrderValidityStartDate:           whereHelpernull_String{field: "`data_platform_quotations_header_data`.`OrderValidityStartDate`"},
	OrderValidityEndDate:             whereHelpernull_String{field: "`data_platform_quotations_header_data`.`OrderValidityEndDate`"},
	InvoicePeriodStartDate:           whereHelpernull_String{field: "`data_platform_quotations_header_data`.`InvoicePeriodStartDate`"},
	InvoicePeriodEndDate:             whereHelpernull_String{field: "`data_platform_quotations_header_data`.`InvoicePeriodEndDate`"},
	TotalNetAmount:                   whereHelperfloat32{field: "`data_platform_quotations_header_data`.`TotalNetAmount`"},
	TotalTaxAmount:                   whereHelperfloat32{field: "`data_platform_quotations_header_data`.`TotalTaxAmount`"},
	TotalGrossAmount:                 whereHelperfloat32{field: "`data_platform_quotations_header_data`.`TotalGrossAmount`"},
	HeaderOrderIsDefined:             whereHelpernull_Bool{field: "`data_platform_quotations_header_data`.`HeaderOrderIsDefined`"},
	TransactionCurrency:              whereHelperstring{field: "`data_platform_quotations_header_data`.`TransactionCurrency`"},
	PricingDate:                      whereHelperstring{field: "`data_platform_quotations_header_data`.`PricingDate`"},
	PriceDetnExchangeRate:            whereHelpernull_Float32{field: "`data_platform_quotations_header_data`.`PriceDetnExchangeRate`"},
	RequestedDeliveryDate:            whereHelperstring{field: "`data_platform_quotations_header_data`.`RequestedDeliveryDate`"},
	OrderProbabilityInPercent:        whereHelpernull_Float32{field: "`data_platform_quotations_header_data`.`OrderProbabilityInPercent`"},
	ExpectedOrderNetAmount:           whereHelpernull_Float32{field: "`data_platform_quotations_header_data`.`ExpectedOrderNetAmount`"},
	Incoterms:                        whereHelpernull_String{field: "`data_platform_quotations_header_data`.`Incoterms`"},
	PaymentTerms:                     whereHelperstring{field: "`data_platform_quotations_header_data`.`PaymentTerms`"},
	PaymentMethod:                    whereHelperstring{field: "`data_platform_quotations_header_data`.`PaymentMethod`"},
	ReferenceDocument:                whereHelpernull_Int{field: "`data_platform_quotations_header_data`.`ReferenceDocument`"},
	AccountAssignmentGroup:           whereHelperstring{field: "`data_platform_quotations_header_data`.`AccountAssignmentGroup`"},
	AccountingExchangeRate:           whereHelpernull_Float32{field: "`data_platform_quotations_header_data`.`AccountingExchangeRate`"},
	InvoiceDocumentDate:              whereHelpernull_String{field: "`data_platform_quotations_header_data`.`InvoiceDocumentDate`"},
	IsExportImport:                   whereHelpernull_Bool{field: "`data_platform_quotations_header_data`.`IsExportImport`"},
	HeaderText:                       whereHelpernull_String{field: "`data_platform_quotations_header_data`.`HeaderText`"},
	HeaderIsClosed:                   whereHelpernull_Bool{field: "`data_platform_quotations_header_data`.`HeaderIsClosed`"},
	HeaderBlockStatus:                whereHelpernull_Bool{field: "`data_platform_quotations_header_data`.`HeaderBlockStatus`"},
	CreationDate:                     whereHelperstring{field: "`data_platform_quotations_header_data`.`CreationDate`"},
	LastChangeDate:                   whereHelperstring{field: "`data_platform_quotations_header_data`.`LastChangeDate`"},
	IsCancelled:                      whereHelpernull_Bool{field: "`data_platform_quotations_header_data`.`IsCancelled`"},
	IsMarkedForDeletion:              whereHelpernull_Bool{field: "`data_platform_quotations_header_data`.`IsMarkedForDeletion`"},
}

// DataPlatformQuotationsHeaderDatumRels is where relationship names are stored.
var DataPlatformQuotationsHeaderDatumRels = struct {
	BillFromCountryDataPlatformCountryCountryDatum           string
	BillToCountryDataPlatformCountryCountryDatum             string
	Incoterm                                                 string
	PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum string
	PaymentTerm                                              string
	BillFromPartyDataPlatformSCRBillingRelationDatum         string
	BuyerDataPlatformSCRGeneralDatum                         string
	BillFromPartyDataPlatformSCRPaymentRelationDatum         string
	TransactionCurrencyDataPlatformCurrencyCurrencyDatum     string
	QuotationDataPlatformQuotationsAddressData               string
	QuotationDataPlatformQuotationsHeaderDocData             string
}{
	BillFromCountryDataPlatformCountryCountryDatum: "BillFromCountryDataPlatformCountryCountryDatum",
	BillToCountryDataPlatformCountryCountryDatum:   "BillToCountryDataPlatformCountryCountryDatum",
	Incoterm: "Incoterm",
	PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum: "PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum",
	PaymentTerm: "PaymentTerm",
	BillFromPartyDataPlatformSCRBillingRelationDatum:     "BillFromPartyDataPlatformSCRBillingRelationDatum",
	BuyerDataPlatformSCRGeneralDatum:                     "BuyerDataPlatformSCRGeneralDatum",
	BillFromPartyDataPlatformSCRPaymentRelationDatum:     "BillFromPartyDataPlatformSCRPaymentRelationDatum",
	TransactionCurrencyDataPlatformCurrencyCurrencyDatum: "TransactionCurrencyDataPlatformCurrencyCurrencyDatum",
	QuotationDataPlatformQuotationsAddressData:           "QuotationDataPlatformQuotationsAddressData",
	QuotationDataPlatformQuotationsHeaderDocData:         "QuotationDataPlatformQuotationsHeaderDocData",
}

// dataPlatformQuotationsHeaderDatumR is where relationships are stored.
type dataPlatformQuotationsHeaderDatumR struct {
	BillFromCountryDataPlatformCountryCountryDatum           *DataPlatformCountryCountryDatum             `boil:"BillFromCountryDataPlatformCountryCountryDatum" json:"BillFromCountryDataPlatformCountryCountryDatum" toml:"BillFromCountryDataPlatformCountryCountryDatum" yaml:"BillFromCountryDataPlatformCountryCountryDatum"`
	BillToCountryDataPlatformCountryCountryDatum             *DataPlatformCountryCountryDatum             `boil:"BillToCountryDataPlatformCountryCountryDatum" json:"BillToCountryDataPlatformCountryCountryDatum" toml:"BillToCountryDataPlatformCountryCountryDatum" yaml:"BillToCountryDataPlatformCountryCountryDatum"`
	Incoterm                                                 *DataPlatformIncotermsIncotermsDatum         `boil:"Incoterm" json:"Incoterm" toml:"Incoterm" yaml:"Incoterm"`
	PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum *DataPlatformPaymentMethodPaymentMethodDatum `boil:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum" json:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum" toml:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum" yaml:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum"`
	PaymentTerm                                              *DataPlatformPaymentTermsPaymentTermsDatum   `boil:"PaymentTerm" json:"PaymentTerm" toml:"PaymentTerm" yaml:"PaymentTerm"`
	BillFromPartyDataPlatformSCRBillingRelationDatum         *DataPlatformSCRBillingRelationDatum         `boil:"BillFromPartyDataPlatformSCRBillingRelationDatum" json:"BillFromPartyDataPlatformSCRBillingRelationDatum" toml:"BillFromPartyDataPlatformSCRBillingRelationDatum" yaml:"BillFromPartyDataPlatformSCRBillingRelationDatum"`
	BuyerDataPlatformSCRGeneralDatum                         *DataPlatformSCRGeneralDatum                 `boil:"BuyerDataPlatformSCRGeneralDatum" json:"BuyerDataPlatformSCRGeneralDatum" toml:"BuyerDataPlatformSCRGeneralDatum" yaml:"BuyerDataPlatformSCRGeneralDatum"`
	BillFromPartyDataPlatformSCRPaymentRelationDatum         *DataPlatformSCRPaymentRelationDatum         `boil:"BillFromPartyDataPlatformSCRPaymentRelationDatum" json:"BillFromPartyDataPlatformSCRPaymentRelationDatum" toml:"BillFromPartyDataPlatformSCRPaymentRelationDatum" yaml:"BillFromPartyDataPlatformSCRPaymentRelationDatum"`
	TransactionCurrencyDataPlatformCurrencyCurrencyDatum     *DataPlatformCurrencyCurrencyDatum           `boil:"TransactionCurrencyDataPlatformCurrencyCurrencyDatum" json:"TransactionCurrencyDataPlatformCurrencyCurrencyDatum" toml:"TransactionCurrencyDataPlatformCurrencyCurrencyDatum" yaml:"TransactionCurrencyDataPlatformCurrencyCurrencyDatum"`
	QuotationDataPlatformQuotationsAddressData               DataPlatformQuotationsAddressDatumSlice      `boil:"QuotationDataPlatformQuotationsAddressData" json:"QuotationDataPlatformQuotationsAddressData" toml:"QuotationDataPlatformQuotationsAddressData" yaml:"QuotationDataPlatformQuotationsAddressData"`
	QuotationDataPlatformQuotationsHeaderDocData             DataPlatformQuotationsHeaderDocDatumSlice    `boil:"QuotationDataPlatformQuotationsHeaderDocData" json:"QuotationDataPlatformQuotationsHeaderDocData" toml:"QuotationDataPlatformQuotationsHeaderDocData" yaml:"QuotationDataPlatformQuotationsHeaderDocData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformQuotationsHeaderDatumR) NewStruct() *dataPlatformQuotationsHeaderDatumR {
	return &dataPlatformQuotationsHeaderDatumR{}
}

func (r *dataPlatformQuotationsHeaderDatumR) GetBillFromCountryDataPlatformCountryCountryDatum() *DataPlatformCountryCountryDatum {
	if r == nil {
		return nil
	}
	return r.BillFromCountryDataPlatformCountryCountryDatum
}

func (r *dataPlatformQuotationsHeaderDatumR) GetBillToCountryDataPlatformCountryCountryDatum() *DataPlatformCountryCountryDatum {
	if r == nil {
		return nil
	}
	return r.BillToCountryDataPlatformCountryCountryDatum
}

func (r *dataPlatformQuotationsHeaderDatumR) GetIncoterm() *DataPlatformIncotermsIncotermsDatum {
	if r == nil {
		return nil
	}
	return r.Incoterm
}

func (r *dataPlatformQuotationsHeaderDatumR) GetPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum() *DataPlatformPaymentMethodPaymentMethodDatum {
	if r == nil {
		return nil
	}
	return r.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum
}

func (r *dataPlatformQuotationsHeaderDatumR) GetPaymentTerm() *DataPlatformPaymentTermsPaymentTermsDatum {
	if r == nil {
		return nil
	}
	return r.PaymentTerm
}

func (r *dataPlatformQuotationsHeaderDatumR) GetBillFromPartyDataPlatformSCRBillingRelationDatum() *DataPlatformSCRBillingRelationDatum {
	if r == nil {
		return nil
	}
	return r.BillFromPartyDataPlatformSCRBillingRelationDatum
}

func (r *dataPlatformQuotationsHeaderDatumR) GetBuyerDataPlatformSCRGeneralDatum() *DataPlatformSCRGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRGeneralDatum
}

func (r *dataPlatformQuotationsHeaderDatumR) GetBillFromPartyDataPlatformSCRPaymentRelationDatum() *DataPlatformSCRPaymentRelationDatum {
	if r == nil {
		return nil
	}
	return r.BillFromPartyDataPlatformSCRPaymentRelationDatum
}

func (r *dataPlatformQuotationsHeaderDatumR) GetTransactionCurrencyDataPlatformCurrencyCurrencyDatum() *DataPlatformCurrencyCurrencyDatum {
	if r == nil {
		return nil
	}
	return r.TransactionCurrencyDataPlatformCurrencyCurrencyDatum
}

func (r *dataPlatformQuotationsHeaderDatumR) GetQuotationDataPlatformQuotationsAddressData() DataPlatformQuotationsAddressDatumSlice {
	if r == nil {
		return nil
	}
	return r.QuotationDataPlatformQuotationsAddressData
}

func (r *dataPlatformQuotationsHeaderDatumR) GetQuotationDataPlatformQuotationsHeaderDocData() DataPlatformQuotationsHeaderDocDatumSlice {
	if r == nil {
		return nil
	}
	return r.QuotationDataPlatformQuotationsHeaderDocData
}

// dataPlatformQuotationsHeaderDatumL is where Load methods for each relationship are stored.
type dataPlatformQuotationsHeaderDatumL struct{}

var (
	dataPlatformQuotationsHeaderDatumAllColumns            = []string{"Quotation", "QuotationDate", "QuotationType", "QuotationStatus", "SupplyChainRelationshipID", "SupplyChainRelationshipBillingID", "SupplyChainRelationshipPaymentID", "Buyer", "Seller", "BillToParty", "BillFromParty", "BillToCountry", "BillFromCountry", "Payer", "Payee", "ContractType", "BindingPeriodValidityStartDate", "BindingPeriodValidityEndDate", "OrderValidityStartDate", "OrderValidityEndDate", "InvoicePeriodStartDate", "InvoicePeriodEndDate", "TotalNetAmount", "TotalTaxAmount", "TotalGrossAmount", "HeaderOrderIsDefined", "TransactionCurrency", "PricingDate", "PriceDetnExchangeRate", "RequestedDeliveryDate", "OrderProbabilityInPercent", "ExpectedOrderNetAmount", "Incoterms", "PaymentTerms", "PaymentMethod", "ReferenceDocument", "AccountAssignmentGroup", "AccountingExchangeRate", "InvoiceDocumentDate", "IsExportImport", "HeaderText", "HeaderIsClosed", "HeaderBlockStatus", "CreationDate", "LastChangeDate", "IsCancelled", "IsMarkedForDeletion"}
	dataPlatformQuotationsHeaderDatumColumnsWithoutDefault = []string{"Quotation", "QuotationDate", "QuotationType", "QuotationStatus", "SupplyChainRelationshipID", "SupplyChainRelationshipBillingID", "SupplyChainRelationshipPaymentID", "Buyer", "Seller", "BillToParty", "BillFromParty", "BillToCountry", "BillFromCountry", "Payer", "Payee", "ContractType", "BindingPeriodValidityStartDate", "BindingPeriodValidityEndDate", "OrderValidityStartDate", "OrderValidityEndDate", "InvoicePeriodStartDate", "InvoicePeriodEndDate", "TotalNetAmount", "TotalTaxAmount", "TotalGrossAmount", "HeaderOrderIsDefined", "TransactionCurrency", "PricingDate", "PriceDetnExchangeRate", "RequestedDeliveryDate", "OrderProbabilityInPercent", "ExpectedOrderNetAmount", "Incoterms", "PaymentTerms", "PaymentMethod", "ReferenceDocument", "AccountAssignmentGroup", "AccountingExchangeRate", "InvoiceDocumentDate", "IsExportImport", "HeaderText", "HeaderIsClosed", "HeaderBlockStatus", "CreationDate", "LastChangeDate", "IsCancelled", "IsMarkedForDeletion"}
	dataPlatformQuotationsHeaderDatumColumnsWithDefault    = []string{}
	dataPlatformQuotationsHeaderDatumPrimaryKeyColumns     = []string{"Quotation"}
	dataPlatformQuotationsHeaderDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformQuotationsHeaderDatumSlice is an alias for a slice of pointers to DataPlatformQuotationsHeaderDatum.
	// This should almost always be used instead of []DataPlatformQuotationsHeaderDatum.
	DataPlatformQuotationsHeaderDatumSlice []*DataPlatformQuotationsHeaderDatum

	dataPlatformQuotationsHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformQuotationsHeaderDatumType                 = reflect.TypeOf(&DataPlatformQuotationsHeaderDatum{})
	dataPlatformQuotationsHeaderDatumMapping              = queries.MakeStructMapping(dataPlatformQuotationsHeaderDatumType)
	dataPlatformQuotationsHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformQuotationsHeaderDatumType, dataPlatformQuotationsHeaderDatumMapping, dataPlatformQuotationsHeaderDatumPrimaryKeyColumns)
	dataPlatformQuotationsHeaderDatumInsertCacheMut       sync.RWMutex
	dataPlatformQuotationsHeaderDatumInsertCache          = make(map[string]insertCache)
	dataPlatformQuotationsHeaderDatumUpdateCacheMut       sync.RWMutex
	dataPlatformQuotationsHeaderDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformQuotationsHeaderDatumUpsertCacheMut       sync.RWMutex
	dataPlatformQuotationsHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformQuotationsHeaderDatum record from the query.
func (q dataPlatformQuotationsHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformQuotationsHeaderDatum, error) {
	o := &DataPlatformQuotationsHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_quotations_header_data")
	}

	return o, nil
}

// All returns all DataPlatformQuotationsHeaderDatum records from the query.
func (q dataPlatformQuotationsHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformQuotationsHeaderDatumSlice, error) {
	var o []*DataPlatformQuotationsHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformQuotationsHeaderDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformQuotationsHeaderDatum records in the query.
func (q dataPlatformQuotationsHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_quotations_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformQuotationsHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_quotations_header_data exists")
	}

	return count > 0, nil
}

// BillFromCountryDataPlatformCountryCountryDatum pointed to by the foreign key.
func (o *DataPlatformQuotationsHeaderDatum) BillFromCountryDataPlatformCountryCountryDatum(mods ...qm.QueryMod) dataPlatformCountryCountryDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Country` = ?", o.BillFromCountry),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformCountryCountryData(queryMods...)
}

// BillToCountryDataPlatformCountryCountryDatum pointed to by the foreign key.
func (o *DataPlatformQuotationsHeaderDatum) BillToCountryDataPlatformCountryCountryDatum(mods ...qm.QueryMod) dataPlatformCountryCountryDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Country` = ?", o.BillToCountry),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformCountryCountryData(queryMods...)
}

// Incoterm pointed to by the foreign key.
func (o *DataPlatformQuotationsHeaderDatum) Incoterm(mods ...qm.QueryMod) dataPlatformIncotermsIncotermsDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Incoterms` = ?", o.Incoterms),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformIncotermsIncotermsData(queryMods...)
}

// PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum pointed to by the foreign key.
func (o *DataPlatformQuotationsHeaderDatum) PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum(mods ...qm.QueryMod) dataPlatformPaymentMethodPaymentMethodDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PaymentMethod` = ?", o.PaymentMethod),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPaymentMethodPaymentMethodData(queryMods...)
}

// PaymentTerm pointed to by the foreign key.
func (o *DataPlatformQuotationsHeaderDatum) PaymentTerm(mods ...qm.QueryMod) dataPlatformPaymentTermsPaymentTermsDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PaymentTerms` = ?", o.PaymentTerms),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPaymentTermsPaymentTermsData(queryMods...)
}

// BillFromPartyDataPlatformSCRBillingRelationDatum pointed to by the foreign key.
func (o *DataPlatformQuotationsHeaderDatum) BillFromPartyDataPlatformSCRBillingRelationDatum(mods ...qm.QueryMod) dataPlatformSCRBillingRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BillFromParty` = ?", o.BillFromParty),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRBillingRelationData(queryMods...)
}

// BuyerDataPlatformSCRGeneralDatum pointed to by the foreign key.
func (o *DataPlatformQuotationsHeaderDatum) BuyerDataPlatformSCRGeneralDatum(mods ...qm.QueryMod) dataPlatformSCRGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRGeneralData(queryMods...)
}

// BillFromPartyDataPlatformSCRPaymentRelationDatum pointed to by the foreign key.
func (o *DataPlatformQuotationsHeaderDatum) BillFromPartyDataPlatformSCRPaymentRelationDatum(mods ...qm.QueryMod) dataPlatformSCRPaymentRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BillFromParty` = ?", o.BillFromParty),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRPaymentRelationData(queryMods...)
}

// TransactionCurrencyDataPlatformCurrencyCurrencyDatum pointed to by the foreign key.
func (o *DataPlatformQuotationsHeaderDatum) TransactionCurrencyDataPlatformCurrencyCurrencyDatum(mods ...qm.QueryMod) dataPlatformCurrencyCurrencyDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Currency` = ?", o.TransactionCurrency),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformCurrencyCurrencyData(queryMods...)
}

// QuotationDataPlatformQuotationsAddressData retrieves all the data_platform_quotations_address_datum's DataPlatformQuotationsAddressData with an executor via Quotation column.
func (o *DataPlatformQuotationsHeaderDatum) QuotationDataPlatformQuotationsAddressData(mods ...qm.QueryMod) dataPlatformQuotationsAddressDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_quotations_address_data`.`Quotation`=?", o.Quotation),
	)

	return DataPlatformQuotationsAddressData(queryMods...)
}

// QuotationDataPlatformQuotationsHeaderDocData retrieves all the data_platform_quotations_header_doc_datum's DataPlatformQuotationsHeaderDocData with an executor via Quotation column.
func (o *DataPlatformQuotationsHeaderDatum) QuotationDataPlatformQuotationsHeaderDocData(mods ...qm.QueryMod) dataPlatformQuotationsHeaderDocDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_quotations_header_doc_data`.`Quotation`=?", o.Quotation),
	)

	return DataPlatformQuotationsHeaderDocData(queryMods...)
}

// LoadBillFromCountryDataPlatformCountryCountryDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformQuotationsHeaderDatumL) LoadBillFromCountryDataPlatformCountryCountryDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuotationsHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuotationsHeaderDatum
	var object *DataPlatformQuotationsHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuotationsHeaderDatum.(*DataPlatformQuotationsHeaderDatum)
		if !ok {
			object = new(DataPlatformQuotationsHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuotationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuotationsHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuotationsHeaderDatum.(*[]*DataPlatformQuotationsHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuotationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuotationsHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuotationsHeaderDatumR{}
		}
		if !queries.IsNil(object.BillFromCountry) {
			args = append(args, object.BillFromCountry)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuotationsHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BillFromCountry) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BillFromCountry) {
				args = append(args, obj.BillFromCountry)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_country_country_data`),
		qm.WhereIn(`data_platform_country_country_data.Country in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformCountryCountryDatum")
	}

	var resultSlice []*DataPlatformCountryCountryDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformCountryCountryDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_country_country_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_country_country_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillFromCountryDataPlatformCountryCountryDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BillFromCountry, foreign.Country) {
				local.R.BillFromCountryDataPlatformCountryCountryDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBillToCountryDataPlatformCountryCountryDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformQuotationsHeaderDatumL) LoadBillToCountryDataPlatformCountryCountryDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuotationsHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuotationsHeaderDatum
	var object *DataPlatformQuotationsHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuotationsHeaderDatum.(*DataPlatformQuotationsHeaderDatum)
		if !ok {
			object = new(DataPlatformQuotationsHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuotationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuotationsHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuotationsHeaderDatum.(*[]*DataPlatformQuotationsHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuotationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuotationsHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuotationsHeaderDatumR{}
		}
		if !queries.IsNil(object.BillToCountry) {
			args = append(args, object.BillToCountry)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuotationsHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BillToCountry) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BillToCountry) {
				args = append(args, obj.BillToCountry)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_country_country_data`),
		qm.WhereIn(`data_platform_country_country_data.Country in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformCountryCountryDatum")
	}

	var resultSlice []*DataPlatformCountryCountryDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformCountryCountryDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_country_country_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_country_country_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillToCountryDataPlatformCountryCountryDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BillToCountry, foreign.Country) {
				local.R.BillToCountryDataPlatformCountryCountryDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadIncoterm allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformQuotationsHeaderDatumL) LoadIncoterm(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuotationsHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuotationsHeaderDatum
	var object *DataPlatformQuotationsHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuotationsHeaderDatum.(*DataPlatformQuotationsHeaderDatum)
		if !ok {
			object = new(DataPlatformQuotationsHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuotationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuotationsHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuotationsHeaderDatum.(*[]*DataPlatformQuotationsHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuotationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuotationsHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuotationsHeaderDatumR{}
		}
		if !queries.IsNil(object.Incoterms) {
			args = append(args, object.Incoterms)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuotationsHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Incoterms) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Incoterms) {
				args = append(args, obj.Incoterms)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_incoterms_incoterms_data`),
		qm.WhereIn(`data_platform_incoterms_incoterms_data.Incoterms in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformIncotermsIncotermsDatum")
	}

	var resultSlice []*DataPlatformIncotermsIncotermsDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformIncotermsIncotermsDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_incoterms_incoterms_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_incoterms_incoterms_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Incoterm = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Incoterms, foreign.Incoterms) {
				local.R.Incoterm = foreign
				break
			}
		}
	}

	return nil
}

// LoadPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformQuotationsHeaderDatumL) LoadPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuotationsHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuotationsHeaderDatum
	var object *DataPlatformQuotationsHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuotationsHeaderDatum.(*DataPlatformQuotationsHeaderDatum)
		if !ok {
			object = new(DataPlatformQuotationsHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuotationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuotationsHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuotationsHeaderDatum.(*[]*DataPlatformQuotationsHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuotationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuotationsHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuotationsHeaderDatumR{}
		}
		args = append(args, object.PaymentMethod)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuotationsHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.PaymentMethod {
					continue Outer
				}
			}

			args = append(args, obj.PaymentMethod)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_payment_method_payment_method_data`),
		qm.WhereIn(`data_platform_payment_method_payment_method_data.PaymentMethod in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPaymentMethodPaymentMethodDatum")
	}

	var resultSlice []*DataPlatformPaymentMethodPaymentMethodDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPaymentMethodPaymentMethodDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_payment_method_payment_method_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_payment_method_payment_method_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PaymentMethod == foreign.PaymentMethod {
				local.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadPaymentTerm allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformQuotationsHeaderDatumL) LoadPaymentTerm(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuotationsHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuotationsHeaderDatum
	var object *DataPlatformQuotationsHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuotationsHeaderDatum.(*DataPlatformQuotationsHeaderDatum)
		if !ok {
			object = new(DataPlatformQuotationsHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuotationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuotationsHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuotationsHeaderDatum.(*[]*DataPlatformQuotationsHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuotationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuotationsHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuotationsHeaderDatumR{}
		}
		args = append(args, object.PaymentTerms)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuotationsHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.PaymentTerms {
					continue Outer
				}
			}

			args = append(args, obj.PaymentTerms)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_payment_terms_payment_terms_data`),
		qm.WhereIn(`data_platform_payment_terms_payment_terms_data.PaymentTerms in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPaymentTermsPaymentTermsDatum")
	}

	var resultSlice []*DataPlatformPaymentTermsPaymentTermsDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPaymentTermsPaymentTermsDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_payment_terms_payment_terms_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_payment_terms_payment_terms_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PaymentTerm = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PaymentTerms == foreign.PaymentTerms {
				local.R.PaymentTerm = foreign
				break
			}
		}
	}

	return nil
}

// LoadBillFromPartyDataPlatformSCRBillingRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformQuotationsHeaderDatumL) LoadBillFromPartyDataPlatformSCRBillingRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuotationsHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuotationsHeaderDatum
	var object *DataPlatformQuotationsHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuotationsHeaderDatum.(*DataPlatformQuotationsHeaderDatum)
		if !ok {
			object = new(DataPlatformQuotationsHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuotationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuotationsHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuotationsHeaderDatum.(*[]*DataPlatformQuotationsHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuotationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuotationsHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuotationsHeaderDatumR{}
		}
		if !queries.IsNil(object.BillFromParty) {
			args = append(args, object.BillFromParty)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuotationsHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BillFromParty) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BillFromParty) {
				args = append(args, obj.BillFromParty)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_billing_relation_data`),
		qm.WhereIn(`data_platform_scr_billing_relation_data.BillFromParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRBillingRelationDatum")
	}

	var resultSlice []*DataPlatformSCRBillingRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRBillingRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_billing_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_billing_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillFromPartyDataPlatformSCRBillingRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BillFromParty, foreign.BillFromParty) {
				local.R.BillFromPartyDataPlatformSCRBillingRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformQuotationsHeaderDatumL) LoadBuyerDataPlatformSCRGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuotationsHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuotationsHeaderDatum
	var object *DataPlatformQuotationsHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuotationsHeaderDatum.(*DataPlatformQuotationsHeaderDatum)
		if !ok {
			object = new(DataPlatformQuotationsHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuotationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuotationsHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuotationsHeaderDatum.(*[]*DataPlatformQuotationsHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuotationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuotationsHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuotationsHeaderDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuotationsHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_general_data`),
		qm.WhereIn(`data_platform_scr_general_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRGeneralDatum")
	}

	var resultSlice []*DataPlatformSCRGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBillFromPartyDataPlatformSCRPaymentRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformQuotationsHeaderDatumL) LoadBillFromPartyDataPlatformSCRPaymentRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuotationsHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuotationsHeaderDatum
	var object *DataPlatformQuotationsHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuotationsHeaderDatum.(*DataPlatformQuotationsHeaderDatum)
		if !ok {
			object = new(DataPlatformQuotationsHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuotationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuotationsHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuotationsHeaderDatum.(*[]*DataPlatformQuotationsHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuotationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuotationsHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuotationsHeaderDatumR{}
		}
		if !queries.IsNil(object.BillFromParty) {
			args = append(args, object.BillFromParty)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuotationsHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BillFromParty) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BillFromParty) {
				args = append(args, obj.BillFromParty)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_payment_relation_data`),
		qm.WhereIn(`data_platform_scr_payment_relation_data.BillFromParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRPaymentRelationDatum")
	}

	var resultSlice []*DataPlatformSCRPaymentRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRPaymentRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_payment_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_payment_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillFromPartyDataPlatformSCRPaymentRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BillFromParty, foreign.BillFromParty) {
				local.R.BillFromPartyDataPlatformSCRPaymentRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadTransactionCurrencyDataPlatformCurrencyCurrencyDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformQuotationsHeaderDatumL) LoadTransactionCurrencyDataPlatformCurrencyCurrencyDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuotationsHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuotationsHeaderDatum
	var object *DataPlatformQuotationsHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuotationsHeaderDatum.(*DataPlatformQuotationsHeaderDatum)
		if !ok {
			object = new(DataPlatformQuotationsHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuotationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuotationsHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuotationsHeaderDatum.(*[]*DataPlatformQuotationsHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuotationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuotationsHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuotationsHeaderDatumR{}
		}
		args = append(args, object.TransactionCurrency)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuotationsHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.TransactionCurrency {
					continue Outer
				}
			}

			args = append(args, obj.TransactionCurrency)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_currency_currency_data`),
		qm.WhereIn(`data_platform_currency_currency_data.Currency in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformCurrencyCurrencyDatum")
	}

	var resultSlice []*DataPlatformCurrencyCurrencyDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformCurrencyCurrencyDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_currency_currency_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_currency_currency_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TransactionCurrencyDataPlatformCurrencyCurrencyDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TransactionCurrency == foreign.Currency {
				local.R.TransactionCurrencyDataPlatformCurrencyCurrencyDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadQuotationDataPlatformQuotationsAddressData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuotationsHeaderDatumL) LoadQuotationDataPlatformQuotationsAddressData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuotationsHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuotationsHeaderDatum
	var object *DataPlatformQuotationsHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuotationsHeaderDatum.(*DataPlatformQuotationsHeaderDatum)
		if !ok {
			object = new(DataPlatformQuotationsHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuotationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuotationsHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuotationsHeaderDatum.(*[]*DataPlatformQuotationsHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuotationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuotationsHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuotationsHeaderDatumR{}
		}
		args = append(args, object.Quotation)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuotationsHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.Quotation {
					continue Outer
				}
			}

			args = append(args, obj.Quotation)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quotations_address_data`),
		qm.WhereIn(`data_platform_quotations_address_data.Quotation in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_quotations_address_data")
	}

	var resultSlice []*DataPlatformQuotationsAddressDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_quotations_address_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_quotations_address_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quotations_address_data")
	}

	if singular {
		object.R.QuotationDataPlatformQuotationsAddressData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Quotation == foreign.Quotation {
				local.R.QuotationDataPlatformQuotationsAddressData = append(local.R.QuotationDataPlatformQuotationsAddressData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadQuotationDataPlatformQuotationsHeaderDocData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuotationsHeaderDatumL) LoadQuotationDataPlatformQuotationsHeaderDocData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuotationsHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuotationsHeaderDatum
	var object *DataPlatformQuotationsHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuotationsHeaderDatum.(*DataPlatformQuotationsHeaderDatum)
		if !ok {
			object = new(DataPlatformQuotationsHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuotationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuotationsHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuotationsHeaderDatum.(*[]*DataPlatformQuotationsHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuotationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuotationsHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuotationsHeaderDatumR{}
		}
		args = append(args, object.Quotation)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuotationsHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.Quotation {
					continue Outer
				}
			}

			args = append(args, obj.Quotation)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quotations_header_doc_data`),
		qm.WhereIn(`data_platform_quotations_header_doc_data.Quotation in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_quotations_header_doc_data")
	}

	var resultSlice []*DataPlatformQuotationsHeaderDocDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_quotations_header_doc_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_quotations_header_doc_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quotations_header_doc_data")
	}

	if singular {
		object.R.QuotationDataPlatformQuotationsHeaderDocData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Quotation == foreign.Quotation {
				local.R.QuotationDataPlatformQuotationsHeaderDocData = append(local.R.QuotationDataPlatformQuotationsHeaderDocData, foreign)
				break
			}
		}
	}

	return nil
}

// SetBillFromCountryDataPlatformCountryCountryDatum of the dataPlatformQuotationsHeaderDatum to the related item.
// Sets o.R.BillFromCountryDataPlatformCountryCountryDatum to related.
func (o *DataPlatformQuotationsHeaderDatum) SetBillFromCountryDataPlatformCountryCountryDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformCountryCountryDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_quotations_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BillFromCountry"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Country, o.Quotation}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BillFromCountry, related.Country)
	if o.R == nil {
		o.R = &dataPlatformQuotationsHeaderDatumR{
			BillFromCountryDataPlatformCountryCountryDatum: related,
		}
	} else {
		o.R.BillFromCountryDataPlatformCountryCountryDatum = related
	}

	return nil
}

// RemoveBillFromCountryDataPlatformCountryCountryDatum relationship.
// Sets o.R.BillFromCountryDataPlatformCountryCountryDatum to nil.
func (o *DataPlatformQuotationsHeaderDatum) RemoveBillFromCountryDataPlatformCountryCountryDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformCountryCountryDatum) error {
	var err error

	queries.SetScanner(&o.BillFromCountry, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("BillFromCountry")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.BillFromCountryDataPlatformCountryCountryDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetBillToCountryDataPlatformCountryCountryDatum of the dataPlatformQuotationsHeaderDatum to the related item.
// Sets o.R.BillToCountryDataPlatformCountryCountryDatum to related.
func (o *DataPlatformQuotationsHeaderDatum) SetBillToCountryDataPlatformCountryCountryDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformCountryCountryDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_quotations_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BillToCountry"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Country, o.Quotation}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BillToCountry, related.Country)
	if o.R == nil {
		o.R = &dataPlatformQuotationsHeaderDatumR{
			BillToCountryDataPlatformCountryCountryDatum: related,
		}
	} else {
		o.R.BillToCountryDataPlatformCountryCountryDatum = related
	}

	return nil
}

// RemoveBillToCountryDataPlatformCountryCountryDatum relationship.
// Sets o.R.BillToCountryDataPlatformCountryCountryDatum to nil.
func (o *DataPlatformQuotationsHeaderDatum) RemoveBillToCountryDataPlatformCountryCountryDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformCountryCountryDatum) error {
	var err error

	queries.SetScanner(&o.BillToCountry, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("BillToCountry")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.BillToCountryDataPlatformCountryCountryDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetIncoterm of the dataPlatformQuotationsHeaderDatum to the related item.
// Sets o.R.Incoterm to related.
func (o *DataPlatformQuotationsHeaderDatum) SetIncoterm(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformIncotermsIncotermsDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_quotations_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Incoterms"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Incoterms, o.Quotation}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Incoterms, related.Incoterms)
	if o.R == nil {
		o.R = &dataPlatformQuotationsHeaderDatumR{
			Incoterm: related,
		}
	} else {
		o.R.Incoterm = related
	}

	return nil
}

// RemoveIncoterm relationship.
// Sets o.R.Incoterm to nil.
func (o *DataPlatformQuotationsHeaderDatum) RemoveIncoterm(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformIncotermsIncotermsDatum) error {
	var err error

	queries.SetScanner(&o.Incoterms, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("Incoterms")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Incoterm = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum of the dataPlatformQuotationsHeaderDatum to the related item.
// Sets o.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum to related.
func (o *DataPlatformQuotationsHeaderDatum) SetPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPaymentMethodPaymentMethodDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_quotations_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PaymentMethod"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PaymentMethod, o.Quotation}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PaymentMethod = related.PaymentMethod
	if o.R == nil {
		o.R = &dataPlatformQuotationsHeaderDatumR{
			PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum: related,
		}
	} else {
		o.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = related
	}

	return nil
}

// SetPaymentTerm of the dataPlatformQuotationsHeaderDatum to the related item.
// Sets o.R.PaymentTerm to related.
func (o *DataPlatformQuotationsHeaderDatum) SetPaymentTerm(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPaymentTermsPaymentTermsDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_quotations_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PaymentTerms"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PaymentTerms, o.Quotation}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PaymentTerms = related.PaymentTerms
	if o.R == nil {
		o.R = &dataPlatformQuotationsHeaderDatumR{
			PaymentTerm: related,
		}
	} else {
		o.R.PaymentTerm = related
	}

	return nil
}

// SetBillFromPartyDataPlatformSCRBillingRelationDatum of the dataPlatformQuotationsHeaderDatum to the related item.
// Sets o.R.BillFromPartyDataPlatformSCRBillingRelationDatum to related.
func (o *DataPlatformQuotationsHeaderDatum) SetBillFromPartyDataPlatformSCRBillingRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRBillingRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_quotations_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BillFromParty"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BillFromParty, o.Quotation}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BillFromParty, related.BillFromParty)
	if o.R == nil {
		o.R = &dataPlatformQuotationsHeaderDatumR{
			BillFromPartyDataPlatformSCRBillingRelationDatum: related,
		}
	} else {
		o.R.BillFromPartyDataPlatformSCRBillingRelationDatum = related
	}

	return nil
}

// RemoveBillFromPartyDataPlatformSCRBillingRelationDatum relationship.
// Sets o.R.BillFromPartyDataPlatformSCRBillingRelationDatum to nil.
func (o *DataPlatformQuotationsHeaderDatum) RemoveBillFromPartyDataPlatformSCRBillingRelationDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformSCRBillingRelationDatum) error {
	var err error

	queries.SetScanner(&o.BillFromParty, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("BillFromParty")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.BillFromPartyDataPlatformSCRBillingRelationDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetBuyerDataPlatformSCRGeneralDatum of the dataPlatformQuotationsHeaderDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRGeneralDatum to related.
func (o *DataPlatformQuotationsHeaderDatum) SetBuyerDataPlatformSCRGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_quotations_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.Quotation}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformQuotationsHeaderDatumR{
			BuyerDataPlatformSCRGeneralDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRGeneralDatum = related
	}

	return nil
}

// SetBillFromPartyDataPlatformSCRPaymentRelationDatum of the dataPlatformQuotationsHeaderDatum to the related item.
// Sets o.R.BillFromPartyDataPlatformSCRPaymentRelationDatum to related.
func (o *DataPlatformQuotationsHeaderDatum) SetBillFromPartyDataPlatformSCRPaymentRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRPaymentRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_quotations_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BillFromParty"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BillFromParty, o.Quotation}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BillFromParty, related.BillFromParty)
	if o.R == nil {
		o.R = &dataPlatformQuotationsHeaderDatumR{
			BillFromPartyDataPlatformSCRPaymentRelationDatum: related,
		}
	} else {
		o.R.BillFromPartyDataPlatformSCRPaymentRelationDatum = related
	}

	return nil
}

// RemoveBillFromPartyDataPlatformSCRPaymentRelationDatum relationship.
// Sets o.R.BillFromPartyDataPlatformSCRPaymentRelationDatum to nil.
func (o *DataPlatformQuotationsHeaderDatum) RemoveBillFromPartyDataPlatformSCRPaymentRelationDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformSCRPaymentRelationDatum) error {
	var err error

	queries.SetScanner(&o.BillFromParty, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("BillFromParty")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.BillFromPartyDataPlatformSCRPaymentRelationDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetTransactionCurrencyDataPlatformCurrencyCurrencyDatum of the dataPlatformQuotationsHeaderDatum to the related item.
// Sets o.R.TransactionCurrencyDataPlatformCurrencyCurrencyDatum to related.
func (o *DataPlatformQuotationsHeaderDatum) SetTransactionCurrencyDataPlatformCurrencyCurrencyDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformCurrencyCurrencyDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_quotations_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"TransactionCurrency"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Currency, o.Quotation}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TransactionCurrency = related.Currency
	if o.R == nil {
		o.R = &dataPlatformQuotationsHeaderDatumR{
			TransactionCurrencyDataPlatformCurrencyCurrencyDatum: related,
		}
	} else {
		o.R.TransactionCurrencyDataPlatformCurrencyCurrencyDatum = related
	}

	return nil
}

// AddQuotationDataPlatformQuotationsAddressData adds the given related objects to the existing relationships
// of the data_platform_quotations_header_datum, optionally inserting them as new records.
// Appends related to o.R.QuotationDataPlatformQuotationsAddressData.
func (o *DataPlatformQuotationsHeaderDatum) AddQuotationDataPlatformQuotationsAddressData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuotationsAddressDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Quotation = o.Quotation
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_quotations_address_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Quotation"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsAddressDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Quotation, rel.Quotation, rel.AddressID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Quotation = o.Quotation
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuotationsHeaderDatumR{
			QuotationDataPlatformQuotationsAddressData: related,
		}
	} else {
		o.R.QuotationDataPlatformQuotationsAddressData = append(o.R.QuotationDataPlatformQuotationsAddressData, related...)
	}

	return nil
}

// AddQuotationDataPlatformQuotationsHeaderDocData adds the given related objects to the existing relationships
// of the data_platform_quotations_header_datum, optionally inserting them as new records.
// Appends related to o.R.QuotationDataPlatformQuotationsHeaderDocData.
func (o *DataPlatformQuotationsHeaderDatum) AddQuotationDataPlatformQuotationsHeaderDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuotationsHeaderDocDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Quotation = o.Quotation
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_quotations_header_doc_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Quotation"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsHeaderDocDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Quotation, rel.Quotation, rel.DocType, rel.DocVersionID, rel.DocID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Quotation = o.Quotation
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuotationsHeaderDatumR{
			QuotationDataPlatformQuotationsHeaderDocData: related,
		}
	} else {
		o.R.QuotationDataPlatformQuotationsHeaderDocData = append(o.R.QuotationDataPlatformQuotationsHeaderDocData, related...)
	}

	return nil
}

// DataPlatformQuotationsHeaderData retrieves all the records using an executor.
func DataPlatformQuotationsHeaderData(mods ...qm.QueryMod) dataPlatformQuotationsHeaderDatumQuery {
	mods = append(mods, qm.From("`data_platform_quotations_header_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_quotations_header_data`.*"})
	}

	return dataPlatformQuotationsHeaderDatumQuery{q}
}

// FindDataPlatformQuotationsHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformQuotationsHeaderDatum(ctx context.Context, exec boil.ContextExecutor, quotation int, selectCols ...string) (*DataPlatformQuotationsHeaderDatum, error) {
	dataPlatformQuotationsHeaderDatumObj := &DataPlatformQuotationsHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_quotations_header_data` where `Quotation`=?", sel,
	)

	q := queries.Raw(query, quotation)

	err := q.Bind(ctx, exec, dataPlatformQuotationsHeaderDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_quotations_header_data")
	}

	return dataPlatformQuotationsHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformQuotationsHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_quotations_header_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformQuotationsHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformQuotationsHeaderDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformQuotationsHeaderDatumInsertCache[key]
	dataPlatformQuotationsHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformQuotationsHeaderDatumAllColumns,
			dataPlatformQuotationsHeaderDatumColumnsWithDefault,
			dataPlatformQuotationsHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformQuotationsHeaderDatumType, dataPlatformQuotationsHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformQuotationsHeaderDatumType, dataPlatformQuotationsHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_quotations_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_quotations_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_quotations_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_quotations_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Quotation,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_quotations_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformQuotationsHeaderDatumInsertCacheMut.Lock()
		dataPlatformQuotationsHeaderDatumInsertCache[key] = cache
		dataPlatformQuotationsHeaderDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformQuotationsHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformQuotationsHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformQuotationsHeaderDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformQuotationsHeaderDatumUpdateCache[key]
	dataPlatformQuotationsHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformQuotationsHeaderDatumAllColumns,
			dataPlatformQuotationsHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_quotations_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_quotations_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformQuotationsHeaderDatumType, dataPlatformQuotationsHeaderDatumMapping, append(wl, dataPlatformQuotationsHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_quotations_header_data row")
	}

	if !cached {
		dataPlatformQuotationsHeaderDatumUpdateCacheMut.Lock()
		dataPlatformQuotationsHeaderDatumUpdateCache[key] = cache
		dataPlatformQuotationsHeaderDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformQuotationsHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_quotations_header_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformQuotationsHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformQuotationsHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_quotations_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformQuotationsHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformQuotationsHeaderDatum slice")
	}

	return nil
}

var mySQLDataPlatformQuotationsHeaderDatumUniqueColumns = []string{
	"Quotation",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformQuotationsHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_quotations_header_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformQuotationsHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformQuotationsHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformQuotationsHeaderDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformQuotationsHeaderDatumUpsertCache[key]
	dataPlatformQuotationsHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformQuotationsHeaderDatumAllColumns,
			dataPlatformQuotationsHeaderDatumColumnsWithDefault,
			dataPlatformQuotationsHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformQuotationsHeaderDatumAllColumns,
			dataPlatformQuotationsHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_quotations_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_quotations_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_quotations_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformQuotationsHeaderDatumType, dataPlatformQuotationsHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformQuotationsHeaderDatumType, dataPlatformQuotationsHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_quotations_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformQuotationsHeaderDatumType, dataPlatformQuotationsHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_quotations_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_quotations_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformQuotationsHeaderDatumUpsertCacheMut.Lock()
		dataPlatformQuotationsHeaderDatumUpsertCache[key] = cache
		dataPlatformQuotationsHeaderDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformQuotationsHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformQuotationsHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformQuotationsHeaderDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformQuotationsHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_quotations_header_data` WHERE `Quotation`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_quotations_header_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformQuotationsHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformQuotationsHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_quotations_header_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformQuotationsHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformQuotationsHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_quotations_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformQuotationsHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformQuotationsHeaderDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformQuotationsHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformQuotationsHeaderDatum(ctx, exec, o.Quotation)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformQuotationsHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformQuotationsHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformQuotationsHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_quotations_header_data`.* FROM `data_platform_quotations_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformQuotationsHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformQuotationsHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformQuotationsHeaderDatumExists checks if the DataPlatformQuotationsHeaderDatum row exists.
func DataPlatformQuotationsHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, quotation int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_quotations_header_data` where `Quotation`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, quotation)
	}
	row := exec.QueryRowContext(ctx, sql, quotation)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_quotations_header_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformQuotationsHeaderDatum row exists.
func (o *DataPlatformQuotationsHeaderDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformQuotationsHeaderDatumExists(ctx, exec, o.Quotation)
}
