// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformFinInstMasterBranchBusinessPartnerDatum is an object representing the database table.
type DataPlatformFinInstMasterBranchBusinessPartnerDatum struct {
	FinInstCountry               string    `boil:"FinInstCountry" json:"FinInstCountry" toml:"FinInstCountry" yaml:"FinInstCountry"`
	FinInstCode                  string    `boil:"FinInstCode" json:"FinInstCode" toml:"FinInstCode" yaml:"FinInstCode"`
	FinInstBranchCode            string    `boil:"FinInstBranchCode" json:"FinInstBranchCode" toml:"FinInstBranchCode" yaml:"FinInstBranchCode"`
	FinInstFullCode              string    `boil:"FinInstFullCode" json:"FinInstFullCode" toml:"FinInstFullCode" yaml:"FinInstFullCode"`
	FinInstBranchBusinessPartner int       `boil:"FinInstBranchBusinessPartner" json:"FinInstBranchBusinessPartner" toml:"FinInstBranchBusinessPartner" yaml:"FinInstBranchBusinessPartner"`
	ValidityEndDate              string    `boil:"ValidityEndDate" json:"ValidityEndDate" toml:"ValidityEndDate" yaml:"ValidityEndDate"`
	ValidityStartDate            string    `boil:"ValidityStartDate" json:"ValidityStartDate" toml:"ValidityStartDate" yaml:"ValidityStartDate"`
	IsMarkedForDeletion          null.Bool `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformFinInstMasterBranchBusinessPartnerDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformFinInstMasterBranchBusinessPartnerDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformFinInstMasterBranchBusinessPartnerDatumColumns = struct {
	FinInstCountry               string
	FinInstCode                  string
	FinInstBranchCode            string
	FinInstFullCode              string
	FinInstBranchBusinessPartner string
	ValidityEndDate              string
	ValidityStartDate            string
	IsMarkedForDeletion          string
}{
	FinInstCountry:               "FinInstCountry",
	FinInstCode:                  "FinInstCode",
	FinInstBranchCode:            "FinInstBranchCode",
	FinInstFullCode:              "FinInstFullCode",
	FinInstBranchBusinessPartner: "FinInstBranchBusinessPartner",
	ValidityEndDate:              "ValidityEndDate",
	ValidityStartDate:            "ValidityStartDate",
	IsMarkedForDeletion:          "IsMarkedForDeletion",
}

var DataPlatformFinInstMasterBranchBusinessPartnerDatumTableColumns = struct {
	FinInstCountry               string
	FinInstCode                  string
	FinInstBranchCode            string
	FinInstFullCode              string
	FinInstBranchBusinessPartner string
	ValidityEndDate              string
	ValidityStartDate            string
	IsMarkedForDeletion          string
}{
	FinInstCountry:               "data_platform_fin_inst_master_branch_business_partner_data.FinInstCountry",
	FinInstCode:                  "data_platform_fin_inst_master_branch_business_partner_data.FinInstCode",
	FinInstBranchCode:            "data_platform_fin_inst_master_branch_business_partner_data.FinInstBranchCode",
	FinInstFullCode:              "data_platform_fin_inst_master_branch_business_partner_data.FinInstFullCode",
	FinInstBranchBusinessPartner: "data_platform_fin_inst_master_branch_business_partner_data.FinInstBranchBusinessPartner",
	ValidityEndDate:              "data_platform_fin_inst_master_branch_business_partner_data.ValidityEndDate",
	ValidityStartDate:            "data_platform_fin_inst_master_branch_business_partner_data.ValidityStartDate",
	IsMarkedForDeletion:          "data_platform_fin_inst_master_branch_business_partner_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformFinInstMasterBranchBusinessPartnerDatumWhere = struct {
	FinInstCountry               whereHelperstring
	FinInstCode                  whereHelperstring
	FinInstBranchCode            whereHelperstring
	FinInstFullCode              whereHelperstring
	FinInstBranchBusinessPartner whereHelperint
	ValidityEndDate              whereHelperstring
	ValidityStartDate            whereHelperstring
	IsMarkedForDeletion          whereHelpernull_Bool
}{
	FinInstCountry:               whereHelperstring{field: "`data_platform_fin_inst_master_branch_business_partner_data`.`FinInstCountry`"},
	FinInstCode:                  whereHelperstring{field: "`data_platform_fin_inst_master_branch_business_partner_data`.`FinInstCode`"},
	FinInstBranchCode:            whereHelperstring{field: "`data_platform_fin_inst_master_branch_business_partner_data`.`FinInstBranchCode`"},
	FinInstFullCode:              whereHelperstring{field: "`data_platform_fin_inst_master_branch_business_partner_data`.`FinInstFullCode`"},
	FinInstBranchBusinessPartner: whereHelperint{field: "`data_platform_fin_inst_master_branch_business_partner_data`.`FinInstBranchBusinessPartner`"},
	ValidityEndDate:              whereHelperstring{field: "`data_platform_fin_inst_master_branch_business_partner_data`.`ValidityEndDate`"},
	ValidityStartDate:            whereHelperstring{field: "`data_platform_fin_inst_master_branch_business_partner_data`.`ValidityStartDate`"},
	IsMarkedForDeletion:          whereHelpernull_Bool{field: "`data_platform_fin_inst_master_branch_business_partner_data`.`IsMarkedForDeletion`"},
}

// DataPlatformFinInstMasterBranchBusinessPartnerDatumRels is where relationship names are stored.
var DataPlatformFinInstMasterBranchBusinessPartnerDatumRels = struct {
}{}

// dataPlatformFinInstMasterBranchBusinessPartnerDatumR is where relationships are stored.
type dataPlatformFinInstMasterBranchBusinessPartnerDatumR struct {
}

// NewStruct creates a new relationship struct
func (*dataPlatformFinInstMasterBranchBusinessPartnerDatumR) NewStruct() *dataPlatformFinInstMasterBranchBusinessPartnerDatumR {
	return &dataPlatformFinInstMasterBranchBusinessPartnerDatumR{}
}

// dataPlatformFinInstMasterBranchBusinessPartnerDatumL is where Load methods for each relationship are stored.
type dataPlatformFinInstMasterBranchBusinessPartnerDatumL struct{}

var (
	dataPlatformFinInstMasterBranchBusinessPartnerDatumAllColumns            = []string{"FinInstCountry", "FinInstCode", "FinInstBranchCode", "FinInstFullCode", "FinInstBranchBusinessPartner", "ValidityEndDate", "ValidityStartDate", "IsMarkedForDeletion"}
	dataPlatformFinInstMasterBranchBusinessPartnerDatumColumnsWithoutDefault = []string{"FinInstCountry", "FinInstCode", "FinInstBranchCode", "FinInstFullCode", "FinInstBranchBusinessPartner", "ValidityEndDate", "ValidityStartDate", "IsMarkedForDeletion"}
	dataPlatformFinInstMasterBranchBusinessPartnerDatumColumnsWithDefault    = []string{}
	dataPlatformFinInstMasterBranchBusinessPartnerDatumPrimaryKeyColumns     = []string{"FinInstCountry", "FinInstCode", "FinInstBranchCode", "FinInstFullCode", "FinInstBranchBusinessPartner", "ValidityEndDate", "ValidityStartDate"}
	dataPlatformFinInstMasterBranchBusinessPartnerDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformFinInstMasterBranchBusinessPartnerDatumSlice is an alias for a slice of pointers to DataPlatformFinInstMasterBranchBusinessPartnerDatum.
	// This should almost always be used instead of []DataPlatformFinInstMasterBranchBusinessPartnerDatum.
	DataPlatformFinInstMasterBranchBusinessPartnerDatumSlice []*DataPlatformFinInstMasterBranchBusinessPartnerDatum

	dataPlatformFinInstMasterBranchBusinessPartnerDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformFinInstMasterBranchBusinessPartnerDatumType                 = reflect.TypeOf(&DataPlatformFinInstMasterBranchBusinessPartnerDatum{})
	dataPlatformFinInstMasterBranchBusinessPartnerDatumMapping              = queries.MakeStructMapping(dataPlatformFinInstMasterBranchBusinessPartnerDatumType)
	dataPlatformFinInstMasterBranchBusinessPartnerDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformFinInstMasterBranchBusinessPartnerDatumType, dataPlatformFinInstMasterBranchBusinessPartnerDatumMapping, dataPlatformFinInstMasterBranchBusinessPartnerDatumPrimaryKeyColumns)
	dataPlatformFinInstMasterBranchBusinessPartnerDatumInsertCacheMut       sync.RWMutex
	dataPlatformFinInstMasterBranchBusinessPartnerDatumInsertCache          = make(map[string]insertCache)
	dataPlatformFinInstMasterBranchBusinessPartnerDatumUpdateCacheMut       sync.RWMutex
	dataPlatformFinInstMasterBranchBusinessPartnerDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformFinInstMasterBranchBusinessPartnerDatumUpsertCacheMut       sync.RWMutex
	dataPlatformFinInstMasterBranchBusinessPartnerDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformFinInstMasterBranchBusinessPartnerDatum record from the query.
func (q dataPlatformFinInstMasterBranchBusinessPartnerDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformFinInstMasterBranchBusinessPartnerDatum, error) {
	o := &DataPlatformFinInstMasterBranchBusinessPartnerDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_fin_inst_master_branch_business_partner_data")
	}

	return o, nil
}

// All returns all DataPlatformFinInstMasterBranchBusinessPartnerDatum records from the query.
func (q dataPlatformFinInstMasterBranchBusinessPartnerDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformFinInstMasterBranchBusinessPartnerDatumSlice, error) {
	var o []*DataPlatformFinInstMasterBranchBusinessPartnerDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformFinInstMasterBranchBusinessPartnerDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformFinInstMasterBranchBusinessPartnerDatum records in the query.
func (q dataPlatformFinInstMasterBranchBusinessPartnerDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_fin_inst_master_branch_business_partner_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformFinInstMasterBranchBusinessPartnerDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_fin_inst_master_branch_business_partner_data exists")
	}

	return count > 0, nil
}

// DataPlatformFinInstMasterBranchBusinessPartnerData retrieves all the records using an executor.
func DataPlatformFinInstMasterBranchBusinessPartnerData(mods ...qm.QueryMod) dataPlatformFinInstMasterBranchBusinessPartnerDatumQuery {
	mods = append(mods, qm.From("`data_platform_fin_inst_master_branch_business_partner_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_fin_inst_master_branch_business_partner_data`.*"})
	}

	return dataPlatformFinInstMasterBranchBusinessPartnerDatumQuery{q}
}

// FindDataPlatformFinInstMasterBranchBusinessPartnerDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformFinInstMasterBranchBusinessPartnerDatum(ctx context.Context, exec boil.ContextExecutor, finInstCountry string, finInstCode string, finInstBranchCode string, finInstFullCode string, finInstBranchBusinessPartner int, validityEndDate string, validityStartDate string, selectCols ...string) (*DataPlatformFinInstMasterBranchBusinessPartnerDatum, error) {
	dataPlatformFinInstMasterBranchBusinessPartnerDatumObj := &DataPlatformFinInstMasterBranchBusinessPartnerDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_fin_inst_master_branch_business_partner_data` where `FinInstCountry`=? AND `FinInstCode`=? AND `FinInstBranchCode`=? AND `FinInstFullCode`=? AND `FinInstBranchBusinessPartner`=? AND `ValidityEndDate`=? AND `ValidityStartDate`=?", sel,
	)

	q := queries.Raw(query, finInstCountry, finInstCode, finInstBranchCode, finInstFullCode, finInstBranchBusinessPartner, validityEndDate, validityStartDate)

	err := q.Bind(ctx, exec, dataPlatformFinInstMasterBranchBusinessPartnerDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_fin_inst_master_branch_business_partner_data")
	}

	return dataPlatformFinInstMasterBranchBusinessPartnerDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformFinInstMasterBranchBusinessPartnerDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_fin_inst_master_branch_business_partner_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformFinInstMasterBranchBusinessPartnerDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformFinInstMasterBranchBusinessPartnerDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformFinInstMasterBranchBusinessPartnerDatumInsertCache[key]
	dataPlatformFinInstMasterBranchBusinessPartnerDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformFinInstMasterBranchBusinessPartnerDatumAllColumns,
			dataPlatformFinInstMasterBranchBusinessPartnerDatumColumnsWithDefault,
			dataPlatformFinInstMasterBranchBusinessPartnerDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformFinInstMasterBranchBusinessPartnerDatumType, dataPlatformFinInstMasterBranchBusinessPartnerDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformFinInstMasterBranchBusinessPartnerDatumType, dataPlatformFinInstMasterBranchBusinessPartnerDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_fin_inst_master_branch_business_partner_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_fin_inst_master_branch_business_partner_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_fin_inst_master_branch_business_partner_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformFinInstMasterBranchBusinessPartnerDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_fin_inst_master_branch_business_partner_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.FinInstCountry,
		o.FinInstCode,
		o.FinInstBranchCode,
		o.FinInstFullCode,
		o.FinInstBranchBusinessPartner,
		o.ValidityEndDate,
		o.ValidityStartDate,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_fin_inst_master_branch_business_partner_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformFinInstMasterBranchBusinessPartnerDatumInsertCacheMut.Lock()
		dataPlatformFinInstMasterBranchBusinessPartnerDatumInsertCache[key] = cache
		dataPlatformFinInstMasterBranchBusinessPartnerDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformFinInstMasterBranchBusinessPartnerDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformFinInstMasterBranchBusinessPartnerDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformFinInstMasterBranchBusinessPartnerDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformFinInstMasterBranchBusinessPartnerDatumUpdateCache[key]
	dataPlatformFinInstMasterBranchBusinessPartnerDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformFinInstMasterBranchBusinessPartnerDatumAllColumns,
			dataPlatformFinInstMasterBranchBusinessPartnerDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_fin_inst_master_branch_business_partner_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_fin_inst_master_branch_business_partner_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformFinInstMasterBranchBusinessPartnerDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformFinInstMasterBranchBusinessPartnerDatumType, dataPlatformFinInstMasterBranchBusinessPartnerDatumMapping, append(wl, dataPlatformFinInstMasterBranchBusinessPartnerDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_fin_inst_master_branch_business_partner_data row")
	}

	if !cached {
		dataPlatformFinInstMasterBranchBusinessPartnerDatumUpdateCacheMut.Lock()
		dataPlatformFinInstMasterBranchBusinessPartnerDatumUpdateCache[key] = cache
		dataPlatformFinInstMasterBranchBusinessPartnerDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformFinInstMasterBranchBusinessPartnerDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_fin_inst_master_branch_business_partner_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformFinInstMasterBranchBusinessPartnerDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformFinInstMasterBranchBusinessPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_fin_inst_master_branch_business_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformFinInstMasterBranchBusinessPartnerDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformFinInstMasterBranchBusinessPartnerDatum slice")
	}

	return nil
}

var mySQLDataPlatformFinInstMasterBranchBusinessPartnerDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformFinInstMasterBranchBusinessPartnerDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_fin_inst_master_branch_business_partner_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformFinInstMasterBranchBusinessPartnerDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformFinInstMasterBranchBusinessPartnerDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformFinInstMasterBranchBusinessPartnerDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformFinInstMasterBranchBusinessPartnerDatumUpsertCache[key]
	dataPlatformFinInstMasterBranchBusinessPartnerDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformFinInstMasterBranchBusinessPartnerDatumAllColumns,
			dataPlatformFinInstMasterBranchBusinessPartnerDatumColumnsWithDefault,
			dataPlatformFinInstMasterBranchBusinessPartnerDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformFinInstMasterBranchBusinessPartnerDatumAllColumns,
			dataPlatformFinInstMasterBranchBusinessPartnerDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_fin_inst_master_branch_business_partner_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_fin_inst_master_branch_business_partner_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_fin_inst_master_branch_business_partner_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformFinInstMasterBranchBusinessPartnerDatumType, dataPlatformFinInstMasterBranchBusinessPartnerDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformFinInstMasterBranchBusinessPartnerDatumType, dataPlatformFinInstMasterBranchBusinessPartnerDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_fin_inst_master_branch_business_partner_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformFinInstMasterBranchBusinessPartnerDatumType, dataPlatformFinInstMasterBranchBusinessPartnerDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_fin_inst_master_branch_business_partner_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_fin_inst_master_branch_business_partner_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformFinInstMasterBranchBusinessPartnerDatumUpsertCacheMut.Lock()
		dataPlatformFinInstMasterBranchBusinessPartnerDatumUpsertCache[key] = cache
		dataPlatformFinInstMasterBranchBusinessPartnerDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformFinInstMasterBranchBusinessPartnerDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformFinInstMasterBranchBusinessPartnerDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformFinInstMasterBranchBusinessPartnerDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformFinInstMasterBranchBusinessPartnerDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_fin_inst_master_branch_business_partner_data` WHERE `FinInstCountry`=? AND `FinInstCode`=? AND `FinInstBranchCode`=? AND `FinInstFullCode`=? AND `FinInstBranchBusinessPartner`=? AND `ValidityEndDate`=? AND `ValidityStartDate`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_fin_inst_master_branch_business_partner_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformFinInstMasterBranchBusinessPartnerDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformFinInstMasterBranchBusinessPartnerDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_fin_inst_master_branch_business_partner_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformFinInstMasterBranchBusinessPartnerDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformFinInstMasterBranchBusinessPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_fin_inst_master_branch_business_partner_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformFinInstMasterBranchBusinessPartnerDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformFinInstMasterBranchBusinessPartnerDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformFinInstMasterBranchBusinessPartnerDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformFinInstMasterBranchBusinessPartnerDatum(ctx, exec, o.FinInstCountry, o.FinInstCode, o.FinInstBranchCode, o.FinInstFullCode, o.FinInstBranchBusinessPartner, o.ValidityEndDate, o.ValidityStartDate)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformFinInstMasterBranchBusinessPartnerDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformFinInstMasterBranchBusinessPartnerDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformFinInstMasterBranchBusinessPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_fin_inst_master_branch_business_partner_data`.* FROM `data_platform_fin_inst_master_branch_business_partner_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformFinInstMasterBranchBusinessPartnerDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformFinInstMasterBranchBusinessPartnerDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformFinInstMasterBranchBusinessPartnerDatumExists checks if the DataPlatformFinInstMasterBranchBusinessPartnerDatum row exists.
func DataPlatformFinInstMasterBranchBusinessPartnerDatumExists(ctx context.Context, exec boil.ContextExecutor, finInstCountry string, finInstCode string, finInstBranchCode string, finInstFullCode string, finInstBranchBusinessPartner int, validityEndDate string, validityStartDate string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_fin_inst_master_branch_business_partner_data` where `FinInstCountry`=? AND `FinInstCode`=? AND `FinInstBranchCode`=? AND `FinInstFullCode`=? AND `FinInstBranchBusinessPartner`=? AND `ValidityEndDate`=? AND `ValidityStartDate`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, finInstCountry, finInstCode, finInstBranchCode, finInstFullCode, finInstBranchBusinessPartner, validityEndDate, validityStartDate)
	}
	row := exec.QueryRowContext(ctx, sql, finInstCountry, finInstCode, finInstBranchCode, finInstFullCode, finInstBranchBusinessPartner, validityEndDate, validityStartDate)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_fin_inst_master_branch_business_partner_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformFinInstMasterBranchBusinessPartnerDatum row exists.
func (o *DataPlatformFinInstMasterBranchBusinessPartnerDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformFinInstMasterBranchBusinessPartnerDatumExists(ctx, exec, o.FinInstCountry, o.FinInstCode, o.FinInstBranchCode, o.FinInstFullCode, o.FinInstBranchBusinessPartner, o.ValidityEndDate, o.ValidityStartDate)
}
