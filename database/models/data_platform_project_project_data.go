// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformProjectProjectDatum is an object representing the database table.
type DataPlatformProjectProjectDatum struct {
	Project               int         `boil:"Project" json:"Project" toml:"Project" yaml:"Project"`
	ProjectCode           string      `boil:"ProjectCode" json:"ProjectCode" toml:"ProjectCode" yaml:"ProjectCode"`
	ProjectDescription    string      `boil:"ProjectDescription" json:"ProjectDescription" toml:"ProjectDescription" yaml:"ProjectDescription"`
	OwnerBusinessPartner  int         `boil:"OwnerBusinessPartner" json:"OwnerBusinessPartner" toml:"OwnerBusinessPartner" yaml:"OwnerBusinessPartner"`
	OwnerPlant            string      `boil:"OwnerPlant" json:"OwnerPlant" toml:"OwnerPlant" yaml:"OwnerPlant"`
	ProjectProfile        null.String `boil:"ProjectProfile" json:"ProjectProfile,omitempty" toml:"ProjectProfile" yaml:"ProjectProfile,omitempty"`
	ResponsiblePerson     null.Int    `boil:"ResponsiblePerson" json:"ResponsiblePerson,omitempty" toml:"ResponsiblePerson" yaml:"ResponsiblePerson,omitempty"`
	ResponsiblePersonName null.String `boil:"ResponsiblePersonName" json:"ResponsiblePersonName,omitempty" toml:"ResponsiblePersonName" yaml:"ResponsiblePersonName,omitempty"`
	PlannedStartDate      null.String `boil:"PlannedStartDate" json:"PlannedStartDate,omitempty" toml:"PlannedStartDate" yaml:"PlannedStartDate,omitempty"`
	PlannedEndDate        null.String `boil:"PlannedEndDate" json:"PlannedEndDate,omitempty" toml:"PlannedEndDate" yaml:"PlannedEndDate,omitempty"`
	ActualStartDate       null.String `boil:"ActualStartDate" json:"ActualStartDate,omitempty" toml:"ActualStartDate" yaml:"ActualStartDate,omitempty"`
	ActualEndDate         null.String `boil:"ActualEndDate" json:"ActualEndDate,omitempty" toml:"ActualEndDate" yaml:"ActualEndDate,omitempty"`
	CreationDate          string      `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	LastChangeDate        string      `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	IsMarkedForDeletion   null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformProjectProjectDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformProjectProjectDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformProjectProjectDatumColumns = struct {
	Project               string
	ProjectCode           string
	ProjectDescription    string
	OwnerBusinessPartner  string
	OwnerPlant            string
	ProjectProfile        string
	ResponsiblePerson     string
	ResponsiblePersonName string
	PlannedStartDate      string
	PlannedEndDate        string
	ActualStartDate       string
	ActualEndDate         string
	CreationDate          string
	LastChangeDate        string
	IsMarkedForDeletion   string
}{
	Project:               "Project",
	ProjectCode:           "ProjectCode",
	ProjectDescription:    "ProjectDescription",
	OwnerBusinessPartner:  "OwnerBusinessPartner",
	OwnerPlant:            "OwnerPlant",
	ProjectProfile:        "ProjectProfile",
	ResponsiblePerson:     "ResponsiblePerson",
	ResponsiblePersonName: "ResponsiblePersonName",
	PlannedStartDate:      "PlannedStartDate",
	PlannedEndDate:        "PlannedEndDate",
	ActualStartDate:       "ActualStartDate",
	ActualEndDate:         "ActualEndDate",
	CreationDate:          "CreationDate",
	LastChangeDate:        "LastChangeDate",
	IsMarkedForDeletion:   "IsMarkedForDeletion",
}

var DataPlatformProjectProjectDatumTableColumns = struct {
	Project               string
	ProjectCode           string
	ProjectDescription    string
	OwnerBusinessPartner  string
	OwnerPlant            string
	ProjectProfile        string
	ResponsiblePerson     string
	ResponsiblePersonName string
	PlannedStartDate      string
	PlannedEndDate        string
	ActualStartDate       string
	ActualEndDate         string
	CreationDate          string
	LastChangeDate        string
	IsMarkedForDeletion   string
}{
	Project:               "data_platform_project_project_data.Project",
	ProjectCode:           "data_platform_project_project_data.ProjectCode",
	ProjectDescription:    "data_platform_project_project_data.ProjectDescription",
	OwnerBusinessPartner:  "data_platform_project_project_data.OwnerBusinessPartner",
	OwnerPlant:            "data_platform_project_project_data.OwnerPlant",
	ProjectProfile:        "data_platform_project_project_data.ProjectProfile",
	ResponsiblePerson:     "data_platform_project_project_data.ResponsiblePerson",
	ResponsiblePersonName: "data_platform_project_project_data.ResponsiblePersonName",
	PlannedStartDate:      "data_platform_project_project_data.PlannedStartDate",
	PlannedEndDate:        "data_platform_project_project_data.PlannedEndDate",
	ActualStartDate:       "data_platform_project_project_data.ActualStartDate",
	ActualEndDate:         "data_platform_project_project_data.ActualEndDate",
	CreationDate:          "data_platform_project_project_data.CreationDate",
	LastChangeDate:        "data_platform_project_project_data.LastChangeDate",
	IsMarkedForDeletion:   "data_platform_project_project_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformProjectProjectDatumWhere = struct {
	Project               whereHelperint
	ProjectCode           whereHelperstring
	ProjectDescription    whereHelperstring
	OwnerBusinessPartner  whereHelperint
	OwnerPlant            whereHelperstring
	ProjectProfile        whereHelpernull_String
	ResponsiblePerson     whereHelpernull_Int
	ResponsiblePersonName whereHelpernull_String
	PlannedStartDate      whereHelpernull_String
	PlannedEndDate        whereHelpernull_String
	ActualStartDate       whereHelpernull_String
	ActualEndDate         whereHelpernull_String
	CreationDate          whereHelperstring
	LastChangeDate        whereHelperstring
	IsMarkedForDeletion   whereHelpernull_Bool
}{
	Project:               whereHelperint{field: "`data_platform_project_project_data`.`Project`"},
	ProjectCode:           whereHelperstring{field: "`data_platform_project_project_data`.`ProjectCode`"},
	ProjectDescription:    whereHelperstring{field: "`data_platform_project_project_data`.`ProjectDescription`"},
	OwnerBusinessPartner:  whereHelperint{field: "`data_platform_project_project_data`.`OwnerBusinessPartner`"},
	OwnerPlant:            whereHelperstring{field: "`data_platform_project_project_data`.`OwnerPlant`"},
	ProjectProfile:        whereHelpernull_String{field: "`data_platform_project_project_data`.`ProjectProfile`"},
	ResponsiblePerson:     whereHelpernull_Int{field: "`data_platform_project_project_data`.`ResponsiblePerson`"},
	ResponsiblePersonName: whereHelpernull_String{field: "`data_platform_project_project_data`.`ResponsiblePersonName`"},
	PlannedStartDate:      whereHelpernull_String{field: "`data_platform_project_project_data`.`PlannedStartDate`"},
	PlannedEndDate:        whereHelpernull_String{field: "`data_platform_project_project_data`.`PlannedEndDate`"},
	ActualStartDate:       whereHelpernull_String{field: "`data_platform_project_project_data`.`ActualStartDate`"},
	ActualEndDate:         whereHelpernull_String{field: "`data_platform_project_project_data`.`ActualEndDate`"},
	CreationDate:          whereHelperstring{field: "`data_platform_project_project_data`.`CreationDate`"},
	LastChangeDate:        whereHelperstring{field: "`data_platform_project_project_data`.`LastChangeDate`"},
	IsMarkedForDeletion:   whereHelpernull_Bool{field: "`data_platform_project_project_data`.`IsMarkedForDeletion`"},
}

// DataPlatformProjectProjectDatumRels is where relationship names are stored.
var DataPlatformProjectProjectDatumRels = struct {
	OwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum string
	OwnerBusinessPartnerDataPlatformPlantGeneralDatum           string
	ProjectDataPlatformDeliveryDocumentItemData                 string
	ProjectDataPlatformOrdersItemData                           string
	ProjectDataPlatformProjectWBSElementData                    string
}{
	OwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum: "OwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum",
	OwnerBusinessPartnerDataPlatformPlantGeneralDatum:           "OwnerBusinessPartnerDataPlatformPlantGeneralDatum",
	ProjectDataPlatformDeliveryDocumentItemData:                 "ProjectDataPlatformDeliveryDocumentItemData",
	ProjectDataPlatformOrdersItemData:                           "ProjectDataPlatformOrdersItemData",
	ProjectDataPlatformProjectWBSElementData:                    "ProjectDataPlatformProjectWBSElementData",
}

// dataPlatformProjectProjectDatumR is where relationships are stored.
type dataPlatformProjectProjectDatumR struct {
	OwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum *DataPlatformBusinessPartnerGeneralDatum   `boil:"OwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum" json:"OwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum" toml:"OwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum" yaml:"OwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum"`
	OwnerBusinessPartnerDataPlatformPlantGeneralDatum           *DataPlatformPlantGeneralDatum             `boil:"OwnerBusinessPartnerDataPlatformPlantGeneralDatum" json:"OwnerBusinessPartnerDataPlatformPlantGeneralDatum" toml:"OwnerBusinessPartnerDataPlatformPlantGeneralDatum" yaml:"OwnerBusinessPartnerDataPlatformPlantGeneralDatum"`
	ProjectDataPlatformDeliveryDocumentItemData                 DataPlatformDeliveryDocumentItemDatumSlice `boil:"ProjectDataPlatformDeliveryDocumentItemData" json:"ProjectDataPlatformDeliveryDocumentItemData" toml:"ProjectDataPlatformDeliveryDocumentItemData" yaml:"ProjectDataPlatformDeliveryDocumentItemData"`
	ProjectDataPlatformOrdersItemData                           DataPlatformOrdersItemDatumSlice           `boil:"ProjectDataPlatformOrdersItemData" json:"ProjectDataPlatformOrdersItemData" toml:"ProjectDataPlatformOrdersItemData" yaml:"ProjectDataPlatformOrdersItemData"`
	ProjectDataPlatformProjectWBSElementData                    DataPlatformProjectWBSElementDatumSlice    `boil:"ProjectDataPlatformProjectWBSElementData" json:"ProjectDataPlatformProjectWBSElementData" toml:"ProjectDataPlatformProjectWBSElementData" yaml:"ProjectDataPlatformProjectWBSElementData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformProjectProjectDatumR) NewStruct() *dataPlatformProjectProjectDatumR {
	return &dataPlatformProjectProjectDatumR{}
}

func (r *dataPlatformProjectProjectDatumR) GetOwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum() *DataPlatformBusinessPartnerGeneralDatum {
	if r == nil {
		return nil
	}
	return r.OwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum
}

func (r *dataPlatformProjectProjectDatumR) GetOwnerBusinessPartnerDataPlatformPlantGeneralDatum() *DataPlatformPlantGeneralDatum {
	if r == nil {
		return nil
	}
	return r.OwnerBusinessPartnerDataPlatformPlantGeneralDatum
}

func (r *dataPlatformProjectProjectDatumR) GetProjectDataPlatformDeliveryDocumentItemData() DataPlatformDeliveryDocumentItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProjectDataPlatformDeliveryDocumentItemData
}

func (r *dataPlatformProjectProjectDatumR) GetProjectDataPlatformOrdersItemData() DataPlatformOrdersItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProjectDataPlatformOrdersItemData
}

func (r *dataPlatformProjectProjectDatumR) GetProjectDataPlatformProjectWBSElementData() DataPlatformProjectWBSElementDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProjectDataPlatformProjectWBSElementData
}

// dataPlatformProjectProjectDatumL is where Load methods for each relationship are stored.
type dataPlatformProjectProjectDatumL struct{}

var (
	dataPlatformProjectProjectDatumAllColumns            = []string{"Project", "ProjectCode", "ProjectDescription", "OwnerBusinessPartner", "OwnerPlant", "ProjectProfile", "ResponsiblePerson", "ResponsiblePersonName", "PlannedStartDate", "PlannedEndDate", "ActualStartDate", "ActualEndDate", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformProjectProjectDatumColumnsWithoutDefault = []string{"Project", "ProjectCode", "ProjectDescription", "OwnerBusinessPartner", "OwnerPlant", "ProjectProfile", "ResponsiblePerson", "ResponsiblePersonName", "PlannedStartDate", "PlannedEndDate", "ActualStartDate", "ActualEndDate", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformProjectProjectDatumColumnsWithDefault    = []string{}
	dataPlatformProjectProjectDatumPrimaryKeyColumns     = []string{"Project"}
	dataPlatformProjectProjectDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformProjectProjectDatumSlice is an alias for a slice of pointers to DataPlatformProjectProjectDatum.
	// This should almost always be used instead of []DataPlatformProjectProjectDatum.
	DataPlatformProjectProjectDatumSlice []*DataPlatformProjectProjectDatum

	dataPlatformProjectProjectDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformProjectProjectDatumType                 = reflect.TypeOf(&DataPlatformProjectProjectDatum{})
	dataPlatformProjectProjectDatumMapping              = queries.MakeStructMapping(dataPlatformProjectProjectDatumType)
	dataPlatformProjectProjectDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformProjectProjectDatumType, dataPlatformProjectProjectDatumMapping, dataPlatformProjectProjectDatumPrimaryKeyColumns)
	dataPlatformProjectProjectDatumInsertCacheMut       sync.RWMutex
	dataPlatformProjectProjectDatumInsertCache          = make(map[string]insertCache)
	dataPlatformProjectProjectDatumUpdateCacheMut       sync.RWMutex
	dataPlatformProjectProjectDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformProjectProjectDatumUpsertCacheMut       sync.RWMutex
	dataPlatformProjectProjectDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformProjectProjectDatum record from the query.
func (q dataPlatformProjectProjectDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformProjectProjectDatum, error) {
	o := &DataPlatformProjectProjectDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_project_project_data")
	}

	return o, nil
}

// All returns all DataPlatformProjectProjectDatum records from the query.
func (q dataPlatformProjectProjectDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformProjectProjectDatumSlice, error) {
	var o []*DataPlatformProjectProjectDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformProjectProjectDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformProjectProjectDatum records in the query.
func (q dataPlatformProjectProjectDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_project_project_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformProjectProjectDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_project_project_data exists")
	}

	return count > 0, nil
}

// OwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *DataPlatformProjectProjectDatum) OwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.OwnerBusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// OwnerBusinessPartnerDataPlatformPlantGeneralDatum pointed to by the foreign key.
func (o *DataPlatformProjectProjectDatum) OwnerBusinessPartnerDataPlatformPlantGeneralDatum(mods ...qm.QueryMod) dataPlatformPlantGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.OwnerBusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPlantGeneralData(queryMods...)
}

// ProjectDataPlatformDeliveryDocumentItemData retrieves all the data_platform_delivery_document_item_datum's DataPlatformDeliveryDocumentItemData with an executor via Project column.
func (o *DataPlatformProjectProjectDatum) ProjectDataPlatformDeliveryDocumentItemData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_item_data`.`Project`=?", o.Project),
	)

	return DataPlatformDeliveryDocumentItemData(queryMods...)
}

// ProjectDataPlatformOrdersItemData retrieves all the data_platform_orders_item_datum's DataPlatformOrdersItemData with an executor via Project column.
func (o *DataPlatformProjectProjectDatum) ProjectDataPlatformOrdersItemData(mods ...qm.QueryMod) dataPlatformOrdersItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_item_data`.`Project`=?", o.Project),
	)

	return DataPlatformOrdersItemData(queryMods...)
}

// ProjectDataPlatformProjectWBSElementData retrieves all the data_platform_project_wbs_element_datum's DataPlatformProjectWBSElementData with an executor via Project column.
func (o *DataPlatformProjectProjectDatum) ProjectDataPlatformProjectWBSElementData(mods ...qm.QueryMod) dataPlatformProjectWBSElementDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_project_wbs_element_data`.`Project`=?", o.Project),
	)

	return DataPlatformProjectWBSElementData(queryMods...)
}

// LoadOwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProjectProjectDatumL) LoadOwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProjectProjectDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProjectProjectDatum
	var object *DataPlatformProjectProjectDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProjectProjectDatum.(*DataPlatformProjectProjectDatum)
		if !ok {
			object = new(DataPlatformProjectProjectDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProjectProjectDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProjectProjectDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProjectProjectDatum.(*[]*DataPlatformProjectProjectDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProjectProjectDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProjectProjectDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProjectProjectDatumR{}
		}
		args = append(args, object.OwnerBusinessPartner)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProjectProjectDatumR{}
			}

			for _, a := range args {
				if a == obj.OwnerBusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.OwnerBusinessPartner)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerGeneralDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OwnerBusinessPartner == foreign.BusinessPartner {
				local.R.OwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadOwnerBusinessPartnerDataPlatformPlantGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProjectProjectDatumL) LoadOwnerBusinessPartnerDataPlatformPlantGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProjectProjectDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProjectProjectDatum
	var object *DataPlatformProjectProjectDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProjectProjectDatum.(*DataPlatformProjectProjectDatum)
		if !ok {
			object = new(DataPlatformProjectProjectDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProjectProjectDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProjectProjectDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProjectProjectDatum.(*[]*DataPlatformProjectProjectDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProjectProjectDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProjectProjectDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProjectProjectDatumR{}
		}
		args = append(args, object.OwnerBusinessPartner)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProjectProjectDatumR{}
			}

			for _, a := range args {
				if a == obj.OwnerBusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.OwnerBusinessPartner)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_general_data`),
		qm.WhereIn(`data_platform_plant_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPlantGeneralDatum")
	}

	var resultSlice []*DataPlatformPlantGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPlantGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_plant_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OwnerBusinessPartnerDataPlatformPlantGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OwnerBusinessPartner == foreign.BusinessPartner {
				local.R.OwnerBusinessPartnerDataPlatformPlantGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProjectDataPlatformDeliveryDocumentItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProjectProjectDatumL) LoadProjectDataPlatformDeliveryDocumentItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProjectProjectDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProjectProjectDatum
	var object *DataPlatformProjectProjectDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProjectProjectDatum.(*DataPlatformProjectProjectDatum)
		if !ok {
			object = new(DataPlatformProjectProjectDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProjectProjectDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProjectProjectDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProjectProjectDatum.(*[]*DataPlatformProjectProjectDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProjectProjectDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProjectProjectDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProjectProjectDatumR{}
		}
		args = append(args, object.Project)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProjectProjectDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Project) {
					continue Outer
				}
			}

			args = append(args, obj.Project)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_item_data`),
		qm.WhereIn(`data_platform_delivery_document_item_data.Project in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_item_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_item_data")
	}

	if singular {
		object.R.ProjectDataPlatformDeliveryDocumentItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Project, foreign.Project) {
				local.R.ProjectDataPlatformDeliveryDocumentItemData = append(local.R.ProjectDataPlatformDeliveryDocumentItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProjectDataPlatformOrdersItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProjectProjectDatumL) LoadProjectDataPlatformOrdersItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProjectProjectDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProjectProjectDatum
	var object *DataPlatformProjectProjectDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProjectProjectDatum.(*DataPlatformProjectProjectDatum)
		if !ok {
			object = new(DataPlatformProjectProjectDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProjectProjectDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProjectProjectDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProjectProjectDatum.(*[]*DataPlatformProjectProjectDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProjectProjectDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProjectProjectDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProjectProjectDatumR{}
		}
		args = append(args, object.Project)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProjectProjectDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Project) {
					continue Outer
				}
			}

			args = append(args, obj.Project)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_data`),
		qm.WhereIn(`data_platform_orders_item_data.Project in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_item_data")
	}

	var resultSlice []*DataPlatformOrdersItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_data")
	}

	if singular {
		object.R.ProjectDataPlatformOrdersItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Project, foreign.Project) {
				local.R.ProjectDataPlatformOrdersItemData = append(local.R.ProjectDataPlatformOrdersItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProjectDataPlatformProjectWBSElementData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProjectProjectDatumL) LoadProjectDataPlatformProjectWBSElementData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProjectProjectDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProjectProjectDatum
	var object *DataPlatformProjectProjectDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProjectProjectDatum.(*DataPlatformProjectProjectDatum)
		if !ok {
			object = new(DataPlatformProjectProjectDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProjectProjectDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProjectProjectDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProjectProjectDatum.(*[]*DataPlatformProjectProjectDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProjectProjectDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProjectProjectDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProjectProjectDatumR{}
		}
		args = append(args, object.Project)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProjectProjectDatumR{}
			}

			for _, a := range args {
				if a == obj.Project {
					continue Outer
				}
			}

			args = append(args, obj.Project)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_project_wbs_element_data`),
		qm.WhereIn(`data_platform_project_wbs_element_data.Project in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_project_wbs_element_data")
	}

	var resultSlice []*DataPlatformProjectWBSElementDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_project_wbs_element_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_project_wbs_element_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_project_wbs_element_data")
	}

	if singular {
		object.R.ProjectDataPlatformProjectWBSElementData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Project == foreign.Project {
				local.R.ProjectDataPlatformProjectWBSElementData = append(local.R.ProjectDataPlatformProjectWBSElementData, foreign)
				break
			}
		}
	}

	return nil
}

// SetOwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum of the dataPlatformProjectProjectDatum to the related item.
// Sets o.R.OwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum to related.
func (o *DataPlatformProjectProjectDatum) SetOwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_project_project_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"OwnerBusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProjectProjectDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.Project}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OwnerBusinessPartner = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformProjectProjectDatumR{
			OwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.OwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum = related
	}

	return nil
}

// SetOwnerBusinessPartnerDataPlatformPlantGeneralDatum of the dataPlatformProjectProjectDatum to the related item.
// Sets o.R.OwnerBusinessPartnerDataPlatformPlantGeneralDatum to related.
func (o *DataPlatformProjectProjectDatum) SetOwnerBusinessPartnerDataPlatformPlantGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPlantGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_project_project_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"OwnerBusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProjectProjectDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.Project}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OwnerBusinessPartner = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformProjectProjectDatumR{
			OwnerBusinessPartnerDataPlatformPlantGeneralDatum: related,
		}
	} else {
		o.R.OwnerBusinessPartnerDataPlatformPlantGeneralDatum = related
	}

	return nil
}

// AddProjectDataPlatformDeliveryDocumentItemData adds the given related objects to the existing relationships
// of the data_platform_project_project_datum, optionally inserting them as new records.
// Appends related to o.R.ProjectDataPlatformDeliveryDocumentItemData.
func (o *DataPlatformProjectProjectDatum) AddProjectDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Project, o.Project)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Project"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Project, rel.DeliveryDocument, rel.DeliveryDocumentItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Project, o.Project)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProjectProjectDatumR{
			ProjectDataPlatformDeliveryDocumentItemData: related,
		}
	} else {
		o.R.ProjectDataPlatformDeliveryDocumentItemData = append(o.R.ProjectDataPlatformDeliveryDocumentItemData, related...)
	}

	return nil
}

// SetProjectDataPlatformDeliveryDocumentItemData removes all previously related items of the
// data_platform_project_project_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProjectDataPlatformProjectProjectDatum's ProjectDataPlatformDeliveryDocumentItemData accordingly.
// Replaces o.R.ProjectDataPlatformDeliveryDocumentItemData with related.
func (o *DataPlatformProjectProjectDatum) SetProjectDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	query := "update `data_platform_delivery_document_item_data` set `Project` = null where `Project` = ?"
	values := []interface{}{o.Project}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.ProjectDataPlatformDeliveryDocumentItemData = nil
	}

	return o.AddProjectDataPlatformDeliveryDocumentItemData(ctx, exec, insert, related...)
}

// RemoveProjectDataPlatformDeliveryDocumentItemData relationships from objects passed in.
// Removes related items from R.ProjectDataPlatformDeliveryDocumentItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformProjectProjectDatum) RemoveProjectDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Project, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("Project")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProjectDataPlatformDeliveryDocumentItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProjectDataPlatformDeliveryDocumentItemData)
			if ln > 1 && i < ln-1 {
				o.R.ProjectDataPlatformDeliveryDocumentItemData[i] = o.R.ProjectDataPlatformDeliveryDocumentItemData[ln-1]
			}
			o.R.ProjectDataPlatformDeliveryDocumentItemData = o.R.ProjectDataPlatformDeliveryDocumentItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddProjectDataPlatformOrdersItemData adds the given related objects to the existing relationships
// of the data_platform_project_project_datum, optionally inserting them as new records.
// Appends related to o.R.ProjectDataPlatformOrdersItemData.
func (o *DataPlatformProjectProjectDatum) AddProjectDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Project, o.Project)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Project"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Project, rel.OrderID, rel.OrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Project, o.Project)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProjectProjectDatumR{
			ProjectDataPlatformOrdersItemData: related,
		}
	} else {
		o.R.ProjectDataPlatformOrdersItemData = append(o.R.ProjectDataPlatformOrdersItemData, related...)
	}

	return nil
}

// SetProjectDataPlatformOrdersItemData removes all previously related items of the
// data_platform_project_project_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProjectDataPlatformProjectProjectDatum's ProjectDataPlatformOrdersItemData accordingly.
// Replaces o.R.ProjectDataPlatformOrdersItemData with related.
func (o *DataPlatformProjectProjectDatum) SetProjectDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	query := "update `data_platform_orders_item_data` set `Project` = null where `Project` = ?"
	values := []interface{}{o.Project}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.ProjectDataPlatformOrdersItemData = nil
	}

	return o.AddProjectDataPlatformOrdersItemData(ctx, exec, insert, related...)
}

// RemoveProjectDataPlatformOrdersItemData relationships from objects passed in.
// Removes related items from R.ProjectDataPlatformOrdersItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformProjectProjectDatum) RemoveProjectDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOrdersItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Project, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("Project")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProjectDataPlatformOrdersItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProjectDataPlatformOrdersItemData)
			if ln > 1 && i < ln-1 {
				o.R.ProjectDataPlatformOrdersItemData[i] = o.R.ProjectDataPlatformOrdersItemData[ln-1]
			}
			o.R.ProjectDataPlatformOrdersItemData = o.R.ProjectDataPlatformOrdersItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddProjectDataPlatformProjectWBSElementData adds the given related objects to the existing relationships
// of the data_platform_project_project_datum, optionally inserting them as new records.
// Appends related to o.R.ProjectDataPlatformProjectWBSElementData.
func (o *DataPlatformProjectProjectDatum) AddProjectDataPlatformProjectWBSElementData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProjectWBSElementDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Project = o.Project
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_project_wbs_element_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Project"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProjectWBSElementDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Project, rel.Project, rel.WBSElement}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Project = o.Project
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProjectProjectDatumR{
			ProjectDataPlatformProjectWBSElementData: related,
		}
	} else {
		o.R.ProjectDataPlatformProjectWBSElementData = append(o.R.ProjectDataPlatformProjectWBSElementData, related...)
	}

	return nil
}

// DataPlatformProjectProjectData retrieves all the records using an executor.
func DataPlatformProjectProjectData(mods ...qm.QueryMod) dataPlatformProjectProjectDatumQuery {
	mods = append(mods, qm.From("`data_platform_project_project_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_project_project_data`.*"})
	}

	return dataPlatformProjectProjectDatumQuery{q}
}

// FindDataPlatformProjectProjectDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformProjectProjectDatum(ctx context.Context, exec boil.ContextExecutor, project int, selectCols ...string) (*DataPlatformProjectProjectDatum, error) {
	dataPlatformProjectProjectDatumObj := &DataPlatformProjectProjectDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_project_project_data` where `Project`=?", sel,
	)

	q := queries.Raw(query, project)

	err := q.Bind(ctx, exec, dataPlatformProjectProjectDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_project_project_data")
	}

	return dataPlatformProjectProjectDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformProjectProjectDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_project_project_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProjectProjectDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformProjectProjectDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformProjectProjectDatumInsertCache[key]
	dataPlatformProjectProjectDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformProjectProjectDatumAllColumns,
			dataPlatformProjectProjectDatumColumnsWithDefault,
			dataPlatformProjectProjectDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProjectProjectDatumType, dataPlatformProjectProjectDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformProjectProjectDatumType, dataPlatformProjectProjectDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_project_project_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_project_project_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_project_project_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformProjectProjectDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_project_project_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Project,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_project_project_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProjectProjectDatumInsertCacheMut.Lock()
		dataPlatformProjectProjectDatumInsertCache[key] = cache
		dataPlatformProjectProjectDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformProjectProjectDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformProjectProjectDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformProjectProjectDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformProjectProjectDatumUpdateCache[key]
	dataPlatformProjectProjectDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformProjectProjectDatumAllColumns,
			dataPlatformProjectProjectDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_project_project_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_project_project_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformProjectProjectDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformProjectProjectDatumType, dataPlatformProjectProjectDatumMapping, append(wl, dataPlatformProjectProjectDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_project_project_data row")
	}

	if !cached {
		dataPlatformProjectProjectDatumUpdateCacheMut.Lock()
		dataPlatformProjectProjectDatumUpdateCache[key] = cache
		dataPlatformProjectProjectDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformProjectProjectDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_project_project_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformProjectProjectDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProjectProjectDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_project_project_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProjectProjectDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformProjectProjectDatum slice")
	}

	return nil
}

var mySQLDataPlatformProjectProjectDatumUniqueColumns = []string{
	"Project",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformProjectProjectDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_project_project_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProjectProjectDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformProjectProjectDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformProjectProjectDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformProjectProjectDatumUpsertCache[key]
	dataPlatformProjectProjectDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformProjectProjectDatumAllColumns,
			dataPlatformProjectProjectDatumColumnsWithDefault,
			dataPlatformProjectProjectDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformProjectProjectDatumAllColumns,
			dataPlatformProjectProjectDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_project_project_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_project_project_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_project_project_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProjectProjectDatumType, dataPlatformProjectProjectDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformProjectProjectDatumType, dataPlatformProjectProjectDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_project_project_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformProjectProjectDatumType, dataPlatformProjectProjectDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_project_project_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_project_project_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProjectProjectDatumUpsertCacheMut.Lock()
		dataPlatformProjectProjectDatumUpsertCache[key] = cache
		dataPlatformProjectProjectDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformProjectProjectDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformProjectProjectDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformProjectProjectDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformProjectProjectDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_project_project_data` WHERE `Project`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_project_project_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformProjectProjectDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformProjectProjectDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_project_project_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformProjectProjectDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProjectProjectDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_project_project_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProjectProjectDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformProjectProjectDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformProjectProjectDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformProjectProjectDatum(ctx, exec, o.Project)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformProjectProjectDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformProjectProjectDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProjectProjectDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_project_project_data`.* FROM `data_platform_project_project_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProjectProjectDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformProjectProjectDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformProjectProjectDatumExists checks if the DataPlatformProjectProjectDatum row exists.
func DataPlatformProjectProjectDatumExists(ctx context.Context, exec boil.ContextExecutor, project int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_project_project_data` where `Project`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, project)
	}
	row := exec.QueryRowContext(ctx, sql, project)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_project_project_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformProjectProjectDatum row exists.
func (o *DataPlatformProjectProjectDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformProjectProjectDatumExists(ctx, exec, o.Project)
}
