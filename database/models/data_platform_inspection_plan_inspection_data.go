// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformInspectionPlanInspectionDatum is an object representing the database table.
type DataPlatformInspectionPlanInspectionDatum struct {
	InspectionPlan                           int          `boil:"InspectionPlan" json:"InspectionPlan" toml:"InspectionPlan" yaml:"InspectionPlan"`
	Inspection                               int          `boil:"Inspection" json:"Inspection" toml:"Inspection" yaml:"Inspection"`
	InspectionType                           string       `boil:"InspectionType" json:"InspectionType" toml:"InspectionType" yaml:"InspectionType"`
	InspectionTypeValueUnit                  null.String  `boil:"InspectionTypeValueUnit" json:"InspectionTypeValueUnit,omitempty" toml:"InspectionTypeValueUnit" yaml:"InspectionTypeValueUnit,omitempty"`
	InspectionTypePlannedValue               null.Float32 `boil:"InspectionTypePlannedValue" json:"InspectionTypePlannedValue,omitempty" toml:"InspectionTypePlannedValue" yaml:"InspectionTypePlannedValue,omitempty"`
	InspectionTypeCertificateType            null.String  `boil:"InspectionTypeCertificateType" json:"InspectionTypeCertificateType,omitempty" toml:"InspectionTypeCertificateType" yaml:"InspectionTypeCertificateType,omitempty"`
	InspectionTypeCertificateValueInText     null.String  `boil:"InspectionTypeCertificateValueInText" json:"InspectionTypeCertificateValueInText,omitempty" toml:"InspectionTypeCertificateValueInText" yaml:"InspectionTypeCertificateValueInText,omitempty"`
	InspectionTypeCertificateValueInQuantity null.Float32 `boil:"InspectionTypeCertificateValueInQuantity" json:"InspectionTypeCertificateValueInQuantity,omitempty" toml:"InspectionTypeCertificateValueInQuantity" yaml:"InspectionTypeCertificateValueInQuantity,omitempty"`
	InspectionPlanInspectionText             null.String  `boil:"InspectionPlanInspectionText" json:"InspectionPlanInspectionText,omitempty" toml:"InspectionPlanInspectionText" yaml:"InspectionPlanInspectionText,omitempty"`
	CreationDate                             string       `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	LastChangeDate                           string       `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	IsMarkedForDeletion                      null.Bool    `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformInspectionPlanInspectionDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformInspectionPlanInspectionDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformInspectionPlanInspectionDatumColumns = struct {
	InspectionPlan                           string
	Inspection                               string
	InspectionType                           string
	InspectionTypeValueUnit                  string
	InspectionTypePlannedValue               string
	InspectionTypeCertificateType            string
	InspectionTypeCertificateValueInText     string
	InspectionTypeCertificateValueInQuantity string
	InspectionPlanInspectionText             string
	CreationDate                             string
	LastChangeDate                           string
	IsMarkedForDeletion                      string
}{
	InspectionPlan:                           "InspectionPlan",
	Inspection:                               "Inspection",
	InspectionType:                           "InspectionType",
	InspectionTypeValueUnit:                  "InspectionTypeValueUnit",
	InspectionTypePlannedValue:               "InspectionTypePlannedValue",
	InspectionTypeCertificateType:            "InspectionTypeCertificateType",
	InspectionTypeCertificateValueInText:     "InspectionTypeCertificateValueInText",
	InspectionTypeCertificateValueInQuantity: "InspectionTypeCertificateValueInQuantity",
	InspectionPlanInspectionText:             "InspectionPlanInspectionText",
	CreationDate:                             "CreationDate",
	LastChangeDate:                           "LastChangeDate",
	IsMarkedForDeletion:                      "IsMarkedForDeletion",
}

var DataPlatformInspectionPlanInspectionDatumTableColumns = struct {
	InspectionPlan                           string
	Inspection                               string
	InspectionType                           string
	InspectionTypeValueUnit                  string
	InspectionTypePlannedValue               string
	InspectionTypeCertificateType            string
	InspectionTypeCertificateValueInText     string
	InspectionTypeCertificateValueInQuantity string
	InspectionPlanInspectionText             string
	CreationDate                             string
	LastChangeDate                           string
	IsMarkedForDeletion                      string
}{
	InspectionPlan:                           "data_platform_inspection_plan_inspection_data.InspectionPlan",
	Inspection:                               "data_platform_inspection_plan_inspection_data.Inspection",
	InspectionType:                           "data_platform_inspection_plan_inspection_data.InspectionType",
	InspectionTypeValueUnit:                  "data_platform_inspection_plan_inspection_data.InspectionTypeValueUnit",
	InspectionTypePlannedValue:               "data_platform_inspection_plan_inspection_data.InspectionTypePlannedValue",
	InspectionTypeCertificateType:            "data_platform_inspection_plan_inspection_data.InspectionTypeCertificateType",
	InspectionTypeCertificateValueInText:     "data_platform_inspection_plan_inspection_data.InspectionTypeCertificateValueInText",
	InspectionTypeCertificateValueInQuantity: "data_platform_inspection_plan_inspection_data.InspectionTypeCertificateValueInQuantity",
	InspectionPlanInspectionText:             "data_platform_inspection_plan_inspection_data.InspectionPlanInspectionText",
	CreationDate:                             "data_platform_inspection_plan_inspection_data.CreationDate",
	LastChangeDate:                           "data_platform_inspection_plan_inspection_data.LastChangeDate",
	IsMarkedForDeletion:                      "data_platform_inspection_plan_inspection_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformInspectionPlanInspectionDatumWhere = struct {
	InspectionPlan                           whereHelperint
	Inspection                               whereHelperint
	InspectionType                           whereHelperstring
	InspectionTypeValueUnit                  whereHelpernull_String
	InspectionTypePlannedValue               whereHelpernull_Float32
	InspectionTypeCertificateType            whereHelpernull_String
	InspectionTypeCertificateValueInText     whereHelpernull_String
	InspectionTypeCertificateValueInQuantity whereHelpernull_Float32
	InspectionPlanInspectionText             whereHelpernull_String
	CreationDate                             whereHelperstring
	LastChangeDate                           whereHelperstring
	IsMarkedForDeletion                      whereHelpernull_Bool
}{
	InspectionPlan:                           whereHelperint{field: "`data_platform_inspection_plan_inspection_data`.`InspectionPlan`"},
	Inspection:                               whereHelperint{field: "`data_platform_inspection_plan_inspection_data`.`Inspection`"},
	InspectionType:                           whereHelperstring{field: "`data_platform_inspection_plan_inspection_data`.`InspectionType`"},
	InspectionTypeValueUnit:                  whereHelpernull_String{field: "`data_platform_inspection_plan_inspection_data`.`InspectionTypeValueUnit`"},
	InspectionTypePlannedValue:               whereHelpernull_Float32{field: "`data_platform_inspection_plan_inspection_data`.`InspectionTypePlannedValue`"},
	InspectionTypeCertificateType:            whereHelpernull_String{field: "`data_platform_inspection_plan_inspection_data`.`InspectionTypeCertificateType`"},
	InspectionTypeCertificateValueInText:     whereHelpernull_String{field: "`data_platform_inspection_plan_inspection_data`.`InspectionTypeCertificateValueInText`"},
	InspectionTypeCertificateValueInQuantity: whereHelpernull_Float32{field: "`data_platform_inspection_plan_inspection_data`.`InspectionTypeCertificateValueInQuantity`"},
	InspectionPlanInspectionText:             whereHelpernull_String{field: "`data_platform_inspection_plan_inspection_data`.`InspectionPlanInspectionText`"},
	CreationDate:                             whereHelperstring{field: "`data_platform_inspection_plan_inspection_data`.`CreationDate`"},
	LastChangeDate:                           whereHelperstring{field: "`data_platform_inspection_plan_inspection_data`.`LastChangeDate`"},
	IsMarkedForDeletion:                      whereHelpernull_Bool{field: "`data_platform_inspection_plan_inspection_data`.`IsMarkedForDeletion`"},
}

// DataPlatformInspectionPlanInspectionDatumRels is where relationship names are stored.
var DataPlatformInspectionPlanInspectionDatumRels = struct {
	InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum string
	InspectionPlanDataPlatformInspectionPlanHeaderDatum              string
}{
	InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum: "InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum",
	InspectionPlanDataPlatformInspectionPlanHeaderDatum:              "InspectionPlanDataPlatformInspectionPlanHeaderDatum",
}

// dataPlatformInspectionPlanInspectionDatumR is where relationships are stored.
type dataPlatformInspectionPlanInspectionDatumR struct {
	InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum *DataPlatformQuantityUnitQuantityUnitDatum `boil:"InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	InspectionPlanDataPlatformInspectionPlanHeaderDatum              *DataPlatformInspectionPlanHeaderDatum     `boil:"InspectionPlanDataPlatformInspectionPlanHeaderDatum" json:"InspectionPlanDataPlatformInspectionPlanHeaderDatum" toml:"InspectionPlanDataPlatformInspectionPlanHeaderDatum" yaml:"InspectionPlanDataPlatformInspectionPlanHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformInspectionPlanInspectionDatumR) NewStruct() *dataPlatformInspectionPlanInspectionDatumR {
	return &dataPlatformInspectionPlanInspectionDatumR{}
}

func (r *dataPlatformInspectionPlanInspectionDatumR) GetInspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformInspectionPlanInspectionDatumR) GetInspectionPlanDataPlatformInspectionPlanHeaderDatum() *DataPlatformInspectionPlanHeaderDatum {
	if r == nil {
		return nil
	}
	return r.InspectionPlanDataPlatformInspectionPlanHeaderDatum
}

// dataPlatformInspectionPlanInspectionDatumL is where Load methods for each relationship are stored.
type dataPlatformInspectionPlanInspectionDatumL struct{}

var (
	dataPlatformInspectionPlanInspectionDatumAllColumns            = []string{"InspectionPlan", "Inspection", "InspectionType", "InspectionTypeValueUnit", "InspectionTypePlannedValue", "InspectionTypeCertificateType", "InspectionTypeCertificateValueInText", "InspectionTypeCertificateValueInQuantity", "InspectionPlanInspectionText", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformInspectionPlanInspectionDatumColumnsWithoutDefault = []string{"InspectionPlan", "Inspection", "InspectionType", "InspectionTypeValueUnit", "InspectionTypePlannedValue", "InspectionTypeCertificateType", "InspectionTypeCertificateValueInText", "InspectionTypeCertificateValueInQuantity", "InspectionPlanInspectionText", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformInspectionPlanInspectionDatumColumnsWithDefault    = []string{}
	dataPlatformInspectionPlanInspectionDatumPrimaryKeyColumns     = []string{"InspectionPlan", "Inspection"}
	dataPlatformInspectionPlanInspectionDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformInspectionPlanInspectionDatumSlice is an alias for a slice of pointers to DataPlatformInspectionPlanInspectionDatum.
	// This should almost always be used instead of []DataPlatformInspectionPlanInspectionDatum.
	DataPlatformInspectionPlanInspectionDatumSlice []*DataPlatformInspectionPlanInspectionDatum

	dataPlatformInspectionPlanInspectionDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformInspectionPlanInspectionDatumType                 = reflect.TypeOf(&DataPlatformInspectionPlanInspectionDatum{})
	dataPlatformInspectionPlanInspectionDatumMapping              = queries.MakeStructMapping(dataPlatformInspectionPlanInspectionDatumType)
	dataPlatformInspectionPlanInspectionDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformInspectionPlanInspectionDatumType, dataPlatformInspectionPlanInspectionDatumMapping, dataPlatformInspectionPlanInspectionDatumPrimaryKeyColumns)
	dataPlatformInspectionPlanInspectionDatumInsertCacheMut       sync.RWMutex
	dataPlatformInspectionPlanInspectionDatumInsertCache          = make(map[string]insertCache)
	dataPlatformInspectionPlanInspectionDatumUpdateCacheMut       sync.RWMutex
	dataPlatformInspectionPlanInspectionDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformInspectionPlanInspectionDatumUpsertCacheMut       sync.RWMutex
	dataPlatformInspectionPlanInspectionDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformInspectionPlanInspectionDatum record from the query.
func (q dataPlatformInspectionPlanInspectionDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformInspectionPlanInspectionDatum, error) {
	o := &DataPlatformInspectionPlanInspectionDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_inspection_plan_inspection_data")
	}

	return o, nil
}

// All returns all DataPlatformInspectionPlanInspectionDatum records from the query.
func (q dataPlatformInspectionPlanInspectionDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformInspectionPlanInspectionDatumSlice, error) {
	var o []*DataPlatformInspectionPlanInspectionDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformInspectionPlanInspectionDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformInspectionPlanInspectionDatum records in the query.
func (q dataPlatformInspectionPlanInspectionDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_inspection_plan_inspection_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformInspectionPlanInspectionDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_inspection_plan_inspection_data exists")
	}

	return count > 0, nil
}

// InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformInspectionPlanInspectionDatum) InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.InspectionTypeValueUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// InspectionPlanDataPlatformInspectionPlanHeaderDatum pointed to by the foreign key.
func (o *DataPlatformInspectionPlanInspectionDatum) InspectionPlanDataPlatformInspectionPlanHeaderDatum(mods ...qm.QueryMod) dataPlatformInspectionPlanHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`InspectionPlan` = ?", o.InspectionPlan),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformInspectionPlanHeaderData(queryMods...)
}

// LoadInspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInspectionPlanInspectionDatumL) LoadInspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionPlanInspectionDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionPlanInspectionDatum
	var object *DataPlatformInspectionPlanInspectionDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionPlanInspectionDatum.(*DataPlatformInspectionPlanInspectionDatum)
		if !ok {
			object = new(DataPlatformInspectionPlanInspectionDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionPlanInspectionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionPlanInspectionDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionPlanInspectionDatum.(*[]*DataPlatformInspectionPlanInspectionDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionPlanInspectionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionPlanInspectionDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionPlanInspectionDatumR{}
		}
		if !queries.IsNil(object.InspectionTypeValueUnit) {
			args = append(args, object.InspectionTypeValueUnit)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionPlanInspectionDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.InspectionTypeValueUnit) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.InspectionTypeValueUnit) {
				args = append(args, obj.InspectionTypeValueUnit)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.InspectionTypeValueUnit, foreign.QuantityUnit) {
				local.R.InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadInspectionPlanDataPlatformInspectionPlanHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInspectionPlanInspectionDatumL) LoadInspectionPlanDataPlatformInspectionPlanHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionPlanInspectionDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionPlanInspectionDatum
	var object *DataPlatformInspectionPlanInspectionDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionPlanInspectionDatum.(*DataPlatformInspectionPlanInspectionDatum)
		if !ok {
			object = new(DataPlatformInspectionPlanInspectionDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionPlanInspectionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionPlanInspectionDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionPlanInspectionDatum.(*[]*DataPlatformInspectionPlanInspectionDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionPlanInspectionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionPlanInspectionDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionPlanInspectionDatumR{}
		}
		args = append(args, object.InspectionPlan)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionPlanInspectionDatumR{}
			}

			for _, a := range args {
				if a == obj.InspectionPlan {
					continue Outer
				}
			}

			args = append(args, obj.InspectionPlan)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_inspection_plan_header_data`),
		qm.WhereIn(`data_platform_inspection_plan_header_data.InspectionPlan in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformInspectionPlanHeaderDatum")
	}

	var resultSlice []*DataPlatformInspectionPlanHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformInspectionPlanHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_inspection_plan_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_inspection_plan_header_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.InspectionPlanDataPlatformInspectionPlanHeaderDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InspectionPlan == foreign.InspectionPlan {
				local.R.InspectionPlanDataPlatformInspectionPlanHeaderDatum = foreign
				break
			}
		}
	}

	return nil
}

// SetInspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformInspectionPlanInspectionDatum to the related item.
// Sets o.R.InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformInspectionPlanInspectionDatum) SetInspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_inspection_plan_inspection_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"InspectionTypeValueUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInspectionPlanInspectionDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.InspectionPlan, o.Inspection}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.InspectionTypeValueUnit, related.QuantityUnit)
	if o.R == nil {
		o.R = &dataPlatformInspectionPlanInspectionDatumR{
			InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// RemoveInspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum relationship.
// Sets o.R.InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum to nil.
func (o *DataPlatformInspectionPlanInspectionDatum) RemoveInspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error

	queries.SetScanner(&o.InspectionTypeValueUnit, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("InspectionTypeValueUnit")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetInspectionPlanDataPlatformInspectionPlanHeaderDatum of the dataPlatformInspectionPlanInspectionDatum to the related item.
// Sets o.R.InspectionPlanDataPlatformInspectionPlanHeaderDatum to related.
func (o *DataPlatformInspectionPlanInspectionDatum) SetInspectionPlanDataPlatformInspectionPlanHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformInspectionPlanHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_inspection_plan_inspection_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"InspectionPlan"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInspectionPlanInspectionDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.InspectionPlan, o.InspectionPlan, o.Inspection}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InspectionPlan = related.InspectionPlan
	if o.R == nil {
		o.R = &dataPlatformInspectionPlanInspectionDatumR{
			InspectionPlanDataPlatformInspectionPlanHeaderDatum: related,
		}
	} else {
		o.R.InspectionPlanDataPlatformInspectionPlanHeaderDatum = related
	}

	return nil
}

// DataPlatformInspectionPlanInspectionData retrieves all the records using an executor.
func DataPlatformInspectionPlanInspectionData(mods ...qm.QueryMod) dataPlatformInspectionPlanInspectionDatumQuery {
	mods = append(mods, qm.From("`data_platform_inspection_plan_inspection_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_inspection_plan_inspection_data`.*"})
	}

	return dataPlatformInspectionPlanInspectionDatumQuery{q}
}

// FindDataPlatformInspectionPlanInspectionDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformInspectionPlanInspectionDatum(ctx context.Context, exec boil.ContextExecutor, inspectionPlan int, inspection int, selectCols ...string) (*DataPlatformInspectionPlanInspectionDatum, error) {
	dataPlatformInspectionPlanInspectionDatumObj := &DataPlatformInspectionPlanInspectionDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_inspection_plan_inspection_data` where `InspectionPlan`=? AND `Inspection`=?", sel,
	)

	q := queries.Raw(query, inspectionPlan, inspection)

	err := q.Bind(ctx, exec, dataPlatformInspectionPlanInspectionDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_inspection_plan_inspection_data")
	}

	return dataPlatformInspectionPlanInspectionDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformInspectionPlanInspectionDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_inspection_plan_inspection_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformInspectionPlanInspectionDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformInspectionPlanInspectionDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformInspectionPlanInspectionDatumInsertCache[key]
	dataPlatformInspectionPlanInspectionDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformInspectionPlanInspectionDatumAllColumns,
			dataPlatformInspectionPlanInspectionDatumColumnsWithDefault,
			dataPlatformInspectionPlanInspectionDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformInspectionPlanInspectionDatumType, dataPlatformInspectionPlanInspectionDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformInspectionPlanInspectionDatumType, dataPlatformInspectionPlanInspectionDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_inspection_plan_inspection_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_inspection_plan_inspection_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_inspection_plan_inspection_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformInspectionPlanInspectionDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_inspection_plan_inspection_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.InspectionPlan,
		o.Inspection,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_inspection_plan_inspection_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformInspectionPlanInspectionDatumInsertCacheMut.Lock()
		dataPlatformInspectionPlanInspectionDatumInsertCache[key] = cache
		dataPlatformInspectionPlanInspectionDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformInspectionPlanInspectionDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformInspectionPlanInspectionDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformInspectionPlanInspectionDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformInspectionPlanInspectionDatumUpdateCache[key]
	dataPlatformInspectionPlanInspectionDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformInspectionPlanInspectionDatumAllColumns,
			dataPlatformInspectionPlanInspectionDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_inspection_plan_inspection_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_inspection_plan_inspection_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformInspectionPlanInspectionDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformInspectionPlanInspectionDatumType, dataPlatformInspectionPlanInspectionDatumMapping, append(wl, dataPlatformInspectionPlanInspectionDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_inspection_plan_inspection_data row")
	}

	if !cached {
		dataPlatformInspectionPlanInspectionDatumUpdateCacheMut.Lock()
		dataPlatformInspectionPlanInspectionDatumUpdateCache[key] = cache
		dataPlatformInspectionPlanInspectionDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformInspectionPlanInspectionDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_inspection_plan_inspection_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformInspectionPlanInspectionDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInspectionPlanInspectionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_inspection_plan_inspection_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInspectionPlanInspectionDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformInspectionPlanInspectionDatum slice")
	}

	return nil
}

var mySQLDataPlatformInspectionPlanInspectionDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformInspectionPlanInspectionDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_inspection_plan_inspection_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformInspectionPlanInspectionDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformInspectionPlanInspectionDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformInspectionPlanInspectionDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformInspectionPlanInspectionDatumUpsertCache[key]
	dataPlatformInspectionPlanInspectionDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformInspectionPlanInspectionDatumAllColumns,
			dataPlatformInspectionPlanInspectionDatumColumnsWithDefault,
			dataPlatformInspectionPlanInspectionDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformInspectionPlanInspectionDatumAllColumns,
			dataPlatformInspectionPlanInspectionDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_inspection_plan_inspection_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_inspection_plan_inspection_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_inspection_plan_inspection_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformInspectionPlanInspectionDatumType, dataPlatformInspectionPlanInspectionDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformInspectionPlanInspectionDatumType, dataPlatformInspectionPlanInspectionDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_inspection_plan_inspection_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformInspectionPlanInspectionDatumType, dataPlatformInspectionPlanInspectionDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_inspection_plan_inspection_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_inspection_plan_inspection_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformInspectionPlanInspectionDatumUpsertCacheMut.Lock()
		dataPlatformInspectionPlanInspectionDatumUpsertCache[key] = cache
		dataPlatformInspectionPlanInspectionDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformInspectionPlanInspectionDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformInspectionPlanInspectionDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformInspectionPlanInspectionDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformInspectionPlanInspectionDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_inspection_plan_inspection_data` WHERE `InspectionPlan`=? AND `Inspection`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_inspection_plan_inspection_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformInspectionPlanInspectionDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformInspectionPlanInspectionDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_inspection_plan_inspection_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformInspectionPlanInspectionDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInspectionPlanInspectionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_inspection_plan_inspection_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInspectionPlanInspectionDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformInspectionPlanInspectionDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformInspectionPlanInspectionDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformInspectionPlanInspectionDatum(ctx, exec, o.InspectionPlan, o.Inspection)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformInspectionPlanInspectionDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformInspectionPlanInspectionDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInspectionPlanInspectionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_inspection_plan_inspection_data`.* FROM `data_platform_inspection_plan_inspection_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInspectionPlanInspectionDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformInspectionPlanInspectionDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformInspectionPlanInspectionDatumExists checks if the DataPlatformInspectionPlanInspectionDatum row exists.
func DataPlatformInspectionPlanInspectionDatumExists(ctx context.Context, exec boil.ContextExecutor, inspectionPlan int, inspection int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_inspection_plan_inspection_data` where `InspectionPlan`=? AND `Inspection`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, inspectionPlan, inspection)
	}
	row := exec.QueryRowContext(ctx, sql, inspectionPlan, inspection)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_inspection_plan_inspection_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformInspectionPlanInspectionDatum row exists.
func (o *DataPlatformInspectionPlanInspectionDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformInspectionPlanInspectionDatumExists(ctx, exec, o.InspectionPlan, o.Inspection)
}
