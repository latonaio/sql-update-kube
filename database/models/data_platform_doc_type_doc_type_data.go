// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformDocTypeDocTypeDatum is an object representing the database table.
type DataPlatformDocTypeDocTypeDatum struct {
	DocType string `boil:"DocType" json:"DocType" toml:"DocType" yaml:"DocType"`

	R *dataPlatformDocTypeDocTypeDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformDocTypeDocTypeDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformDocTypeDocTypeDatumColumns = struct {
	DocType string
}{
	DocType: "DocType",
}

var DataPlatformDocTypeDocTypeDatumTableColumns = struct {
	DocType string
}{
	DocType: "data_platform_doc_type_doc_type_data.DocType",
}

// Generated where

var DataPlatformDocTypeDocTypeDatumWhere = struct {
	DocType whereHelperstring
}{
	DocType: whereHelperstring{field: "`data_platform_doc_type_doc_type_data`.`DocType`"},
}

// DataPlatformDocTypeDocTypeDatumRels is where relationship names are stored.
var DataPlatformDocTypeDocTypeDatumRels = struct {
	DocTypeDataPlatformEquipmentMasterGeneralDocData string
}{
	DocTypeDataPlatformEquipmentMasterGeneralDocData: "DocTypeDataPlatformEquipmentMasterGeneralDocData",
}

// dataPlatformDocTypeDocTypeDatumR is where relationships are stored.
type dataPlatformDocTypeDocTypeDatumR struct {
	DocTypeDataPlatformEquipmentMasterGeneralDocData DataPlatformEquipmentMasterGeneralDocDatumSlice `boil:"DocTypeDataPlatformEquipmentMasterGeneralDocData" json:"DocTypeDataPlatformEquipmentMasterGeneralDocData" toml:"DocTypeDataPlatformEquipmentMasterGeneralDocData" yaml:"DocTypeDataPlatformEquipmentMasterGeneralDocData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformDocTypeDocTypeDatumR) NewStruct() *dataPlatformDocTypeDocTypeDatumR {
	return &dataPlatformDocTypeDocTypeDatumR{}
}

func (r *dataPlatformDocTypeDocTypeDatumR) GetDocTypeDataPlatformEquipmentMasterGeneralDocData() DataPlatformEquipmentMasterGeneralDocDatumSlice {
	if r == nil {
		return nil
	}
	return r.DocTypeDataPlatformEquipmentMasterGeneralDocData
}

// dataPlatformDocTypeDocTypeDatumL is where Load methods for each relationship are stored.
type dataPlatformDocTypeDocTypeDatumL struct{}

var (
	dataPlatformDocTypeDocTypeDatumAllColumns            = []string{"DocType"}
	dataPlatformDocTypeDocTypeDatumColumnsWithoutDefault = []string{"DocType"}
	dataPlatformDocTypeDocTypeDatumColumnsWithDefault    = []string{}
	dataPlatformDocTypeDocTypeDatumPrimaryKeyColumns     = []string{"DocType"}
	dataPlatformDocTypeDocTypeDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformDocTypeDocTypeDatumSlice is an alias for a slice of pointers to DataPlatformDocTypeDocTypeDatum.
	// This should almost always be used instead of []DataPlatformDocTypeDocTypeDatum.
	DataPlatformDocTypeDocTypeDatumSlice []*DataPlatformDocTypeDocTypeDatum

	dataPlatformDocTypeDocTypeDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformDocTypeDocTypeDatumType                 = reflect.TypeOf(&DataPlatformDocTypeDocTypeDatum{})
	dataPlatformDocTypeDocTypeDatumMapping              = queries.MakeStructMapping(dataPlatformDocTypeDocTypeDatumType)
	dataPlatformDocTypeDocTypeDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformDocTypeDocTypeDatumType, dataPlatformDocTypeDocTypeDatumMapping, dataPlatformDocTypeDocTypeDatumPrimaryKeyColumns)
	dataPlatformDocTypeDocTypeDatumInsertCacheMut       sync.RWMutex
	dataPlatformDocTypeDocTypeDatumInsertCache          = make(map[string]insertCache)
	dataPlatformDocTypeDocTypeDatumUpdateCacheMut       sync.RWMutex
	dataPlatformDocTypeDocTypeDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformDocTypeDocTypeDatumUpsertCacheMut       sync.RWMutex
	dataPlatformDocTypeDocTypeDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformDocTypeDocTypeDatum record from the query.
func (q dataPlatformDocTypeDocTypeDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformDocTypeDocTypeDatum, error) {
	o := &DataPlatformDocTypeDocTypeDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_doc_type_doc_type_data")
	}

	return o, nil
}

// All returns all DataPlatformDocTypeDocTypeDatum records from the query.
func (q dataPlatformDocTypeDocTypeDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformDocTypeDocTypeDatumSlice, error) {
	var o []*DataPlatformDocTypeDocTypeDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformDocTypeDocTypeDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformDocTypeDocTypeDatum records in the query.
func (q dataPlatformDocTypeDocTypeDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_doc_type_doc_type_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformDocTypeDocTypeDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_doc_type_doc_type_data exists")
	}

	return count > 0, nil
}

// DocTypeDataPlatformEquipmentMasterGeneralDocData retrieves all the data_platform_equipment_master_general_doc_datum's DataPlatformEquipmentMasterGeneralDocData with an executor via DocType column.
func (o *DataPlatformDocTypeDocTypeDatum) DocTypeDataPlatformEquipmentMasterGeneralDocData(mods ...qm.QueryMod) dataPlatformEquipmentMasterGeneralDocDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_equipment_master_general_doc_data`.`DocType`=?", o.DocType),
	)

	return DataPlatformEquipmentMasterGeneralDocData(queryMods...)
}

// LoadDocTypeDataPlatformEquipmentMasterGeneralDocData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformDocTypeDocTypeDatumL) LoadDocTypeDataPlatformEquipmentMasterGeneralDocData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDocTypeDocTypeDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDocTypeDocTypeDatum
	var object *DataPlatformDocTypeDocTypeDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDocTypeDocTypeDatum.(*DataPlatformDocTypeDocTypeDatum)
		if !ok {
			object = new(DataPlatformDocTypeDocTypeDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDocTypeDocTypeDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDocTypeDocTypeDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDocTypeDocTypeDatum.(*[]*DataPlatformDocTypeDocTypeDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDocTypeDocTypeDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDocTypeDocTypeDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDocTypeDocTypeDatumR{}
		}
		args = append(args, object.DocType)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDocTypeDocTypeDatumR{}
			}

			for _, a := range args {
				if a == obj.DocType {
					continue Outer
				}
			}

			args = append(args, obj.DocType)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_equipment_master_general_doc_data`),
		qm.WhereIn(`data_platform_equipment_master_general_doc_data.DocType in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_equipment_master_general_doc_data")
	}

	var resultSlice []*DataPlatformEquipmentMasterGeneralDocDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_equipment_master_general_doc_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_equipment_master_general_doc_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_equipment_master_general_doc_data")
	}

	if singular {
		object.R.DocTypeDataPlatformEquipmentMasterGeneralDocData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.DocType == foreign.DocType {
				local.R.DocTypeDataPlatformEquipmentMasterGeneralDocData = append(local.R.DocTypeDataPlatformEquipmentMasterGeneralDocData, foreign)
				break
			}
		}
	}

	return nil
}

// AddDocTypeDataPlatformEquipmentMasterGeneralDocData adds the given related objects to the existing relationships
// of the data_platform_doc_type_doc_type_datum, optionally inserting them as new records.
// Appends related to o.R.DocTypeDataPlatformEquipmentMasterGeneralDocData.
func (o *DataPlatformDocTypeDocTypeDatum) AddDocTypeDataPlatformEquipmentMasterGeneralDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformEquipmentMasterGeneralDocDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DocType = o.DocType
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_equipment_master_general_doc_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DocType"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformEquipmentMasterGeneralDocDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.DocType, rel.Equipment, rel.DocType, rel.DocVersionID, rel.DocID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DocType = o.DocType
		}
	}

	if o.R == nil {
		o.R = &dataPlatformDocTypeDocTypeDatumR{
			DocTypeDataPlatformEquipmentMasterGeneralDocData: related,
		}
	} else {
		o.R.DocTypeDataPlatformEquipmentMasterGeneralDocData = append(o.R.DocTypeDataPlatformEquipmentMasterGeneralDocData, related...)
	}

	return nil
}

// DataPlatformDocTypeDocTypeData retrieves all the records using an executor.
func DataPlatformDocTypeDocTypeData(mods ...qm.QueryMod) dataPlatformDocTypeDocTypeDatumQuery {
	mods = append(mods, qm.From("`data_platform_doc_type_doc_type_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_doc_type_doc_type_data`.*"})
	}

	return dataPlatformDocTypeDocTypeDatumQuery{q}
}

// FindDataPlatformDocTypeDocTypeDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformDocTypeDocTypeDatum(ctx context.Context, exec boil.ContextExecutor, docType string, selectCols ...string) (*DataPlatformDocTypeDocTypeDatum, error) {
	dataPlatformDocTypeDocTypeDatumObj := &DataPlatformDocTypeDocTypeDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_doc_type_doc_type_data` where `DocType`=?", sel,
	)

	q := queries.Raw(query, docType)

	err := q.Bind(ctx, exec, dataPlatformDocTypeDocTypeDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_doc_type_doc_type_data")
	}

	return dataPlatformDocTypeDocTypeDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformDocTypeDocTypeDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_doc_type_doc_type_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformDocTypeDocTypeDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformDocTypeDocTypeDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformDocTypeDocTypeDatumInsertCache[key]
	dataPlatformDocTypeDocTypeDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformDocTypeDocTypeDatumAllColumns,
			dataPlatformDocTypeDocTypeDatumColumnsWithDefault,
			dataPlatformDocTypeDocTypeDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformDocTypeDocTypeDatumType, dataPlatformDocTypeDocTypeDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformDocTypeDocTypeDatumType, dataPlatformDocTypeDocTypeDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_doc_type_doc_type_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_doc_type_doc_type_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_doc_type_doc_type_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformDocTypeDocTypeDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_doc_type_doc_type_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.DocType,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_doc_type_doc_type_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformDocTypeDocTypeDatumInsertCacheMut.Lock()
		dataPlatformDocTypeDocTypeDatumInsertCache[key] = cache
		dataPlatformDocTypeDocTypeDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformDocTypeDocTypeDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformDocTypeDocTypeDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformDocTypeDocTypeDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformDocTypeDocTypeDatumUpdateCache[key]
	dataPlatformDocTypeDocTypeDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformDocTypeDocTypeDatumAllColumns,
			dataPlatformDocTypeDocTypeDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_doc_type_doc_type_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_doc_type_doc_type_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformDocTypeDocTypeDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformDocTypeDocTypeDatumType, dataPlatformDocTypeDocTypeDatumMapping, append(wl, dataPlatformDocTypeDocTypeDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_doc_type_doc_type_data row")
	}

	if !cached {
		dataPlatformDocTypeDocTypeDatumUpdateCacheMut.Lock()
		dataPlatformDocTypeDocTypeDatumUpdateCache[key] = cache
		dataPlatformDocTypeDocTypeDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformDocTypeDocTypeDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_doc_type_doc_type_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformDocTypeDocTypeDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformDocTypeDocTypeDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_doc_type_doc_type_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformDocTypeDocTypeDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformDocTypeDocTypeDatum slice")
	}

	return nil
}

var mySQLDataPlatformDocTypeDocTypeDatumUniqueColumns = []string{
	"DocType",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformDocTypeDocTypeDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_doc_type_doc_type_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformDocTypeDocTypeDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformDocTypeDocTypeDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformDocTypeDocTypeDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformDocTypeDocTypeDatumUpsertCache[key]
	dataPlatformDocTypeDocTypeDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformDocTypeDocTypeDatumAllColumns,
			dataPlatformDocTypeDocTypeDatumColumnsWithDefault,
			dataPlatformDocTypeDocTypeDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformDocTypeDocTypeDatumAllColumns,
			dataPlatformDocTypeDocTypeDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_doc_type_doc_type_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_doc_type_doc_type_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_doc_type_doc_type_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformDocTypeDocTypeDatumType, dataPlatformDocTypeDocTypeDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformDocTypeDocTypeDatumType, dataPlatformDocTypeDocTypeDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_doc_type_doc_type_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformDocTypeDocTypeDatumType, dataPlatformDocTypeDocTypeDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_doc_type_doc_type_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_doc_type_doc_type_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformDocTypeDocTypeDatumUpsertCacheMut.Lock()
		dataPlatformDocTypeDocTypeDatumUpsertCache[key] = cache
		dataPlatformDocTypeDocTypeDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformDocTypeDocTypeDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformDocTypeDocTypeDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformDocTypeDocTypeDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformDocTypeDocTypeDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_doc_type_doc_type_data` WHERE `DocType`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_doc_type_doc_type_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformDocTypeDocTypeDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformDocTypeDocTypeDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_doc_type_doc_type_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformDocTypeDocTypeDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformDocTypeDocTypeDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_doc_type_doc_type_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformDocTypeDocTypeDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformDocTypeDocTypeDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformDocTypeDocTypeDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformDocTypeDocTypeDatum(ctx, exec, o.DocType)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformDocTypeDocTypeDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformDocTypeDocTypeDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformDocTypeDocTypeDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_doc_type_doc_type_data`.* FROM `data_platform_doc_type_doc_type_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformDocTypeDocTypeDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformDocTypeDocTypeDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformDocTypeDocTypeDatumExists checks if the DataPlatformDocTypeDocTypeDatum row exists.
func DataPlatformDocTypeDocTypeDatumExists(ctx context.Context, exec boil.ContextExecutor, docType string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_doc_type_doc_type_data` where `DocType`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, docType)
	}
	row := exec.QueryRowContext(ctx, sql, docType)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_doc_type_doc_type_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformDocTypeDocTypeDatum row exists.
func (o *DataPlatformDocTypeDocTypeDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformDocTypeDocTypeDatumExists(ctx, exec, o.DocType)
}
