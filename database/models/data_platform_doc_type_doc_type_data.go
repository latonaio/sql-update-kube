// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformDocTypeDocTypeDatum is an object representing the database table.
type DataPlatformDocTypeDocTypeDatum struct {
	DocType string `boil:"DocType" json:"DocType" toml:"DocType" yaml:"DocType"`

	R *dataPlatformDocTypeDocTypeDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformDocTypeDocTypeDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformDocTypeDocTypeDatumColumns = struct {
	DocType string
}{
	DocType: "DocType",
}

var DataPlatformDocTypeDocTypeDatumTableColumns = struct {
	DocType string
}{
	DocType: "data_platform_doc_type_doc_type_data.DocType",
}

// Generated where

var DataPlatformDocTypeDocTypeDatumWhere = struct {
	DocType whereHelperstring
}{
	DocType: whereHelperstring{field: "`data_platform_doc_type_doc_type_data`.`DocType`"},
}

// DataPlatformDocTypeDocTypeDatumRels is where relationship names are stored.
var DataPlatformDocTypeDocTypeDatumRels = struct {
}{}

// dataPlatformDocTypeDocTypeDatumR is where relationships are stored.
type dataPlatformDocTypeDocTypeDatumR struct {
}

// NewStruct creates a new relationship struct
func (*dataPlatformDocTypeDocTypeDatumR) NewStruct() *dataPlatformDocTypeDocTypeDatumR {
	return &dataPlatformDocTypeDocTypeDatumR{}
}

// dataPlatformDocTypeDocTypeDatumL is where Load methods for each relationship are stored.
type dataPlatformDocTypeDocTypeDatumL struct{}

var (
	dataPlatformDocTypeDocTypeDatumAllColumns            = []string{"DocType"}
	dataPlatformDocTypeDocTypeDatumColumnsWithoutDefault = []string{"DocType"}
	dataPlatformDocTypeDocTypeDatumColumnsWithDefault    = []string{}
	dataPlatformDocTypeDocTypeDatumPrimaryKeyColumns     = []string{"DocType"}
	dataPlatformDocTypeDocTypeDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformDocTypeDocTypeDatumSlice is an alias for a slice of pointers to DataPlatformDocTypeDocTypeDatum.
	// This should almost always be used instead of []DataPlatformDocTypeDocTypeDatum.
	DataPlatformDocTypeDocTypeDatumSlice []*DataPlatformDocTypeDocTypeDatum
	// DataPlatformDocTypeDocTypeDatumHook is the signature for custom DataPlatformDocTypeDocTypeDatum hook methods
	DataPlatformDocTypeDocTypeDatumHook func(context.Context, boil.ContextExecutor, *DataPlatformDocTypeDocTypeDatum) error

	dataPlatformDocTypeDocTypeDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformDocTypeDocTypeDatumType                 = reflect.TypeOf(&DataPlatformDocTypeDocTypeDatum{})
	dataPlatformDocTypeDocTypeDatumMapping              = queries.MakeStructMapping(dataPlatformDocTypeDocTypeDatumType)
	dataPlatformDocTypeDocTypeDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformDocTypeDocTypeDatumType, dataPlatformDocTypeDocTypeDatumMapping, dataPlatformDocTypeDocTypeDatumPrimaryKeyColumns)
	dataPlatformDocTypeDocTypeDatumInsertCacheMut       sync.RWMutex
	dataPlatformDocTypeDocTypeDatumInsertCache          = make(map[string]insertCache)
	dataPlatformDocTypeDocTypeDatumUpdateCacheMut       sync.RWMutex
	dataPlatformDocTypeDocTypeDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformDocTypeDocTypeDatumUpsertCacheMut       sync.RWMutex
	dataPlatformDocTypeDocTypeDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dataPlatformDocTypeDocTypeDatumAfterSelectHooks []DataPlatformDocTypeDocTypeDatumHook

var dataPlatformDocTypeDocTypeDatumBeforeInsertHooks []DataPlatformDocTypeDocTypeDatumHook
var dataPlatformDocTypeDocTypeDatumAfterInsertHooks []DataPlatformDocTypeDocTypeDatumHook

var dataPlatformDocTypeDocTypeDatumBeforeUpdateHooks []DataPlatformDocTypeDocTypeDatumHook
var dataPlatformDocTypeDocTypeDatumAfterUpdateHooks []DataPlatformDocTypeDocTypeDatumHook

var dataPlatformDocTypeDocTypeDatumBeforeDeleteHooks []DataPlatformDocTypeDocTypeDatumHook
var dataPlatformDocTypeDocTypeDatumAfterDeleteHooks []DataPlatformDocTypeDocTypeDatumHook

var dataPlatformDocTypeDocTypeDatumBeforeUpsertHooks []DataPlatformDocTypeDocTypeDatumHook
var dataPlatformDocTypeDocTypeDatumAfterUpsertHooks []DataPlatformDocTypeDocTypeDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DataPlatformDocTypeDocTypeDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformDocTypeDocTypeDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DataPlatformDocTypeDocTypeDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformDocTypeDocTypeDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DataPlatformDocTypeDocTypeDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformDocTypeDocTypeDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DataPlatformDocTypeDocTypeDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformDocTypeDocTypeDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DataPlatformDocTypeDocTypeDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformDocTypeDocTypeDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DataPlatformDocTypeDocTypeDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformDocTypeDocTypeDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DataPlatformDocTypeDocTypeDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformDocTypeDocTypeDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DataPlatformDocTypeDocTypeDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformDocTypeDocTypeDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DataPlatformDocTypeDocTypeDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformDocTypeDocTypeDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDataPlatformDocTypeDocTypeDatumHook registers your hook function for all future operations.
func AddDataPlatformDocTypeDocTypeDatumHook(hookPoint boil.HookPoint, dataPlatformDocTypeDocTypeDatumHook DataPlatformDocTypeDocTypeDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dataPlatformDocTypeDocTypeDatumAfterSelectHooks = append(dataPlatformDocTypeDocTypeDatumAfterSelectHooks, dataPlatformDocTypeDocTypeDatumHook)
	case boil.BeforeInsertHook:
		dataPlatformDocTypeDocTypeDatumBeforeInsertHooks = append(dataPlatformDocTypeDocTypeDatumBeforeInsertHooks, dataPlatformDocTypeDocTypeDatumHook)
	case boil.AfterInsertHook:
		dataPlatformDocTypeDocTypeDatumAfterInsertHooks = append(dataPlatformDocTypeDocTypeDatumAfterInsertHooks, dataPlatformDocTypeDocTypeDatumHook)
	case boil.BeforeUpdateHook:
		dataPlatformDocTypeDocTypeDatumBeforeUpdateHooks = append(dataPlatformDocTypeDocTypeDatumBeforeUpdateHooks, dataPlatformDocTypeDocTypeDatumHook)
	case boil.AfterUpdateHook:
		dataPlatformDocTypeDocTypeDatumAfterUpdateHooks = append(dataPlatformDocTypeDocTypeDatumAfterUpdateHooks, dataPlatformDocTypeDocTypeDatumHook)
	case boil.BeforeDeleteHook:
		dataPlatformDocTypeDocTypeDatumBeforeDeleteHooks = append(dataPlatformDocTypeDocTypeDatumBeforeDeleteHooks, dataPlatformDocTypeDocTypeDatumHook)
	case boil.AfterDeleteHook:
		dataPlatformDocTypeDocTypeDatumAfterDeleteHooks = append(dataPlatformDocTypeDocTypeDatumAfterDeleteHooks, dataPlatformDocTypeDocTypeDatumHook)
	case boil.BeforeUpsertHook:
		dataPlatformDocTypeDocTypeDatumBeforeUpsertHooks = append(dataPlatformDocTypeDocTypeDatumBeforeUpsertHooks, dataPlatformDocTypeDocTypeDatumHook)
	case boil.AfterUpsertHook:
		dataPlatformDocTypeDocTypeDatumAfterUpsertHooks = append(dataPlatformDocTypeDocTypeDatumAfterUpsertHooks, dataPlatformDocTypeDocTypeDatumHook)
	}
}

// One returns a single dataPlatformDocTypeDocTypeDatum record from the query.
func (q dataPlatformDocTypeDocTypeDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformDocTypeDocTypeDatum, error) {
	o := &DataPlatformDocTypeDocTypeDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_doc_type_doc_type_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DataPlatformDocTypeDocTypeDatum records from the query.
func (q dataPlatformDocTypeDocTypeDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformDocTypeDocTypeDatumSlice, error) {
	var o []*DataPlatformDocTypeDocTypeDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformDocTypeDocTypeDatum slice")
	}

	if len(dataPlatformDocTypeDocTypeDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DataPlatformDocTypeDocTypeDatum records in the query.
func (q dataPlatformDocTypeDocTypeDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_doc_type_doc_type_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformDocTypeDocTypeDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_doc_type_doc_type_data exists")
	}

	return count > 0, nil
}

// DataPlatformDocTypeDocTypeData retrieves all the records using an executor.
func DataPlatformDocTypeDocTypeData(mods ...qm.QueryMod) dataPlatformDocTypeDocTypeDatumQuery {
	mods = append(mods, qm.From("`data_platform_doc_type_doc_type_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_doc_type_doc_type_data`.*"})
	}

	return dataPlatformDocTypeDocTypeDatumQuery{q}
}

// FindDataPlatformDocTypeDocTypeDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformDocTypeDocTypeDatum(ctx context.Context, exec boil.ContextExecutor, docType string, selectCols ...string) (*DataPlatformDocTypeDocTypeDatum, error) {
	dataPlatformDocTypeDocTypeDatumObj := &DataPlatformDocTypeDocTypeDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_doc_type_doc_type_data` where `DocType`=?", sel,
	)

	q := queries.Raw(query, docType)

	err := q.Bind(ctx, exec, dataPlatformDocTypeDocTypeDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_doc_type_doc_type_data")
	}

	if err = dataPlatformDocTypeDocTypeDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dataPlatformDocTypeDocTypeDatumObj, err
	}

	return dataPlatformDocTypeDocTypeDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformDocTypeDocTypeDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_doc_type_doc_type_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformDocTypeDocTypeDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformDocTypeDocTypeDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformDocTypeDocTypeDatumInsertCache[key]
	dataPlatformDocTypeDocTypeDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformDocTypeDocTypeDatumAllColumns,
			dataPlatformDocTypeDocTypeDatumColumnsWithDefault,
			dataPlatformDocTypeDocTypeDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformDocTypeDocTypeDatumType, dataPlatformDocTypeDocTypeDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformDocTypeDocTypeDatumType, dataPlatformDocTypeDocTypeDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_doc_type_doc_type_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_doc_type_doc_type_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_doc_type_doc_type_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformDocTypeDocTypeDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_doc_type_doc_type_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.DocType,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_doc_type_doc_type_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformDocTypeDocTypeDatumInsertCacheMut.Lock()
		dataPlatformDocTypeDocTypeDatumInsertCache[key] = cache
		dataPlatformDocTypeDocTypeDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DataPlatformDocTypeDocTypeDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformDocTypeDocTypeDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dataPlatformDocTypeDocTypeDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformDocTypeDocTypeDatumUpdateCache[key]
	dataPlatformDocTypeDocTypeDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformDocTypeDocTypeDatumAllColumns,
			dataPlatformDocTypeDocTypeDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update data_platform_doc_type_doc_type_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_doc_type_doc_type_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformDocTypeDocTypeDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformDocTypeDocTypeDatumType, dataPlatformDocTypeDocTypeDatumMapping, append(wl, dataPlatformDocTypeDocTypeDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update data_platform_doc_type_doc_type_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for data_platform_doc_type_doc_type_data")
	}

	if !cached {
		dataPlatformDocTypeDocTypeDatumUpdateCacheMut.Lock()
		dataPlatformDocTypeDocTypeDatumUpdateCache[key] = cache
		dataPlatformDocTypeDocTypeDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformDocTypeDocTypeDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for data_platform_doc_type_doc_type_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for data_platform_doc_type_doc_type_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformDocTypeDocTypeDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformDocTypeDocTypeDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_doc_type_doc_type_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformDocTypeDocTypeDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dataPlatformDocTypeDocTypeDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dataPlatformDocTypeDocTypeDatum")
	}
	return rowsAff, nil
}

var mySQLDataPlatformDocTypeDocTypeDatumUniqueColumns = []string{
	"DocType",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformDocTypeDocTypeDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_doc_type_doc_type_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformDocTypeDocTypeDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformDocTypeDocTypeDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformDocTypeDocTypeDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformDocTypeDocTypeDatumUpsertCache[key]
	dataPlatformDocTypeDocTypeDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformDocTypeDocTypeDatumAllColumns,
			dataPlatformDocTypeDocTypeDatumColumnsWithDefault,
			dataPlatformDocTypeDocTypeDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformDocTypeDocTypeDatumAllColumns,
			dataPlatformDocTypeDocTypeDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_doc_type_doc_type_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_doc_type_doc_type_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_doc_type_doc_type_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformDocTypeDocTypeDatumType, dataPlatformDocTypeDocTypeDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformDocTypeDocTypeDatumType, dataPlatformDocTypeDocTypeDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_doc_type_doc_type_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformDocTypeDocTypeDatumType, dataPlatformDocTypeDocTypeDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_doc_type_doc_type_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_doc_type_doc_type_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformDocTypeDocTypeDatumUpsertCacheMut.Lock()
		dataPlatformDocTypeDocTypeDatumUpsertCache[key] = cache
		dataPlatformDocTypeDocTypeDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DataPlatformDocTypeDocTypeDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformDocTypeDocTypeDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DataPlatformDocTypeDocTypeDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformDocTypeDocTypeDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_doc_type_doc_type_data` WHERE `DocType`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from data_platform_doc_type_doc_type_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for data_platform_doc_type_doc_type_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformDocTypeDocTypeDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dataPlatformDocTypeDocTypeDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from data_platform_doc_type_doc_type_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_doc_type_doc_type_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformDocTypeDocTypeDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dataPlatformDocTypeDocTypeDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformDocTypeDocTypeDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_doc_type_doc_type_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformDocTypeDocTypeDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dataPlatformDocTypeDocTypeDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_doc_type_doc_type_data")
	}

	if len(dataPlatformDocTypeDocTypeDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformDocTypeDocTypeDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformDocTypeDocTypeDatum(ctx, exec, o.DocType)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformDocTypeDocTypeDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformDocTypeDocTypeDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformDocTypeDocTypeDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_doc_type_doc_type_data`.* FROM `data_platform_doc_type_doc_type_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformDocTypeDocTypeDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformDocTypeDocTypeDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformDocTypeDocTypeDatumExists checks if the DataPlatformDocTypeDocTypeDatum row exists.
func DataPlatformDocTypeDocTypeDatumExists(ctx context.Context, exec boil.ContextExecutor, docType string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_doc_type_doc_type_data` where `DocType`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, docType)
	}
	row := exec.QueryRowContext(ctx, sql, docType)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_doc_type_doc_type_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformDocTypeDocTypeDatum row exists.
func (o *DataPlatformDocTypeDocTypeDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformDocTypeDocTypeDatumExists(ctx, exec, o.DocType)
}
