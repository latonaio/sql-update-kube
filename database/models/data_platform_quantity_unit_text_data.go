// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformQuantityUnitTextDatum is an object representing the database table.
type DataPlatformQuantityUnitTextDatum struct {
	QuantityUnit     string      `boil:"QuantityUnit" json:"QuantityUnit" toml:"QuantityUnit" yaml:"QuantityUnit"`
	Language         string      `boil:"Language" json:"Language" toml:"Language" yaml:"Language"`
	QuantityUnitName null.String `boil:"QuantityUnitName" json:"QuantityUnitName,omitempty" toml:"QuantityUnitName" yaml:"QuantityUnitName,omitempty"`

	R *dataPlatformQuantityUnitTextDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformQuantityUnitTextDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformQuantityUnitTextDatumColumns = struct {
	QuantityUnit     string
	Language         string
	QuantityUnitName string
}{
	QuantityUnit:     "QuantityUnit",
	Language:         "Language",
	QuantityUnitName: "QuantityUnitName",
}

var DataPlatformQuantityUnitTextDatumTableColumns = struct {
	QuantityUnit     string
	Language         string
	QuantityUnitName string
}{
	QuantityUnit:     "data_platform_quantity_unit_text_data.QuantityUnit",
	Language:         "data_platform_quantity_unit_text_data.Language",
	QuantityUnitName: "data_platform_quantity_unit_text_data.QuantityUnitName",
}

// Generated where

var DataPlatformQuantityUnitTextDatumWhere = struct {
	QuantityUnit     whereHelperstring
	Language         whereHelperstring
	QuantityUnitName whereHelpernull_String
}{
	QuantityUnit:     whereHelperstring{field: "`data_platform_quantity_unit_text_data`.`QuantityUnit`"},
	Language:         whereHelperstring{field: "`data_platform_quantity_unit_text_data`.`Language`"},
	QuantityUnitName: whereHelpernull_String{field: "`data_platform_quantity_unit_text_data`.`QuantityUnitName`"},
}

// DataPlatformQuantityUnitTextDatumRels is where relationship names are stored.
var DataPlatformQuantityUnitTextDatumRels = struct {
	QuantityUnitDataPlatformQuantityUnitQuantityUnitDatum string
}{
	QuantityUnitDataPlatformQuantityUnitQuantityUnitDatum: "QuantityUnitDataPlatformQuantityUnitQuantityUnitDatum",
}

// dataPlatformQuantityUnitTextDatumR is where relationships are stored.
type dataPlatformQuantityUnitTextDatumR struct {
	QuantityUnitDataPlatformQuantityUnitQuantityUnitDatum *DataPlatformQuantityUnitQuantityUnitDatum `boil:"QuantityUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"QuantityUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"QuantityUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"QuantityUnitDataPlatformQuantityUnitQuantityUnitDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformQuantityUnitTextDatumR) NewStruct() *dataPlatformQuantityUnitTextDatumR {
	return &dataPlatformQuantityUnitTextDatumR{}
}

func (r *dataPlatformQuantityUnitTextDatumR) GetQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.QuantityUnitDataPlatformQuantityUnitQuantityUnitDatum
}

// dataPlatformQuantityUnitTextDatumL is where Load methods for each relationship are stored.
type dataPlatformQuantityUnitTextDatumL struct{}

var (
	dataPlatformQuantityUnitTextDatumAllColumns            = []string{"QuantityUnit", "Language", "QuantityUnitName"}
	dataPlatformQuantityUnitTextDatumColumnsWithoutDefault = []string{"QuantityUnit", "Language", "QuantityUnitName"}
	dataPlatformQuantityUnitTextDatumColumnsWithDefault    = []string{}
	dataPlatformQuantityUnitTextDatumPrimaryKeyColumns     = []string{"QuantityUnit", "Language"}
	dataPlatformQuantityUnitTextDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformQuantityUnitTextDatumSlice is an alias for a slice of pointers to DataPlatformQuantityUnitTextDatum.
	// This should almost always be used instead of []DataPlatformQuantityUnitTextDatum.
	DataPlatformQuantityUnitTextDatumSlice []*DataPlatformQuantityUnitTextDatum

	dataPlatformQuantityUnitTextDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformQuantityUnitTextDatumType                 = reflect.TypeOf(&DataPlatformQuantityUnitTextDatum{})
	dataPlatformQuantityUnitTextDatumMapping              = queries.MakeStructMapping(dataPlatformQuantityUnitTextDatumType)
	dataPlatformQuantityUnitTextDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformQuantityUnitTextDatumType, dataPlatformQuantityUnitTextDatumMapping, dataPlatformQuantityUnitTextDatumPrimaryKeyColumns)
	dataPlatformQuantityUnitTextDatumInsertCacheMut       sync.RWMutex
	dataPlatformQuantityUnitTextDatumInsertCache          = make(map[string]insertCache)
	dataPlatformQuantityUnitTextDatumUpdateCacheMut       sync.RWMutex
	dataPlatformQuantityUnitTextDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformQuantityUnitTextDatumUpsertCacheMut       sync.RWMutex
	dataPlatformQuantityUnitTextDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformQuantityUnitTextDatum record from the query.
func (q dataPlatformQuantityUnitTextDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformQuantityUnitTextDatum, error) {
	o := &DataPlatformQuantityUnitTextDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_quantity_unit_text_data")
	}

	return o, nil
}

// All returns all DataPlatformQuantityUnitTextDatum records from the query.
func (q dataPlatformQuantityUnitTextDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformQuantityUnitTextDatumSlice, error) {
	var o []*DataPlatformQuantityUnitTextDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformQuantityUnitTextDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformQuantityUnitTextDatum records in the query.
func (q dataPlatformQuantityUnitTextDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_quantity_unit_text_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformQuantityUnitTextDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_quantity_unit_text_data exists")
	}

	return count > 0, nil
}

// QuantityUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformQuantityUnitTextDatum) QuantityUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.QuantityUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// LoadQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformQuantityUnitTextDatumL) LoadQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitTextDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitTextDatum
	var object *DataPlatformQuantityUnitTextDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitTextDatum.(*DataPlatformQuantityUnitTextDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitTextDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitTextDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitTextDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitTextDatum.(*[]*DataPlatformQuantityUnitTextDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitTextDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitTextDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitTextDatumR{}
		}
		args = append(args, object.QuantityUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitTextDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.QuantityUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.QuantityUnit == foreign.QuantityUnit {
				local.R.QuantityUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// SetQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformQuantityUnitTextDatum to the related item.
// Sets o.R.QuantityUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformQuantityUnitTextDatum) SetQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_quantity_unit_text_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"QuantityUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformQuantityUnitTextDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.QuantityUnit, o.Language}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.QuantityUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformQuantityUnitTextDatumR{
			QuantityUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.QuantityUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// DataPlatformQuantityUnitTextData retrieves all the records using an executor.
func DataPlatformQuantityUnitTextData(mods ...qm.QueryMod) dataPlatformQuantityUnitTextDatumQuery {
	mods = append(mods, qm.From("`data_platform_quantity_unit_text_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_quantity_unit_text_data`.*"})
	}

	return dataPlatformQuantityUnitTextDatumQuery{q}
}

// FindDataPlatformQuantityUnitTextDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformQuantityUnitTextDatum(ctx context.Context, exec boil.ContextExecutor, quantityUnit string, language string, selectCols ...string) (*DataPlatformQuantityUnitTextDatum, error) {
	dataPlatformQuantityUnitTextDatumObj := &DataPlatformQuantityUnitTextDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_quantity_unit_text_data` where `QuantityUnit`=? AND `Language`=?", sel,
	)

	q := queries.Raw(query, quantityUnit, language)

	err := q.Bind(ctx, exec, dataPlatformQuantityUnitTextDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_quantity_unit_text_data")
	}

	return dataPlatformQuantityUnitTextDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformQuantityUnitTextDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_quantity_unit_text_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformQuantityUnitTextDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformQuantityUnitTextDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformQuantityUnitTextDatumInsertCache[key]
	dataPlatformQuantityUnitTextDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformQuantityUnitTextDatumAllColumns,
			dataPlatformQuantityUnitTextDatumColumnsWithDefault,
			dataPlatformQuantityUnitTextDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformQuantityUnitTextDatumType, dataPlatformQuantityUnitTextDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformQuantityUnitTextDatumType, dataPlatformQuantityUnitTextDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_quantity_unit_text_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_quantity_unit_text_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_quantity_unit_text_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformQuantityUnitTextDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_quantity_unit_text_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.QuantityUnit,
		o.Language,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_quantity_unit_text_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformQuantityUnitTextDatumInsertCacheMut.Lock()
		dataPlatformQuantityUnitTextDatumInsertCache[key] = cache
		dataPlatformQuantityUnitTextDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformQuantityUnitTextDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformQuantityUnitTextDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformQuantityUnitTextDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformQuantityUnitTextDatumUpdateCache[key]
	dataPlatformQuantityUnitTextDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformQuantityUnitTextDatumAllColumns,
			dataPlatformQuantityUnitTextDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_quantity_unit_text_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_quantity_unit_text_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformQuantityUnitTextDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformQuantityUnitTextDatumType, dataPlatformQuantityUnitTextDatumMapping, append(wl, dataPlatformQuantityUnitTextDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_quantity_unit_text_data row")
	}

	if !cached {
		dataPlatformQuantityUnitTextDatumUpdateCacheMut.Lock()
		dataPlatformQuantityUnitTextDatumUpdateCache[key] = cache
		dataPlatformQuantityUnitTextDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformQuantityUnitTextDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_quantity_unit_text_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformQuantityUnitTextDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformQuantityUnitTextDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_quantity_unit_text_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformQuantityUnitTextDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformQuantityUnitTextDatum slice")
	}

	return nil
}

var mySQLDataPlatformQuantityUnitTextDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformQuantityUnitTextDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_quantity_unit_text_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformQuantityUnitTextDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformQuantityUnitTextDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformQuantityUnitTextDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformQuantityUnitTextDatumUpsertCache[key]
	dataPlatformQuantityUnitTextDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformQuantityUnitTextDatumAllColumns,
			dataPlatformQuantityUnitTextDatumColumnsWithDefault,
			dataPlatformQuantityUnitTextDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformQuantityUnitTextDatumAllColumns,
			dataPlatformQuantityUnitTextDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_quantity_unit_text_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_quantity_unit_text_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_quantity_unit_text_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformQuantityUnitTextDatumType, dataPlatformQuantityUnitTextDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformQuantityUnitTextDatumType, dataPlatformQuantityUnitTextDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_quantity_unit_text_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformQuantityUnitTextDatumType, dataPlatformQuantityUnitTextDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_quantity_unit_text_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_quantity_unit_text_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformQuantityUnitTextDatumUpsertCacheMut.Lock()
		dataPlatformQuantityUnitTextDatumUpsertCache[key] = cache
		dataPlatformQuantityUnitTextDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformQuantityUnitTextDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformQuantityUnitTextDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformQuantityUnitTextDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformQuantityUnitTextDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_quantity_unit_text_data` WHERE `QuantityUnit`=? AND `Language`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_quantity_unit_text_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformQuantityUnitTextDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformQuantityUnitTextDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_quantity_unit_text_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformQuantityUnitTextDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformQuantityUnitTextDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_quantity_unit_text_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformQuantityUnitTextDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformQuantityUnitTextDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformQuantityUnitTextDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformQuantityUnitTextDatum(ctx, exec, o.QuantityUnit, o.Language)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformQuantityUnitTextDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformQuantityUnitTextDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformQuantityUnitTextDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_quantity_unit_text_data`.* FROM `data_platform_quantity_unit_text_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformQuantityUnitTextDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformQuantityUnitTextDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformQuantityUnitTextDatumExists checks if the DataPlatformQuantityUnitTextDatum row exists.
func DataPlatformQuantityUnitTextDatumExists(ctx context.Context, exec boil.ContextExecutor, quantityUnit string, language string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_quantity_unit_text_data` where `QuantityUnit`=? AND `Language`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, quantityUnit, language)
	}
	row := exec.QueryRowContext(ctx, sql, quantityUnit, language)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_quantity_unit_text_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformQuantityUnitTextDatum row exists.
func (o *DataPlatformQuantityUnitTextDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformQuantityUnitTextDatumExists(ctx, exec, o.QuantityUnit, o.Language)
}
