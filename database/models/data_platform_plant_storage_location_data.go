// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformPlantStorageLocationDatum is an object representing the database table.
type DataPlatformPlantStorageLocationDatum struct {
	BusinessPartner              int         `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	Plant                        string      `boil:"Plant" json:"Plant" toml:"Plant" yaml:"Plant"`
	StorageLocation              string      `boil:"StorageLocation" json:"StorageLocation" toml:"StorageLocation" yaml:"StorageLocation"`
	StorageLocationFullName      null.String `boil:"StorageLocationFullName" json:"StorageLocationFullName,omitempty" toml:"StorageLocationFullName" yaml:"StorageLocationFullName,omitempty"`
	StorageLocationName          string      `boil:"StorageLocationName" json:"StorageLocationName" toml:"StorageLocationName" yaml:"StorageLocationName"`
	CreationDate                 time.Time   `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	CreationTime                 string      `boil:"CreationTime" json:"CreationTime" toml:"CreationTime" yaml:"CreationTime"`
	LastChangeDate               time.Time   `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	LastChangeTime               string      `boil:"LastChangeTime" json:"LastChangeTime" toml:"LastChangeTime" yaml:"LastChangeTime"`
	SearchTerm1                  null.String `boil:"SearchTerm1" json:"SearchTerm1,omitempty" toml:"SearchTerm1" yaml:"SearchTerm1,omitempty"`
	SearchTerm2                  null.String `boil:"SearchTerm2" json:"SearchTerm2,omitempty" toml:"SearchTerm2" yaml:"SearchTerm2,omitempty"`
	StorageLocationIsBlocked     null.Bool   `boil:"StorageLocationIsBlocked" json:"StorageLocationIsBlocked,omitempty" toml:"StorageLocationIsBlocked" yaml:"StorageLocationIsBlocked,omitempty"`
	GroupStorageLocationName1    null.String `boil:"GroupStorageLocationName1" json:"GroupStorageLocationName1,omitempty" toml:"GroupStorageLocationName1" yaml:"GroupStorageLocationName1,omitempty"`
	GroupStorageLocationName2    null.String `boil:"GroupStorageLocationName2" json:"GroupStorageLocationName2,omitempty" toml:"GroupStorageLocationName2" yaml:"GroupStorageLocationName2,omitempty"`
	StorageLocationIDByExtSystem null.String `boil:"StorageLocationIDByExtSystem" json:"StorageLocationIDByExtSystem,omitempty" toml:"StorageLocationIDByExtSystem" yaml:"StorageLocationIDByExtSystem,omitempty"`
	IsMarkedForDeletion          null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformPlantStorageLocationDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformPlantStorageLocationDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformPlantStorageLocationDatumColumns = struct {
	BusinessPartner              string
	Plant                        string
	StorageLocation              string
	StorageLocationFullName      string
	StorageLocationName          string
	CreationDate                 string
	CreationTime                 string
	LastChangeDate               string
	LastChangeTime               string
	SearchTerm1                  string
	SearchTerm2                  string
	StorageLocationIsBlocked     string
	GroupStorageLocationName1    string
	GroupStorageLocationName2    string
	StorageLocationIDByExtSystem string
	IsMarkedForDeletion          string
}{
	BusinessPartner:              "BusinessPartner",
	Plant:                        "Plant",
	StorageLocation:              "StorageLocation",
	StorageLocationFullName:      "StorageLocationFullName",
	StorageLocationName:          "StorageLocationName",
	CreationDate:                 "CreationDate",
	CreationTime:                 "CreationTime",
	LastChangeDate:               "LastChangeDate",
	LastChangeTime:               "LastChangeTime",
	SearchTerm1:                  "SearchTerm1",
	SearchTerm2:                  "SearchTerm2",
	StorageLocationIsBlocked:     "StorageLocationIsBlocked",
	GroupStorageLocationName1:    "GroupStorageLocationName1",
	GroupStorageLocationName2:    "GroupStorageLocationName2",
	StorageLocationIDByExtSystem: "StorageLocationIDByExtSystem",
	IsMarkedForDeletion:          "IsMarkedForDeletion",
}

var DataPlatformPlantStorageLocationDatumTableColumns = struct {
	BusinessPartner              string
	Plant                        string
	StorageLocation              string
	StorageLocationFullName      string
	StorageLocationName          string
	CreationDate                 string
	CreationTime                 string
	LastChangeDate               string
	LastChangeTime               string
	SearchTerm1                  string
	SearchTerm2                  string
	StorageLocationIsBlocked     string
	GroupStorageLocationName1    string
	GroupStorageLocationName2    string
	StorageLocationIDByExtSystem string
	IsMarkedForDeletion          string
}{
	BusinessPartner:              "data_platform_plant_storage_location_data.BusinessPartner",
	Plant:                        "data_platform_plant_storage_location_data.Plant",
	StorageLocation:              "data_platform_plant_storage_location_data.StorageLocation",
	StorageLocationFullName:      "data_platform_plant_storage_location_data.StorageLocationFullName",
	StorageLocationName:          "data_platform_plant_storage_location_data.StorageLocationName",
	CreationDate:                 "data_platform_plant_storage_location_data.CreationDate",
	CreationTime:                 "data_platform_plant_storage_location_data.CreationTime",
	LastChangeDate:               "data_platform_plant_storage_location_data.LastChangeDate",
	LastChangeTime:               "data_platform_plant_storage_location_data.LastChangeTime",
	SearchTerm1:                  "data_platform_plant_storage_location_data.SearchTerm1",
	SearchTerm2:                  "data_platform_plant_storage_location_data.SearchTerm2",
	StorageLocationIsBlocked:     "data_platform_plant_storage_location_data.StorageLocationIsBlocked",
	GroupStorageLocationName1:    "data_platform_plant_storage_location_data.GroupStorageLocationName1",
	GroupStorageLocationName2:    "data_platform_plant_storage_location_data.GroupStorageLocationName2",
	StorageLocationIDByExtSystem: "data_platform_plant_storage_location_data.StorageLocationIDByExtSystem",
	IsMarkedForDeletion:          "data_platform_plant_storage_location_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformPlantStorageLocationDatumWhere = struct {
	BusinessPartner              whereHelperint
	Plant                        whereHelperstring
	StorageLocation              whereHelperstring
	StorageLocationFullName      whereHelpernull_String
	StorageLocationName          whereHelperstring
	CreationDate                 whereHelpertime_Time
	CreationTime                 whereHelperstring
	LastChangeDate               whereHelpertime_Time
	LastChangeTime               whereHelperstring
	SearchTerm1                  whereHelpernull_String
	SearchTerm2                  whereHelpernull_String
	StorageLocationIsBlocked     whereHelpernull_Bool
	GroupStorageLocationName1    whereHelpernull_String
	GroupStorageLocationName2    whereHelpernull_String
	StorageLocationIDByExtSystem whereHelpernull_String
	IsMarkedForDeletion          whereHelpernull_Bool
}{
	BusinessPartner:              whereHelperint{field: "`data_platform_plant_storage_location_data`.`BusinessPartner`"},
	Plant:                        whereHelperstring{field: "`data_platform_plant_storage_location_data`.`Plant`"},
	StorageLocation:              whereHelperstring{field: "`data_platform_plant_storage_location_data`.`StorageLocation`"},
	StorageLocationFullName:      whereHelpernull_String{field: "`data_platform_plant_storage_location_data`.`StorageLocationFullName`"},
	StorageLocationName:          whereHelperstring{field: "`data_platform_plant_storage_location_data`.`StorageLocationName`"},
	CreationDate:                 whereHelpertime_Time{field: "`data_platform_plant_storage_location_data`.`CreationDate`"},
	CreationTime:                 whereHelperstring{field: "`data_platform_plant_storage_location_data`.`CreationTime`"},
	LastChangeDate:               whereHelpertime_Time{field: "`data_platform_plant_storage_location_data`.`LastChangeDate`"},
	LastChangeTime:               whereHelperstring{field: "`data_platform_plant_storage_location_data`.`LastChangeTime`"},
	SearchTerm1:                  whereHelpernull_String{field: "`data_platform_plant_storage_location_data`.`SearchTerm1`"},
	SearchTerm2:                  whereHelpernull_String{field: "`data_platform_plant_storage_location_data`.`SearchTerm2`"},
	StorageLocationIsBlocked:     whereHelpernull_Bool{field: "`data_platform_plant_storage_location_data`.`StorageLocationIsBlocked`"},
	GroupStorageLocationName1:    whereHelpernull_String{field: "`data_platform_plant_storage_location_data`.`GroupStorageLocationName1`"},
	GroupStorageLocationName2:    whereHelpernull_String{field: "`data_platform_plant_storage_location_data`.`GroupStorageLocationName2`"},
	StorageLocationIDByExtSystem: whereHelpernull_String{field: "`data_platform_plant_storage_location_data`.`StorageLocationIDByExtSystem`"},
	IsMarkedForDeletion:          whereHelpernull_Bool{field: "`data_platform_plant_storage_location_data`.`IsMarkedForDeletion`"},
}

// DataPlatformPlantStorageLocationDatumRels is where relationship names are stored.
var DataPlatformPlantStorageLocationDatumRels = struct {
	BusinessPartnerDataPlatformPlantGeneralDatum        string
	BusinessPartnerDataPlatformProductMasterBPPlantData string
}{
	BusinessPartnerDataPlatformPlantGeneralDatum:        "BusinessPartnerDataPlatformPlantGeneralDatum",
	BusinessPartnerDataPlatformProductMasterBPPlantData: "BusinessPartnerDataPlatformProductMasterBPPlantData",
}

// dataPlatformPlantStorageLocationDatumR is where relationships are stored.
type dataPlatformPlantStorageLocationDatumR struct {
	BusinessPartnerDataPlatformPlantGeneralDatum        *DataPlatformPlantGeneralDatum             `boil:"BusinessPartnerDataPlatformPlantGeneralDatum" json:"BusinessPartnerDataPlatformPlantGeneralDatum" toml:"BusinessPartnerDataPlatformPlantGeneralDatum" yaml:"BusinessPartnerDataPlatformPlantGeneralDatum"`
	BusinessPartnerDataPlatformProductMasterBPPlantData DataPlatformProductMasterBPPlantDatumSlice `boil:"BusinessPartnerDataPlatformProductMasterBPPlantData" json:"BusinessPartnerDataPlatformProductMasterBPPlantData" toml:"BusinessPartnerDataPlatformProductMasterBPPlantData" yaml:"BusinessPartnerDataPlatformProductMasterBPPlantData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformPlantStorageLocationDatumR) NewStruct() *dataPlatformPlantStorageLocationDatumR {
	return &dataPlatformPlantStorageLocationDatumR{}
}

func (r *dataPlatformPlantStorageLocationDatumR) GetBusinessPartnerDataPlatformPlantGeneralDatum() *DataPlatformPlantGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformPlantGeneralDatum
}

func (r *dataPlatformPlantStorageLocationDatumR) GetBusinessPartnerDataPlatformProductMasterBPPlantData() DataPlatformProductMasterBPPlantDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformProductMasterBPPlantData
}

// dataPlatformPlantStorageLocationDatumL is where Load methods for each relationship are stored.
type dataPlatformPlantStorageLocationDatumL struct{}

var (
	dataPlatformPlantStorageLocationDatumAllColumns            = []string{"BusinessPartner", "Plant", "StorageLocation", "StorageLocationFullName", "StorageLocationName", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "SearchTerm1", "SearchTerm2", "StorageLocationIsBlocked", "GroupStorageLocationName1", "GroupStorageLocationName2", "StorageLocationIDByExtSystem", "IsMarkedForDeletion"}
	dataPlatformPlantStorageLocationDatumColumnsWithoutDefault = []string{"BusinessPartner", "Plant", "StorageLocation", "StorageLocationFullName", "StorageLocationName", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "SearchTerm1", "SearchTerm2", "StorageLocationIsBlocked", "GroupStorageLocationName1", "GroupStorageLocationName2", "StorageLocationIDByExtSystem", "IsMarkedForDeletion"}
	dataPlatformPlantStorageLocationDatumColumnsWithDefault    = []string{}
	dataPlatformPlantStorageLocationDatumPrimaryKeyColumns     = []string{"BusinessPartner", "Plant", "StorageLocation"}
	dataPlatformPlantStorageLocationDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformPlantStorageLocationDatumSlice is an alias for a slice of pointers to DataPlatformPlantStorageLocationDatum.
	// This should almost always be used instead of []DataPlatformPlantStorageLocationDatum.
	DataPlatformPlantStorageLocationDatumSlice []*DataPlatformPlantStorageLocationDatum
	// DataPlatformPlantStorageLocationDatumHook is the signature for custom DataPlatformPlantStorageLocationDatum hook methods
	DataPlatformPlantStorageLocationDatumHook func(context.Context, boil.ContextExecutor, *DataPlatformPlantStorageLocationDatum) error

	dataPlatformPlantStorageLocationDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformPlantStorageLocationDatumType                 = reflect.TypeOf(&DataPlatformPlantStorageLocationDatum{})
	dataPlatformPlantStorageLocationDatumMapping              = queries.MakeStructMapping(dataPlatformPlantStorageLocationDatumType)
	dataPlatformPlantStorageLocationDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformPlantStorageLocationDatumType, dataPlatformPlantStorageLocationDatumMapping, dataPlatformPlantStorageLocationDatumPrimaryKeyColumns)
	dataPlatformPlantStorageLocationDatumInsertCacheMut       sync.RWMutex
	dataPlatformPlantStorageLocationDatumInsertCache          = make(map[string]insertCache)
	dataPlatformPlantStorageLocationDatumUpdateCacheMut       sync.RWMutex
	dataPlatformPlantStorageLocationDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformPlantStorageLocationDatumUpsertCacheMut       sync.RWMutex
	dataPlatformPlantStorageLocationDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dataPlatformPlantStorageLocationDatumAfterSelectHooks []DataPlatformPlantStorageLocationDatumHook

var dataPlatformPlantStorageLocationDatumBeforeInsertHooks []DataPlatformPlantStorageLocationDatumHook
var dataPlatformPlantStorageLocationDatumAfterInsertHooks []DataPlatformPlantStorageLocationDatumHook

var dataPlatformPlantStorageLocationDatumBeforeUpdateHooks []DataPlatformPlantStorageLocationDatumHook
var dataPlatformPlantStorageLocationDatumAfterUpdateHooks []DataPlatformPlantStorageLocationDatumHook

var dataPlatformPlantStorageLocationDatumBeforeDeleteHooks []DataPlatformPlantStorageLocationDatumHook
var dataPlatformPlantStorageLocationDatumAfterDeleteHooks []DataPlatformPlantStorageLocationDatumHook

var dataPlatformPlantStorageLocationDatumBeforeUpsertHooks []DataPlatformPlantStorageLocationDatumHook
var dataPlatformPlantStorageLocationDatumAfterUpsertHooks []DataPlatformPlantStorageLocationDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DataPlatformPlantStorageLocationDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformPlantStorageLocationDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DataPlatformPlantStorageLocationDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformPlantStorageLocationDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DataPlatformPlantStorageLocationDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformPlantStorageLocationDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DataPlatformPlantStorageLocationDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformPlantStorageLocationDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DataPlatformPlantStorageLocationDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformPlantStorageLocationDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DataPlatformPlantStorageLocationDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformPlantStorageLocationDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DataPlatformPlantStorageLocationDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformPlantStorageLocationDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DataPlatformPlantStorageLocationDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformPlantStorageLocationDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DataPlatformPlantStorageLocationDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformPlantStorageLocationDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDataPlatformPlantStorageLocationDatumHook registers your hook function for all future operations.
func AddDataPlatformPlantStorageLocationDatumHook(hookPoint boil.HookPoint, dataPlatformPlantStorageLocationDatumHook DataPlatformPlantStorageLocationDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dataPlatformPlantStorageLocationDatumAfterSelectHooks = append(dataPlatformPlantStorageLocationDatumAfterSelectHooks, dataPlatformPlantStorageLocationDatumHook)
	case boil.BeforeInsertHook:
		dataPlatformPlantStorageLocationDatumBeforeInsertHooks = append(dataPlatformPlantStorageLocationDatumBeforeInsertHooks, dataPlatformPlantStorageLocationDatumHook)
	case boil.AfterInsertHook:
		dataPlatformPlantStorageLocationDatumAfterInsertHooks = append(dataPlatformPlantStorageLocationDatumAfterInsertHooks, dataPlatformPlantStorageLocationDatumHook)
	case boil.BeforeUpdateHook:
		dataPlatformPlantStorageLocationDatumBeforeUpdateHooks = append(dataPlatformPlantStorageLocationDatumBeforeUpdateHooks, dataPlatformPlantStorageLocationDatumHook)
	case boil.AfterUpdateHook:
		dataPlatformPlantStorageLocationDatumAfterUpdateHooks = append(dataPlatformPlantStorageLocationDatumAfterUpdateHooks, dataPlatformPlantStorageLocationDatumHook)
	case boil.BeforeDeleteHook:
		dataPlatformPlantStorageLocationDatumBeforeDeleteHooks = append(dataPlatformPlantStorageLocationDatumBeforeDeleteHooks, dataPlatformPlantStorageLocationDatumHook)
	case boil.AfterDeleteHook:
		dataPlatformPlantStorageLocationDatumAfterDeleteHooks = append(dataPlatformPlantStorageLocationDatumAfterDeleteHooks, dataPlatformPlantStorageLocationDatumHook)
	case boil.BeforeUpsertHook:
		dataPlatformPlantStorageLocationDatumBeforeUpsertHooks = append(dataPlatformPlantStorageLocationDatumBeforeUpsertHooks, dataPlatformPlantStorageLocationDatumHook)
	case boil.AfterUpsertHook:
		dataPlatformPlantStorageLocationDatumAfterUpsertHooks = append(dataPlatformPlantStorageLocationDatumAfterUpsertHooks, dataPlatformPlantStorageLocationDatumHook)
	}
}

// One returns a single dataPlatformPlantStorageLocationDatum record from the query.
func (q dataPlatformPlantStorageLocationDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformPlantStorageLocationDatum, error) {
	o := &DataPlatformPlantStorageLocationDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_plant_storage_location_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DataPlatformPlantStorageLocationDatum records from the query.
func (q dataPlatformPlantStorageLocationDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformPlantStorageLocationDatumSlice, error) {
	var o []*DataPlatformPlantStorageLocationDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformPlantStorageLocationDatum slice")
	}

	if len(dataPlatformPlantStorageLocationDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DataPlatformPlantStorageLocationDatum records in the query.
func (q dataPlatformPlantStorageLocationDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_plant_storage_location_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformPlantStorageLocationDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_plant_storage_location_data exists")
	}

	return count > 0, nil
}

// BusinessPartnerDataPlatformPlantGeneralDatum pointed to by the foreign key.
func (o *DataPlatformPlantStorageLocationDatum) BusinessPartnerDataPlatformPlantGeneralDatum(mods ...qm.QueryMod) dataPlatformPlantGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.BusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPlantGeneralData(queryMods...)
}

// BusinessPartnerDataPlatformProductMasterBPPlantData retrieves all the data_platform_product_master_bp_plant_datum's DataPlatformProductMasterBPPlantData with an executor via BusinessPartner column.
func (o *DataPlatformPlantStorageLocationDatum) BusinessPartnerDataPlatformProductMasterBPPlantData(mods ...qm.QueryMod) dataPlatformProductMasterBPPlantDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_master_bp_plant_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformProductMasterBPPlantData(queryMods...)
}

// LoadBusinessPartnerDataPlatformPlantGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlantStorageLocationDatumL) LoadBusinessPartnerDataPlatformPlantGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantStorageLocationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantStorageLocationDatum
	var object *DataPlatformPlantStorageLocationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantStorageLocationDatum.(*DataPlatformPlantStorageLocationDatum)
		if !ok {
			object = new(DataPlatformPlantStorageLocationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantStorageLocationDatum.(*[]*DataPlatformPlantStorageLocationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantStorageLocationDatumR{}
		}
		args = append(args, object.BusinessPartner)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantStorageLocationDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_general_data`),
		qm.WhereIn(`data_platform_plant_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPlantGeneralDatum")
	}

	var resultSlice []*DataPlatformPlantGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPlantGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_plant_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_general_data")
	}

	if len(dataPlatformPlantGeneralDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BusinessPartnerDataPlatformPlantGeneralDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformPlantGeneralDatumR{}
		}
		foreign.R.BusinessPartnerDataPlatformPlantStorageLocationData = append(foreign.R.BusinessPartnerDataPlatformPlantStorageLocationData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformPlantGeneralDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformPlantGeneralDatumR{}
				}
				foreign.R.BusinessPartnerDataPlatformPlantStorageLocationData = append(foreign.R.BusinessPartnerDataPlatformPlantStorageLocationData, local)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformProductMasterBPPlantData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantStorageLocationDatumL) LoadBusinessPartnerDataPlatformProductMasterBPPlantData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantStorageLocationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantStorageLocationDatum
	var object *DataPlatformPlantStorageLocationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantStorageLocationDatum.(*DataPlatformPlantStorageLocationDatum)
		if !ok {
			object = new(DataPlatformPlantStorageLocationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantStorageLocationDatum.(*[]*DataPlatformPlantStorageLocationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantStorageLocationDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantStorageLocationDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_bp_plant_data`),
		qm.WhereIn(`data_platform_product_master_bp_plant_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_master_bp_plant_data")
	}

	var resultSlice []*DataPlatformProductMasterBPPlantDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_master_bp_plant_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_master_bp_plant_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_bp_plant_data")
	}

	if len(dataPlatformProductMasterBPPlantDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BusinessPartnerDataPlatformProductMasterBPPlantData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformProductMasterBPPlantDatumR{}
			}
			foreign.R.BusinessPartnerDataPlatformPlantStorageLocationDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformProductMasterBPPlantData = append(local.R.BusinessPartnerDataPlatformProductMasterBPPlantData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformProductMasterBPPlantDatumR{}
				}
				foreign.R.BusinessPartnerDataPlatformPlantStorageLocationDatum = local
				break
			}
		}
	}

	return nil
}

// SetBusinessPartnerDataPlatformPlantGeneralDatum of the dataPlatformPlantStorageLocationDatum to the related item.
// Sets o.R.BusinessPartnerDataPlatformPlantGeneralDatum to related.
// Adds o to related.R.BusinessPartnerDataPlatformPlantStorageLocationData.
func (o *DataPlatformPlantStorageLocationDatum) SetBusinessPartnerDataPlatformPlantGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPlantGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_plant_storage_location_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlantStorageLocationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.BusinessPartner, o.Plant, o.StorageLocation}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BusinessPartner = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformPlantStorageLocationDatumR{
			BusinessPartnerDataPlatformPlantGeneralDatum: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformPlantGeneralDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformPlantGeneralDatumR{
			BusinessPartnerDataPlatformPlantStorageLocationData: DataPlatformPlantStorageLocationDatumSlice{o},
		}
	} else {
		related.R.BusinessPartnerDataPlatformPlantStorageLocationData = append(related.R.BusinessPartnerDataPlatformPlantStorageLocationData, o)
	}

	return nil
}

// AddBusinessPartnerDataPlatformProductMasterBPPlantData adds the given related objects to the existing relationships
// of the data_platform_plant_storage_location_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformProductMasterBPPlantData.
// Sets related.R.BusinessPartnerDataPlatformPlantStorageLocationDatum appropriately.
func (o *DataPlatformPlantStorageLocationDatum) AddBusinessPartnerDataPlatformProductMasterBPPlantData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterBPPlantDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_master_bp_plant_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterBPPlantDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Product, rel.BusinessPartner, rel.Plant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantStorageLocationDatumR{
			BusinessPartnerDataPlatformProductMasterBPPlantData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformProductMasterBPPlantData = append(o.R.BusinessPartnerDataPlatformProductMasterBPPlantData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformProductMasterBPPlantDatumR{
				BusinessPartnerDataPlatformPlantStorageLocationDatum: o,
			}
		} else {
			rel.R.BusinessPartnerDataPlatformPlantStorageLocationDatum = o
		}
	}
	return nil
}

// DataPlatformPlantStorageLocationData retrieves all the records using an executor.
func DataPlatformPlantStorageLocationData(mods ...qm.QueryMod) dataPlatformPlantStorageLocationDatumQuery {
	mods = append(mods, qm.From("`data_platform_plant_storage_location_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_plant_storage_location_data`.*"})
	}

	return dataPlatformPlantStorageLocationDatumQuery{q}
}

// FindDataPlatformPlantStorageLocationDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformPlantStorageLocationDatum(ctx context.Context, exec boil.ContextExecutor, businessPartner int, plant string, storageLocation string, selectCols ...string) (*DataPlatformPlantStorageLocationDatum, error) {
	dataPlatformPlantStorageLocationDatumObj := &DataPlatformPlantStorageLocationDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_plant_storage_location_data` where `BusinessPartner`=? AND `Plant`=? AND `StorageLocation`=?", sel,
	)

	q := queries.Raw(query, businessPartner, plant, storageLocation)

	err := q.Bind(ctx, exec, dataPlatformPlantStorageLocationDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_plant_storage_location_data")
	}

	if err = dataPlatformPlantStorageLocationDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dataPlatformPlantStorageLocationDatumObj, err
	}

	return dataPlatformPlantStorageLocationDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformPlantStorageLocationDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_plant_storage_location_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPlantStorageLocationDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformPlantStorageLocationDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformPlantStorageLocationDatumInsertCache[key]
	dataPlatformPlantStorageLocationDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformPlantStorageLocationDatumAllColumns,
			dataPlatformPlantStorageLocationDatumColumnsWithDefault,
			dataPlatformPlantStorageLocationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPlantStorageLocationDatumType, dataPlatformPlantStorageLocationDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformPlantStorageLocationDatumType, dataPlatformPlantStorageLocationDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_plant_storage_location_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_plant_storage_location_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_plant_storage_location_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformPlantStorageLocationDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_plant_storage_location_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BusinessPartner,
		o.Plant,
		o.StorageLocation,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_plant_storage_location_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPlantStorageLocationDatumInsertCacheMut.Lock()
		dataPlatformPlantStorageLocationDatumInsertCache[key] = cache
		dataPlatformPlantStorageLocationDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DataPlatformPlantStorageLocationDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformPlantStorageLocationDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dataPlatformPlantStorageLocationDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformPlantStorageLocationDatumUpdateCache[key]
	dataPlatformPlantStorageLocationDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformPlantStorageLocationDatumAllColumns,
			dataPlatformPlantStorageLocationDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update data_platform_plant_storage_location_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_plant_storage_location_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformPlantStorageLocationDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformPlantStorageLocationDatumType, dataPlatformPlantStorageLocationDatumMapping, append(wl, dataPlatformPlantStorageLocationDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update data_platform_plant_storage_location_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for data_platform_plant_storage_location_data")
	}

	if !cached {
		dataPlatformPlantStorageLocationDatumUpdateCacheMut.Lock()
		dataPlatformPlantStorageLocationDatumUpdateCache[key] = cache
		dataPlatformPlantStorageLocationDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformPlantStorageLocationDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for data_platform_plant_storage_location_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for data_platform_plant_storage_location_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformPlantStorageLocationDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPlantStorageLocationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_plant_storage_location_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPlantStorageLocationDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dataPlatformPlantStorageLocationDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dataPlatformPlantStorageLocationDatum")
	}
	return rowsAff, nil
}

var mySQLDataPlatformPlantStorageLocationDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformPlantStorageLocationDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_plant_storage_location_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPlantStorageLocationDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformPlantStorageLocationDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformPlantStorageLocationDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformPlantStorageLocationDatumUpsertCache[key]
	dataPlatformPlantStorageLocationDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformPlantStorageLocationDatumAllColumns,
			dataPlatformPlantStorageLocationDatumColumnsWithDefault,
			dataPlatformPlantStorageLocationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformPlantStorageLocationDatumAllColumns,
			dataPlatformPlantStorageLocationDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_plant_storage_location_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_plant_storage_location_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_plant_storage_location_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPlantStorageLocationDatumType, dataPlatformPlantStorageLocationDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformPlantStorageLocationDatumType, dataPlatformPlantStorageLocationDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_plant_storage_location_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformPlantStorageLocationDatumType, dataPlatformPlantStorageLocationDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_plant_storage_location_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_plant_storage_location_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPlantStorageLocationDatumUpsertCacheMut.Lock()
		dataPlatformPlantStorageLocationDatumUpsertCache[key] = cache
		dataPlatformPlantStorageLocationDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DataPlatformPlantStorageLocationDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformPlantStorageLocationDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DataPlatformPlantStorageLocationDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformPlantStorageLocationDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_plant_storage_location_data` WHERE `BusinessPartner`=? AND `Plant`=? AND `StorageLocation`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from data_platform_plant_storage_location_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for data_platform_plant_storage_location_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformPlantStorageLocationDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dataPlatformPlantStorageLocationDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from data_platform_plant_storage_location_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_plant_storage_location_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformPlantStorageLocationDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dataPlatformPlantStorageLocationDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPlantStorageLocationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_plant_storage_location_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPlantStorageLocationDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dataPlatformPlantStorageLocationDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_plant_storage_location_data")
	}

	if len(dataPlatformPlantStorageLocationDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformPlantStorageLocationDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformPlantStorageLocationDatum(ctx, exec, o.BusinessPartner, o.Plant, o.StorageLocation)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformPlantStorageLocationDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformPlantStorageLocationDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPlantStorageLocationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_plant_storage_location_data`.* FROM `data_platform_plant_storage_location_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPlantStorageLocationDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformPlantStorageLocationDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformPlantStorageLocationDatumExists checks if the DataPlatformPlantStorageLocationDatum row exists.
func DataPlatformPlantStorageLocationDatumExists(ctx context.Context, exec boil.ContextExecutor, businessPartner int, plant string, storageLocation string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_plant_storage_location_data` where `BusinessPartner`=? AND `Plant`=? AND `StorageLocation`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, businessPartner, plant, storageLocation)
	}
	row := exec.QueryRowContext(ctx, sql, businessPartner, plant, storageLocation)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_plant_storage_location_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformPlantStorageLocationDatum row exists.
func (o *DataPlatformPlantStorageLocationDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformPlantStorageLocationDatumExists(ctx, exec, o.BusinessPartner, o.Plant, o.StorageLocation)
}
