// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformPlantStorageLocationDatum is an object representing the database table.
type DataPlatformPlantStorageLocationDatum struct {
	BusinessPartner              int         `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	Plant                        string      `boil:"Plant" json:"Plant" toml:"Plant" yaml:"Plant"`
	StorageLocation              string      `boil:"StorageLocation" json:"StorageLocation" toml:"StorageLocation" yaml:"StorageLocation"`
	StorageLocationFullName      null.String `boil:"StorageLocationFullName" json:"StorageLocationFullName,omitempty" toml:"StorageLocationFullName" yaml:"StorageLocationFullName,omitempty"`
	StorageLocationName          string      `boil:"StorageLocationName" json:"StorageLocationName" toml:"StorageLocationName" yaml:"StorageLocationName"`
	CreationDate                 string      `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	CreationTime                 string      `boil:"CreationTime" json:"CreationTime" toml:"CreationTime" yaml:"CreationTime"`
	LastChangeDate               string      `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	LastChangeTime               string      `boil:"LastChangeTime" json:"LastChangeTime" toml:"LastChangeTime" yaml:"LastChangeTime"`
	SearchTerm1                  null.String `boil:"SearchTerm1" json:"SearchTerm1,omitempty" toml:"SearchTerm1" yaml:"SearchTerm1,omitempty"`
	SearchTerm2                  null.String `boil:"SearchTerm2" json:"SearchTerm2,omitempty" toml:"SearchTerm2" yaml:"SearchTerm2,omitempty"`
	StorageLocationIsBlocked     null.Bool   `boil:"StorageLocationIsBlocked" json:"StorageLocationIsBlocked,omitempty" toml:"StorageLocationIsBlocked" yaml:"StorageLocationIsBlocked,omitempty"`
	GroupStorageLocationName1    null.String `boil:"GroupStorageLocationName1" json:"GroupStorageLocationName1,omitempty" toml:"GroupStorageLocationName1" yaml:"GroupStorageLocationName1,omitempty"`
	GroupStorageLocationName2    null.String `boil:"GroupStorageLocationName2" json:"GroupStorageLocationName2,omitempty" toml:"GroupStorageLocationName2" yaml:"GroupStorageLocationName2,omitempty"`
	StorageLocationIDByExtSystem null.String `boil:"StorageLocationIDByExtSystem" json:"StorageLocationIDByExtSystem,omitempty" toml:"StorageLocationIDByExtSystem" yaml:"StorageLocationIDByExtSystem,omitempty"`
	IsMarkedForDeletion          null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformPlantStorageLocationDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformPlantStorageLocationDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformPlantStorageLocationDatumColumns = struct {
	BusinessPartner              string
	Plant                        string
	StorageLocation              string
	StorageLocationFullName      string
	StorageLocationName          string
	CreationDate                 string
	CreationTime                 string
	LastChangeDate               string
	LastChangeTime               string
	SearchTerm1                  string
	SearchTerm2                  string
	StorageLocationIsBlocked     string
	GroupStorageLocationName1    string
	GroupStorageLocationName2    string
	StorageLocationIDByExtSystem string
	IsMarkedForDeletion          string
}{
	BusinessPartner:              "BusinessPartner",
	Plant:                        "Plant",
	StorageLocation:              "StorageLocation",
	StorageLocationFullName:      "StorageLocationFullName",
	StorageLocationName:          "StorageLocationName",
	CreationDate:                 "CreationDate",
	CreationTime:                 "CreationTime",
	LastChangeDate:               "LastChangeDate",
	LastChangeTime:               "LastChangeTime",
	SearchTerm1:                  "SearchTerm1",
	SearchTerm2:                  "SearchTerm2",
	StorageLocationIsBlocked:     "StorageLocationIsBlocked",
	GroupStorageLocationName1:    "GroupStorageLocationName1",
	GroupStorageLocationName2:    "GroupStorageLocationName2",
	StorageLocationIDByExtSystem: "StorageLocationIDByExtSystem",
	IsMarkedForDeletion:          "IsMarkedForDeletion",
}

var DataPlatformPlantStorageLocationDatumTableColumns = struct {
	BusinessPartner              string
	Plant                        string
	StorageLocation              string
	StorageLocationFullName      string
	StorageLocationName          string
	CreationDate                 string
	CreationTime                 string
	LastChangeDate               string
	LastChangeTime               string
	SearchTerm1                  string
	SearchTerm2                  string
	StorageLocationIsBlocked     string
	GroupStorageLocationName1    string
	GroupStorageLocationName2    string
	StorageLocationIDByExtSystem string
	IsMarkedForDeletion          string
}{
	BusinessPartner:              "data_platform_plant_storage_location_data.BusinessPartner",
	Plant:                        "data_platform_plant_storage_location_data.Plant",
	StorageLocation:              "data_platform_plant_storage_location_data.StorageLocation",
	StorageLocationFullName:      "data_platform_plant_storage_location_data.StorageLocationFullName",
	StorageLocationName:          "data_platform_plant_storage_location_data.StorageLocationName",
	CreationDate:                 "data_platform_plant_storage_location_data.CreationDate",
	CreationTime:                 "data_platform_plant_storage_location_data.CreationTime",
	LastChangeDate:               "data_platform_plant_storage_location_data.LastChangeDate",
	LastChangeTime:               "data_platform_plant_storage_location_data.LastChangeTime",
	SearchTerm1:                  "data_platform_plant_storage_location_data.SearchTerm1",
	SearchTerm2:                  "data_platform_plant_storage_location_data.SearchTerm2",
	StorageLocationIsBlocked:     "data_platform_plant_storage_location_data.StorageLocationIsBlocked",
	GroupStorageLocationName1:    "data_platform_plant_storage_location_data.GroupStorageLocationName1",
	GroupStorageLocationName2:    "data_platform_plant_storage_location_data.GroupStorageLocationName2",
	StorageLocationIDByExtSystem: "data_platform_plant_storage_location_data.StorageLocationIDByExtSystem",
	IsMarkedForDeletion:          "data_platform_plant_storage_location_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformPlantStorageLocationDatumWhere = struct {
	BusinessPartner              whereHelperint
	Plant                        whereHelperstring
	StorageLocation              whereHelperstring
	StorageLocationFullName      whereHelpernull_String
	StorageLocationName          whereHelperstring
	CreationDate                 whereHelperstring
	CreationTime                 whereHelperstring
	LastChangeDate               whereHelperstring
	LastChangeTime               whereHelperstring
	SearchTerm1                  whereHelpernull_String
	SearchTerm2                  whereHelpernull_String
	StorageLocationIsBlocked     whereHelpernull_Bool
	GroupStorageLocationName1    whereHelpernull_String
	GroupStorageLocationName2    whereHelpernull_String
	StorageLocationIDByExtSystem whereHelpernull_String
	IsMarkedForDeletion          whereHelpernull_Bool
}{
	BusinessPartner:              whereHelperint{field: "`data_platform_plant_storage_location_data`.`BusinessPartner`"},
	Plant:                        whereHelperstring{field: "`data_platform_plant_storage_location_data`.`Plant`"},
	StorageLocation:              whereHelperstring{field: "`data_platform_plant_storage_location_data`.`StorageLocation`"},
	StorageLocationFullName:      whereHelpernull_String{field: "`data_platform_plant_storage_location_data`.`StorageLocationFullName`"},
	StorageLocationName:          whereHelperstring{field: "`data_platform_plant_storage_location_data`.`StorageLocationName`"},
	CreationDate:                 whereHelperstring{field: "`data_platform_plant_storage_location_data`.`CreationDate`"},
	CreationTime:                 whereHelperstring{field: "`data_platform_plant_storage_location_data`.`CreationTime`"},
	LastChangeDate:               whereHelperstring{field: "`data_platform_plant_storage_location_data`.`LastChangeDate`"},
	LastChangeTime:               whereHelperstring{field: "`data_platform_plant_storage_location_data`.`LastChangeTime`"},
	SearchTerm1:                  whereHelpernull_String{field: "`data_platform_plant_storage_location_data`.`SearchTerm1`"},
	SearchTerm2:                  whereHelpernull_String{field: "`data_platform_plant_storage_location_data`.`SearchTerm2`"},
	StorageLocationIsBlocked:     whereHelpernull_Bool{field: "`data_platform_plant_storage_location_data`.`StorageLocationIsBlocked`"},
	GroupStorageLocationName1:    whereHelpernull_String{field: "`data_platform_plant_storage_location_data`.`GroupStorageLocationName1`"},
	GroupStorageLocationName2:    whereHelpernull_String{field: "`data_platform_plant_storage_location_data`.`GroupStorageLocationName2`"},
	StorageLocationIDByExtSystem: whereHelpernull_String{field: "`data_platform_plant_storage_location_data`.`StorageLocationIDByExtSystem`"},
	IsMarkedForDeletion:          whereHelpernull_Bool{field: "`data_platform_plant_storage_location_data`.`IsMarkedForDeletion`"},
}

// DataPlatformPlantStorageLocationDatumRels is where relationship names are stored.
var DataPlatformPlantStorageLocationDatumRels = struct {
	DeliverFromPartyDataPlatformDeliveryDocumentItemData                         string
	DeliverToPartyDataPlatformDeliveryDocumentItemData                           string
	ProductionPlantDataPlatformDeliveryDocumentItemData                          string
	DeliverFromPartyDataPlatformOrdersItemData                                   string
	DeliverToPartyDataPlatformOrdersItemData                                     string
	OwnerProductionPlantDataPlatformPlannedOrderHeaderData                       string
	DeliverFromPartyDataPlatformPlannedOrderItemData                             string
	DeliverToPartyDataPlatformPlannedOrderItemData                               string
	ProductionPlantDataPlatformPlannedOrderItemData                              string
	StockConfirmationBusinessPartnerDataPlatformPlannedOrderItemData             string
	BusinessPartnerDataPlatformProductMasterProductionData                       string
	BusinessPartnerDataPlatformProductStockProductStockByBtches                  string
	DepartureDeliverFromPartyDataPlatformProductionOrderHeaderData               string
	DestinationDeliverToPartyDataPlatformProductionOrderHeaderData               string
	OwnerProductionPlantDataPlatformProductionOrderHeaderData                    string
	StockConfirmationBusinessPartnerDataPlatformProductionOrderItemComponentData string
	DeliverFromPartyDataPlatformProductionOrderItemData                          string
	DeliverToPartyDataPlatformProductionOrderItemData                            string
	ProductionPlantDataPlatformProductionOrderItemData                           string
	DeliverFromPartyDataPlatformPurchaseRequisitionItemData                      string
	DeliverToPartyDataPlatformPurchaseRequisitionItemData                        string
}{
	DeliverFromPartyDataPlatformDeliveryDocumentItemData:                         "DeliverFromPartyDataPlatformDeliveryDocumentItemData",
	DeliverToPartyDataPlatformDeliveryDocumentItemData:                           "DeliverToPartyDataPlatformDeliveryDocumentItemData",
	ProductionPlantDataPlatformDeliveryDocumentItemData:                          "ProductionPlantDataPlatformDeliveryDocumentItemData",
	DeliverFromPartyDataPlatformOrdersItemData:                                   "DeliverFromPartyDataPlatformOrdersItemData",
	DeliverToPartyDataPlatformOrdersItemData:                                     "DeliverToPartyDataPlatformOrdersItemData",
	OwnerProductionPlantDataPlatformPlannedOrderHeaderData:                       "OwnerProductionPlantDataPlatformPlannedOrderHeaderData",
	DeliverFromPartyDataPlatformPlannedOrderItemData:                             "DeliverFromPartyDataPlatformPlannedOrderItemData",
	DeliverToPartyDataPlatformPlannedOrderItemData:                               "DeliverToPartyDataPlatformPlannedOrderItemData",
	ProductionPlantDataPlatformPlannedOrderItemData:                              "ProductionPlantDataPlatformPlannedOrderItemData",
	StockConfirmationBusinessPartnerDataPlatformPlannedOrderItemData:             "StockConfirmationBusinessPartnerDataPlatformPlannedOrderItemData",
	BusinessPartnerDataPlatformProductMasterProductionData:                       "BusinessPartnerDataPlatformProductMasterProductionData",
	BusinessPartnerDataPlatformProductStockProductStockByBtches:                  "BusinessPartnerDataPlatformProductStockProductStockByBtches",
	DepartureDeliverFromPartyDataPlatformProductionOrderHeaderData:               "DepartureDeliverFromPartyDataPlatformProductionOrderHeaderData",
	DestinationDeliverToPartyDataPlatformProductionOrderHeaderData:               "DestinationDeliverToPartyDataPlatformProductionOrderHeaderData",
	OwnerProductionPlantDataPlatformProductionOrderHeaderData:                    "OwnerProductionPlantDataPlatformProductionOrderHeaderData",
	StockConfirmationBusinessPartnerDataPlatformProductionOrderItemComponentData: "StockConfirmationBusinessPartnerDataPlatformProductionOrderItemComponentData",
	DeliverFromPartyDataPlatformProductionOrderItemData:                          "DeliverFromPartyDataPlatformProductionOrderItemData",
	DeliverToPartyDataPlatformProductionOrderItemData:                            "DeliverToPartyDataPlatformProductionOrderItemData",
	ProductionPlantDataPlatformProductionOrderItemData:                           "ProductionPlantDataPlatformProductionOrderItemData",
	DeliverFromPartyDataPlatformPurchaseRequisitionItemData:                      "DeliverFromPartyDataPlatformPurchaseRequisitionItemData",
	DeliverToPartyDataPlatformPurchaseRequisitionItemData:                        "DeliverToPartyDataPlatformPurchaseRequisitionItemData",
}

// dataPlatformPlantStorageLocationDatumR is where relationships are stored.
type dataPlatformPlantStorageLocationDatumR struct {
	DeliverFromPartyDataPlatformDeliveryDocumentItemData                         DataPlatformDeliveryDocumentItemDatumSlice         `boil:"DeliverFromPartyDataPlatformDeliveryDocumentItemData" json:"DeliverFromPartyDataPlatformDeliveryDocumentItemData" toml:"DeliverFromPartyDataPlatformDeliveryDocumentItemData" yaml:"DeliverFromPartyDataPlatformDeliveryDocumentItemData"`
	DeliverToPartyDataPlatformDeliveryDocumentItemData                           DataPlatformDeliveryDocumentItemDatumSlice         `boil:"DeliverToPartyDataPlatformDeliveryDocumentItemData" json:"DeliverToPartyDataPlatformDeliveryDocumentItemData" toml:"DeliverToPartyDataPlatformDeliveryDocumentItemData" yaml:"DeliverToPartyDataPlatformDeliveryDocumentItemData"`
	ProductionPlantDataPlatformDeliveryDocumentItemData                          DataPlatformDeliveryDocumentItemDatumSlice         `boil:"ProductionPlantDataPlatformDeliveryDocumentItemData" json:"ProductionPlantDataPlatformDeliveryDocumentItemData" toml:"ProductionPlantDataPlatformDeliveryDocumentItemData" yaml:"ProductionPlantDataPlatformDeliveryDocumentItemData"`
	DeliverFromPartyDataPlatformOrdersItemData                                   DataPlatformOrdersItemDatumSlice                   `boil:"DeliverFromPartyDataPlatformOrdersItemData" json:"DeliverFromPartyDataPlatformOrdersItemData" toml:"DeliverFromPartyDataPlatformOrdersItemData" yaml:"DeliverFromPartyDataPlatformOrdersItemData"`
	DeliverToPartyDataPlatformOrdersItemData                                     DataPlatformOrdersItemDatumSlice                   `boil:"DeliverToPartyDataPlatformOrdersItemData" json:"DeliverToPartyDataPlatformOrdersItemData" toml:"DeliverToPartyDataPlatformOrdersItemData" yaml:"DeliverToPartyDataPlatformOrdersItemData"`
	OwnerProductionPlantDataPlatformPlannedOrderHeaderData                       DataPlatformPlannedOrderHeaderDatumSlice           `boil:"OwnerProductionPlantDataPlatformPlannedOrderHeaderData" json:"OwnerProductionPlantDataPlatformPlannedOrderHeaderData" toml:"OwnerProductionPlantDataPlatformPlannedOrderHeaderData" yaml:"OwnerProductionPlantDataPlatformPlannedOrderHeaderData"`
	DeliverFromPartyDataPlatformPlannedOrderItemData                             DataPlatformPlannedOrderItemDatumSlice             `boil:"DeliverFromPartyDataPlatformPlannedOrderItemData" json:"DeliverFromPartyDataPlatformPlannedOrderItemData" toml:"DeliverFromPartyDataPlatformPlannedOrderItemData" yaml:"DeliverFromPartyDataPlatformPlannedOrderItemData"`
	DeliverToPartyDataPlatformPlannedOrderItemData                               DataPlatformPlannedOrderItemDatumSlice             `boil:"DeliverToPartyDataPlatformPlannedOrderItemData" json:"DeliverToPartyDataPlatformPlannedOrderItemData" toml:"DeliverToPartyDataPlatformPlannedOrderItemData" yaml:"DeliverToPartyDataPlatformPlannedOrderItemData"`
	ProductionPlantDataPlatformPlannedOrderItemData                              DataPlatformPlannedOrderItemDatumSlice             `boil:"ProductionPlantDataPlatformPlannedOrderItemData" json:"ProductionPlantDataPlatformPlannedOrderItemData" toml:"ProductionPlantDataPlatformPlannedOrderItemData" yaml:"ProductionPlantDataPlatformPlannedOrderItemData"`
	StockConfirmationBusinessPartnerDataPlatformPlannedOrderItemData             DataPlatformPlannedOrderItemDatumSlice             `boil:"StockConfirmationBusinessPartnerDataPlatformPlannedOrderItemData" json:"StockConfirmationBusinessPartnerDataPlatformPlannedOrderItemData" toml:"StockConfirmationBusinessPartnerDataPlatformPlannedOrderItemData" yaml:"StockConfirmationBusinessPartnerDataPlatformPlannedOrderItemData"`
	BusinessPartnerDataPlatformProductMasterProductionData                       DataPlatformProductMasterProductionDatumSlice      `boil:"BusinessPartnerDataPlatformProductMasterProductionData" json:"BusinessPartnerDataPlatformProductMasterProductionData" toml:"BusinessPartnerDataPlatformProductMasterProductionData" yaml:"BusinessPartnerDataPlatformProductMasterProductionData"`
	BusinessPartnerDataPlatformProductStockProductStockByBtches                  DataPlatformProductStockProductStockByBTCHSlice    `boil:"BusinessPartnerDataPlatformProductStockProductStockByBtches" json:"BusinessPartnerDataPlatformProductStockProductStockByBtches" toml:"BusinessPartnerDataPlatformProductStockProductStockByBtches" yaml:"BusinessPartnerDataPlatformProductStockProductStockByBtches"`
	DepartureDeliverFromPartyDataPlatformProductionOrderHeaderData               DataPlatformProductionOrderHeaderDatumSlice        `boil:"DepartureDeliverFromPartyDataPlatformProductionOrderHeaderData" json:"DepartureDeliverFromPartyDataPlatformProductionOrderHeaderData" toml:"DepartureDeliverFromPartyDataPlatformProductionOrderHeaderData" yaml:"DepartureDeliverFromPartyDataPlatformProductionOrderHeaderData"`
	DestinationDeliverToPartyDataPlatformProductionOrderHeaderData               DataPlatformProductionOrderHeaderDatumSlice        `boil:"DestinationDeliverToPartyDataPlatformProductionOrderHeaderData" json:"DestinationDeliverToPartyDataPlatformProductionOrderHeaderData" toml:"DestinationDeliverToPartyDataPlatformProductionOrderHeaderData" yaml:"DestinationDeliverToPartyDataPlatformProductionOrderHeaderData"`
	OwnerProductionPlantDataPlatformProductionOrderHeaderData                    DataPlatformProductionOrderHeaderDatumSlice        `boil:"OwnerProductionPlantDataPlatformProductionOrderHeaderData" json:"OwnerProductionPlantDataPlatformProductionOrderHeaderData" toml:"OwnerProductionPlantDataPlatformProductionOrderHeaderData" yaml:"OwnerProductionPlantDataPlatformProductionOrderHeaderData"`
	StockConfirmationBusinessPartnerDataPlatformProductionOrderItemComponentData DataPlatformProductionOrderItemComponentDatumSlice `boil:"StockConfirmationBusinessPartnerDataPlatformProductionOrderItemComponentData" json:"StockConfirmationBusinessPartnerDataPlatformProductionOrderItemComponentData" toml:"StockConfirmationBusinessPartnerDataPlatformProductionOrderItemComponentData" yaml:"StockConfirmationBusinessPartnerDataPlatformProductionOrderItemComponentData"`
	DeliverFromPartyDataPlatformProductionOrderItemData                          DataPlatformProductionOrderItemDatumSlice          `boil:"DeliverFromPartyDataPlatformProductionOrderItemData" json:"DeliverFromPartyDataPlatformProductionOrderItemData" toml:"DeliverFromPartyDataPlatformProductionOrderItemData" yaml:"DeliverFromPartyDataPlatformProductionOrderItemData"`
	DeliverToPartyDataPlatformProductionOrderItemData                            DataPlatformProductionOrderItemDatumSlice          `boil:"DeliverToPartyDataPlatformProductionOrderItemData" json:"DeliverToPartyDataPlatformProductionOrderItemData" toml:"DeliverToPartyDataPlatformProductionOrderItemData" yaml:"DeliverToPartyDataPlatformProductionOrderItemData"`
	ProductionPlantDataPlatformProductionOrderItemData                           DataPlatformProductionOrderItemDatumSlice          `boil:"ProductionPlantDataPlatformProductionOrderItemData" json:"ProductionPlantDataPlatformProductionOrderItemData" toml:"ProductionPlantDataPlatformProductionOrderItemData" yaml:"ProductionPlantDataPlatformProductionOrderItemData"`
	DeliverFromPartyDataPlatformPurchaseRequisitionItemData                      DataPlatformPurchaseRequisitionItemDatumSlice      `boil:"DeliverFromPartyDataPlatformPurchaseRequisitionItemData" json:"DeliverFromPartyDataPlatformPurchaseRequisitionItemData" toml:"DeliverFromPartyDataPlatformPurchaseRequisitionItemData" yaml:"DeliverFromPartyDataPlatformPurchaseRequisitionItemData"`
	DeliverToPartyDataPlatformPurchaseRequisitionItemData                        DataPlatformPurchaseRequisitionItemDatumSlice      `boil:"DeliverToPartyDataPlatformPurchaseRequisitionItemData" json:"DeliverToPartyDataPlatformPurchaseRequisitionItemData" toml:"DeliverToPartyDataPlatformPurchaseRequisitionItemData" yaml:"DeliverToPartyDataPlatformPurchaseRequisitionItemData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformPlantStorageLocationDatumR) NewStruct() *dataPlatformPlantStorageLocationDatumR {
	return &dataPlatformPlantStorageLocationDatumR{}
}

func (r *dataPlatformPlantStorageLocationDatumR) GetDeliverFromPartyDataPlatformDeliveryDocumentItemData() DataPlatformDeliveryDocumentItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.DeliverFromPartyDataPlatformDeliveryDocumentItemData
}

func (r *dataPlatformPlantStorageLocationDatumR) GetDeliverToPartyDataPlatformDeliveryDocumentItemData() DataPlatformDeliveryDocumentItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.DeliverToPartyDataPlatformDeliveryDocumentItemData
}

func (r *dataPlatformPlantStorageLocationDatumR) GetProductionPlantDataPlatformDeliveryDocumentItemData() DataPlatformDeliveryDocumentItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductionPlantDataPlatformDeliveryDocumentItemData
}

func (r *dataPlatformPlantStorageLocationDatumR) GetDeliverFromPartyDataPlatformOrdersItemData() DataPlatformOrdersItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.DeliverFromPartyDataPlatformOrdersItemData
}

func (r *dataPlatformPlantStorageLocationDatumR) GetDeliverToPartyDataPlatformOrdersItemData() DataPlatformOrdersItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.DeliverToPartyDataPlatformOrdersItemData
}

func (r *dataPlatformPlantStorageLocationDatumR) GetOwnerProductionPlantDataPlatformPlannedOrderHeaderData() DataPlatformPlannedOrderHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.OwnerProductionPlantDataPlatformPlannedOrderHeaderData
}

func (r *dataPlatformPlantStorageLocationDatumR) GetDeliverFromPartyDataPlatformPlannedOrderItemData() DataPlatformPlannedOrderItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.DeliverFromPartyDataPlatformPlannedOrderItemData
}

func (r *dataPlatformPlantStorageLocationDatumR) GetDeliverToPartyDataPlatformPlannedOrderItemData() DataPlatformPlannedOrderItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.DeliverToPartyDataPlatformPlannedOrderItemData
}

func (r *dataPlatformPlantStorageLocationDatumR) GetProductionPlantDataPlatformPlannedOrderItemData() DataPlatformPlannedOrderItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductionPlantDataPlatformPlannedOrderItemData
}

func (r *dataPlatformPlantStorageLocationDatumR) GetStockConfirmationBusinessPartnerDataPlatformPlannedOrderItemData() DataPlatformPlannedOrderItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.StockConfirmationBusinessPartnerDataPlatformPlannedOrderItemData
}

func (r *dataPlatformPlantStorageLocationDatumR) GetBusinessPartnerDataPlatformProductMasterProductionData() DataPlatformProductMasterProductionDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformProductMasterProductionData
}

func (r *dataPlatformPlantStorageLocationDatumR) GetBusinessPartnerDataPlatformProductStockProductStockByBtches() DataPlatformProductStockProductStockByBTCHSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformProductStockProductStockByBtches
}

func (r *dataPlatformPlantStorageLocationDatumR) GetDepartureDeliverFromPartyDataPlatformProductionOrderHeaderData() DataPlatformProductionOrderHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.DepartureDeliverFromPartyDataPlatformProductionOrderHeaderData
}

func (r *dataPlatformPlantStorageLocationDatumR) GetDestinationDeliverToPartyDataPlatformProductionOrderHeaderData() DataPlatformProductionOrderHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.DestinationDeliverToPartyDataPlatformProductionOrderHeaderData
}

func (r *dataPlatformPlantStorageLocationDatumR) GetOwnerProductionPlantDataPlatformProductionOrderHeaderData() DataPlatformProductionOrderHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.OwnerProductionPlantDataPlatformProductionOrderHeaderData
}

func (r *dataPlatformPlantStorageLocationDatumR) GetStockConfirmationBusinessPartnerDataPlatformProductionOrderItemComponentData() DataPlatformProductionOrderItemComponentDatumSlice {
	if r == nil {
		return nil
	}
	return r.StockConfirmationBusinessPartnerDataPlatformProductionOrderItemComponentData
}

func (r *dataPlatformPlantStorageLocationDatumR) GetDeliverFromPartyDataPlatformProductionOrderItemData() DataPlatformProductionOrderItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.DeliverFromPartyDataPlatformProductionOrderItemData
}

func (r *dataPlatformPlantStorageLocationDatumR) GetDeliverToPartyDataPlatformProductionOrderItemData() DataPlatformProductionOrderItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.DeliverToPartyDataPlatformProductionOrderItemData
}

func (r *dataPlatformPlantStorageLocationDatumR) GetProductionPlantDataPlatformProductionOrderItemData() DataPlatformProductionOrderItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductionPlantDataPlatformProductionOrderItemData
}

func (r *dataPlatformPlantStorageLocationDatumR) GetDeliverFromPartyDataPlatformPurchaseRequisitionItemData() DataPlatformPurchaseRequisitionItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.DeliverFromPartyDataPlatformPurchaseRequisitionItemData
}

func (r *dataPlatformPlantStorageLocationDatumR) GetDeliverToPartyDataPlatformPurchaseRequisitionItemData() DataPlatformPurchaseRequisitionItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.DeliverToPartyDataPlatformPurchaseRequisitionItemData
}

// dataPlatformPlantStorageLocationDatumL is where Load methods for each relationship are stored.
type dataPlatformPlantStorageLocationDatumL struct{}

var (
	dataPlatformPlantStorageLocationDatumAllColumns            = []string{"BusinessPartner", "Plant", "StorageLocation", "StorageLocationFullName", "StorageLocationName", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "SearchTerm1", "SearchTerm2", "StorageLocationIsBlocked", "GroupStorageLocationName1", "GroupStorageLocationName2", "StorageLocationIDByExtSystem", "IsMarkedForDeletion"}
	dataPlatformPlantStorageLocationDatumColumnsWithoutDefault = []string{"BusinessPartner", "Plant", "StorageLocation", "StorageLocationFullName", "StorageLocationName", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "SearchTerm1", "SearchTerm2", "StorageLocationIsBlocked", "GroupStorageLocationName1", "GroupStorageLocationName2", "StorageLocationIDByExtSystem", "IsMarkedForDeletion"}
	dataPlatformPlantStorageLocationDatumColumnsWithDefault    = []string{}
	dataPlatformPlantStorageLocationDatumPrimaryKeyColumns     = []string{"BusinessPartner", "Plant", "StorageLocation"}
	dataPlatformPlantStorageLocationDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformPlantStorageLocationDatumSlice is an alias for a slice of pointers to DataPlatformPlantStorageLocationDatum.
	// This should almost always be used instead of []DataPlatformPlantStorageLocationDatum.
	DataPlatformPlantStorageLocationDatumSlice []*DataPlatformPlantStorageLocationDatum

	dataPlatformPlantStorageLocationDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformPlantStorageLocationDatumType                 = reflect.TypeOf(&DataPlatformPlantStorageLocationDatum{})
	dataPlatformPlantStorageLocationDatumMapping              = queries.MakeStructMapping(dataPlatformPlantStorageLocationDatumType)
	dataPlatformPlantStorageLocationDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformPlantStorageLocationDatumType, dataPlatformPlantStorageLocationDatumMapping, dataPlatformPlantStorageLocationDatumPrimaryKeyColumns)
	dataPlatformPlantStorageLocationDatumInsertCacheMut       sync.RWMutex
	dataPlatformPlantStorageLocationDatumInsertCache          = make(map[string]insertCache)
	dataPlatformPlantStorageLocationDatumUpdateCacheMut       sync.RWMutex
	dataPlatformPlantStorageLocationDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformPlantStorageLocationDatumUpsertCacheMut       sync.RWMutex
	dataPlatformPlantStorageLocationDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformPlantStorageLocationDatum record from the query.
func (q dataPlatformPlantStorageLocationDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformPlantStorageLocationDatum, error) {
	o := &DataPlatformPlantStorageLocationDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_plant_storage_location_data")
	}

	return o, nil
}

// All returns all DataPlatformPlantStorageLocationDatum records from the query.
func (q dataPlatformPlantStorageLocationDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformPlantStorageLocationDatumSlice, error) {
	var o []*DataPlatformPlantStorageLocationDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformPlantStorageLocationDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformPlantStorageLocationDatum records in the query.
func (q dataPlatformPlantStorageLocationDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_plant_storage_location_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformPlantStorageLocationDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_plant_storage_location_data exists")
	}

	return count > 0, nil
}

// DeliverFromPartyDataPlatformDeliveryDocumentItemData retrieves all the data_platform_delivery_document_item_datum's DataPlatformDeliveryDocumentItemData with an executor via DeliverFromParty column.
func (o *DataPlatformPlantStorageLocationDatum) DeliverFromPartyDataPlatformDeliveryDocumentItemData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_item_data`.`DeliverFromParty`=?", o.BusinessPartner),
	)

	return DataPlatformDeliveryDocumentItemData(queryMods...)
}

// DeliverToPartyDataPlatformDeliveryDocumentItemData retrieves all the data_platform_delivery_document_item_datum's DataPlatformDeliveryDocumentItemData with an executor via DeliverToParty column.
func (o *DataPlatformPlantStorageLocationDatum) DeliverToPartyDataPlatformDeliveryDocumentItemData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_item_data`.`DeliverToParty`=?", o.BusinessPartner),
	)

	return DataPlatformDeliveryDocumentItemData(queryMods...)
}

// ProductionPlantDataPlatformDeliveryDocumentItemData retrieves all the data_platform_delivery_document_item_datum's DataPlatformDeliveryDocumentItemData with an executor via ProductionPlant column.
func (o *DataPlatformPlantStorageLocationDatum) ProductionPlantDataPlatformDeliveryDocumentItemData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_item_data`.`ProductionPlant`=?", o.Plant),
	)

	return DataPlatformDeliveryDocumentItemData(queryMods...)
}

// DeliverFromPartyDataPlatformOrdersItemData retrieves all the data_platform_orders_item_datum's DataPlatformOrdersItemData with an executor via DeliverFromParty column.
func (o *DataPlatformPlantStorageLocationDatum) DeliverFromPartyDataPlatformOrdersItemData(mods ...qm.QueryMod) dataPlatformOrdersItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_item_data`.`DeliverFromParty`=?", o.BusinessPartner),
	)

	return DataPlatformOrdersItemData(queryMods...)
}

// DeliverToPartyDataPlatformOrdersItemData retrieves all the data_platform_orders_item_datum's DataPlatformOrdersItemData with an executor via DeliverToParty column.
func (o *DataPlatformPlantStorageLocationDatum) DeliverToPartyDataPlatformOrdersItemData(mods ...qm.QueryMod) dataPlatformOrdersItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_item_data`.`DeliverToParty`=?", o.BusinessPartner),
	)

	return DataPlatformOrdersItemData(queryMods...)
}

// OwnerProductionPlantDataPlatformPlannedOrderHeaderData retrieves all the data_platform_planned_order_header_datum's DataPlatformPlannedOrderHeaderData with an executor via OwnerProductionPlant column.
func (o *DataPlatformPlantStorageLocationDatum) OwnerProductionPlantDataPlatformPlannedOrderHeaderData(mods ...qm.QueryMod) dataPlatformPlannedOrderHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_header_data`.`OwnerProductionPlant`=?", o.Plant),
	)

	return DataPlatformPlannedOrderHeaderData(queryMods...)
}

// DeliverFromPartyDataPlatformPlannedOrderItemData retrieves all the data_platform_planned_order_item_datum's DataPlatformPlannedOrderItemData with an executor via DeliverFromParty column.
func (o *DataPlatformPlantStorageLocationDatum) DeliverFromPartyDataPlatformPlannedOrderItemData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_data`.`DeliverFromParty`=?", o.BusinessPartner),
	)

	return DataPlatformPlannedOrderItemData(queryMods...)
}

// DeliverToPartyDataPlatformPlannedOrderItemData retrieves all the data_platform_planned_order_item_datum's DataPlatformPlannedOrderItemData with an executor via DeliverToParty column.
func (o *DataPlatformPlantStorageLocationDatum) DeliverToPartyDataPlatformPlannedOrderItemData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_data`.`DeliverToParty`=?", o.BusinessPartner),
	)

	return DataPlatformPlannedOrderItemData(queryMods...)
}

// ProductionPlantDataPlatformPlannedOrderItemData retrieves all the data_platform_planned_order_item_datum's DataPlatformPlannedOrderItemData with an executor via ProductionPlant column.
func (o *DataPlatformPlantStorageLocationDatum) ProductionPlantDataPlatformPlannedOrderItemData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_data`.`ProductionPlant`=?", o.Plant),
	)

	return DataPlatformPlannedOrderItemData(queryMods...)
}

// StockConfirmationBusinessPartnerDataPlatformPlannedOrderItemData retrieves all the data_platform_planned_order_item_datum's DataPlatformPlannedOrderItemData with an executor via StockConfirmationBusinessPartner column.
func (o *DataPlatformPlantStorageLocationDatum) StockConfirmationBusinessPartnerDataPlatformPlannedOrderItemData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_data`.`StockConfirmationBusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformPlannedOrderItemData(queryMods...)
}

// BusinessPartnerDataPlatformProductMasterProductionData retrieves all the data_platform_product_master_production_datum's DataPlatformProductMasterProductionData with an executor via BusinessPartner column.
func (o *DataPlatformPlantStorageLocationDatum) BusinessPartnerDataPlatformProductMasterProductionData(mods ...qm.QueryMod) dataPlatformProductMasterProductionDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_master_production_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformProductMasterProductionData(queryMods...)
}

// BusinessPartnerDataPlatformProductStockProductStockByBtches retrieves all the data_platform_product_stock_product_stock_by_btch's DataPlatformProductStockProductStockByBtches with an executor via BusinessPartner column.
func (o *DataPlatformPlantStorageLocationDatum) BusinessPartnerDataPlatformProductStockProductStockByBtches(mods ...qm.QueryMod) dataPlatformProductStockProductStockByBTCHQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_stock_product_stock_by_btch`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformProductStockProductStockByBtches(queryMods...)
}

// DepartureDeliverFromPartyDataPlatformProductionOrderHeaderData retrieves all the data_platform_production_order_header_datum's DataPlatformProductionOrderHeaderData with an executor via DepartureDeliverFromParty column.
func (o *DataPlatformPlantStorageLocationDatum) DepartureDeliverFromPartyDataPlatformProductionOrderHeaderData(mods ...qm.QueryMod) dataPlatformProductionOrderHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_header_data`.`DepartureDeliverFromParty`=?", o.BusinessPartner),
	)

	return DataPlatformProductionOrderHeaderData(queryMods...)
}

// DestinationDeliverToPartyDataPlatformProductionOrderHeaderData retrieves all the data_platform_production_order_header_datum's DataPlatformProductionOrderHeaderData with an executor via DestinationDeliverToParty column.
func (o *DataPlatformPlantStorageLocationDatum) DestinationDeliverToPartyDataPlatformProductionOrderHeaderData(mods ...qm.QueryMod) dataPlatformProductionOrderHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_header_data`.`DestinationDeliverToParty`=?", o.BusinessPartner),
	)

	return DataPlatformProductionOrderHeaderData(queryMods...)
}

// OwnerProductionPlantDataPlatformProductionOrderHeaderData retrieves all the data_platform_production_order_header_datum's DataPlatformProductionOrderHeaderData with an executor via OwnerProductionPlant column.
func (o *DataPlatformPlantStorageLocationDatum) OwnerProductionPlantDataPlatformProductionOrderHeaderData(mods ...qm.QueryMod) dataPlatformProductionOrderHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_header_data`.`OwnerProductionPlant`=?", o.Plant),
	)

	return DataPlatformProductionOrderHeaderData(queryMods...)
}

// StockConfirmationBusinessPartnerDataPlatformProductionOrderItemComponentData retrieves all the data_platform_production_order_item_component_datum's DataPlatformProductionOrderItemComponentData with an executor via StockConfirmationBusinessPartner column.
func (o *DataPlatformPlantStorageLocationDatum) StockConfirmationBusinessPartnerDataPlatformProductionOrderItemComponentData(mods ...qm.QueryMod) dataPlatformProductionOrderItemComponentDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_item_component_data`.`StockConfirmationBusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformProductionOrderItemComponentData(queryMods...)
}

// DeliverFromPartyDataPlatformProductionOrderItemData retrieves all the data_platform_production_order_item_datum's DataPlatformProductionOrderItemData with an executor via DeliverFromParty column.
func (o *DataPlatformPlantStorageLocationDatum) DeliverFromPartyDataPlatformProductionOrderItemData(mods ...qm.QueryMod) dataPlatformProductionOrderItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_item_data`.`DeliverFromParty`=?", o.BusinessPartner),
	)

	return DataPlatformProductionOrderItemData(queryMods...)
}

// DeliverToPartyDataPlatformProductionOrderItemData retrieves all the data_platform_production_order_item_datum's DataPlatformProductionOrderItemData with an executor via DeliverToParty column.
func (o *DataPlatformPlantStorageLocationDatum) DeliverToPartyDataPlatformProductionOrderItemData(mods ...qm.QueryMod) dataPlatformProductionOrderItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_item_data`.`DeliverToParty`=?", o.BusinessPartner),
	)

	return DataPlatformProductionOrderItemData(queryMods...)
}

// ProductionPlantDataPlatformProductionOrderItemData retrieves all the data_platform_production_order_item_datum's DataPlatformProductionOrderItemData with an executor via ProductionPlant column.
func (o *DataPlatformPlantStorageLocationDatum) ProductionPlantDataPlatformProductionOrderItemData(mods ...qm.QueryMod) dataPlatformProductionOrderItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_item_data`.`ProductionPlant`=?", o.Plant),
	)

	return DataPlatformProductionOrderItemData(queryMods...)
}

// DeliverFromPartyDataPlatformPurchaseRequisitionItemData retrieves all the data_platform_purchase_requisition_item_datum's DataPlatformPurchaseRequisitionItemData with an executor via DeliverFromParty column.
func (o *DataPlatformPlantStorageLocationDatum) DeliverFromPartyDataPlatformPurchaseRequisitionItemData(mods ...qm.QueryMod) dataPlatformPurchaseRequisitionItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_purchase_requisition_item_data`.`DeliverFromParty`=?", o.BusinessPartner),
	)

	return DataPlatformPurchaseRequisitionItemData(queryMods...)
}

// DeliverToPartyDataPlatformPurchaseRequisitionItemData retrieves all the data_platform_purchase_requisition_item_datum's DataPlatformPurchaseRequisitionItemData with an executor via DeliverToParty column.
func (o *DataPlatformPlantStorageLocationDatum) DeliverToPartyDataPlatformPurchaseRequisitionItemData(mods ...qm.QueryMod) dataPlatformPurchaseRequisitionItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_purchase_requisition_item_data`.`DeliverToParty`=?", o.BusinessPartner),
	)

	return DataPlatformPurchaseRequisitionItemData(queryMods...)
}

// LoadDeliverFromPartyDataPlatformDeliveryDocumentItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantStorageLocationDatumL) LoadDeliverFromPartyDataPlatformDeliveryDocumentItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantStorageLocationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantStorageLocationDatum
	var object *DataPlatformPlantStorageLocationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantStorageLocationDatum.(*DataPlatformPlantStorageLocationDatum)
		if !ok {
			object = new(DataPlatformPlantStorageLocationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantStorageLocationDatum.(*[]*DataPlatformPlantStorageLocationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantStorageLocationDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantStorageLocationDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_item_data`),
		qm.WhereIn(`data_platform_delivery_document_item_data.DeliverFromParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_item_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_item_data")
	}

	if singular {
		object.R.DeliverFromPartyDataPlatformDeliveryDocumentItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.DeliverFromParty {
				local.R.DeliverFromPartyDataPlatformDeliveryDocumentItemData = append(local.R.DeliverFromPartyDataPlatformDeliveryDocumentItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDeliverToPartyDataPlatformDeliveryDocumentItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantStorageLocationDatumL) LoadDeliverToPartyDataPlatformDeliveryDocumentItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantStorageLocationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantStorageLocationDatum
	var object *DataPlatformPlantStorageLocationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantStorageLocationDatum.(*DataPlatformPlantStorageLocationDatum)
		if !ok {
			object = new(DataPlatformPlantStorageLocationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantStorageLocationDatum.(*[]*DataPlatformPlantStorageLocationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantStorageLocationDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantStorageLocationDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_item_data`),
		qm.WhereIn(`data_platform_delivery_document_item_data.DeliverToParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_item_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_item_data")
	}

	if singular {
		object.R.DeliverToPartyDataPlatformDeliveryDocumentItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.DeliverToParty {
				local.R.DeliverToPartyDataPlatformDeliveryDocumentItemData = append(local.R.DeliverToPartyDataPlatformDeliveryDocumentItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductionPlantDataPlatformDeliveryDocumentItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantStorageLocationDatumL) LoadProductionPlantDataPlatformDeliveryDocumentItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantStorageLocationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantStorageLocationDatum
	var object *DataPlatformPlantStorageLocationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantStorageLocationDatum.(*DataPlatformPlantStorageLocationDatum)
		if !ok {
			object = new(DataPlatformPlantStorageLocationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantStorageLocationDatum.(*[]*DataPlatformPlantStorageLocationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantStorageLocationDatumR{}
		}
		args = append(args, object.Plant)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantStorageLocationDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Plant) {
					continue Outer
				}
			}

			args = append(args, obj.Plant)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_item_data`),
		qm.WhereIn(`data_platform_delivery_document_item_data.ProductionPlant in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_item_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_item_data")
	}

	if singular {
		object.R.ProductionPlantDataPlatformDeliveryDocumentItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Plant, foreign.ProductionPlant) {
				local.R.ProductionPlantDataPlatformDeliveryDocumentItemData = append(local.R.ProductionPlantDataPlatformDeliveryDocumentItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDeliverFromPartyDataPlatformOrdersItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantStorageLocationDatumL) LoadDeliverFromPartyDataPlatformOrdersItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantStorageLocationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantStorageLocationDatum
	var object *DataPlatformPlantStorageLocationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantStorageLocationDatum.(*DataPlatformPlantStorageLocationDatum)
		if !ok {
			object = new(DataPlatformPlantStorageLocationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantStorageLocationDatum.(*[]*DataPlatformPlantStorageLocationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantStorageLocationDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantStorageLocationDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BusinessPartner) {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_data`),
		qm.WhereIn(`data_platform_orders_item_data.DeliverFromParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_item_data")
	}

	var resultSlice []*DataPlatformOrdersItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_data")
	}

	if singular {
		object.R.DeliverFromPartyDataPlatformOrdersItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BusinessPartner, foreign.DeliverFromParty) {
				local.R.DeliverFromPartyDataPlatformOrdersItemData = append(local.R.DeliverFromPartyDataPlatformOrdersItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDeliverToPartyDataPlatformOrdersItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantStorageLocationDatumL) LoadDeliverToPartyDataPlatformOrdersItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantStorageLocationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantStorageLocationDatum
	var object *DataPlatformPlantStorageLocationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantStorageLocationDatum.(*DataPlatformPlantStorageLocationDatum)
		if !ok {
			object = new(DataPlatformPlantStorageLocationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantStorageLocationDatum.(*[]*DataPlatformPlantStorageLocationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantStorageLocationDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantStorageLocationDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BusinessPartner) {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_data`),
		qm.WhereIn(`data_platform_orders_item_data.DeliverToParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_item_data")
	}

	var resultSlice []*DataPlatformOrdersItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_data")
	}

	if singular {
		object.R.DeliverToPartyDataPlatformOrdersItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BusinessPartner, foreign.DeliverToParty) {
				local.R.DeliverToPartyDataPlatformOrdersItemData = append(local.R.DeliverToPartyDataPlatformOrdersItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadOwnerProductionPlantDataPlatformPlannedOrderHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantStorageLocationDatumL) LoadOwnerProductionPlantDataPlatformPlannedOrderHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantStorageLocationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantStorageLocationDatum
	var object *DataPlatformPlantStorageLocationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantStorageLocationDatum.(*DataPlatformPlantStorageLocationDatum)
		if !ok {
			object = new(DataPlatformPlantStorageLocationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantStorageLocationDatum.(*[]*DataPlatformPlantStorageLocationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantStorageLocationDatumR{}
		}
		args = append(args, object.Plant)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantStorageLocationDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Plant) {
					continue Outer
				}
			}

			args = append(args, obj.Plant)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_header_data`),
		qm.WhereIn(`data_platform_planned_order_header_data.OwnerProductionPlant in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_header_data")
	}

	var resultSlice []*DataPlatformPlannedOrderHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_header_data")
	}

	if singular {
		object.R.OwnerProductionPlantDataPlatformPlannedOrderHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Plant, foreign.OwnerProductionPlant) {
				local.R.OwnerProductionPlantDataPlatformPlannedOrderHeaderData = append(local.R.OwnerProductionPlantDataPlatformPlannedOrderHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDeliverFromPartyDataPlatformPlannedOrderItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantStorageLocationDatumL) LoadDeliverFromPartyDataPlatformPlannedOrderItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantStorageLocationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantStorageLocationDatum
	var object *DataPlatformPlantStorageLocationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantStorageLocationDatum.(*DataPlatformPlantStorageLocationDatum)
		if !ok {
			object = new(DataPlatformPlantStorageLocationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantStorageLocationDatum.(*[]*DataPlatformPlantStorageLocationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantStorageLocationDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantStorageLocationDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_data`),
		qm.WhereIn(`data_platform_planned_order_item_data.DeliverFromParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_data")
	}

	if singular {
		object.R.DeliverFromPartyDataPlatformPlannedOrderItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.DeliverFromParty {
				local.R.DeliverFromPartyDataPlatformPlannedOrderItemData = append(local.R.DeliverFromPartyDataPlatformPlannedOrderItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDeliverToPartyDataPlatformPlannedOrderItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantStorageLocationDatumL) LoadDeliverToPartyDataPlatformPlannedOrderItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantStorageLocationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantStorageLocationDatum
	var object *DataPlatformPlantStorageLocationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantStorageLocationDatum.(*DataPlatformPlantStorageLocationDatum)
		if !ok {
			object = new(DataPlatformPlantStorageLocationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantStorageLocationDatum.(*[]*DataPlatformPlantStorageLocationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantStorageLocationDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantStorageLocationDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_data`),
		qm.WhereIn(`data_platform_planned_order_item_data.DeliverToParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_data")
	}

	if singular {
		object.R.DeliverToPartyDataPlatformPlannedOrderItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.DeliverToParty {
				local.R.DeliverToPartyDataPlatformPlannedOrderItemData = append(local.R.DeliverToPartyDataPlatformPlannedOrderItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductionPlantDataPlatformPlannedOrderItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantStorageLocationDatumL) LoadProductionPlantDataPlatformPlannedOrderItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantStorageLocationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantStorageLocationDatum
	var object *DataPlatformPlantStorageLocationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantStorageLocationDatum.(*DataPlatformPlantStorageLocationDatum)
		if !ok {
			object = new(DataPlatformPlantStorageLocationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantStorageLocationDatum.(*[]*DataPlatformPlantStorageLocationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantStorageLocationDatumR{}
		}
		args = append(args, object.Plant)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantStorageLocationDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Plant) {
					continue Outer
				}
			}

			args = append(args, obj.Plant)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_data`),
		qm.WhereIn(`data_platform_planned_order_item_data.ProductionPlant in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_data")
	}

	if singular {
		object.R.ProductionPlantDataPlatformPlannedOrderItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Plant, foreign.ProductionPlant) {
				local.R.ProductionPlantDataPlatformPlannedOrderItemData = append(local.R.ProductionPlantDataPlatformPlannedOrderItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadStockConfirmationBusinessPartnerDataPlatformPlannedOrderItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantStorageLocationDatumL) LoadStockConfirmationBusinessPartnerDataPlatformPlannedOrderItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantStorageLocationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantStorageLocationDatum
	var object *DataPlatformPlantStorageLocationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantStorageLocationDatum.(*DataPlatformPlantStorageLocationDatum)
		if !ok {
			object = new(DataPlatformPlantStorageLocationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantStorageLocationDatum.(*[]*DataPlatformPlantStorageLocationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantStorageLocationDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantStorageLocationDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_data`),
		qm.WhereIn(`data_platform_planned_order_item_data.StockConfirmationBusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_data")
	}

	if singular {
		object.R.StockConfirmationBusinessPartnerDataPlatformPlannedOrderItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.StockConfirmationBusinessPartner {
				local.R.StockConfirmationBusinessPartnerDataPlatformPlannedOrderItemData = append(local.R.StockConfirmationBusinessPartnerDataPlatformPlannedOrderItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformProductMasterProductionData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantStorageLocationDatumL) LoadBusinessPartnerDataPlatformProductMasterProductionData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantStorageLocationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantStorageLocationDatum
	var object *DataPlatformPlantStorageLocationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantStorageLocationDatum.(*DataPlatformPlantStorageLocationDatum)
		if !ok {
			object = new(DataPlatformPlantStorageLocationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantStorageLocationDatum.(*[]*DataPlatformPlantStorageLocationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantStorageLocationDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantStorageLocationDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_production_data`),
		qm.WhereIn(`data_platform_product_master_production_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_master_production_data")
	}

	var resultSlice []*DataPlatformProductMasterProductionDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_master_production_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_master_production_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_production_data")
	}

	if singular {
		object.R.BusinessPartnerDataPlatformProductMasterProductionData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformProductMasterProductionData = append(local.R.BusinessPartnerDataPlatformProductMasterProductionData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformProductStockProductStockByBtches allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantStorageLocationDatumL) LoadBusinessPartnerDataPlatformProductStockProductStockByBtches(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantStorageLocationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantStorageLocationDatum
	var object *DataPlatformPlantStorageLocationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantStorageLocationDatum.(*DataPlatformPlantStorageLocationDatum)
		if !ok {
			object = new(DataPlatformPlantStorageLocationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantStorageLocationDatum.(*[]*DataPlatformPlantStorageLocationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantStorageLocationDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantStorageLocationDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_stock_product_stock_by_btch`),
		qm.WhereIn(`data_platform_product_stock_product_stock_by_btch.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_stock_product_stock_by_btch")
	}

	var resultSlice []*DataPlatformProductStockProductStockByBTCH
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_stock_product_stock_by_btch")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_stock_product_stock_by_btch")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_stock_product_stock_by_btch")
	}

	if singular {
		object.R.BusinessPartnerDataPlatformProductStockProductStockByBtches = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformProductStockProductStockByBtches = append(local.R.BusinessPartnerDataPlatformProductStockProductStockByBtches, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDepartureDeliverFromPartyDataPlatformProductionOrderHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantStorageLocationDatumL) LoadDepartureDeliverFromPartyDataPlatformProductionOrderHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantStorageLocationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantStorageLocationDatum
	var object *DataPlatformPlantStorageLocationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantStorageLocationDatum.(*DataPlatformPlantStorageLocationDatum)
		if !ok {
			object = new(DataPlatformPlantStorageLocationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantStorageLocationDatum.(*[]*DataPlatformPlantStorageLocationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantStorageLocationDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantStorageLocationDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_header_data`),
		qm.WhereIn(`data_platform_production_order_header_data.DepartureDeliverFromParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_header_data")
	}

	var resultSlice []*DataPlatformProductionOrderHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_header_data")
	}

	if singular {
		object.R.DepartureDeliverFromPartyDataPlatformProductionOrderHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.DepartureDeliverFromParty {
				local.R.DepartureDeliverFromPartyDataPlatformProductionOrderHeaderData = append(local.R.DepartureDeliverFromPartyDataPlatformProductionOrderHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDestinationDeliverToPartyDataPlatformProductionOrderHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantStorageLocationDatumL) LoadDestinationDeliverToPartyDataPlatformProductionOrderHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantStorageLocationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantStorageLocationDatum
	var object *DataPlatformPlantStorageLocationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantStorageLocationDatum.(*DataPlatformPlantStorageLocationDatum)
		if !ok {
			object = new(DataPlatformPlantStorageLocationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantStorageLocationDatum.(*[]*DataPlatformPlantStorageLocationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantStorageLocationDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantStorageLocationDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_header_data`),
		qm.WhereIn(`data_platform_production_order_header_data.DestinationDeliverToParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_header_data")
	}

	var resultSlice []*DataPlatformProductionOrderHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_header_data")
	}

	if singular {
		object.R.DestinationDeliverToPartyDataPlatformProductionOrderHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.DestinationDeliverToParty {
				local.R.DestinationDeliverToPartyDataPlatformProductionOrderHeaderData = append(local.R.DestinationDeliverToPartyDataPlatformProductionOrderHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadOwnerProductionPlantDataPlatformProductionOrderHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantStorageLocationDatumL) LoadOwnerProductionPlantDataPlatformProductionOrderHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantStorageLocationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantStorageLocationDatum
	var object *DataPlatformPlantStorageLocationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantStorageLocationDatum.(*DataPlatformPlantStorageLocationDatum)
		if !ok {
			object = new(DataPlatformPlantStorageLocationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantStorageLocationDatum.(*[]*DataPlatformPlantStorageLocationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantStorageLocationDatumR{}
		}
		args = append(args, object.Plant)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantStorageLocationDatumR{}
			}

			for _, a := range args {
				if a == obj.Plant {
					continue Outer
				}
			}

			args = append(args, obj.Plant)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_header_data`),
		qm.WhereIn(`data_platform_production_order_header_data.OwnerProductionPlant in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_header_data")
	}

	var resultSlice []*DataPlatformProductionOrderHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_header_data")
	}

	if singular {
		object.R.OwnerProductionPlantDataPlatformProductionOrderHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Plant == foreign.OwnerProductionPlant {
				local.R.OwnerProductionPlantDataPlatformProductionOrderHeaderData = append(local.R.OwnerProductionPlantDataPlatformProductionOrderHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadStockConfirmationBusinessPartnerDataPlatformProductionOrderItemComponentData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantStorageLocationDatumL) LoadStockConfirmationBusinessPartnerDataPlatformProductionOrderItemComponentData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantStorageLocationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantStorageLocationDatum
	var object *DataPlatformPlantStorageLocationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantStorageLocationDatum.(*DataPlatformPlantStorageLocationDatum)
		if !ok {
			object = new(DataPlatformPlantStorageLocationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantStorageLocationDatum.(*[]*DataPlatformPlantStorageLocationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantStorageLocationDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantStorageLocationDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_item_component_data`),
		qm.WhereIn(`data_platform_production_order_item_component_data.StockConfirmationBusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_item_component_data")
	}

	var resultSlice []*DataPlatformProductionOrderItemComponentDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_item_component_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_item_component_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_item_component_data")
	}

	if singular {
		object.R.StockConfirmationBusinessPartnerDataPlatformProductionOrderItemComponentData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.StockConfirmationBusinessPartner {
				local.R.StockConfirmationBusinessPartnerDataPlatformProductionOrderItemComponentData = append(local.R.StockConfirmationBusinessPartnerDataPlatformProductionOrderItemComponentData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDeliverFromPartyDataPlatformProductionOrderItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantStorageLocationDatumL) LoadDeliverFromPartyDataPlatformProductionOrderItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantStorageLocationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantStorageLocationDatum
	var object *DataPlatformPlantStorageLocationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantStorageLocationDatum.(*DataPlatformPlantStorageLocationDatum)
		if !ok {
			object = new(DataPlatformPlantStorageLocationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantStorageLocationDatum.(*[]*DataPlatformPlantStorageLocationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantStorageLocationDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantStorageLocationDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_item_data`),
		qm.WhereIn(`data_platform_production_order_item_data.DeliverFromParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_item_data")
	}

	var resultSlice []*DataPlatformProductionOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_item_data")
	}

	if singular {
		object.R.DeliverFromPartyDataPlatformProductionOrderItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.DeliverFromParty {
				local.R.DeliverFromPartyDataPlatformProductionOrderItemData = append(local.R.DeliverFromPartyDataPlatformProductionOrderItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDeliverToPartyDataPlatformProductionOrderItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantStorageLocationDatumL) LoadDeliverToPartyDataPlatformProductionOrderItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantStorageLocationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantStorageLocationDatum
	var object *DataPlatformPlantStorageLocationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantStorageLocationDatum.(*DataPlatformPlantStorageLocationDatum)
		if !ok {
			object = new(DataPlatformPlantStorageLocationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantStorageLocationDatum.(*[]*DataPlatformPlantStorageLocationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantStorageLocationDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantStorageLocationDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_item_data`),
		qm.WhereIn(`data_platform_production_order_item_data.DeliverToParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_item_data")
	}

	var resultSlice []*DataPlatformProductionOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_item_data")
	}

	if singular {
		object.R.DeliverToPartyDataPlatformProductionOrderItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.DeliverToParty {
				local.R.DeliverToPartyDataPlatformProductionOrderItemData = append(local.R.DeliverToPartyDataPlatformProductionOrderItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductionPlantDataPlatformProductionOrderItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantStorageLocationDatumL) LoadProductionPlantDataPlatformProductionOrderItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantStorageLocationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantStorageLocationDatum
	var object *DataPlatformPlantStorageLocationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantStorageLocationDatum.(*DataPlatformPlantStorageLocationDatum)
		if !ok {
			object = new(DataPlatformPlantStorageLocationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantStorageLocationDatum.(*[]*DataPlatformPlantStorageLocationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantStorageLocationDatumR{}
		}
		args = append(args, object.Plant)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantStorageLocationDatumR{}
			}

			for _, a := range args {
				if a == obj.Plant {
					continue Outer
				}
			}

			args = append(args, obj.Plant)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_item_data`),
		qm.WhereIn(`data_platform_production_order_item_data.ProductionPlant in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_item_data")
	}

	var resultSlice []*DataPlatformProductionOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_item_data")
	}

	if singular {
		object.R.ProductionPlantDataPlatformProductionOrderItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Plant == foreign.ProductionPlant {
				local.R.ProductionPlantDataPlatformProductionOrderItemData = append(local.R.ProductionPlantDataPlatformProductionOrderItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDeliverFromPartyDataPlatformPurchaseRequisitionItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantStorageLocationDatumL) LoadDeliverFromPartyDataPlatformPurchaseRequisitionItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantStorageLocationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantStorageLocationDatum
	var object *DataPlatformPlantStorageLocationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantStorageLocationDatum.(*DataPlatformPlantStorageLocationDatum)
		if !ok {
			object = new(DataPlatformPlantStorageLocationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantStorageLocationDatum.(*[]*DataPlatformPlantStorageLocationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantStorageLocationDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantStorageLocationDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BusinessPartner) {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_purchase_requisition_item_data`),
		qm.WhereIn(`data_platform_purchase_requisition_item_data.DeliverFromParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_purchase_requisition_item_data")
	}

	var resultSlice []*DataPlatformPurchaseRequisitionItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_purchase_requisition_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_purchase_requisition_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_purchase_requisition_item_data")
	}

	if singular {
		object.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BusinessPartner, foreign.DeliverFromParty) {
				local.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData = append(local.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDeliverToPartyDataPlatformPurchaseRequisitionItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantStorageLocationDatumL) LoadDeliverToPartyDataPlatformPurchaseRequisitionItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantStorageLocationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantStorageLocationDatum
	var object *DataPlatformPlantStorageLocationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantStorageLocationDatum.(*DataPlatformPlantStorageLocationDatum)
		if !ok {
			object = new(DataPlatformPlantStorageLocationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantStorageLocationDatum.(*[]*DataPlatformPlantStorageLocationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantStorageLocationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantStorageLocationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantStorageLocationDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantStorageLocationDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_purchase_requisition_item_data`),
		qm.WhereIn(`data_platform_purchase_requisition_item_data.DeliverToParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_purchase_requisition_item_data")
	}

	var resultSlice []*DataPlatformPurchaseRequisitionItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_purchase_requisition_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_purchase_requisition_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_purchase_requisition_item_data")
	}

	if singular {
		object.R.DeliverToPartyDataPlatformPurchaseRequisitionItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.DeliverToParty {
				local.R.DeliverToPartyDataPlatformPurchaseRequisitionItemData = append(local.R.DeliverToPartyDataPlatformPurchaseRequisitionItemData, foreign)
				break
			}
		}
	}

	return nil
}

// AddDeliverFromPartyDataPlatformDeliveryDocumentItemData adds the given related objects to the existing relationships
// of the data_platform_plant_storage_location_datum, optionally inserting them as new records.
// Appends related to o.R.DeliverFromPartyDataPlatformDeliveryDocumentItemData.
func (o *DataPlatformPlantStorageLocationDatum) AddDeliverFromPartyDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DeliverFromParty = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DeliverFromParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.DeliveryDocument, rel.DeliveryDocumentItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DeliverFromParty = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantStorageLocationDatumR{
			DeliverFromPartyDataPlatformDeliveryDocumentItemData: related,
		}
	} else {
		o.R.DeliverFromPartyDataPlatformDeliveryDocumentItemData = append(o.R.DeliverFromPartyDataPlatformDeliveryDocumentItemData, related...)
	}

	return nil
}

// AddDeliverToPartyDataPlatformDeliveryDocumentItemData adds the given related objects to the existing relationships
// of the data_platform_plant_storage_location_datum, optionally inserting them as new records.
// Appends related to o.R.DeliverToPartyDataPlatformDeliveryDocumentItemData.
func (o *DataPlatformPlantStorageLocationDatum) AddDeliverToPartyDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DeliverToParty = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DeliverToParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.DeliveryDocument, rel.DeliveryDocumentItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DeliverToParty = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantStorageLocationDatumR{
			DeliverToPartyDataPlatformDeliveryDocumentItemData: related,
		}
	} else {
		o.R.DeliverToPartyDataPlatformDeliveryDocumentItemData = append(o.R.DeliverToPartyDataPlatformDeliveryDocumentItemData, related...)
	}

	return nil
}

// AddProductionPlantDataPlatformDeliveryDocumentItemData adds the given related objects to the existing relationships
// of the data_platform_plant_storage_location_datum, optionally inserting them as new records.
// Appends related to o.R.ProductionPlantDataPlatformDeliveryDocumentItemData.
func (o *DataPlatformPlantStorageLocationDatum) AddProductionPlantDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductionPlant, o.Plant)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductionPlant"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Plant, rel.DeliveryDocument, rel.DeliveryDocumentItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductionPlant, o.Plant)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantStorageLocationDatumR{
			ProductionPlantDataPlatformDeliveryDocumentItemData: related,
		}
	} else {
		o.R.ProductionPlantDataPlatformDeliveryDocumentItemData = append(o.R.ProductionPlantDataPlatformDeliveryDocumentItemData, related...)
	}

	return nil
}

// SetProductionPlantDataPlatformDeliveryDocumentItemData removes all previously related items of the
// data_platform_plant_storage_location_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductionPlantDataPlatformPlantStorageLocationDatum's ProductionPlantDataPlatformDeliveryDocumentItemData accordingly.
// Replaces o.R.ProductionPlantDataPlatformDeliveryDocumentItemData with related.
func (o *DataPlatformPlantStorageLocationDatum) SetProductionPlantDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	query := "update `data_platform_delivery_document_item_data` set `ProductionPlant` = null where `ProductionPlant` = ?"
	values := []interface{}{o.Plant}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.ProductionPlantDataPlatformDeliveryDocumentItemData = nil
	}

	return o.AddProductionPlantDataPlatformDeliveryDocumentItemData(ctx, exec, insert, related...)
}

// RemoveProductionPlantDataPlatformDeliveryDocumentItemData relationships from objects passed in.
// Removes related items from R.ProductionPlantDataPlatformDeliveryDocumentItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformPlantStorageLocationDatum) RemoveProductionPlantDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductionPlant, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("ProductionPlant")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductionPlantDataPlatformDeliveryDocumentItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductionPlantDataPlatformDeliveryDocumentItemData)
			if ln > 1 && i < ln-1 {
				o.R.ProductionPlantDataPlatformDeliveryDocumentItemData[i] = o.R.ProductionPlantDataPlatformDeliveryDocumentItemData[ln-1]
			}
			o.R.ProductionPlantDataPlatformDeliveryDocumentItemData = o.R.ProductionPlantDataPlatformDeliveryDocumentItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddDeliverFromPartyDataPlatformOrdersItemData adds the given related objects to the existing relationships
// of the data_platform_plant_storage_location_datum, optionally inserting them as new records.
// Appends related to o.R.DeliverFromPartyDataPlatformOrdersItemData.
func (o *DataPlatformPlantStorageLocationDatum) AddDeliverFromPartyDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DeliverFromParty, o.BusinessPartner)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DeliverFromParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.OrderID, rel.OrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DeliverFromParty, o.BusinessPartner)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantStorageLocationDatumR{
			DeliverFromPartyDataPlatformOrdersItemData: related,
		}
	} else {
		o.R.DeliverFromPartyDataPlatformOrdersItemData = append(o.R.DeliverFromPartyDataPlatformOrdersItemData, related...)
	}

	return nil
}

// SetDeliverFromPartyDataPlatformOrdersItemData removes all previously related items of the
// data_platform_plant_storage_location_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DeliverFromPartyDataPlatformPlantStorageLocationDatum's DeliverFromPartyDataPlatformOrdersItemData accordingly.
// Replaces o.R.DeliverFromPartyDataPlatformOrdersItemData with related.
func (o *DataPlatformPlantStorageLocationDatum) SetDeliverFromPartyDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	query := "update `data_platform_orders_item_data` set `DeliverFromParty` = null where `DeliverFromParty` = ?"
	values := []interface{}{o.BusinessPartner}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.DeliverFromPartyDataPlatformOrdersItemData = nil
	}

	return o.AddDeliverFromPartyDataPlatformOrdersItemData(ctx, exec, insert, related...)
}

// RemoveDeliverFromPartyDataPlatformOrdersItemData relationships from objects passed in.
// Removes related items from R.DeliverFromPartyDataPlatformOrdersItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformPlantStorageLocationDatum) RemoveDeliverFromPartyDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOrdersItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DeliverFromParty, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("DeliverFromParty")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DeliverFromPartyDataPlatformOrdersItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.DeliverFromPartyDataPlatformOrdersItemData)
			if ln > 1 && i < ln-1 {
				o.R.DeliverFromPartyDataPlatformOrdersItemData[i] = o.R.DeliverFromPartyDataPlatformOrdersItemData[ln-1]
			}
			o.R.DeliverFromPartyDataPlatformOrdersItemData = o.R.DeliverFromPartyDataPlatformOrdersItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddDeliverToPartyDataPlatformOrdersItemData adds the given related objects to the existing relationships
// of the data_platform_plant_storage_location_datum, optionally inserting them as new records.
// Appends related to o.R.DeliverToPartyDataPlatformOrdersItemData.
func (o *DataPlatformPlantStorageLocationDatum) AddDeliverToPartyDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DeliverToParty, o.BusinessPartner)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DeliverToParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.OrderID, rel.OrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DeliverToParty, o.BusinessPartner)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantStorageLocationDatumR{
			DeliverToPartyDataPlatformOrdersItemData: related,
		}
	} else {
		o.R.DeliverToPartyDataPlatformOrdersItemData = append(o.R.DeliverToPartyDataPlatformOrdersItemData, related...)
	}

	return nil
}

// SetDeliverToPartyDataPlatformOrdersItemData removes all previously related items of the
// data_platform_plant_storage_location_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DeliverToPartyDataPlatformPlantStorageLocationDatum's DeliverToPartyDataPlatformOrdersItemData accordingly.
// Replaces o.R.DeliverToPartyDataPlatformOrdersItemData with related.
func (o *DataPlatformPlantStorageLocationDatum) SetDeliverToPartyDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	query := "update `data_platform_orders_item_data` set `DeliverToParty` = null where `DeliverToParty` = ?"
	values := []interface{}{o.BusinessPartner}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.DeliverToPartyDataPlatformOrdersItemData = nil
	}

	return o.AddDeliverToPartyDataPlatformOrdersItemData(ctx, exec, insert, related...)
}

// RemoveDeliverToPartyDataPlatformOrdersItemData relationships from objects passed in.
// Removes related items from R.DeliverToPartyDataPlatformOrdersItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformPlantStorageLocationDatum) RemoveDeliverToPartyDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOrdersItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DeliverToParty, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("DeliverToParty")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DeliverToPartyDataPlatformOrdersItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.DeliverToPartyDataPlatformOrdersItemData)
			if ln > 1 && i < ln-1 {
				o.R.DeliverToPartyDataPlatformOrdersItemData[i] = o.R.DeliverToPartyDataPlatformOrdersItemData[ln-1]
			}
			o.R.DeliverToPartyDataPlatformOrdersItemData = o.R.DeliverToPartyDataPlatformOrdersItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddOwnerProductionPlantDataPlatformPlannedOrderHeaderData adds the given related objects to the existing relationships
// of the data_platform_plant_storage_location_datum, optionally inserting them as new records.
// Appends related to o.R.OwnerProductionPlantDataPlatformPlannedOrderHeaderData.
func (o *DataPlatformPlantStorageLocationDatum) AddOwnerProductionPlantDataPlatformPlannedOrderHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OwnerProductionPlant, o.Plant)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"OwnerProductionPlant"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Plant, rel.PlannedOrder}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OwnerProductionPlant, o.Plant)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantStorageLocationDatumR{
			OwnerProductionPlantDataPlatformPlannedOrderHeaderData: related,
		}
	} else {
		o.R.OwnerProductionPlantDataPlatformPlannedOrderHeaderData = append(o.R.OwnerProductionPlantDataPlatformPlannedOrderHeaderData, related...)
	}

	return nil
}

// SetOwnerProductionPlantDataPlatformPlannedOrderHeaderData removes all previously related items of the
// data_platform_plant_storage_location_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OwnerProductionPlantDataPlatformPlantStorageLocationDatum's OwnerProductionPlantDataPlatformPlannedOrderHeaderData accordingly.
// Replaces o.R.OwnerProductionPlantDataPlatformPlannedOrderHeaderData with related.
func (o *DataPlatformPlantStorageLocationDatum) SetOwnerProductionPlantDataPlatformPlannedOrderHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderHeaderDatum) error {
	query := "update `data_platform_planned_order_header_data` set `OwnerProductionPlant` = null where `OwnerProductionPlant` = ?"
	values := []interface{}{o.Plant}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.OwnerProductionPlantDataPlatformPlannedOrderHeaderData = nil
	}

	return o.AddOwnerProductionPlantDataPlatformPlannedOrderHeaderData(ctx, exec, insert, related...)
}

// RemoveOwnerProductionPlantDataPlatformPlannedOrderHeaderData relationships from objects passed in.
// Removes related items from R.OwnerProductionPlantDataPlatformPlannedOrderHeaderData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformPlantStorageLocationDatum) RemoveOwnerProductionPlantDataPlatformPlannedOrderHeaderData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformPlannedOrderHeaderDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.OwnerProductionPlant, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("OwnerProductionPlant")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OwnerProductionPlantDataPlatformPlannedOrderHeaderData {
			if rel != ri {
				continue
			}

			ln := len(o.R.OwnerProductionPlantDataPlatformPlannedOrderHeaderData)
			if ln > 1 && i < ln-1 {
				o.R.OwnerProductionPlantDataPlatformPlannedOrderHeaderData[i] = o.R.OwnerProductionPlantDataPlatformPlannedOrderHeaderData[ln-1]
			}
			o.R.OwnerProductionPlantDataPlatformPlannedOrderHeaderData = o.R.OwnerProductionPlantDataPlatformPlannedOrderHeaderData[:ln-1]
			break
		}
	}

	return nil
}

// AddDeliverFromPartyDataPlatformPlannedOrderItemData adds the given related objects to the existing relationships
// of the data_platform_plant_storage_location_datum, optionally inserting them as new records.
// Appends related to o.R.DeliverFromPartyDataPlatformPlannedOrderItemData.
func (o *DataPlatformPlantStorageLocationDatum) AddDeliverFromPartyDataPlatformPlannedOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DeliverFromParty = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DeliverFromParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.PlannedOrder, rel.PlannedOrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DeliverFromParty = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantStorageLocationDatumR{
			DeliverFromPartyDataPlatformPlannedOrderItemData: related,
		}
	} else {
		o.R.DeliverFromPartyDataPlatformPlannedOrderItemData = append(o.R.DeliverFromPartyDataPlatformPlannedOrderItemData, related...)
	}

	return nil
}

// AddDeliverToPartyDataPlatformPlannedOrderItemData adds the given related objects to the existing relationships
// of the data_platform_plant_storage_location_datum, optionally inserting them as new records.
// Appends related to o.R.DeliverToPartyDataPlatformPlannedOrderItemData.
func (o *DataPlatformPlantStorageLocationDatum) AddDeliverToPartyDataPlatformPlannedOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DeliverToParty = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DeliverToParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.PlannedOrder, rel.PlannedOrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DeliverToParty = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantStorageLocationDatumR{
			DeliverToPartyDataPlatformPlannedOrderItemData: related,
		}
	} else {
		o.R.DeliverToPartyDataPlatformPlannedOrderItemData = append(o.R.DeliverToPartyDataPlatformPlannedOrderItemData, related...)
	}

	return nil
}

// AddProductionPlantDataPlatformPlannedOrderItemData adds the given related objects to the existing relationships
// of the data_platform_plant_storage_location_datum, optionally inserting them as new records.
// Appends related to o.R.ProductionPlantDataPlatformPlannedOrderItemData.
func (o *DataPlatformPlantStorageLocationDatum) AddProductionPlantDataPlatformPlannedOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductionPlant, o.Plant)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductionPlant"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Plant, rel.PlannedOrder, rel.PlannedOrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductionPlant, o.Plant)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantStorageLocationDatumR{
			ProductionPlantDataPlatformPlannedOrderItemData: related,
		}
	} else {
		o.R.ProductionPlantDataPlatformPlannedOrderItemData = append(o.R.ProductionPlantDataPlatformPlannedOrderItemData, related...)
	}

	return nil
}

// SetProductionPlantDataPlatformPlannedOrderItemData removes all previously related items of the
// data_platform_plant_storage_location_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductionPlantDataPlatformPlantStorageLocationDatum's ProductionPlantDataPlatformPlannedOrderItemData accordingly.
// Replaces o.R.ProductionPlantDataPlatformPlannedOrderItemData with related.
func (o *DataPlatformPlantStorageLocationDatum) SetProductionPlantDataPlatformPlannedOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemDatum) error {
	query := "update `data_platform_planned_order_item_data` set `ProductionPlant` = null where `ProductionPlant` = ?"
	values := []interface{}{o.Plant}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.ProductionPlantDataPlatformPlannedOrderItemData = nil
	}

	return o.AddProductionPlantDataPlatformPlannedOrderItemData(ctx, exec, insert, related...)
}

// RemoveProductionPlantDataPlatformPlannedOrderItemData relationships from objects passed in.
// Removes related items from R.ProductionPlantDataPlatformPlannedOrderItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformPlantStorageLocationDatum) RemoveProductionPlantDataPlatformPlannedOrderItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformPlannedOrderItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductionPlant, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("ProductionPlant")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductionPlantDataPlatformPlannedOrderItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductionPlantDataPlatformPlannedOrderItemData)
			if ln > 1 && i < ln-1 {
				o.R.ProductionPlantDataPlatformPlannedOrderItemData[i] = o.R.ProductionPlantDataPlatformPlannedOrderItemData[ln-1]
			}
			o.R.ProductionPlantDataPlatformPlannedOrderItemData = o.R.ProductionPlantDataPlatformPlannedOrderItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddStockConfirmationBusinessPartnerDataPlatformPlannedOrderItemData adds the given related objects to the existing relationships
// of the data_platform_plant_storage_location_datum, optionally inserting them as new records.
// Appends related to o.R.StockConfirmationBusinessPartnerDataPlatformPlannedOrderItemData.
func (o *DataPlatformPlantStorageLocationDatum) AddStockConfirmationBusinessPartnerDataPlatformPlannedOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StockConfirmationBusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"StockConfirmationBusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.PlannedOrder, rel.PlannedOrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StockConfirmationBusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantStorageLocationDatumR{
			StockConfirmationBusinessPartnerDataPlatformPlannedOrderItemData: related,
		}
	} else {
		o.R.StockConfirmationBusinessPartnerDataPlatformPlannedOrderItemData = append(o.R.StockConfirmationBusinessPartnerDataPlatformPlannedOrderItemData, related...)
	}

	return nil
}

// AddBusinessPartnerDataPlatformProductMasterProductionData adds the given related objects to the existing relationships
// of the data_platform_plant_storage_location_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformProductMasterProductionData.
func (o *DataPlatformPlantStorageLocationDatum) AddBusinessPartnerDataPlatformProductMasterProductionData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterProductionDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_master_production_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterProductionDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Product, rel.BusinessPartner, rel.Plant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantStorageLocationDatumR{
			BusinessPartnerDataPlatformProductMasterProductionData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformProductMasterProductionData = append(o.R.BusinessPartnerDataPlatformProductMasterProductionData, related...)
	}

	return nil
}

// AddBusinessPartnerDataPlatformProductStockProductStockByBtches adds the given related objects to the existing relationships
// of the data_platform_plant_storage_location_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformProductStockProductStockByBtches.
func (o *DataPlatformPlantStorageLocationDatum) AddBusinessPartnerDataPlatformProductStockProductStockByBtches(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductStockProductStockByBTCH) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_stock_product_stock_by_btch` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockByBTCHPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Product, rel.BusinessPartner, rel.Plant, rel.Batch}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantStorageLocationDatumR{
			BusinessPartnerDataPlatformProductStockProductStockByBtches: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformProductStockProductStockByBtches = append(o.R.BusinessPartnerDataPlatformProductStockProductStockByBtches, related...)
	}

	return nil
}

// AddDepartureDeliverFromPartyDataPlatformProductionOrderHeaderData adds the given related objects to the existing relationships
// of the data_platform_plant_storage_location_datum, optionally inserting them as new records.
// Appends related to o.R.DepartureDeliverFromPartyDataPlatformProductionOrderHeaderData.
func (o *DataPlatformPlantStorageLocationDatum) AddDepartureDeliverFromPartyDataPlatformProductionOrderHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DepartureDeliverFromParty = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DepartureDeliverFromParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.ProductionOrder}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DepartureDeliverFromParty = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantStorageLocationDatumR{
			DepartureDeliverFromPartyDataPlatformProductionOrderHeaderData: related,
		}
	} else {
		o.R.DepartureDeliverFromPartyDataPlatformProductionOrderHeaderData = append(o.R.DepartureDeliverFromPartyDataPlatformProductionOrderHeaderData, related...)
	}

	return nil
}

// AddDestinationDeliverToPartyDataPlatformProductionOrderHeaderData adds the given related objects to the existing relationships
// of the data_platform_plant_storage_location_datum, optionally inserting them as new records.
// Appends related to o.R.DestinationDeliverToPartyDataPlatformProductionOrderHeaderData.
func (o *DataPlatformPlantStorageLocationDatum) AddDestinationDeliverToPartyDataPlatformProductionOrderHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DestinationDeliverToParty = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DestinationDeliverToParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.ProductionOrder}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DestinationDeliverToParty = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantStorageLocationDatumR{
			DestinationDeliverToPartyDataPlatformProductionOrderHeaderData: related,
		}
	} else {
		o.R.DestinationDeliverToPartyDataPlatformProductionOrderHeaderData = append(o.R.DestinationDeliverToPartyDataPlatformProductionOrderHeaderData, related...)
	}

	return nil
}

// AddOwnerProductionPlantDataPlatformProductionOrderHeaderData adds the given related objects to the existing relationships
// of the data_platform_plant_storage_location_datum, optionally inserting them as new records.
// Appends related to o.R.OwnerProductionPlantDataPlatformProductionOrderHeaderData.
func (o *DataPlatformPlantStorageLocationDatum) AddOwnerProductionPlantDataPlatformProductionOrderHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OwnerProductionPlant = o.Plant
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"OwnerProductionPlant"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Plant, rel.ProductionOrder}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OwnerProductionPlant = o.Plant
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantStorageLocationDatumR{
			OwnerProductionPlantDataPlatformProductionOrderHeaderData: related,
		}
	} else {
		o.R.OwnerProductionPlantDataPlatformProductionOrderHeaderData = append(o.R.OwnerProductionPlantDataPlatformProductionOrderHeaderData, related...)
	}

	return nil
}

// AddStockConfirmationBusinessPartnerDataPlatformProductionOrderItemComponentData adds the given related objects to the existing relationships
// of the data_platform_plant_storage_location_datum, optionally inserting them as new records.
// Appends related to o.R.StockConfirmationBusinessPartnerDataPlatformProductionOrderItemComponentData.
func (o *DataPlatformPlantStorageLocationDatum) AddStockConfirmationBusinessPartnerDataPlatformProductionOrderItemComponentData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderItemComponentDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StockConfirmationBusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_item_component_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"StockConfirmationBusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemComponentDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.ProductionOrder, rel.ProductionOrderItem, rel.BillOfMaterial, rel.BillOfMaterialItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StockConfirmationBusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantStorageLocationDatumR{
			StockConfirmationBusinessPartnerDataPlatformProductionOrderItemComponentData: related,
		}
	} else {
		o.R.StockConfirmationBusinessPartnerDataPlatformProductionOrderItemComponentData = append(o.R.StockConfirmationBusinessPartnerDataPlatformProductionOrderItemComponentData, related...)
	}

	return nil
}

// AddDeliverFromPartyDataPlatformProductionOrderItemData adds the given related objects to the existing relationships
// of the data_platform_plant_storage_location_datum, optionally inserting them as new records.
// Appends related to o.R.DeliverFromPartyDataPlatformProductionOrderItemData.
func (o *DataPlatformPlantStorageLocationDatum) AddDeliverFromPartyDataPlatformProductionOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DeliverFromParty = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DeliverFromParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.ProductionOrder, rel.ProductionOrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DeliverFromParty = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantStorageLocationDatumR{
			DeliverFromPartyDataPlatformProductionOrderItemData: related,
		}
	} else {
		o.R.DeliverFromPartyDataPlatformProductionOrderItemData = append(o.R.DeliverFromPartyDataPlatformProductionOrderItemData, related...)
	}

	return nil
}

// AddDeliverToPartyDataPlatformProductionOrderItemData adds the given related objects to the existing relationships
// of the data_platform_plant_storage_location_datum, optionally inserting them as new records.
// Appends related to o.R.DeliverToPartyDataPlatformProductionOrderItemData.
func (o *DataPlatformPlantStorageLocationDatum) AddDeliverToPartyDataPlatformProductionOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DeliverToParty = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DeliverToParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.ProductionOrder, rel.ProductionOrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DeliverToParty = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantStorageLocationDatumR{
			DeliverToPartyDataPlatformProductionOrderItemData: related,
		}
	} else {
		o.R.DeliverToPartyDataPlatformProductionOrderItemData = append(o.R.DeliverToPartyDataPlatformProductionOrderItemData, related...)
	}

	return nil
}

// AddProductionPlantDataPlatformProductionOrderItemData adds the given related objects to the existing relationships
// of the data_platform_plant_storage_location_datum, optionally inserting them as new records.
// Appends related to o.R.ProductionPlantDataPlatformProductionOrderItemData.
func (o *DataPlatformPlantStorageLocationDatum) AddProductionPlantDataPlatformProductionOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductionPlant = o.Plant
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductionPlant"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Plant, rel.ProductionOrder, rel.ProductionOrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductionPlant = o.Plant
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantStorageLocationDatumR{
			ProductionPlantDataPlatformProductionOrderItemData: related,
		}
	} else {
		o.R.ProductionPlantDataPlatformProductionOrderItemData = append(o.R.ProductionPlantDataPlatformProductionOrderItemData, related...)
	}

	return nil
}

// AddDeliverFromPartyDataPlatformPurchaseRequisitionItemData adds the given related objects to the existing relationships
// of the data_platform_plant_storage_location_datum, optionally inserting them as new records.
// Appends related to o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData.
func (o *DataPlatformPlantStorageLocationDatum) AddDeliverFromPartyDataPlatformPurchaseRequisitionItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPurchaseRequisitionItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DeliverFromParty, o.BusinessPartner)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_purchase_requisition_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DeliverFromParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPurchaseRequisitionItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.PurchaseRequisition, rel.PurchaseRequisitionItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DeliverFromParty, o.BusinessPartner)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantStorageLocationDatumR{
			DeliverFromPartyDataPlatformPurchaseRequisitionItemData: related,
		}
	} else {
		o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData = append(o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData, related...)
	}

	return nil
}

// SetDeliverFromPartyDataPlatformPurchaseRequisitionItemData removes all previously related items of the
// data_platform_plant_storage_location_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DeliverFromPartyDataPlatformPlantStorageLocationDatum's DeliverFromPartyDataPlatformPurchaseRequisitionItemData accordingly.
// Replaces o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData with related.
func (o *DataPlatformPlantStorageLocationDatum) SetDeliverFromPartyDataPlatformPurchaseRequisitionItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPurchaseRequisitionItemDatum) error {
	query := "update `data_platform_purchase_requisition_item_data` set `DeliverFromParty` = null where `DeliverFromParty` = ?"
	values := []interface{}{o.BusinessPartner}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData = nil
	}

	return o.AddDeliverFromPartyDataPlatformPurchaseRequisitionItemData(ctx, exec, insert, related...)
}

// RemoveDeliverFromPartyDataPlatformPurchaseRequisitionItemData relationships from objects passed in.
// Removes related items from R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformPlantStorageLocationDatum) RemoveDeliverFromPartyDataPlatformPurchaseRequisitionItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformPurchaseRequisitionItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DeliverFromParty, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("DeliverFromParty")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData)
			if ln > 1 && i < ln-1 {
				o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData[i] = o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData[ln-1]
			}
			o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData = o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddDeliverToPartyDataPlatformPurchaseRequisitionItemData adds the given related objects to the existing relationships
// of the data_platform_plant_storage_location_datum, optionally inserting them as new records.
// Appends related to o.R.DeliverToPartyDataPlatformPurchaseRequisitionItemData.
func (o *DataPlatformPlantStorageLocationDatum) AddDeliverToPartyDataPlatformPurchaseRequisitionItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPurchaseRequisitionItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DeliverToParty = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_purchase_requisition_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DeliverToParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPurchaseRequisitionItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.PurchaseRequisition, rel.PurchaseRequisitionItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DeliverToParty = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantStorageLocationDatumR{
			DeliverToPartyDataPlatformPurchaseRequisitionItemData: related,
		}
	} else {
		o.R.DeliverToPartyDataPlatformPurchaseRequisitionItemData = append(o.R.DeliverToPartyDataPlatformPurchaseRequisitionItemData, related...)
	}

	return nil
}

// DataPlatformPlantStorageLocationData retrieves all the records using an executor.
func DataPlatformPlantStorageLocationData(mods ...qm.QueryMod) dataPlatformPlantStorageLocationDatumQuery {
	mods = append(mods, qm.From("`data_platform_plant_storage_location_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_plant_storage_location_data`.*"})
	}

	return dataPlatformPlantStorageLocationDatumQuery{q}
}

// FindDataPlatformPlantStorageLocationDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformPlantStorageLocationDatum(ctx context.Context, exec boil.ContextExecutor, businessPartner int, plant string, storageLocation string, selectCols ...string) (*DataPlatformPlantStorageLocationDatum, error) {
	dataPlatformPlantStorageLocationDatumObj := &DataPlatformPlantStorageLocationDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_plant_storage_location_data` where `BusinessPartner`=? AND `Plant`=? AND `StorageLocation`=?", sel,
	)

	q := queries.Raw(query, businessPartner, plant, storageLocation)

	err := q.Bind(ctx, exec, dataPlatformPlantStorageLocationDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_plant_storage_location_data")
	}

	return dataPlatformPlantStorageLocationDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformPlantStorageLocationDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_plant_storage_location_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPlantStorageLocationDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformPlantStorageLocationDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformPlantStorageLocationDatumInsertCache[key]
	dataPlatformPlantStorageLocationDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformPlantStorageLocationDatumAllColumns,
			dataPlatformPlantStorageLocationDatumColumnsWithDefault,
			dataPlatformPlantStorageLocationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPlantStorageLocationDatumType, dataPlatformPlantStorageLocationDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformPlantStorageLocationDatumType, dataPlatformPlantStorageLocationDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_plant_storage_location_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_plant_storage_location_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_plant_storage_location_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformPlantStorageLocationDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_plant_storage_location_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BusinessPartner,
		o.Plant,
		o.StorageLocation,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_plant_storage_location_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPlantStorageLocationDatumInsertCacheMut.Lock()
		dataPlatformPlantStorageLocationDatumInsertCache[key] = cache
		dataPlatformPlantStorageLocationDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformPlantStorageLocationDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformPlantStorageLocationDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformPlantStorageLocationDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformPlantStorageLocationDatumUpdateCache[key]
	dataPlatformPlantStorageLocationDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformPlantStorageLocationDatumAllColumns,
			dataPlatformPlantStorageLocationDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_plant_storage_location_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_plant_storage_location_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformPlantStorageLocationDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformPlantStorageLocationDatumType, dataPlatformPlantStorageLocationDatumMapping, append(wl, dataPlatformPlantStorageLocationDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_plant_storage_location_data row")
	}

	if !cached {
		dataPlatformPlantStorageLocationDatumUpdateCacheMut.Lock()
		dataPlatformPlantStorageLocationDatumUpdateCache[key] = cache
		dataPlatformPlantStorageLocationDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformPlantStorageLocationDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_plant_storage_location_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformPlantStorageLocationDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPlantStorageLocationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_plant_storage_location_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPlantStorageLocationDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformPlantStorageLocationDatum slice")
	}

	return nil
}

var mySQLDataPlatformPlantStorageLocationDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformPlantStorageLocationDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_plant_storage_location_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPlantStorageLocationDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformPlantStorageLocationDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformPlantStorageLocationDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformPlantStorageLocationDatumUpsertCache[key]
	dataPlatformPlantStorageLocationDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformPlantStorageLocationDatumAllColumns,
			dataPlatformPlantStorageLocationDatumColumnsWithDefault,
			dataPlatformPlantStorageLocationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformPlantStorageLocationDatumAllColumns,
			dataPlatformPlantStorageLocationDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_plant_storage_location_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_plant_storage_location_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_plant_storage_location_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPlantStorageLocationDatumType, dataPlatformPlantStorageLocationDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformPlantStorageLocationDatumType, dataPlatformPlantStorageLocationDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_plant_storage_location_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformPlantStorageLocationDatumType, dataPlatformPlantStorageLocationDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_plant_storage_location_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_plant_storage_location_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPlantStorageLocationDatumUpsertCacheMut.Lock()
		dataPlatformPlantStorageLocationDatumUpsertCache[key] = cache
		dataPlatformPlantStorageLocationDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformPlantStorageLocationDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformPlantStorageLocationDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformPlantStorageLocationDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformPlantStorageLocationDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_plant_storage_location_data` WHERE `BusinessPartner`=? AND `Plant`=? AND `StorageLocation`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_plant_storage_location_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformPlantStorageLocationDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformPlantStorageLocationDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_plant_storage_location_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformPlantStorageLocationDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPlantStorageLocationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_plant_storage_location_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPlantStorageLocationDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformPlantStorageLocationDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformPlantStorageLocationDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformPlantStorageLocationDatum(ctx, exec, o.BusinessPartner, o.Plant, o.StorageLocation)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformPlantStorageLocationDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformPlantStorageLocationDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPlantStorageLocationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_plant_storage_location_data`.* FROM `data_platform_plant_storage_location_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPlantStorageLocationDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformPlantStorageLocationDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformPlantStorageLocationDatumExists checks if the DataPlatformPlantStorageLocationDatum row exists.
func DataPlatformPlantStorageLocationDatumExists(ctx context.Context, exec boil.ContextExecutor, businessPartner int, plant string, storageLocation string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_plant_storage_location_data` where `BusinessPartner`=? AND `Plant`=? AND `StorageLocation`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, businessPartner, plant, storageLocation)
	}
	row := exec.QueryRowContext(ctx, sql, businessPartner, plant, storageLocation)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_plant_storage_location_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformPlantStorageLocationDatum row exists.
func (o *DataPlatformPlantStorageLocationDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformPlantStorageLocationDatumExists(ctx, exec, o.BusinessPartner, o.Plant, o.StorageLocation)
}
