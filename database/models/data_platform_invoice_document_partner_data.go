// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformInvoiceDocumentPartnerDatum is an object representing the database table.
type DataPlatformInvoiceDocumentPartnerDatum struct {
	InvoiceDocument         int         `boil:"InvoiceDocument" json:"InvoiceDocument" toml:"InvoiceDocument" yaml:"InvoiceDocument"`
	PartnerFunction         string      `boil:"PartnerFunction" json:"PartnerFunction" toml:"PartnerFunction" yaml:"PartnerFunction"`
	BusinessPartner         int         `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	BusinessPartnerFullName null.String `boil:"BusinessPartnerFullName" json:"BusinessPartnerFullName,omitempty" toml:"BusinessPartnerFullName" yaml:"BusinessPartnerFullName,omitempty"`
	BusinessPartnerName     null.String `boil:"BusinessPartnerName" json:"BusinessPartnerName,omitempty" toml:"BusinessPartnerName" yaml:"BusinessPartnerName,omitempty"`
	Organization            null.String `boil:"Organization" json:"Organization,omitempty" toml:"Organization" yaml:"Organization,omitempty"`
	Country                 null.String `boil:"Country" json:"Country,omitempty" toml:"Country" yaml:"Country,omitempty"`
	Language                null.String `boil:"Language" json:"Language,omitempty" toml:"Language" yaml:"Language,omitempty"`
	Currency                null.String `boil:"Currency" json:"Currency,omitempty" toml:"Currency" yaml:"Currency,omitempty"`
	ExternalDocumentID      null.String `boil:"ExternalDocumentID" json:"ExternalDocumentID,omitempty" toml:"ExternalDocumentID" yaml:"ExternalDocumentID,omitempty"`
	AddressID               null.Int    `boil:"AddressID" json:"AddressID,omitempty" toml:"AddressID" yaml:"AddressID,omitempty"`

	R *dataPlatformInvoiceDocumentPartnerDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformInvoiceDocumentPartnerDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformInvoiceDocumentPartnerDatumColumns = struct {
	InvoiceDocument         string
	PartnerFunction         string
	BusinessPartner         string
	BusinessPartnerFullName string
	BusinessPartnerName     string
	Organization            string
	Country                 string
	Language                string
	Currency                string
	ExternalDocumentID      string
	AddressID               string
}{
	InvoiceDocument:         "InvoiceDocument",
	PartnerFunction:         "PartnerFunction",
	BusinessPartner:         "BusinessPartner",
	BusinessPartnerFullName: "BusinessPartnerFullName",
	BusinessPartnerName:     "BusinessPartnerName",
	Organization:            "Organization",
	Country:                 "Country",
	Language:                "Language",
	Currency:                "Currency",
	ExternalDocumentID:      "ExternalDocumentID",
	AddressID:               "AddressID",
}

var DataPlatformInvoiceDocumentPartnerDatumTableColumns = struct {
	InvoiceDocument         string
	PartnerFunction         string
	BusinessPartner         string
	BusinessPartnerFullName string
	BusinessPartnerName     string
	Organization            string
	Country                 string
	Language                string
	Currency                string
	ExternalDocumentID      string
	AddressID               string
}{
	InvoiceDocument:         "data_platform_invoice_document_partner_data.InvoiceDocument",
	PartnerFunction:         "data_platform_invoice_document_partner_data.PartnerFunction",
	BusinessPartner:         "data_platform_invoice_document_partner_data.BusinessPartner",
	BusinessPartnerFullName: "data_platform_invoice_document_partner_data.BusinessPartnerFullName",
	BusinessPartnerName:     "data_platform_invoice_document_partner_data.BusinessPartnerName",
	Organization:            "data_platform_invoice_document_partner_data.Organization",
	Country:                 "data_platform_invoice_document_partner_data.Country",
	Language:                "data_platform_invoice_document_partner_data.Language",
	Currency:                "data_platform_invoice_document_partner_data.Currency",
	ExternalDocumentID:      "data_platform_invoice_document_partner_data.ExternalDocumentID",
	AddressID:               "data_platform_invoice_document_partner_data.AddressID",
}

// Generated where

var DataPlatformInvoiceDocumentPartnerDatumWhere = struct {
	InvoiceDocument         whereHelperint
	PartnerFunction         whereHelperstring
	BusinessPartner         whereHelperint
	BusinessPartnerFullName whereHelpernull_String
	BusinessPartnerName     whereHelpernull_String
	Organization            whereHelpernull_String
	Country                 whereHelpernull_String
	Language                whereHelpernull_String
	Currency                whereHelpernull_String
	ExternalDocumentID      whereHelpernull_String
	AddressID               whereHelpernull_Int
}{
	InvoiceDocument:         whereHelperint{field: "`data_platform_invoice_document_partner_data`.`InvoiceDocument`"},
	PartnerFunction:         whereHelperstring{field: "`data_platform_invoice_document_partner_data`.`PartnerFunction`"},
	BusinessPartner:         whereHelperint{field: "`data_platform_invoice_document_partner_data`.`BusinessPartner`"},
	BusinessPartnerFullName: whereHelpernull_String{field: "`data_platform_invoice_document_partner_data`.`BusinessPartnerFullName`"},
	BusinessPartnerName:     whereHelpernull_String{field: "`data_platform_invoice_document_partner_data`.`BusinessPartnerName`"},
	Organization:            whereHelpernull_String{field: "`data_platform_invoice_document_partner_data`.`Organization`"},
	Country:                 whereHelpernull_String{field: "`data_platform_invoice_document_partner_data`.`Country`"},
	Language:                whereHelpernull_String{field: "`data_platform_invoice_document_partner_data`.`Language`"},
	Currency:                whereHelpernull_String{field: "`data_platform_invoice_document_partner_data`.`Currency`"},
	ExternalDocumentID:      whereHelpernull_String{field: "`data_platform_invoice_document_partner_data`.`ExternalDocumentID`"},
	AddressID:               whereHelpernull_Int{field: "`data_platform_invoice_document_partner_data`.`AddressID`"},
}

// DataPlatformInvoiceDocumentPartnerDatumRels is where relationship names are stored.
var DataPlatformInvoiceDocumentPartnerDatumRels = struct {
	AddressIDDataPlatformAddressAddressDatum                       string
	BusinessPartnerDataPlatformBusinessPartnerGeneralDatum         string
	CountryDataPlatformCountryCountryDatum                         string
	CurrencyDataPlatformCurrencyCurrencyDatum                      string
	LanguageDataPlatformLanguageLanguageDatum                      string
	PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum string
	InvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum          string
}{
	AddressIDDataPlatformAddressAddressDatum:                       "AddressIDDataPlatformAddressAddressDatum",
	BusinessPartnerDataPlatformBusinessPartnerGeneralDatum:         "BusinessPartnerDataPlatformBusinessPartnerGeneralDatum",
	CountryDataPlatformCountryCountryDatum:                         "CountryDataPlatformCountryCountryDatum",
	CurrencyDataPlatformCurrencyCurrencyDatum:                      "CurrencyDataPlatformCurrencyCurrencyDatum",
	LanguageDataPlatformLanguageLanguageDatum:                      "LanguageDataPlatformLanguageLanguageDatum",
	PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum: "PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum",
	InvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum:          "InvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum",
}

// dataPlatformInvoiceDocumentPartnerDatumR is where relationships are stored.
type dataPlatformInvoiceDocumentPartnerDatumR struct {
	AddressIDDataPlatformAddressAddressDatum                       *DataPlatformAddressAddressDatum                 `boil:"AddressIDDataPlatformAddressAddressDatum" json:"AddressIDDataPlatformAddressAddressDatum" toml:"AddressIDDataPlatformAddressAddressDatum" yaml:"AddressIDDataPlatformAddressAddressDatum"`
	BusinessPartnerDataPlatformBusinessPartnerGeneralDatum         *DataPlatformBusinessPartnerGeneralDatum         `boil:"BusinessPartnerDataPlatformBusinessPartnerGeneralDatum" json:"BusinessPartnerDataPlatformBusinessPartnerGeneralDatum" toml:"BusinessPartnerDataPlatformBusinessPartnerGeneralDatum" yaml:"BusinessPartnerDataPlatformBusinessPartnerGeneralDatum"`
	CountryDataPlatformCountryCountryDatum                         *DataPlatformCountryCountryDatum                 `boil:"CountryDataPlatformCountryCountryDatum" json:"CountryDataPlatformCountryCountryDatum" toml:"CountryDataPlatformCountryCountryDatum" yaml:"CountryDataPlatformCountryCountryDatum"`
	CurrencyDataPlatformCurrencyCurrencyDatum                      *DataPlatformCurrencyCurrencyDatum               `boil:"CurrencyDataPlatformCurrencyCurrencyDatum" json:"CurrencyDataPlatformCurrencyCurrencyDatum" toml:"CurrencyDataPlatformCurrencyCurrencyDatum" yaml:"CurrencyDataPlatformCurrencyCurrencyDatum"`
	LanguageDataPlatformLanguageLanguageDatum                      *DataPlatformLanguageLanguageDatum               `boil:"LanguageDataPlatformLanguageLanguageDatum" json:"LanguageDataPlatformLanguageLanguageDatum" toml:"LanguageDataPlatformLanguageLanguageDatum" yaml:"LanguageDataPlatformLanguageLanguageDatum"`
	PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum *DataPlatformPartnerFunctionPartnerFunctionDatum `boil:"PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum" json:"PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum" toml:"PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum" yaml:"PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum"`
	InvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum          *DataPlatformInvoiceDocumentHeaderDatum          `boil:"InvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum" json:"InvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum" toml:"InvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum" yaml:"InvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformInvoiceDocumentPartnerDatumR) NewStruct() *dataPlatformInvoiceDocumentPartnerDatumR {
	return &dataPlatformInvoiceDocumentPartnerDatumR{}
}

func (r *dataPlatformInvoiceDocumentPartnerDatumR) GetAddressIDDataPlatformAddressAddressDatum() *DataPlatformAddressAddressDatum {
	if r == nil {
		return nil
	}
	return r.AddressIDDataPlatformAddressAddressDatum
}

func (r *dataPlatformInvoiceDocumentPartnerDatumR) GetBusinessPartnerDataPlatformBusinessPartnerGeneralDatum() *DataPlatformBusinessPartnerGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum
}

func (r *dataPlatformInvoiceDocumentPartnerDatumR) GetCountryDataPlatformCountryCountryDatum() *DataPlatformCountryCountryDatum {
	if r == nil {
		return nil
	}
	return r.CountryDataPlatformCountryCountryDatum
}

func (r *dataPlatformInvoiceDocumentPartnerDatumR) GetCurrencyDataPlatformCurrencyCurrencyDatum() *DataPlatformCurrencyCurrencyDatum {
	if r == nil {
		return nil
	}
	return r.CurrencyDataPlatformCurrencyCurrencyDatum
}

func (r *dataPlatformInvoiceDocumentPartnerDatumR) GetLanguageDataPlatformLanguageLanguageDatum() *DataPlatformLanguageLanguageDatum {
	if r == nil {
		return nil
	}
	return r.LanguageDataPlatformLanguageLanguageDatum
}

func (r *dataPlatformInvoiceDocumentPartnerDatumR) GetPartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum() *DataPlatformPartnerFunctionPartnerFunctionDatum {
	if r == nil {
		return nil
	}
	return r.PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum
}

func (r *dataPlatformInvoiceDocumentPartnerDatumR) GetInvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum() *DataPlatformInvoiceDocumentHeaderDatum {
	if r == nil {
		return nil
	}
	return r.InvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum
}

// dataPlatformInvoiceDocumentPartnerDatumL is where Load methods for each relationship are stored.
type dataPlatformInvoiceDocumentPartnerDatumL struct{}

var (
	dataPlatformInvoiceDocumentPartnerDatumAllColumns            = []string{"InvoiceDocument", "PartnerFunction", "BusinessPartner", "BusinessPartnerFullName", "BusinessPartnerName", "Organization", "Country", "Language", "Currency", "ExternalDocumentID", "AddressID"}
	dataPlatformInvoiceDocumentPartnerDatumColumnsWithoutDefault = []string{"InvoiceDocument", "PartnerFunction", "BusinessPartner", "BusinessPartnerFullName", "BusinessPartnerName", "Organization", "Country", "Language", "Currency", "ExternalDocumentID", "AddressID"}
	dataPlatformInvoiceDocumentPartnerDatumColumnsWithDefault    = []string{}
	dataPlatformInvoiceDocumentPartnerDatumPrimaryKeyColumns     = []string{"InvoiceDocument", "PartnerFunction", "BusinessPartner"}
	dataPlatformInvoiceDocumentPartnerDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformInvoiceDocumentPartnerDatumSlice is an alias for a slice of pointers to DataPlatformInvoiceDocumentPartnerDatum.
	// This should almost always be used instead of []DataPlatformInvoiceDocumentPartnerDatum.
	DataPlatformInvoiceDocumentPartnerDatumSlice []*DataPlatformInvoiceDocumentPartnerDatum

	dataPlatformInvoiceDocumentPartnerDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformInvoiceDocumentPartnerDatumType                 = reflect.TypeOf(&DataPlatformInvoiceDocumentPartnerDatum{})
	dataPlatformInvoiceDocumentPartnerDatumMapping              = queries.MakeStructMapping(dataPlatformInvoiceDocumentPartnerDatumType)
	dataPlatformInvoiceDocumentPartnerDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformInvoiceDocumentPartnerDatumType, dataPlatformInvoiceDocumentPartnerDatumMapping, dataPlatformInvoiceDocumentPartnerDatumPrimaryKeyColumns)
	dataPlatformInvoiceDocumentPartnerDatumInsertCacheMut       sync.RWMutex
	dataPlatformInvoiceDocumentPartnerDatumInsertCache          = make(map[string]insertCache)
	dataPlatformInvoiceDocumentPartnerDatumUpdateCacheMut       sync.RWMutex
	dataPlatformInvoiceDocumentPartnerDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformInvoiceDocumentPartnerDatumUpsertCacheMut       sync.RWMutex
	dataPlatformInvoiceDocumentPartnerDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformInvoiceDocumentPartnerDatum record from the query.
func (q dataPlatformInvoiceDocumentPartnerDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformInvoiceDocumentPartnerDatum, error) {
	o := &DataPlatformInvoiceDocumentPartnerDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_invoice_document_partner_data")
	}

	return o, nil
}

// All returns all DataPlatformInvoiceDocumentPartnerDatum records from the query.
func (q dataPlatformInvoiceDocumentPartnerDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformInvoiceDocumentPartnerDatumSlice, error) {
	var o []*DataPlatformInvoiceDocumentPartnerDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformInvoiceDocumentPartnerDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformInvoiceDocumentPartnerDatum records in the query.
func (q dataPlatformInvoiceDocumentPartnerDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_invoice_document_partner_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformInvoiceDocumentPartnerDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_invoice_document_partner_data exists")
	}

	return count > 0, nil
}

// AddressIDDataPlatformAddressAddressDatum pointed to by the foreign key.
func (o *DataPlatformInvoiceDocumentPartnerDatum) AddressIDDataPlatformAddressAddressDatum(mods ...qm.QueryMod) dataPlatformAddressAddressDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`AddressID` = ?", o.AddressID),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformAddressAddressData(queryMods...)
}

// BusinessPartnerDataPlatformBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *DataPlatformInvoiceDocumentPartnerDatum) BusinessPartnerDataPlatformBusinessPartnerGeneralDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.BusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// CountryDataPlatformCountryCountryDatum pointed to by the foreign key.
func (o *DataPlatformInvoiceDocumentPartnerDatum) CountryDataPlatformCountryCountryDatum(mods ...qm.QueryMod) dataPlatformCountryCountryDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Country` = ?", o.Country),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformCountryCountryData(queryMods...)
}

// CurrencyDataPlatformCurrencyCurrencyDatum pointed to by the foreign key.
func (o *DataPlatformInvoiceDocumentPartnerDatum) CurrencyDataPlatformCurrencyCurrencyDatum(mods ...qm.QueryMod) dataPlatformCurrencyCurrencyDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Currency` = ?", o.Currency),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformCurrencyCurrencyData(queryMods...)
}

// LanguageDataPlatformLanguageLanguageDatum pointed to by the foreign key.
func (o *DataPlatformInvoiceDocumentPartnerDatum) LanguageDataPlatformLanguageLanguageDatum(mods ...qm.QueryMod) dataPlatformLanguageLanguageDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Language` = ?", o.Language),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformLanguageLanguageData(queryMods...)
}

// PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum pointed to by the foreign key.
func (o *DataPlatformInvoiceDocumentPartnerDatum) PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum(mods ...qm.QueryMod) dataPlatformPartnerFunctionPartnerFunctionDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PartnerFunction` = ?", o.PartnerFunction),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPartnerFunctionPartnerFunctionData(queryMods...)
}

// InvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum pointed to by the foreign key.
func (o *DataPlatformInvoiceDocumentPartnerDatum) InvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum(mods ...qm.QueryMod) dataPlatformInvoiceDocumentHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`InvoiceDocument` = ?", o.InvoiceDocument),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformInvoiceDocumentHeaderData(queryMods...)
}

// LoadAddressIDDataPlatformAddressAddressDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInvoiceDocumentPartnerDatumL) LoadAddressIDDataPlatformAddressAddressDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInvoiceDocumentPartnerDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInvoiceDocumentPartnerDatum
	var object *DataPlatformInvoiceDocumentPartnerDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInvoiceDocumentPartnerDatum.(*DataPlatformInvoiceDocumentPartnerDatum)
		if !ok {
			object = new(DataPlatformInvoiceDocumentPartnerDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInvoiceDocumentPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInvoiceDocumentPartnerDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInvoiceDocumentPartnerDatum.(*[]*DataPlatformInvoiceDocumentPartnerDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInvoiceDocumentPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInvoiceDocumentPartnerDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInvoiceDocumentPartnerDatumR{}
		}
		if !queries.IsNil(object.AddressID) {
			args = append(args, object.AddressID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInvoiceDocumentPartnerDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AddressID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AddressID) {
				args = append(args, obj.AddressID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_address_address_data`),
		qm.WhereIn(`data_platform_address_address_data.AddressID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformAddressAddressDatum")
	}

	var resultSlice []*DataPlatformAddressAddressDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformAddressAddressDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_address_address_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_address_address_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AddressIDDataPlatformAddressAddressDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AddressID, foreign.AddressID) {
				local.R.AddressIDDataPlatformAddressAddressDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInvoiceDocumentPartnerDatumL) LoadBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInvoiceDocumentPartnerDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInvoiceDocumentPartnerDatum
	var object *DataPlatformInvoiceDocumentPartnerDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInvoiceDocumentPartnerDatum.(*DataPlatformInvoiceDocumentPartnerDatum)
		if !ok {
			object = new(DataPlatformInvoiceDocumentPartnerDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInvoiceDocumentPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInvoiceDocumentPartnerDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInvoiceDocumentPartnerDatum.(*[]*DataPlatformInvoiceDocumentPartnerDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInvoiceDocumentPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInvoiceDocumentPartnerDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInvoiceDocumentPartnerDatumR{}
		}
		args = append(args, object.BusinessPartner)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInvoiceDocumentPartnerDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerGeneralDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadCountryDataPlatformCountryCountryDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInvoiceDocumentPartnerDatumL) LoadCountryDataPlatformCountryCountryDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInvoiceDocumentPartnerDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInvoiceDocumentPartnerDatum
	var object *DataPlatformInvoiceDocumentPartnerDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInvoiceDocumentPartnerDatum.(*DataPlatformInvoiceDocumentPartnerDatum)
		if !ok {
			object = new(DataPlatformInvoiceDocumentPartnerDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInvoiceDocumentPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInvoiceDocumentPartnerDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInvoiceDocumentPartnerDatum.(*[]*DataPlatformInvoiceDocumentPartnerDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInvoiceDocumentPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInvoiceDocumentPartnerDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInvoiceDocumentPartnerDatumR{}
		}
		if !queries.IsNil(object.Country) {
			args = append(args, object.Country)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInvoiceDocumentPartnerDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Country) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Country) {
				args = append(args, obj.Country)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_country_country_data`),
		qm.WhereIn(`data_platform_country_country_data.Country in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformCountryCountryDatum")
	}

	var resultSlice []*DataPlatformCountryCountryDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformCountryCountryDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_country_country_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_country_country_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CountryDataPlatformCountryCountryDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Country, foreign.Country) {
				local.R.CountryDataPlatformCountryCountryDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadCurrencyDataPlatformCurrencyCurrencyDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInvoiceDocumentPartnerDatumL) LoadCurrencyDataPlatformCurrencyCurrencyDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInvoiceDocumentPartnerDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInvoiceDocumentPartnerDatum
	var object *DataPlatformInvoiceDocumentPartnerDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInvoiceDocumentPartnerDatum.(*DataPlatformInvoiceDocumentPartnerDatum)
		if !ok {
			object = new(DataPlatformInvoiceDocumentPartnerDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInvoiceDocumentPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInvoiceDocumentPartnerDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInvoiceDocumentPartnerDatum.(*[]*DataPlatformInvoiceDocumentPartnerDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInvoiceDocumentPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInvoiceDocumentPartnerDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInvoiceDocumentPartnerDatumR{}
		}
		if !queries.IsNil(object.Currency) {
			args = append(args, object.Currency)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInvoiceDocumentPartnerDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Currency) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Currency) {
				args = append(args, obj.Currency)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_currency_currency_data`),
		qm.WhereIn(`data_platform_currency_currency_data.Currency in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformCurrencyCurrencyDatum")
	}

	var resultSlice []*DataPlatformCurrencyCurrencyDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformCurrencyCurrencyDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_currency_currency_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_currency_currency_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CurrencyDataPlatformCurrencyCurrencyDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Currency, foreign.Currency) {
				local.R.CurrencyDataPlatformCurrencyCurrencyDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadLanguageDataPlatformLanguageLanguageDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInvoiceDocumentPartnerDatumL) LoadLanguageDataPlatformLanguageLanguageDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInvoiceDocumentPartnerDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInvoiceDocumentPartnerDatum
	var object *DataPlatformInvoiceDocumentPartnerDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInvoiceDocumentPartnerDatum.(*DataPlatformInvoiceDocumentPartnerDatum)
		if !ok {
			object = new(DataPlatformInvoiceDocumentPartnerDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInvoiceDocumentPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInvoiceDocumentPartnerDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInvoiceDocumentPartnerDatum.(*[]*DataPlatformInvoiceDocumentPartnerDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInvoiceDocumentPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInvoiceDocumentPartnerDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInvoiceDocumentPartnerDatumR{}
		}
		if !queries.IsNil(object.Language) {
			args = append(args, object.Language)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInvoiceDocumentPartnerDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Language) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Language) {
				args = append(args, obj.Language)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_language_language_data`),
		qm.WhereIn(`data_platform_language_language_data.Language in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformLanguageLanguageDatum")
	}

	var resultSlice []*DataPlatformLanguageLanguageDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformLanguageLanguageDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_language_language_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_language_language_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.LanguageDataPlatformLanguageLanguageDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Language, foreign.Language) {
				local.R.LanguageDataPlatformLanguageLanguageDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadPartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInvoiceDocumentPartnerDatumL) LoadPartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInvoiceDocumentPartnerDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInvoiceDocumentPartnerDatum
	var object *DataPlatformInvoiceDocumentPartnerDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInvoiceDocumentPartnerDatum.(*DataPlatformInvoiceDocumentPartnerDatum)
		if !ok {
			object = new(DataPlatformInvoiceDocumentPartnerDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInvoiceDocumentPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInvoiceDocumentPartnerDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInvoiceDocumentPartnerDatum.(*[]*DataPlatformInvoiceDocumentPartnerDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInvoiceDocumentPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInvoiceDocumentPartnerDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInvoiceDocumentPartnerDatumR{}
		}
		args = append(args, object.PartnerFunction)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInvoiceDocumentPartnerDatumR{}
			}

			for _, a := range args {
				if a == obj.PartnerFunction {
					continue Outer
				}
			}

			args = append(args, obj.PartnerFunction)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_partner_function_partner_function_data`),
		qm.WhereIn(`data_platform_partner_function_partner_function_data.PartnerFunction in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPartnerFunctionPartnerFunctionDatum")
	}

	var resultSlice []*DataPlatformPartnerFunctionPartnerFunctionDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPartnerFunctionPartnerFunctionDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_partner_function_partner_function_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_partner_function_partner_function_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PartnerFunction == foreign.PartnerFunction {
				local.R.PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadInvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInvoiceDocumentPartnerDatumL) LoadInvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInvoiceDocumentPartnerDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInvoiceDocumentPartnerDatum
	var object *DataPlatformInvoiceDocumentPartnerDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInvoiceDocumentPartnerDatum.(*DataPlatformInvoiceDocumentPartnerDatum)
		if !ok {
			object = new(DataPlatformInvoiceDocumentPartnerDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInvoiceDocumentPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInvoiceDocumentPartnerDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInvoiceDocumentPartnerDatum.(*[]*DataPlatformInvoiceDocumentPartnerDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInvoiceDocumentPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInvoiceDocumentPartnerDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInvoiceDocumentPartnerDatumR{}
		}
		args = append(args, object.InvoiceDocument)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInvoiceDocumentPartnerDatumR{}
			}

			for _, a := range args {
				if a == obj.InvoiceDocument {
					continue Outer
				}
			}

			args = append(args, obj.InvoiceDocument)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_invoice_document_header_data`),
		qm.WhereIn(`data_platform_invoice_document_header_data.InvoiceDocument in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformInvoiceDocumentHeaderDatum")
	}

	var resultSlice []*DataPlatformInvoiceDocumentHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformInvoiceDocumentHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_invoice_document_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_invoice_document_header_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.InvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InvoiceDocument == foreign.InvoiceDocument {
				local.R.InvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum = foreign
				break
			}
		}
	}

	return nil
}

// SetAddressIDDataPlatformAddressAddressDatum of the dataPlatformInvoiceDocumentPartnerDatum to the related item.
// Sets o.R.AddressIDDataPlatformAddressAddressDatum to related.
func (o *DataPlatformInvoiceDocumentPartnerDatum) SetAddressIDDataPlatformAddressAddressDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformAddressAddressDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_invoice_document_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"AddressID"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentPartnerDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.AddressID, o.InvoiceDocument, o.PartnerFunction, o.BusinessPartner}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AddressID, related.AddressID)
	if o.R == nil {
		o.R = &dataPlatformInvoiceDocumentPartnerDatumR{
			AddressIDDataPlatformAddressAddressDatum: related,
		}
	} else {
		o.R.AddressIDDataPlatformAddressAddressDatum = related
	}

	return nil
}

// RemoveAddressIDDataPlatformAddressAddressDatum relationship.
// Sets o.R.AddressIDDataPlatformAddressAddressDatum to nil.
func (o *DataPlatformInvoiceDocumentPartnerDatum) RemoveAddressIDDataPlatformAddressAddressDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformAddressAddressDatum) error {
	var err error

	queries.SetScanner(&o.AddressID, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("AddressID")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.AddressIDDataPlatformAddressAddressDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetBusinessPartnerDataPlatformBusinessPartnerGeneralDatum of the dataPlatformInvoiceDocumentPartnerDatum to the related item.
// Sets o.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum to related.
func (o *DataPlatformInvoiceDocumentPartnerDatum) SetBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_invoice_document_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentPartnerDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.InvoiceDocument, o.PartnerFunction, o.BusinessPartner}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BusinessPartner = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformInvoiceDocumentPartnerDatumR{
			BusinessPartnerDataPlatformBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = related
	}

	return nil
}

// SetCountryDataPlatformCountryCountryDatum of the dataPlatformInvoiceDocumentPartnerDatum to the related item.
// Sets o.R.CountryDataPlatformCountryCountryDatum to related.
func (o *DataPlatformInvoiceDocumentPartnerDatum) SetCountryDataPlatformCountryCountryDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformCountryCountryDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_invoice_document_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Country"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentPartnerDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Country, o.InvoiceDocument, o.PartnerFunction, o.BusinessPartner}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Country, related.Country)
	if o.R == nil {
		o.R = &dataPlatformInvoiceDocumentPartnerDatumR{
			CountryDataPlatformCountryCountryDatum: related,
		}
	} else {
		o.R.CountryDataPlatformCountryCountryDatum = related
	}

	return nil
}

// RemoveCountryDataPlatformCountryCountryDatum relationship.
// Sets o.R.CountryDataPlatformCountryCountryDatum to nil.
func (o *DataPlatformInvoiceDocumentPartnerDatum) RemoveCountryDataPlatformCountryCountryDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformCountryCountryDatum) error {
	var err error

	queries.SetScanner(&o.Country, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("Country")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CountryDataPlatformCountryCountryDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetCurrencyDataPlatformCurrencyCurrencyDatum of the dataPlatformInvoiceDocumentPartnerDatum to the related item.
// Sets o.R.CurrencyDataPlatformCurrencyCurrencyDatum to related.
func (o *DataPlatformInvoiceDocumentPartnerDatum) SetCurrencyDataPlatformCurrencyCurrencyDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformCurrencyCurrencyDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_invoice_document_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Currency"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentPartnerDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Currency, o.InvoiceDocument, o.PartnerFunction, o.BusinessPartner}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Currency, related.Currency)
	if o.R == nil {
		o.R = &dataPlatformInvoiceDocumentPartnerDatumR{
			CurrencyDataPlatformCurrencyCurrencyDatum: related,
		}
	} else {
		o.R.CurrencyDataPlatformCurrencyCurrencyDatum = related
	}

	return nil
}

// RemoveCurrencyDataPlatformCurrencyCurrencyDatum relationship.
// Sets o.R.CurrencyDataPlatformCurrencyCurrencyDatum to nil.
func (o *DataPlatformInvoiceDocumentPartnerDatum) RemoveCurrencyDataPlatformCurrencyCurrencyDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformCurrencyCurrencyDatum) error {
	var err error

	queries.SetScanner(&o.Currency, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("Currency")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CurrencyDataPlatformCurrencyCurrencyDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetLanguageDataPlatformLanguageLanguageDatum of the dataPlatformInvoiceDocumentPartnerDatum to the related item.
// Sets o.R.LanguageDataPlatformLanguageLanguageDatum to related.
func (o *DataPlatformInvoiceDocumentPartnerDatum) SetLanguageDataPlatformLanguageLanguageDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformLanguageLanguageDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_invoice_document_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Language"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentPartnerDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Language, o.InvoiceDocument, o.PartnerFunction, o.BusinessPartner}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Language, related.Language)
	if o.R == nil {
		o.R = &dataPlatformInvoiceDocumentPartnerDatumR{
			LanguageDataPlatformLanguageLanguageDatum: related,
		}
	} else {
		o.R.LanguageDataPlatformLanguageLanguageDatum = related
	}

	return nil
}

// RemoveLanguageDataPlatformLanguageLanguageDatum relationship.
// Sets o.R.LanguageDataPlatformLanguageLanguageDatum to nil.
func (o *DataPlatformInvoiceDocumentPartnerDatum) RemoveLanguageDataPlatformLanguageLanguageDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformLanguageLanguageDatum) error {
	var err error

	queries.SetScanner(&o.Language, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("Language")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.LanguageDataPlatformLanguageLanguageDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetPartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum of the dataPlatformInvoiceDocumentPartnerDatum to the related item.
// Sets o.R.PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum to related.
func (o *DataPlatformInvoiceDocumentPartnerDatum) SetPartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPartnerFunctionPartnerFunctionDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_invoice_document_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PartnerFunction"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentPartnerDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PartnerFunction, o.InvoiceDocument, o.PartnerFunction, o.BusinessPartner}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PartnerFunction = related.PartnerFunction
	if o.R == nil {
		o.R = &dataPlatformInvoiceDocumentPartnerDatumR{
			PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum: related,
		}
	} else {
		o.R.PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum = related
	}

	return nil
}

// SetInvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum of the dataPlatformInvoiceDocumentPartnerDatum to the related item.
// Sets o.R.InvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum to related.
func (o *DataPlatformInvoiceDocumentPartnerDatum) SetInvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformInvoiceDocumentHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_invoice_document_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"InvoiceDocument"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentPartnerDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.InvoiceDocument, o.InvoiceDocument, o.PartnerFunction, o.BusinessPartner}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InvoiceDocument = related.InvoiceDocument
	if o.R == nil {
		o.R = &dataPlatformInvoiceDocumentPartnerDatumR{
			InvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum: related,
		}
	} else {
		o.R.InvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum = related
	}

	return nil
}

// DataPlatformInvoiceDocumentPartnerData retrieves all the records using an executor.
func DataPlatformInvoiceDocumentPartnerData(mods ...qm.QueryMod) dataPlatformInvoiceDocumentPartnerDatumQuery {
	mods = append(mods, qm.From("`data_platform_invoice_document_partner_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_invoice_document_partner_data`.*"})
	}

	return dataPlatformInvoiceDocumentPartnerDatumQuery{q}
}

// FindDataPlatformInvoiceDocumentPartnerDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformInvoiceDocumentPartnerDatum(ctx context.Context, exec boil.ContextExecutor, invoiceDocument int, partnerFunction string, businessPartner int, selectCols ...string) (*DataPlatformInvoiceDocumentPartnerDatum, error) {
	dataPlatformInvoiceDocumentPartnerDatumObj := &DataPlatformInvoiceDocumentPartnerDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_invoice_document_partner_data` where `InvoiceDocument`=? AND `PartnerFunction`=? AND `BusinessPartner`=?", sel,
	)

	q := queries.Raw(query, invoiceDocument, partnerFunction, businessPartner)

	err := q.Bind(ctx, exec, dataPlatformInvoiceDocumentPartnerDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_invoice_document_partner_data")
	}

	return dataPlatformInvoiceDocumentPartnerDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformInvoiceDocumentPartnerDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_invoice_document_partner_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformInvoiceDocumentPartnerDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformInvoiceDocumentPartnerDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformInvoiceDocumentPartnerDatumInsertCache[key]
	dataPlatformInvoiceDocumentPartnerDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformInvoiceDocumentPartnerDatumAllColumns,
			dataPlatformInvoiceDocumentPartnerDatumColumnsWithDefault,
			dataPlatformInvoiceDocumentPartnerDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformInvoiceDocumentPartnerDatumType, dataPlatformInvoiceDocumentPartnerDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformInvoiceDocumentPartnerDatumType, dataPlatformInvoiceDocumentPartnerDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_invoice_document_partner_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_invoice_document_partner_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_invoice_document_partner_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentPartnerDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_invoice_document_partner_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.InvoiceDocument,
		o.PartnerFunction,
		o.BusinessPartner,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_invoice_document_partner_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformInvoiceDocumentPartnerDatumInsertCacheMut.Lock()
		dataPlatformInvoiceDocumentPartnerDatumInsertCache[key] = cache
		dataPlatformInvoiceDocumentPartnerDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformInvoiceDocumentPartnerDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformInvoiceDocumentPartnerDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformInvoiceDocumentPartnerDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformInvoiceDocumentPartnerDatumUpdateCache[key]
	dataPlatformInvoiceDocumentPartnerDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformInvoiceDocumentPartnerDatumAllColumns,
			dataPlatformInvoiceDocumentPartnerDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_invoice_document_partner_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_invoice_document_partner_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentPartnerDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformInvoiceDocumentPartnerDatumType, dataPlatformInvoiceDocumentPartnerDatumMapping, append(wl, dataPlatformInvoiceDocumentPartnerDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_invoice_document_partner_data row")
	}

	if !cached {
		dataPlatformInvoiceDocumentPartnerDatumUpdateCacheMut.Lock()
		dataPlatformInvoiceDocumentPartnerDatumUpdateCache[key] = cache
		dataPlatformInvoiceDocumentPartnerDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformInvoiceDocumentPartnerDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_invoice_document_partner_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformInvoiceDocumentPartnerDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInvoiceDocumentPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_invoice_document_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInvoiceDocumentPartnerDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformInvoiceDocumentPartnerDatum slice")
	}

	return nil
}

var mySQLDataPlatformInvoiceDocumentPartnerDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformInvoiceDocumentPartnerDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_invoice_document_partner_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformInvoiceDocumentPartnerDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformInvoiceDocumentPartnerDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformInvoiceDocumentPartnerDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformInvoiceDocumentPartnerDatumUpsertCache[key]
	dataPlatformInvoiceDocumentPartnerDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformInvoiceDocumentPartnerDatumAllColumns,
			dataPlatformInvoiceDocumentPartnerDatumColumnsWithDefault,
			dataPlatformInvoiceDocumentPartnerDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformInvoiceDocumentPartnerDatumAllColumns,
			dataPlatformInvoiceDocumentPartnerDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_invoice_document_partner_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_invoice_document_partner_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_invoice_document_partner_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformInvoiceDocumentPartnerDatumType, dataPlatformInvoiceDocumentPartnerDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformInvoiceDocumentPartnerDatumType, dataPlatformInvoiceDocumentPartnerDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_invoice_document_partner_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformInvoiceDocumentPartnerDatumType, dataPlatformInvoiceDocumentPartnerDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_invoice_document_partner_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_invoice_document_partner_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformInvoiceDocumentPartnerDatumUpsertCacheMut.Lock()
		dataPlatformInvoiceDocumentPartnerDatumUpsertCache[key] = cache
		dataPlatformInvoiceDocumentPartnerDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformInvoiceDocumentPartnerDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformInvoiceDocumentPartnerDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformInvoiceDocumentPartnerDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformInvoiceDocumentPartnerDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_invoice_document_partner_data` WHERE `InvoiceDocument`=? AND `PartnerFunction`=? AND `BusinessPartner`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_invoice_document_partner_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformInvoiceDocumentPartnerDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformInvoiceDocumentPartnerDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_invoice_document_partner_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformInvoiceDocumentPartnerDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInvoiceDocumentPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_invoice_document_partner_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInvoiceDocumentPartnerDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformInvoiceDocumentPartnerDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformInvoiceDocumentPartnerDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformInvoiceDocumentPartnerDatum(ctx, exec, o.InvoiceDocument, o.PartnerFunction, o.BusinessPartner)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformInvoiceDocumentPartnerDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformInvoiceDocumentPartnerDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInvoiceDocumentPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_invoice_document_partner_data`.* FROM `data_platform_invoice_document_partner_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInvoiceDocumentPartnerDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformInvoiceDocumentPartnerDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformInvoiceDocumentPartnerDatumExists checks if the DataPlatformInvoiceDocumentPartnerDatum row exists.
func DataPlatformInvoiceDocumentPartnerDatumExists(ctx context.Context, exec boil.ContextExecutor, invoiceDocument int, partnerFunction string, businessPartner int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_invoice_document_partner_data` where `InvoiceDocument`=? AND `PartnerFunction`=? AND `BusinessPartner`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, invoiceDocument, partnerFunction, businessPartner)
	}
	row := exec.QueryRowContext(ctx, sql, invoiceDocument, partnerFunction, businessPartner)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_invoice_document_partner_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformInvoiceDocumentPartnerDatum row exists.
func (o *DataPlatformInvoiceDocumentPartnerDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformInvoiceDocumentPartnerDatumExists(ctx, exec, o.InvoiceDocument, o.PartnerFunction, o.BusinessPartner)
}
