// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformOrdersHeaderPartnerDatum is an object representing the database table.
type DataPlatformOrdersHeaderPartnerDatum struct {
	OrderID                 int         `boil:"OrderID" json:"OrderID" toml:"OrderID" yaml:"OrderID"`
	PartnerFunction         string      `boil:"PartnerFunction" json:"PartnerFunction" toml:"PartnerFunction" yaml:"PartnerFunction"`
	BusinessPartner         int         `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	BusinessPartnerFullName null.String `boil:"BusinessPartnerFullName" json:"BusinessPartnerFullName,omitempty" toml:"BusinessPartnerFullName" yaml:"BusinessPartnerFullName,omitempty"`
	BusinessPartnerName     null.String `boil:"BusinessPartnerName" json:"BusinessPartnerName,omitempty" toml:"BusinessPartnerName" yaml:"BusinessPartnerName,omitempty"`
	Organization            null.String `boil:"Organization" json:"Organization,omitempty" toml:"Organization" yaml:"Organization,omitempty"`
	Country                 null.String `boil:"Country" json:"Country,omitempty" toml:"Country" yaml:"Country,omitempty"`
	Language                null.String `boil:"Language" json:"Language,omitempty" toml:"Language" yaml:"Language,omitempty"`
	Currency                null.String `boil:"Currency" json:"Currency,omitempty" toml:"Currency" yaml:"Currency,omitempty"`
	ExternalDocumentID      null.String `boil:"ExternalDocumentID" json:"ExternalDocumentID,omitempty" toml:"ExternalDocumentID" yaml:"ExternalDocumentID,omitempty"`
	AddressID               null.Int    `boil:"AddressID" json:"AddressID,omitempty" toml:"AddressID" yaml:"AddressID,omitempty"`

	R *dataPlatformOrdersHeaderPartnerDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformOrdersHeaderPartnerDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformOrdersHeaderPartnerDatumColumns = struct {
	OrderID                 string
	PartnerFunction         string
	BusinessPartner         string
	BusinessPartnerFullName string
	BusinessPartnerName     string
	Organization            string
	Country                 string
	Language                string
	Currency                string
	ExternalDocumentID      string
	AddressID               string
}{
	OrderID:                 "OrderID",
	PartnerFunction:         "PartnerFunction",
	BusinessPartner:         "BusinessPartner",
	BusinessPartnerFullName: "BusinessPartnerFullName",
	BusinessPartnerName:     "BusinessPartnerName",
	Organization:            "Organization",
	Country:                 "Country",
	Language:                "Language",
	Currency:                "Currency",
	ExternalDocumentID:      "ExternalDocumentID",
	AddressID:               "AddressID",
}

var DataPlatformOrdersHeaderPartnerDatumTableColumns = struct {
	OrderID                 string
	PartnerFunction         string
	BusinessPartner         string
	BusinessPartnerFullName string
	BusinessPartnerName     string
	Organization            string
	Country                 string
	Language                string
	Currency                string
	ExternalDocumentID      string
	AddressID               string
}{
	OrderID:                 "data_platform_orders_header_partner_data.OrderID",
	PartnerFunction:         "data_platform_orders_header_partner_data.PartnerFunction",
	BusinessPartner:         "data_platform_orders_header_partner_data.BusinessPartner",
	BusinessPartnerFullName: "data_platform_orders_header_partner_data.BusinessPartnerFullName",
	BusinessPartnerName:     "data_platform_orders_header_partner_data.BusinessPartnerName",
	Organization:            "data_platform_orders_header_partner_data.Organization",
	Country:                 "data_platform_orders_header_partner_data.Country",
	Language:                "data_platform_orders_header_partner_data.Language",
	Currency:                "data_platform_orders_header_partner_data.Currency",
	ExternalDocumentID:      "data_platform_orders_header_partner_data.ExternalDocumentID",
	AddressID:               "data_platform_orders_header_partner_data.AddressID",
}

// Generated where

var DataPlatformOrdersHeaderPartnerDatumWhere = struct {
	OrderID                 whereHelperint
	PartnerFunction         whereHelperstring
	BusinessPartner         whereHelperint
	BusinessPartnerFullName whereHelpernull_String
	BusinessPartnerName     whereHelpernull_String
	Organization            whereHelpernull_String
	Country                 whereHelpernull_String
	Language                whereHelpernull_String
	Currency                whereHelpernull_String
	ExternalDocumentID      whereHelpernull_String
	AddressID               whereHelpernull_Int
}{
	OrderID:                 whereHelperint{field: "`data_platform_orders_header_partner_data`.`OrderID`"},
	PartnerFunction:         whereHelperstring{field: "`data_platform_orders_header_partner_data`.`PartnerFunction`"},
	BusinessPartner:         whereHelperint{field: "`data_platform_orders_header_partner_data`.`BusinessPartner`"},
	BusinessPartnerFullName: whereHelpernull_String{field: "`data_platform_orders_header_partner_data`.`BusinessPartnerFullName`"},
	BusinessPartnerName:     whereHelpernull_String{field: "`data_platform_orders_header_partner_data`.`BusinessPartnerName`"},
	Organization:            whereHelpernull_String{field: "`data_platform_orders_header_partner_data`.`Organization`"},
	Country:                 whereHelpernull_String{field: "`data_platform_orders_header_partner_data`.`Country`"},
	Language:                whereHelpernull_String{field: "`data_platform_orders_header_partner_data`.`Language`"},
	Currency:                whereHelpernull_String{field: "`data_platform_orders_header_partner_data`.`Currency`"},
	ExternalDocumentID:      whereHelpernull_String{field: "`data_platform_orders_header_partner_data`.`ExternalDocumentID`"},
	AddressID:               whereHelpernull_Int{field: "`data_platform_orders_header_partner_data`.`AddressID`"},
}

// DataPlatformOrdersHeaderPartnerDatumRels is where relationship names are stored.
var DataPlatformOrdersHeaderPartnerDatumRels = struct {
	AddressIDDataPlatformAddressAddressDatum                       string
	BusinessPartnerDataPlatformBusinessPartnerGeneralDatum         string
	CountryDataPlatformCountryCountryDatum                         string
	CurrencyDataPlatformCurrencyCurrencyDatum                      string
	LanguageDataPlatformLanguageLanguageDatum                      string
	PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum string
	OrderIDDataPlatformOrdersHeaderDatum                           string
	BusinessPartnerDataPlatformOrdersHeaderPartnerContactData      string
	BusinessPartnerDataPlatformOrdersHeaderPartnerPlantData        string
}{
	AddressIDDataPlatformAddressAddressDatum:                       "AddressIDDataPlatformAddressAddressDatum",
	BusinessPartnerDataPlatformBusinessPartnerGeneralDatum:         "BusinessPartnerDataPlatformBusinessPartnerGeneralDatum",
	CountryDataPlatformCountryCountryDatum:                         "CountryDataPlatformCountryCountryDatum",
	CurrencyDataPlatformCurrencyCurrencyDatum:                      "CurrencyDataPlatformCurrencyCurrencyDatum",
	LanguageDataPlatformLanguageLanguageDatum:                      "LanguageDataPlatformLanguageLanguageDatum",
	PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum: "PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum",
	OrderIDDataPlatformOrdersHeaderDatum:                           "OrderIDDataPlatformOrdersHeaderDatum",
	BusinessPartnerDataPlatformOrdersHeaderPartnerContactData:      "BusinessPartnerDataPlatformOrdersHeaderPartnerContactData",
	BusinessPartnerDataPlatformOrdersHeaderPartnerPlantData:        "BusinessPartnerDataPlatformOrdersHeaderPartnerPlantData",
}

// dataPlatformOrdersHeaderPartnerDatumR is where relationships are stored.
type dataPlatformOrdersHeaderPartnerDatumR struct {
	AddressIDDataPlatformAddressAddressDatum                       *DataPlatformAddressAddressDatum                 `boil:"AddressIDDataPlatformAddressAddressDatum" json:"AddressIDDataPlatformAddressAddressDatum" toml:"AddressIDDataPlatformAddressAddressDatum" yaml:"AddressIDDataPlatformAddressAddressDatum"`
	BusinessPartnerDataPlatformBusinessPartnerGeneralDatum         *DataPlatformBusinessPartnerGeneralDatum         `boil:"BusinessPartnerDataPlatformBusinessPartnerGeneralDatum" json:"BusinessPartnerDataPlatformBusinessPartnerGeneralDatum" toml:"BusinessPartnerDataPlatformBusinessPartnerGeneralDatum" yaml:"BusinessPartnerDataPlatformBusinessPartnerGeneralDatum"`
	CountryDataPlatformCountryCountryDatum                         *DataPlatformCountryCountryDatum                 `boil:"CountryDataPlatformCountryCountryDatum" json:"CountryDataPlatformCountryCountryDatum" toml:"CountryDataPlatformCountryCountryDatum" yaml:"CountryDataPlatformCountryCountryDatum"`
	CurrencyDataPlatformCurrencyCurrencyDatum                      *DataPlatformCurrencyCurrencyDatum               `boil:"CurrencyDataPlatformCurrencyCurrencyDatum" json:"CurrencyDataPlatformCurrencyCurrencyDatum" toml:"CurrencyDataPlatformCurrencyCurrencyDatum" yaml:"CurrencyDataPlatformCurrencyCurrencyDatum"`
	LanguageDataPlatformLanguageLanguageDatum                      *DataPlatformLanguageLanguageDatum               `boil:"LanguageDataPlatformLanguageLanguageDatum" json:"LanguageDataPlatformLanguageLanguageDatum" toml:"LanguageDataPlatformLanguageLanguageDatum" yaml:"LanguageDataPlatformLanguageLanguageDatum"`
	PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum *DataPlatformPartnerFunctionPartnerFunctionDatum `boil:"PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum" json:"PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum" toml:"PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum" yaml:"PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum"`
	OrderIDDataPlatformOrdersHeaderDatum                           *DataPlatformOrdersHeaderDatum                   `boil:"OrderIDDataPlatformOrdersHeaderDatum" json:"OrderIDDataPlatformOrdersHeaderDatum" toml:"OrderIDDataPlatformOrdersHeaderDatum" yaml:"OrderIDDataPlatformOrdersHeaderDatum"`
	BusinessPartnerDataPlatformOrdersHeaderPartnerContactData      DataPlatformOrdersHeaderPartnerContactDatumSlice `boil:"BusinessPartnerDataPlatformOrdersHeaderPartnerContactData" json:"BusinessPartnerDataPlatformOrdersHeaderPartnerContactData" toml:"BusinessPartnerDataPlatformOrdersHeaderPartnerContactData" yaml:"BusinessPartnerDataPlatformOrdersHeaderPartnerContactData"`
	BusinessPartnerDataPlatformOrdersHeaderPartnerPlantData        DataPlatformOrdersHeaderPartnerPlantDatumSlice   `boil:"BusinessPartnerDataPlatformOrdersHeaderPartnerPlantData" json:"BusinessPartnerDataPlatformOrdersHeaderPartnerPlantData" toml:"BusinessPartnerDataPlatformOrdersHeaderPartnerPlantData" yaml:"BusinessPartnerDataPlatformOrdersHeaderPartnerPlantData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformOrdersHeaderPartnerDatumR) NewStruct() *dataPlatformOrdersHeaderPartnerDatumR {
	return &dataPlatformOrdersHeaderPartnerDatumR{}
}

func (r *dataPlatformOrdersHeaderPartnerDatumR) GetAddressIDDataPlatformAddressAddressDatum() *DataPlatformAddressAddressDatum {
	if r == nil {
		return nil
	}
	return r.AddressIDDataPlatformAddressAddressDatum
}

func (r *dataPlatformOrdersHeaderPartnerDatumR) GetBusinessPartnerDataPlatformBusinessPartnerGeneralDatum() *DataPlatformBusinessPartnerGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum
}

func (r *dataPlatformOrdersHeaderPartnerDatumR) GetCountryDataPlatformCountryCountryDatum() *DataPlatformCountryCountryDatum {
	if r == nil {
		return nil
	}
	return r.CountryDataPlatformCountryCountryDatum
}

func (r *dataPlatformOrdersHeaderPartnerDatumR) GetCurrencyDataPlatformCurrencyCurrencyDatum() *DataPlatformCurrencyCurrencyDatum {
	if r == nil {
		return nil
	}
	return r.CurrencyDataPlatformCurrencyCurrencyDatum
}

func (r *dataPlatformOrdersHeaderPartnerDatumR) GetLanguageDataPlatformLanguageLanguageDatum() *DataPlatformLanguageLanguageDatum {
	if r == nil {
		return nil
	}
	return r.LanguageDataPlatformLanguageLanguageDatum
}

func (r *dataPlatformOrdersHeaderPartnerDatumR) GetPartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum() *DataPlatformPartnerFunctionPartnerFunctionDatum {
	if r == nil {
		return nil
	}
	return r.PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum
}

func (r *dataPlatformOrdersHeaderPartnerDatumR) GetOrderIDDataPlatformOrdersHeaderDatum() *DataPlatformOrdersHeaderDatum {
	if r == nil {
		return nil
	}
	return r.OrderIDDataPlatformOrdersHeaderDatum
}

func (r *dataPlatformOrdersHeaderPartnerDatumR) GetBusinessPartnerDataPlatformOrdersHeaderPartnerContactData() DataPlatformOrdersHeaderPartnerContactDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformOrdersHeaderPartnerContactData
}

func (r *dataPlatformOrdersHeaderPartnerDatumR) GetBusinessPartnerDataPlatformOrdersHeaderPartnerPlantData() DataPlatformOrdersHeaderPartnerPlantDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformOrdersHeaderPartnerPlantData
}

// dataPlatformOrdersHeaderPartnerDatumL is where Load methods for each relationship are stored.
type dataPlatformOrdersHeaderPartnerDatumL struct{}

var (
	dataPlatformOrdersHeaderPartnerDatumAllColumns            = []string{"OrderID", "PartnerFunction", "BusinessPartner", "BusinessPartnerFullName", "BusinessPartnerName", "Organization", "Country", "Language", "Currency", "ExternalDocumentID", "AddressID"}
	dataPlatformOrdersHeaderPartnerDatumColumnsWithoutDefault = []string{"OrderID", "PartnerFunction", "BusinessPartner", "BusinessPartnerFullName", "BusinessPartnerName", "Organization", "Country", "Language", "Currency", "ExternalDocumentID", "AddressID"}
	dataPlatformOrdersHeaderPartnerDatumColumnsWithDefault    = []string{}
	dataPlatformOrdersHeaderPartnerDatumPrimaryKeyColumns     = []string{"OrderID", "PartnerFunction", "BusinessPartner"}
	dataPlatformOrdersHeaderPartnerDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformOrdersHeaderPartnerDatumSlice is an alias for a slice of pointers to DataPlatformOrdersHeaderPartnerDatum.
	// This should almost always be used instead of []DataPlatformOrdersHeaderPartnerDatum.
	DataPlatformOrdersHeaderPartnerDatumSlice []*DataPlatformOrdersHeaderPartnerDatum
	// DataPlatformOrdersHeaderPartnerDatumHook is the signature for custom DataPlatformOrdersHeaderPartnerDatum hook methods
	DataPlatformOrdersHeaderPartnerDatumHook func(context.Context, boil.ContextExecutor, *DataPlatformOrdersHeaderPartnerDatum) error

	dataPlatformOrdersHeaderPartnerDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformOrdersHeaderPartnerDatumType                 = reflect.TypeOf(&DataPlatformOrdersHeaderPartnerDatum{})
	dataPlatformOrdersHeaderPartnerDatumMapping              = queries.MakeStructMapping(dataPlatformOrdersHeaderPartnerDatumType)
	dataPlatformOrdersHeaderPartnerDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformOrdersHeaderPartnerDatumType, dataPlatformOrdersHeaderPartnerDatumMapping, dataPlatformOrdersHeaderPartnerDatumPrimaryKeyColumns)
	dataPlatformOrdersHeaderPartnerDatumInsertCacheMut       sync.RWMutex
	dataPlatformOrdersHeaderPartnerDatumInsertCache          = make(map[string]insertCache)
	dataPlatformOrdersHeaderPartnerDatumUpdateCacheMut       sync.RWMutex
	dataPlatformOrdersHeaderPartnerDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformOrdersHeaderPartnerDatumUpsertCacheMut       sync.RWMutex
	dataPlatformOrdersHeaderPartnerDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dataPlatformOrdersHeaderPartnerDatumAfterSelectHooks []DataPlatformOrdersHeaderPartnerDatumHook

var dataPlatformOrdersHeaderPartnerDatumBeforeInsertHooks []DataPlatformOrdersHeaderPartnerDatumHook
var dataPlatformOrdersHeaderPartnerDatumAfterInsertHooks []DataPlatformOrdersHeaderPartnerDatumHook

var dataPlatformOrdersHeaderPartnerDatumBeforeUpdateHooks []DataPlatformOrdersHeaderPartnerDatumHook
var dataPlatformOrdersHeaderPartnerDatumAfterUpdateHooks []DataPlatformOrdersHeaderPartnerDatumHook

var dataPlatformOrdersHeaderPartnerDatumBeforeDeleteHooks []DataPlatformOrdersHeaderPartnerDatumHook
var dataPlatformOrdersHeaderPartnerDatumAfterDeleteHooks []DataPlatformOrdersHeaderPartnerDatumHook

var dataPlatformOrdersHeaderPartnerDatumBeforeUpsertHooks []DataPlatformOrdersHeaderPartnerDatumHook
var dataPlatformOrdersHeaderPartnerDatumAfterUpsertHooks []DataPlatformOrdersHeaderPartnerDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DataPlatformOrdersHeaderPartnerDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformOrdersHeaderPartnerDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DataPlatformOrdersHeaderPartnerDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformOrdersHeaderPartnerDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DataPlatformOrdersHeaderPartnerDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformOrdersHeaderPartnerDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DataPlatformOrdersHeaderPartnerDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformOrdersHeaderPartnerDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DataPlatformOrdersHeaderPartnerDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformOrdersHeaderPartnerDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DataPlatformOrdersHeaderPartnerDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformOrdersHeaderPartnerDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DataPlatformOrdersHeaderPartnerDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformOrdersHeaderPartnerDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DataPlatformOrdersHeaderPartnerDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformOrdersHeaderPartnerDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DataPlatformOrdersHeaderPartnerDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformOrdersHeaderPartnerDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDataPlatformOrdersHeaderPartnerDatumHook registers your hook function for all future operations.
func AddDataPlatformOrdersHeaderPartnerDatumHook(hookPoint boil.HookPoint, dataPlatformOrdersHeaderPartnerDatumHook DataPlatformOrdersHeaderPartnerDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dataPlatformOrdersHeaderPartnerDatumAfterSelectHooks = append(dataPlatformOrdersHeaderPartnerDatumAfterSelectHooks, dataPlatformOrdersHeaderPartnerDatumHook)
	case boil.BeforeInsertHook:
		dataPlatformOrdersHeaderPartnerDatumBeforeInsertHooks = append(dataPlatformOrdersHeaderPartnerDatumBeforeInsertHooks, dataPlatformOrdersHeaderPartnerDatumHook)
	case boil.AfterInsertHook:
		dataPlatformOrdersHeaderPartnerDatumAfterInsertHooks = append(dataPlatformOrdersHeaderPartnerDatumAfterInsertHooks, dataPlatformOrdersHeaderPartnerDatumHook)
	case boil.BeforeUpdateHook:
		dataPlatformOrdersHeaderPartnerDatumBeforeUpdateHooks = append(dataPlatformOrdersHeaderPartnerDatumBeforeUpdateHooks, dataPlatformOrdersHeaderPartnerDatumHook)
	case boil.AfterUpdateHook:
		dataPlatformOrdersHeaderPartnerDatumAfterUpdateHooks = append(dataPlatformOrdersHeaderPartnerDatumAfterUpdateHooks, dataPlatformOrdersHeaderPartnerDatumHook)
	case boil.BeforeDeleteHook:
		dataPlatformOrdersHeaderPartnerDatumBeforeDeleteHooks = append(dataPlatformOrdersHeaderPartnerDatumBeforeDeleteHooks, dataPlatformOrdersHeaderPartnerDatumHook)
	case boil.AfterDeleteHook:
		dataPlatformOrdersHeaderPartnerDatumAfterDeleteHooks = append(dataPlatformOrdersHeaderPartnerDatumAfterDeleteHooks, dataPlatformOrdersHeaderPartnerDatumHook)
	case boil.BeforeUpsertHook:
		dataPlatformOrdersHeaderPartnerDatumBeforeUpsertHooks = append(dataPlatformOrdersHeaderPartnerDatumBeforeUpsertHooks, dataPlatformOrdersHeaderPartnerDatumHook)
	case boil.AfterUpsertHook:
		dataPlatformOrdersHeaderPartnerDatumAfterUpsertHooks = append(dataPlatformOrdersHeaderPartnerDatumAfterUpsertHooks, dataPlatformOrdersHeaderPartnerDatumHook)
	}
}

// One returns a single dataPlatformOrdersHeaderPartnerDatum record from the query.
func (q dataPlatformOrdersHeaderPartnerDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformOrdersHeaderPartnerDatum, error) {
	o := &DataPlatformOrdersHeaderPartnerDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_orders_header_partner_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DataPlatformOrdersHeaderPartnerDatum records from the query.
func (q dataPlatformOrdersHeaderPartnerDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformOrdersHeaderPartnerDatumSlice, error) {
	var o []*DataPlatformOrdersHeaderPartnerDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformOrdersHeaderPartnerDatum slice")
	}

	if len(dataPlatformOrdersHeaderPartnerDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DataPlatformOrdersHeaderPartnerDatum records in the query.
func (q dataPlatformOrdersHeaderPartnerDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_orders_header_partner_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformOrdersHeaderPartnerDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_orders_header_partner_data exists")
	}

	return count > 0, nil
}

// AddressIDDataPlatformAddressAddressDatum pointed to by the foreign key.
func (o *DataPlatformOrdersHeaderPartnerDatum) AddressIDDataPlatformAddressAddressDatum(mods ...qm.QueryMod) dataPlatformAddressAddressDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`AddressID` = ?", o.AddressID),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformAddressAddressData(queryMods...)
}

// BusinessPartnerDataPlatformBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *DataPlatformOrdersHeaderPartnerDatum) BusinessPartnerDataPlatformBusinessPartnerGeneralDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.BusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// CountryDataPlatformCountryCountryDatum pointed to by the foreign key.
func (o *DataPlatformOrdersHeaderPartnerDatum) CountryDataPlatformCountryCountryDatum(mods ...qm.QueryMod) dataPlatformCountryCountryDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Country` = ?", o.Country),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformCountryCountryData(queryMods...)
}

// CurrencyDataPlatformCurrencyCurrencyDatum pointed to by the foreign key.
func (o *DataPlatformOrdersHeaderPartnerDatum) CurrencyDataPlatformCurrencyCurrencyDatum(mods ...qm.QueryMod) dataPlatformCurrencyCurrencyDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Currency` = ?", o.Currency),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformCurrencyCurrencyData(queryMods...)
}

// LanguageDataPlatformLanguageLanguageDatum pointed to by the foreign key.
func (o *DataPlatformOrdersHeaderPartnerDatum) LanguageDataPlatformLanguageLanguageDatum(mods ...qm.QueryMod) dataPlatformLanguageLanguageDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Language` = ?", o.Language),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformLanguageLanguageData(queryMods...)
}

// PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum pointed to by the foreign key.
func (o *DataPlatformOrdersHeaderPartnerDatum) PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum(mods ...qm.QueryMod) dataPlatformPartnerFunctionPartnerFunctionDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PartnerFunction` = ?", o.PartnerFunction),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPartnerFunctionPartnerFunctionData(queryMods...)
}

// OrderIDDataPlatformOrdersHeaderDatum pointed to by the foreign key.
func (o *DataPlatformOrdersHeaderPartnerDatum) OrderIDDataPlatformOrdersHeaderDatum(mods ...qm.QueryMod) dataPlatformOrdersHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`OrderID` = ?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformOrdersHeaderData(queryMods...)
}

// BusinessPartnerDataPlatformOrdersHeaderPartnerContactData retrieves all the data_platform_orders_header_partner_contact_datum's DataPlatformOrdersHeaderPartnerContactData with an executor via BusinessPartner column.
func (o *DataPlatformOrdersHeaderPartnerDatum) BusinessPartnerDataPlatformOrdersHeaderPartnerContactData(mods ...qm.QueryMod) dataPlatformOrdersHeaderPartnerContactDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_header_partner_contact_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformOrdersHeaderPartnerContactData(queryMods...)
}

// BusinessPartnerDataPlatformOrdersHeaderPartnerPlantData retrieves all the data_platform_orders_header_partner_plant_datum's DataPlatformOrdersHeaderPartnerPlantData with an executor via BusinessPartner column.
func (o *DataPlatformOrdersHeaderPartnerDatum) BusinessPartnerDataPlatformOrdersHeaderPartnerPlantData(mods ...qm.QueryMod) dataPlatformOrdersHeaderPartnerPlantDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_header_partner_plant_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformOrdersHeaderPartnerPlantData(queryMods...)
}

// LoadAddressIDDataPlatformAddressAddressDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOrdersHeaderPartnerDatumL) LoadAddressIDDataPlatformAddressAddressDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOrdersHeaderPartnerDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOrdersHeaderPartnerDatum
	var object *DataPlatformOrdersHeaderPartnerDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOrdersHeaderPartnerDatum.(*DataPlatformOrdersHeaderPartnerDatum)
		if !ok {
			object = new(DataPlatformOrdersHeaderPartnerDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOrdersHeaderPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOrdersHeaderPartnerDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOrdersHeaderPartnerDatum.(*[]*DataPlatformOrdersHeaderPartnerDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOrdersHeaderPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOrdersHeaderPartnerDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOrdersHeaderPartnerDatumR{}
		}
		if !queries.IsNil(object.AddressID) {
			args = append(args, object.AddressID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOrdersHeaderPartnerDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AddressID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AddressID) {
				args = append(args, obj.AddressID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_address_address_data`),
		qm.WhereIn(`data_platform_address_address_data.AddressID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformAddressAddressDatum")
	}

	var resultSlice []*DataPlatformAddressAddressDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformAddressAddressDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_address_address_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_address_address_data")
	}

	if len(dataPlatformAddressAddressDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AddressIDDataPlatformAddressAddressDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformAddressAddressDatumR{}
		}
		foreign.R.AddressIDDataPlatformOrdersHeaderPartnerData = append(foreign.R.AddressIDDataPlatformOrdersHeaderPartnerData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AddressID, foreign.AddressID) {
				local.R.AddressIDDataPlatformAddressAddressDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformAddressAddressDatumR{}
				}
				foreign.R.AddressIDDataPlatformOrdersHeaderPartnerData = append(foreign.R.AddressIDDataPlatformOrdersHeaderPartnerData, local)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOrdersHeaderPartnerDatumL) LoadBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOrdersHeaderPartnerDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOrdersHeaderPartnerDatum
	var object *DataPlatformOrdersHeaderPartnerDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOrdersHeaderPartnerDatum.(*DataPlatformOrdersHeaderPartnerDatum)
		if !ok {
			object = new(DataPlatformOrdersHeaderPartnerDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOrdersHeaderPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOrdersHeaderPartnerDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOrdersHeaderPartnerDatum.(*[]*DataPlatformOrdersHeaderPartnerDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOrdersHeaderPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOrdersHeaderPartnerDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOrdersHeaderPartnerDatumR{}
		}
		args = append(args, object.BusinessPartner)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOrdersHeaderPartnerDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerGeneralDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(dataPlatformBusinessPartnerGeneralDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		foreign.R.BusinessPartnerDataPlatformOrdersHeaderPartnerData = append(foreign.R.BusinessPartnerDataPlatformOrdersHeaderPartnerData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformBusinessPartnerGeneralDatumR{}
				}
				foreign.R.BusinessPartnerDataPlatformOrdersHeaderPartnerData = append(foreign.R.BusinessPartnerDataPlatformOrdersHeaderPartnerData, local)
				break
			}
		}
	}

	return nil
}

// LoadCountryDataPlatformCountryCountryDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOrdersHeaderPartnerDatumL) LoadCountryDataPlatformCountryCountryDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOrdersHeaderPartnerDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOrdersHeaderPartnerDatum
	var object *DataPlatformOrdersHeaderPartnerDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOrdersHeaderPartnerDatum.(*DataPlatformOrdersHeaderPartnerDatum)
		if !ok {
			object = new(DataPlatformOrdersHeaderPartnerDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOrdersHeaderPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOrdersHeaderPartnerDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOrdersHeaderPartnerDatum.(*[]*DataPlatformOrdersHeaderPartnerDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOrdersHeaderPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOrdersHeaderPartnerDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOrdersHeaderPartnerDatumR{}
		}
		if !queries.IsNil(object.Country) {
			args = append(args, object.Country)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOrdersHeaderPartnerDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Country) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Country) {
				args = append(args, obj.Country)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_country_country_data`),
		qm.WhereIn(`data_platform_country_country_data.Country in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformCountryCountryDatum")
	}

	var resultSlice []*DataPlatformCountryCountryDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformCountryCountryDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_country_country_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_country_country_data")
	}

	if len(dataPlatformCountryCountryDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CountryDataPlatformCountryCountryDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformCountryCountryDatumR{}
		}
		foreign.R.CountryDataPlatformOrdersHeaderPartnerData = append(foreign.R.CountryDataPlatformOrdersHeaderPartnerData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Country, foreign.Country) {
				local.R.CountryDataPlatformCountryCountryDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformCountryCountryDatumR{}
				}
				foreign.R.CountryDataPlatformOrdersHeaderPartnerData = append(foreign.R.CountryDataPlatformOrdersHeaderPartnerData, local)
				break
			}
		}
	}

	return nil
}

// LoadCurrencyDataPlatformCurrencyCurrencyDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOrdersHeaderPartnerDatumL) LoadCurrencyDataPlatformCurrencyCurrencyDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOrdersHeaderPartnerDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOrdersHeaderPartnerDatum
	var object *DataPlatformOrdersHeaderPartnerDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOrdersHeaderPartnerDatum.(*DataPlatformOrdersHeaderPartnerDatum)
		if !ok {
			object = new(DataPlatformOrdersHeaderPartnerDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOrdersHeaderPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOrdersHeaderPartnerDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOrdersHeaderPartnerDatum.(*[]*DataPlatformOrdersHeaderPartnerDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOrdersHeaderPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOrdersHeaderPartnerDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOrdersHeaderPartnerDatumR{}
		}
		if !queries.IsNil(object.Currency) {
			args = append(args, object.Currency)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOrdersHeaderPartnerDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Currency) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Currency) {
				args = append(args, obj.Currency)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_currency_currency_data`),
		qm.WhereIn(`data_platform_currency_currency_data.Currency in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformCurrencyCurrencyDatum")
	}

	var resultSlice []*DataPlatformCurrencyCurrencyDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformCurrencyCurrencyDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_currency_currency_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_currency_currency_data")
	}

	if len(dataPlatformCurrencyCurrencyDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CurrencyDataPlatformCurrencyCurrencyDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformCurrencyCurrencyDatumR{}
		}
		foreign.R.CurrencyDataPlatformOrdersHeaderPartnerData = append(foreign.R.CurrencyDataPlatformOrdersHeaderPartnerData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Currency, foreign.Currency) {
				local.R.CurrencyDataPlatformCurrencyCurrencyDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformCurrencyCurrencyDatumR{}
				}
				foreign.R.CurrencyDataPlatformOrdersHeaderPartnerData = append(foreign.R.CurrencyDataPlatformOrdersHeaderPartnerData, local)
				break
			}
		}
	}

	return nil
}

// LoadLanguageDataPlatformLanguageLanguageDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOrdersHeaderPartnerDatumL) LoadLanguageDataPlatformLanguageLanguageDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOrdersHeaderPartnerDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOrdersHeaderPartnerDatum
	var object *DataPlatformOrdersHeaderPartnerDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOrdersHeaderPartnerDatum.(*DataPlatformOrdersHeaderPartnerDatum)
		if !ok {
			object = new(DataPlatformOrdersHeaderPartnerDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOrdersHeaderPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOrdersHeaderPartnerDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOrdersHeaderPartnerDatum.(*[]*DataPlatformOrdersHeaderPartnerDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOrdersHeaderPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOrdersHeaderPartnerDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOrdersHeaderPartnerDatumR{}
		}
		if !queries.IsNil(object.Language) {
			args = append(args, object.Language)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOrdersHeaderPartnerDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Language) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Language) {
				args = append(args, obj.Language)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_language_language_data`),
		qm.WhereIn(`data_platform_language_language_data.Language in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformLanguageLanguageDatum")
	}

	var resultSlice []*DataPlatformLanguageLanguageDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformLanguageLanguageDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_language_language_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_language_language_data")
	}

	if len(dataPlatformLanguageLanguageDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.LanguageDataPlatformLanguageLanguageDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformLanguageLanguageDatumR{}
		}
		foreign.R.LanguageDataPlatformOrdersHeaderPartnerData = append(foreign.R.LanguageDataPlatformOrdersHeaderPartnerData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Language, foreign.Language) {
				local.R.LanguageDataPlatformLanguageLanguageDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformLanguageLanguageDatumR{}
				}
				foreign.R.LanguageDataPlatformOrdersHeaderPartnerData = append(foreign.R.LanguageDataPlatformOrdersHeaderPartnerData, local)
				break
			}
		}
	}

	return nil
}

// LoadPartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOrdersHeaderPartnerDatumL) LoadPartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOrdersHeaderPartnerDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOrdersHeaderPartnerDatum
	var object *DataPlatformOrdersHeaderPartnerDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOrdersHeaderPartnerDatum.(*DataPlatformOrdersHeaderPartnerDatum)
		if !ok {
			object = new(DataPlatformOrdersHeaderPartnerDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOrdersHeaderPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOrdersHeaderPartnerDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOrdersHeaderPartnerDatum.(*[]*DataPlatformOrdersHeaderPartnerDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOrdersHeaderPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOrdersHeaderPartnerDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOrdersHeaderPartnerDatumR{}
		}
		args = append(args, object.PartnerFunction)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOrdersHeaderPartnerDatumR{}
			}

			for _, a := range args {
				if a == obj.PartnerFunction {
					continue Outer
				}
			}

			args = append(args, obj.PartnerFunction)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_partner_function_partner_function_data`),
		qm.WhereIn(`data_platform_partner_function_partner_function_data.PartnerFunction in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPartnerFunctionPartnerFunctionDatum")
	}

	var resultSlice []*DataPlatformPartnerFunctionPartnerFunctionDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPartnerFunctionPartnerFunctionDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_partner_function_partner_function_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_partner_function_partner_function_data")
	}

	if len(dataPlatformPartnerFunctionPartnerFunctionDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformPartnerFunctionPartnerFunctionDatumR{}
		}
		foreign.R.PartnerFunctionDataPlatformOrdersHeaderPartnerData = append(foreign.R.PartnerFunctionDataPlatformOrdersHeaderPartnerData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PartnerFunction == foreign.PartnerFunction {
				local.R.PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformPartnerFunctionPartnerFunctionDatumR{}
				}
				foreign.R.PartnerFunctionDataPlatformOrdersHeaderPartnerData = append(foreign.R.PartnerFunctionDataPlatformOrdersHeaderPartnerData, local)
				break
			}
		}
	}

	return nil
}

// LoadOrderIDDataPlatformOrdersHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOrdersHeaderPartnerDatumL) LoadOrderIDDataPlatformOrdersHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOrdersHeaderPartnerDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOrdersHeaderPartnerDatum
	var object *DataPlatformOrdersHeaderPartnerDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOrdersHeaderPartnerDatum.(*DataPlatformOrdersHeaderPartnerDatum)
		if !ok {
			object = new(DataPlatformOrdersHeaderPartnerDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOrdersHeaderPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOrdersHeaderPartnerDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOrdersHeaderPartnerDatum.(*[]*DataPlatformOrdersHeaderPartnerDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOrdersHeaderPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOrdersHeaderPartnerDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOrdersHeaderPartnerDatumR{}
		}
		args = append(args, object.OrderID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOrdersHeaderPartnerDatumR{}
			}

			for _, a := range args {
				if a == obj.OrderID {
					continue Outer
				}
			}

			args = append(args, obj.OrderID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_header_data`),
		qm.WhereIn(`data_platform_orders_header_data.OrderID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformOrdersHeaderDatum")
	}

	var resultSlice []*DataPlatformOrdersHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformOrdersHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_orders_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_header_data")
	}

	if len(dataPlatformOrdersHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrderIDDataPlatformOrdersHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformOrdersHeaderDatumR{}
		}
		foreign.R.OrderIDDataPlatformOrdersHeaderPartnerData = append(foreign.R.OrderIDDataPlatformOrdersHeaderPartnerData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrderID == foreign.OrderID {
				local.R.OrderIDDataPlatformOrdersHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformOrdersHeaderDatumR{}
				}
				foreign.R.OrderIDDataPlatformOrdersHeaderPartnerData = append(foreign.R.OrderIDDataPlatformOrdersHeaderPartnerData, local)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformOrdersHeaderPartnerContactData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformOrdersHeaderPartnerDatumL) LoadBusinessPartnerDataPlatformOrdersHeaderPartnerContactData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOrdersHeaderPartnerDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOrdersHeaderPartnerDatum
	var object *DataPlatformOrdersHeaderPartnerDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOrdersHeaderPartnerDatum.(*DataPlatformOrdersHeaderPartnerDatum)
		if !ok {
			object = new(DataPlatformOrdersHeaderPartnerDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOrdersHeaderPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOrdersHeaderPartnerDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOrdersHeaderPartnerDatum.(*[]*DataPlatformOrdersHeaderPartnerDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOrdersHeaderPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOrdersHeaderPartnerDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOrdersHeaderPartnerDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOrdersHeaderPartnerDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_header_partner_contact_data`),
		qm.WhereIn(`data_platform_orders_header_partner_contact_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_header_partner_contact_data")
	}

	var resultSlice []*DataPlatformOrdersHeaderPartnerContactDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_header_partner_contact_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_header_partner_contact_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_header_partner_contact_data")
	}

	if len(dataPlatformOrdersHeaderPartnerContactDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BusinessPartnerDataPlatformOrdersHeaderPartnerContactData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformOrdersHeaderPartnerContactDatumR{}
			}
			foreign.R.BusinessPartnerDataPlatformOrdersHeaderPartnerDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformOrdersHeaderPartnerContactData = append(local.R.BusinessPartnerDataPlatformOrdersHeaderPartnerContactData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformOrdersHeaderPartnerContactDatumR{}
				}
				foreign.R.BusinessPartnerDataPlatformOrdersHeaderPartnerDatum = local
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformOrdersHeaderPartnerPlantData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformOrdersHeaderPartnerDatumL) LoadBusinessPartnerDataPlatformOrdersHeaderPartnerPlantData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOrdersHeaderPartnerDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOrdersHeaderPartnerDatum
	var object *DataPlatformOrdersHeaderPartnerDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOrdersHeaderPartnerDatum.(*DataPlatformOrdersHeaderPartnerDatum)
		if !ok {
			object = new(DataPlatformOrdersHeaderPartnerDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOrdersHeaderPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOrdersHeaderPartnerDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOrdersHeaderPartnerDatum.(*[]*DataPlatformOrdersHeaderPartnerDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOrdersHeaderPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOrdersHeaderPartnerDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOrdersHeaderPartnerDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOrdersHeaderPartnerDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_header_partner_plant_data`),
		qm.WhereIn(`data_platform_orders_header_partner_plant_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_header_partner_plant_data")
	}

	var resultSlice []*DataPlatformOrdersHeaderPartnerPlantDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_header_partner_plant_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_header_partner_plant_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_header_partner_plant_data")
	}

	if len(dataPlatformOrdersHeaderPartnerPlantDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BusinessPartnerDataPlatformOrdersHeaderPartnerPlantData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformOrdersHeaderPartnerPlantDatumR{}
			}
			foreign.R.BusinessPartnerDataPlatformOrdersHeaderPartnerDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformOrdersHeaderPartnerPlantData = append(local.R.BusinessPartnerDataPlatformOrdersHeaderPartnerPlantData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformOrdersHeaderPartnerPlantDatumR{}
				}
				foreign.R.BusinessPartnerDataPlatformOrdersHeaderPartnerDatum = local
				break
			}
		}
	}

	return nil
}

// SetAddressIDDataPlatformAddressAddressDatum of the dataPlatformOrdersHeaderPartnerDatum to the related item.
// Sets o.R.AddressIDDataPlatformAddressAddressDatum to related.
// Adds o to related.R.AddressIDDataPlatformOrdersHeaderPartnerData.
func (o *DataPlatformOrdersHeaderPartnerDatum) SetAddressIDDataPlatformAddressAddressDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformAddressAddressDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_orders_header_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"AddressID"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderPartnerDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.AddressID, o.OrderID, o.PartnerFunction, o.BusinessPartner}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AddressID, related.AddressID)
	if o.R == nil {
		o.R = &dataPlatformOrdersHeaderPartnerDatumR{
			AddressIDDataPlatformAddressAddressDatum: related,
		}
	} else {
		o.R.AddressIDDataPlatformAddressAddressDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformAddressAddressDatumR{
			AddressIDDataPlatformOrdersHeaderPartnerData: DataPlatformOrdersHeaderPartnerDatumSlice{o},
		}
	} else {
		related.R.AddressIDDataPlatformOrdersHeaderPartnerData = append(related.R.AddressIDDataPlatformOrdersHeaderPartnerData, o)
	}

	return nil
}

// RemoveAddressIDDataPlatformAddressAddressDatum relationship.
// Sets o.R.AddressIDDataPlatformAddressAddressDatum to nil.
// Removes o from all passed in related items' relationships struct.
func (o *DataPlatformOrdersHeaderPartnerDatum) RemoveAddressIDDataPlatformAddressAddressDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformAddressAddressDatum) error {
	var err error

	queries.SetScanner(&o.AddressID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("AddressID")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.AddressIDDataPlatformAddressAddressDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AddressIDDataPlatformOrdersHeaderPartnerData {
		if queries.Equal(o.AddressID, ri.AddressID) {
			continue
		}

		ln := len(related.R.AddressIDDataPlatformOrdersHeaderPartnerData)
		if ln > 1 && i < ln-1 {
			related.R.AddressIDDataPlatformOrdersHeaderPartnerData[i] = related.R.AddressIDDataPlatformOrdersHeaderPartnerData[ln-1]
		}
		related.R.AddressIDDataPlatformOrdersHeaderPartnerData = related.R.AddressIDDataPlatformOrdersHeaderPartnerData[:ln-1]
		break
	}
	return nil
}

// SetBusinessPartnerDataPlatformBusinessPartnerGeneralDatum of the dataPlatformOrdersHeaderPartnerDatum to the related item.
// Sets o.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum to related.
// Adds o to related.R.BusinessPartnerDataPlatformOrdersHeaderPartnerData.
func (o *DataPlatformOrdersHeaderPartnerDatum) SetBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_orders_header_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderPartnerDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.OrderID, o.PartnerFunction, o.BusinessPartner}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BusinessPartner = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformOrdersHeaderPartnerDatumR{
			BusinessPartnerDataPlatformBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BusinessPartnerDataPlatformOrdersHeaderPartnerData: DataPlatformOrdersHeaderPartnerDatumSlice{o},
		}
	} else {
		related.R.BusinessPartnerDataPlatformOrdersHeaderPartnerData = append(related.R.BusinessPartnerDataPlatformOrdersHeaderPartnerData, o)
	}

	return nil
}

// SetCountryDataPlatformCountryCountryDatum of the dataPlatformOrdersHeaderPartnerDatum to the related item.
// Sets o.R.CountryDataPlatformCountryCountryDatum to related.
// Adds o to related.R.CountryDataPlatformOrdersHeaderPartnerData.
func (o *DataPlatformOrdersHeaderPartnerDatum) SetCountryDataPlatformCountryCountryDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformCountryCountryDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_orders_header_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Country"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderPartnerDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Country, o.OrderID, o.PartnerFunction, o.BusinessPartner}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Country, related.Country)
	if o.R == nil {
		o.R = &dataPlatformOrdersHeaderPartnerDatumR{
			CountryDataPlatformCountryCountryDatum: related,
		}
	} else {
		o.R.CountryDataPlatformCountryCountryDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformCountryCountryDatumR{
			CountryDataPlatformOrdersHeaderPartnerData: DataPlatformOrdersHeaderPartnerDatumSlice{o},
		}
	} else {
		related.R.CountryDataPlatformOrdersHeaderPartnerData = append(related.R.CountryDataPlatformOrdersHeaderPartnerData, o)
	}

	return nil
}

// RemoveCountryDataPlatformCountryCountryDatum relationship.
// Sets o.R.CountryDataPlatformCountryCountryDatum to nil.
// Removes o from all passed in related items' relationships struct.
func (o *DataPlatformOrdersHeaderPartnerDatum) RemoveCountryDataPlatformCountryCountryDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformCountryCountryDatum) error {
	var err error

	queries.SetScanner(&o.Country, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("Country")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CountryDataPlatformCountryCountryDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CountryDataPlatformOrdersHeaderPartnerData {
		if queries.Equal(o.Country, ri.Country) {
			continue
		}

		ln := len(related.R.CountryDataPlatformOrdersHeaderPartnerData)
		if ln > 1 && i < ln-1 {
			related.R.CountryDataPlatformOrdersHeaderPartnerData[i] = related.R.CountryDataPlatformOrdersHeaderPartnerData[ln-1]
		}
		related.R.CountryDataPlatformOrdersHeaderPartnerData = related.R.CountryDataPlatformOrdersHeaderPartnerData[:ln-1]
		break
	}
	return nil
}

// SetCurrencyDataPlatformCurrencyCurrencyDatum of the dataPlatformOrdersHeaderPartnerDatum to the related item.
// Sets o.R.CurrencyDataPlatformCurrencyCurrencyDatum to related.
// Adds o to related.R.CurrencyDataPlatformOrdersHeaderPartnerData.
func (o *DataPlatformOrdersHeaderPartnerDatum) SetCurrencyDataPlatformCurrencyCurrencyDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformCurrencyCurrencyDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_orders_header_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Currency"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderPartnerDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Currency, o.OrderID, o.PartnerFunction, o.BusinessPartner}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Currency, related.Currency)
	if o.R == nil {
		o.R = &dataPlatformOrdersHeaderPartnerDatumR{
			CurrencyDataPlatformCurrencyCurrencyDatum: related,
		}
	} else {
		o.R.CurrencyDataPlatformCurrencyCurrencyDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformCurrencyCurrencyDatumR{
			CurrencyDataPlatformOrdersHeaderPartnerData: DataPlatformOrdersHeaderPartnerDatumSlice{o},
		}
	} else {
		related.R.CurrencyDataPlatformOrdersHeaderPartnerData = append(related.R.CurrencyDataPlatformOrdersHeaderPartnerData, o)
	}

	return nil
}

// RemoveCurrencyDataPlatformCurrencyCurrencyDatum relationship.
// Sets o.R.CurrencyDataPlatformCurrencyCurrencyDatum to nil.
// Removes o from all passed in related items' relationships struct.
func (o *DataPlatformOrdersHeaderPartnerDatum) RemoveCurrencyDataPlatformCurrencyCurrencyDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformCurrencyCurrencyDatum) error {
	var err error

	queries.SetScanner(&o.Currency, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("Currency")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CurrencyDataPlatformCurrencyCurrencyDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CurrencyDataPlatformOrdersHeaderPartnerData {
		if queries.Equal(o.Currency, ri.Currency) {
			continue
		}

		ln := len(related.R.CurrencyDataPlatformOrdersHeaderPartnerData)
		if ln > 1 && i < ln-1 {
			related.R.CurrencyDataPlatformOrdersHeaderPartnerData[i] = related.R.CurrencyDataPlatformOrdersHeaderPartnerData[ln-1]
		}
		related.R.CurrencyDataPlatformOrdersHeaderPartnerData = related.R.CurrencyDataPlatformOrdersHeaderPartnerData[:ln-1]
		break
	}
	return nil
}

// SetLanguageDataPlatformLanguageLanguageDatum of the dataPlatformOrdersHeaderPartnerDatum to the related item.
// Sets o.R.LanguageDataPlatformLanguageLanguageDatum to related.
// Adds o to related.R.LanguageDataPlatformOrdersHeaderPartnerData.
func (o *DataPlatformOrdersHeaderPartnerDatum) SetLanguageDataPlatformLanguageLanguageDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformLanguageLanguageDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_orders_header_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Language"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderPartnerDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Language, o.OrderID, o.PartnerFunction, o.BusinessPartner}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Language, related.Language)
	if o.R == nil {
		o.R = &dataPlatformOrdersHeaderPartnerDatumR{
			LanguageDataPlatformLanguageLanguageDatum: related,
		}
	} else {
		o.R.LanguageDataPlatformLanguageLanguageDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformLanguageLanguageDatumR{
			LanguageDataPlatformOrdersHeaderPartnerData: DataPlatformOrdersHeaderPartnerDatumSlice{o},
		}
	} else {
		related.R.LanguageDataPlatformOrdersHeaderPartnerData = append(related.R.LanguageDataPlatformOrdersHeaderPartnerData, o)
	}

	return nil
}

// RemoveLanguageDataPlatformLanguageLanguageDatum relationship.
// Sets o.R.LanguageDataPlatformLanguageLanguageDatum to nil.
// Removes o from all passed in related items' relationships struct.
func (o *DataPlatformOrdersHeaderPartnerDatum) RemoveLanguageDataPlatformLanguageLanguageDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformLanguageLanguageDatum) error {
	var err error

	queries.SetScanner(&o.Language, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("Language")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.LanguageDataPlatformLanguageLanguageDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.LanguageDataPlatformOrdersHeaderPartnerData {
		if queries.Equal(o.Language, ri.Language) {
			continue
		}

		ln := len(related.R.LanguageDataPlatformOrdersHeaderPartnerData)
		if ln > 1 && i < ln-1 {
			related.R.LanguageDataPlatformOrdersHeaderPartnerData[i] = related.R.LanguageDataPlatformOrdersHeaderPartnerData[ln-1]
		}
		related.R.LanguageDataPlatformOrdersHeaderPartnerData = related.R.LanguageDataPlatformOrdersHeaderPartnerData[:ln-1]
		break
	}
	return nil
}

// SetPartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum of the dataPlatformOrdersHeaderPartnerDatum to the related item.
// Sets o.R.PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum to related.
// Adds o to related.R.PartnerFunctionDataPlatformOrdersHeaderPartnerData.
func (o *DataPlatformOrdersHeaderPartnerDatum) SetPartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPartnerFunctionPartnerFunctionDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_orders_header_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PartnerFunction"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderPartnerDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PartnerFunction, o.OrderID, o.PartnerFunction, o.BusinessPartner}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PartnerFunction = related.PartnerFunction
	if o.R == nil {
		o.R = &dataPlatformOrdersHeaderPartnerDatumR{
			PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum: related,
		}
	} else {
		o.R.PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformPartnerFunctionPartnerFunctionDatumR{
			PartnerFunctionDataPlatformOrdersHeaderPartnerData: DataPlatformOrdersHeaderPartnerDatumSlice{o},
		}
	} else {
		related.R.PartnerFunctionDataPlatformOrdersHeaderPartnerData = append(related.R.PartnerFunctionDataPlatformOrdersHeaderPartnerData, o)
	}

	return nil
}

// SetOrderIDDataPlatformOrdersHeaderDatum of the dataPlatformOrdersHeaderPartnerDatum to the related item.
// Sets o.R.OrderIDDataPlatformOrdersHeaderDatum to related.
// Adds o to related.R.OrderIDDataPlatformOrdersHeaderPartnerData.
func (o *DataPlatformOrdersHeaderPartnerDatum) SetOrderIDDataPlatformOrdersHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformOrdersHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_orders_header_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"OrderID"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderPartnerDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.OrderID, o.OrderID, o.PartnerFunction, o.BusinessPartner}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrderID = related.OrderID
	if o.R == nil {
		o.R = &dataPlatformOrdersHeaderPartnerDatumR{
			OrderIDDataPlatformOrdersHeaderDatum: related,
		}
	} else {
		o.R.OrderIDDataPlatformOrdersHeaderDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformOrdersHeaderDatumR{
			OrderIDDataPlatformOrdersHeaderPartnerData: DataPlatformOrdersHeaderPartnerDatumSlice{o},
		}
	} else {
		related.R.OrderIDDataPlatformOrdersHeaderPartnerData = append(related.R.OrderIDDataPlatformOrdersHeaderPartnerData, o)
	}

	return nil
}

// AddBusinessPartnerDataPlatformOrdersHeaderPartnerContactData adds the given related objects to the existing relationships
// of the data_platform_orders_header_partner_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformOrdersHeaderPartnerContactData.
// Sets related.R.BusinessPartnerDataPlatformOrdersHeaderPartnerDatum appropriately.
func (o *DataPlatformOrdersHeaderPartnerDatum) AddBusinessPartnerDataPlatformOrdersHeaderPartnerContactData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersHeaderPartnerContactDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_header_partner_contact_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderPartnerContactDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.OrderID, rel.PartnerFunction, rel.BusinessPartner, rel.ContactID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformOrdersHeaderPartnerDatumR{
			BusinessPartnerDataPlatformOrdersHeaderPartnerContactData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformOrdersHeaderPartnerContactData = append(o.R.BusinessPartnerDataPlatformOrdersHeaderPartnerContactData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformOrdersHeaderPartnerContactDatumR{
				BusinessPartnerDataPlatformOrdersHeaderPartnerDatum: o,
			}
		} else {
			rel.R.BusinessPartnerDataPlatformOrdersHeaderPartnerDatum = o
		}
	}
	return nil
}

// AddBusinessPartnerDataPlatformOrdersHeaderPartnerPlantData adds the given related objects to the existing relationships
// of the data_platform_orders_header_partner_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformOrdersHeaderPartnerPlantData.
// Sets related.R.BusinessPartnerDataPlatformOrdersHeaderPartnerDatum appropriately.
func (o *DataPlatformOrdersHeaderPartnerDatum) AddBusinessPartnerDataPlatformOrdersHeaderPartnerPlantData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersHeaderPartnerPlantDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_header_partner_plant_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderPartnerPlantDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.OrderID, rel.PartnerFunction, rel.BusinessPartner, rel.Plant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformOrdersHeaderPartnerDatumR{
			BusinessPartnerDataPlatformOrdersHeaderPartnerPlantData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformOrdersHeaderPartnerPlantData = append(o.R.BusinessPartnerDataPlatformOrdersHeaderPartnerPlantData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformOrdersHeaderPartnerPlantDatumR{
				BusinessPartnerDataPlatformOrdersHeaderPartnerDatum: o,
			}
		} else {
			rel.R.BusinessPartnerDataPlatformOrdersHeaderPartnerDatum = o
		}
	}
	return nil
}

// DataPlatformOrdersHeaderPartnerData retrieves all the records using an executor.
func DataPlatformOrdersHeaderPartnerData(mods ...qm.QueryMod) dataPlatformOrdersHeaderPartnerDatumQuery {
	mods = append(mods, qm.From("`data_platform_orders_header_partner_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_orders_header_partner_data`.*"})
	}

	return dataPlatformOrdersHeaderPartnerDatumQuery{q}
}

// FindDataPlatformOrdersHeaderPartnerDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformOrdersHeaderPartnerDatum(ctx context.Context, exec boil.ContextExecutor, orderID int, partnerFunction string, businessPartner int, selectCols ...string) (*DataPlatformOrdersHeaderPartnerDatum, error) {
	dataPlatformOrdersHeaderPartnerDatumObj := &DataPlatformOrdersHeaderPartnerDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_orders_header_partner_data` where `OrderID`=? AND `PartnerFunction`=? AND `BusinessPartner`=?", sel,
	)

	q := queries.Raw(query, orderID, partnerFunction, businessPartner)

	err := q.Bind(ctx, exec, dataPlatformOrdersHeaderPartnerDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_orders_header_partner_data")
	}

	if err = dataPlatformOrdersHeaderPartnerDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dataPlatformOrdersHeaderPartnerDatumObj, err
	}

	return dataPlatformOrdersHeaderPartnerDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformOrdersHeaderPartnerDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_orders_header_partner_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformOrdersHeaderPartnerDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformOrdersHeaderPartnerDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformOrdersHeaderPartnerDatumInsertCache[key]
	dataPlatformOrdersHeaderPartnerDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformOrdersHeaderPartnerDatumAllColumns,
			dataPlatformOrdersHeaderPartnerDatumColumnsWithDefault,
			dataPlatformOrdersHeaderPartnerDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformOrdersHeaderPartnerDatumType, dataPlatformOrdersHeaderPartnerDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformOrdersHeaderPartnerDatumType, dataPlatformOrdersHeaderPartnerDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_orders_header_partner_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_orders_header_partner_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_orders_header_partner_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderPartnerDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_orders_header_partner_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.OrderID,
		o.PartnerFunction,
		o.BusinessPartner,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_orders_header_partner_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformOrdersHeaderPartnerDatumInsertCacheMut.Lock()
		dataPlatformOrdersHeaderPartnerDatumInsertCache[key] = cache
		dataPlatformOrdersHeaderPartnerDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DataPlatformOrdersHeaderPartnerDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformOrdersHeaderPartnerDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dataPlatformOrdersHeaderPartnerDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformOrdersHeaderPartnerDatumUpdateCache[key]
	dataPlatformOrdersHeaderPartnerDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformOrdersHeaderPartnerDatumAllColumns,
			dataPlatformOrdersHeaderPartnerDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update data_platform_orders_header_partner_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_orders_header_partner_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderPartnerDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformOrdersHeaderPartnerDatumType, dataPlatformOrdersHeaderPartnerDatumMapping, append(wl, dataPlatformOrdersHeaderPartnerDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update data_platform_orders_header_partner_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for data_platform_orders_header_partner_data")
	}

	if !cached {
		dataPlatformOrdersHeaderPartnerDatumUpdateCacheMut.Lock()
		dataPlatformOrdersHeaderPartnerDatumUpdateCache[key] = cache
		dataPlatformOrdersHeaderPartnerDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformOrdersHeaderPartnerDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for data_platform_orders_header_partner_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for data_platform_orders_header_partner_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformOrdersHeaderPartnerDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformOrdersHeaderPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_orders_header_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformOrdersHeaderPartnerDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dataPlatformOrdersHeaderPartnerDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dataPlatformOrdersHeaderPartnerDatum")
	}
	return rowsAff, nil
}

var mySQLDataPlatformOrdersHeaderPartnerDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformOrdersHeaderPartnerDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_orders_header_partner_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformOrdersHeaderPartnerDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformOrdersHeaderPartnerDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformOrdersHeaderPartnerDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformOrdersHeaderPartnerDatumUpsertCache[key]
	dataPlatformOrdersHeaderPartnerDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformOrdersHeaderPartnerDatumAllColumns,
			dataPlatformOrdersHeaderPartnerDatumColumnsWithDefault,
			dataPlatformOrdersHeaderPartnerDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformOrdersHeaderPartnerDatumAllColumns,
			dataPlatformOrdersHeaderPartnerDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_orders_header_partner_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_orders_header_partner_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_orders_header_partner_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformOrdersHeaderPartnerDatumType, dataPlatformOrdersHeaderPartnerDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformOrdersHeaderPartnerDatumType, dataPlatformOrdersHeaderPartnerDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_orders_header_partner_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformOrdersHeaderPartnerDatumType, dataPlatformOrdersHeaderPartnerDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_orders_header_partner_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_orders_header_partner_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformOrdersHeaderPartnerDatumUpsertCacheMut.Lock()
		dataPlatformOrdersHeaderPartnerDatumUpsertCache[key] = cache
		dataPlatformOrdersHeaderPartnerDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DataPlatformOrdersHeaderPartnerDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformOrdersHeaderPartnerDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DataPlatformOrdersHeaderPartnerDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformOrdersHeaderPartnerDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_orders_header_partner_data` WHERE `OrderID`=? AND `PartnerFunction`=? AND `BusinessPartner`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from data_platform_orders_header_partner_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for data_platform_orders_header_partner_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformOrdersHeaderPartnerDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dataPlatformOrdersHeaderPartnerDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from data_platform_orders_header_partner_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_orders_header_partner_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformOrdersHeaderPartnerDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dataPlatformOrdersHeaderPartnerDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformOrdersHeaderPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_orders_header_partner_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformOrdersHeaderPartnerDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dataPlatformOrdersHeaderPartnerDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_orders_header_partner_data")
	}

	if len(dataPlatformOrdersHeaderPartnerDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformOrdersHeaderPartnerDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformOrdersHeaderPartnerDatum(ctx, exec, o.OrderID, o.PartnerFunction, o.BusinessPartner)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformOrdersHeaderPartnerDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformOrdersHeaderPartnerDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformOrdersHeaderPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_orders_header_partner_data`.* FROM `data_platform_orders_header_partner_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformOrdersHeaderPartnerDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformOrdersHeaderPartnerDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformOrdersHeaderPartnerDatumExists checks if the DataPlatformOrdersHeaderPartnerDatum row exists.
func DataPlatformOrdersHeaderPartnerDatumExists(ctx context.Context, exec boil.ContextExecutor, orderID int, partnerFunction string, businessPartner int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_orders_header_partner_data` where `OrderID`=? AND `PartnerFunction`=? AND `BusinessPartner`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, orderID, partnerFunction, businessPartner)
	}
	row := exec.QueryRowContext(ctx, sql, orderID, partnerFunction, businessPartner)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_orders_header_partner_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformOrdersHeaderPartnerDatum row exists.
func (o *DataPlatformOrdersHeaderPartnerDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformOrdersHeaderPartnerDatumExists(ctx, exec, o.OrderID, o.PartnerFunction, o.BusinessPartner)
}
