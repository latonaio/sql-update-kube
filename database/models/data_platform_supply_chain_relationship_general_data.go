// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformSupplyChainRelationshipGeneralDatum is an object representing the database table.
type DataPlatformSupplyChainRelationshipGeneralDatum struct {
	SupplyChainRelationshipID int         `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	Buyer                     int         `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                    int         `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	CreationDate              null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	LastChangeDate            null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	IsMarkedForDeletion       null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformSupplyChainRelationshipGeneralDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformSupplyChainRelationshipGeneralDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformSupplyChainRelationshipGeneralDatumColumns = struct {
	SupplyChainRelationshipID string
	Buyer                     string
	Seller                    string
	CreationDate              string
	LastChangeDate            string
	IsMarkedForDeletion       string
}{
	SupplyChainRelationshipID: "SupplyChainRelationshipID",
	Buyer:                     "Buyer",
	Seller:                    "Seller",
	CreationDate:              "CreationDate",
	LastChangeDate:            "LastChangeDate",
	IsMarkedForDeletion:       "IsMarkedForDeletion",
}

var DataPlatformSupplyChainRelationshipGeneralDatumTableColumns = struct {
	SupplyChainRelationshipID string
	Buyer                     string
	Seller                    string
	CreationDate              string
	LastChangeDate            string
	IsMarkedForDeletion       string
}{
	SupplyChainRelationshipID: "data_platform_supply_chain_relationship_general_data.SupplyChainRelationshipID",
	Buyer:                     "data_platform_supply_chain_relationship_general_data.Buyer",
	Seller:                    "data_platform_supply_chain_relationship_general_data.Seller",
	CreationDate:              "data_platform_supply_chain_relationship_general_data.CreationDate",
	LastChangeDate:            "data_platform_supply_chain_relationship_general_data.LastChangeDate",
	IsMarkedForDeletion:       "data_platform_supply_chain_relationship_general_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformSupplyChainRelationshipGeneralDatumWhere = struct {
	SupplyChainRelationshipID whereHelperint
	Buyer                     whereHelperint
	Seller                    whereHelperint
	CreationDate              whereHelpernull_String
	LastChangeDate            whereHelpernull_String
	IsMarkedForDeletion       whereHelpernull_Bool
}{
	SupplyChainRelationshipID: whereHelperint{field: "`data_platform_supply_chain_relationship_general_data`.`SupplyChainRelationshipID`"},
	Buyer:                     whereHelperint{field: "`data_platform_supply_chain_relationship_general_data`.`Buyer`"},
	Seller:                    whereHelperint{field: "`data_platform_supply_chain_relationship_general_data`.`Seller`"},
	CreationDate:              whereHelpernull_String{field: "`data_platform_supply_chain_relationship_general_data`.`CreationDate`"},
	LastChangeDate:            whereHelpernull_String{field: "`data_platform_supply_chain_relationship_general_data`.`LastChangeDate`"},
	IsMarkedForDeletion:       whereHelpernull_Bool{field: "`data_platform_supply_chain_relationship_general_data`.`IsMarkedForDeletion`"},
}

// DataPlatformSupplyChainRelationshipGeneralDatumRels is where relationship names are stored.
var DataPlatformSupplyChainRelationshipGeneralDatumRels = struct {
	BuyerDataPlatformBusinessPartnerGeneralDatum                        string
	SellerDataPlatformBusinessPartnerGeneralDatum                       string
	BuyerDataPlatformBillOfMaterialHeaderData                           string
	ComponentProductBuyerDataPlatformBillOfMaterialItemData             string
	BuyerDataPlatformOperationsHeaderData                               string
	BuyerDataPlatformOperationsItemData                                 string
	BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData string
	BuyerDataPlatformSupplyChainRelationshipDeliveryRelationData        string
	BuyerDataPlatformSupplyChainRelationshipTransactionData             string
}{
	BuyerDataPlatformBusinessPartnerGeneralDatum:                        "BuyerDataPlatformBusinessPartnerGeneralDatum",
	SellerDataPlatformBusinessPartnerGeneralDatum:                       "SellerDataPlatformBusinessPartnerGeneralDatum",
	BuyerDataPlatformBillOfMaterialHeaderData:                           "BuyerDataPlatformBillOfMaterialHeaderData",
	ComponentProductBuyerDataPlatformBillOfMaterialItemData:             "ComponentProductBuyerDataPlatformBillOfMaterialItemData",
	BuyerDataPlatformOperationsHeaderData:                               "BuyerDataPlatformOperationsHeaderData",
	BuyerDataPlatformOperationsItemData:                                 "BuyerDataPlatformOperationsItemData",
	BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData: "BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData",
	BuyerDataPlatformSupplyChainRelationshipDeliveryRelationData:        "BuyerDataPlatformSupplyChainRelationshipDeliveryRelationData",
	BuyerDataPlatformSupplyChainRelationshipTransactionData:             "BuyerDataPlatformSupplyChainRelationshipTransactionData",
}

// dataPlatformSupplyChainRelationshipGeneralDatumR is where relationships are stored.
type dataPlatformSupplyChainRelationshipGeneralDatumR struct {
	BuyerDataPlatformBusinessPartnerGeneralDatum                        *DataPlatformBusinessPartnerGeneralDatum                      `boil:"BuyerDataPlatformBusinessPartnerGeneralDatum" json:"BuyerDataPlatformBusinessPartnerGeneralDatum" toml:"BuyerDataPlatformBusinessPartnerGeneralDatum" yaml:"BuyerDataPlatformBusinessPartnerGeneralDatum"`
	SellerDataPlatformBusinessPartnerGeneralDatum                       *DataPlatformBusinessPartnerGeneralDatum                      `boil:"SellerDataPlatformBusinessPartnerGeneralDatum" json:"SellerDataPlatformBusinessPartnerGeneralDatum" toml:"SellerDataPlatformBusinessPartnerGeneralDatum" yaml:"SellerDataPlatformBusinessPartnerGeneralDatum"`
	BuyerDataPlatformBillOfMaterialHeaderData                           DataPlatformBillOfMaterialHeaderDatumSlice                    `boil:"BuyerDataPlatformBillOfMaterialHeaderData" json:"BuyerDataPlatformBillOfMaterialHeaderData" toml:"BuyerDataPlatformBillOfMaterialHeaderData" yaml:"BuyerDataPlatformBillOfMaterialHeaderData"`
	ComponentProductBuyerDataPlatformBillOfMaterialItemData             DataPlatformBillOfMaterialItemDatumSlice                      `boil:"ComponentProductBuyerDataPlatformBillOfMaterialItemData" json:"ComponentProductBuyerDataPlatformBillOfMaterialItemData" toml:"ComponentProductBuyerDataPlatformBillOfMaterialItemData" yaml:"ComponentProductBuyerDataPlatformBillOfMaterialItemData"`
	BuyerDataPlatformOperationsHeaderData                               DataPlatformOperationsHeaderDatumSlice                        `boil:"BuyerDataPlatformOperationsHeaderData" json:"BuyerDataPlatformOperationsHeaderData" toml:"BuyerDataPlatformOperationsHeaderData" yaml:"BuyerDataPlatformOperationsHeaderData"`
	BuyerDataPlatformOperationsItemData                                 DataPlatformOperationsItemDatumSlice                          `boil:"BuyerDataPlatformOperationsItemData" json:"BuyerDataPlatformOperationsItemData" toml:"BuyerDataPlatformOperationsItemData" yaml:"BuyerDataPlatformOperationsItemData"`
	BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData DataPlatformSupplyChainRelationshipBillingRelationDatumSlice  `boil:"BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData" json:"BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData" toml:"BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData" yaml:"BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData"`
	BuyerDataPlatformSupplyChainRelationshipDeliveryRelationData        DataPlatformSupplyChainRelationshipDeliveryRelationDatumSlice `boil:"BuyerDataPlatformSupplyChainRelationshipDeliveryRelationData" json:"BuyerDataPlatformSupplyChainRelationshipDeliveryRelationData" toml:"BuyerDataPlatformSupplyChainRelationshipDeliveryRelationData" yaml:"BuyerDataPlatformSupplyChainRelationshipDeliveryRelationData"`
	BuyerDataPlatformSupplyChainRelationshipTransactionData             DataPlatformSupplyChainRelationshipTransactionDatumSlice      `boil:"BuyerDataPlatformSupplyChainRelationshipTransactionData" json:"BuyerDataPlatformSupplyChainRelationshipTransactionData" toml:"BuyerDataPlatformSupplyChainRelationshipTransactionData" yaml:"BuyerDataPlatformSupplyChainRelationshipTransactionData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformSupplyChainRelationshipGeneralDatumR) NewStruct() *dataPlatformSupplyChainRelationshipGeneralDatumR {
	return &dataPlatformSupplyChainRelationshipGeneralDatumR{}
}

func (r *dataPlatformSupplyChainRelationshipGeneralDatumR) GetBuyerDataPlatformBusinessPartnerGeneralDatum() *DataPlatformBusinessPartnerGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformBusinessPartnerGeneralDatum
}

func (r *dataPlatformSupplyChainRelationshipGeneralDatumR) GetSellerDataPlatformBusinessPartnerGeneralDatum() *DataPlatformBusinessPartnerGeneralDatum {
	if r == nil {
		return nil
	}
	return r.SellerDataPlatformBusinessPartnerGeneralDatum
}

func (r *dataPlatformSupplyChainRelationshipGeneralDatumR) GetBuyerDataPlatformBillOfMaterialHeaderData() DataPlatformBillOfMaterialHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformBillOfMaterialHeaderData
}

func (r *dataPlatformSupplyChainRelationshipGeneralDatumR) GetComponentProductBuyerDataPlatformBillOfMaterialItemData() DataPlatformBillOfMaterialItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.ComponentProductBuyerDataPlatformBillOfMaterialItemData
}

func (r *dataPlatformSupplyChainRelationshipGeneralDatumR) GetBuyerDataPlatformOperationsHeaderData() DataPlatformOperationsHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformOperationsHeaderData
}

func (r *dataPlatformSupplyChainRelationshipGeneralDatumR) GetBuyerDataPlatformOperationsItemData() DataPlatformOperationsItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformOperationsItemData
}

func (r *dataPlatformSupplyChainRelationshipGeneralDatumR) GetBillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData() DataPlatformSupplyChainRelationshipBillingRelationDatumSlice {
	if r == nil {
		return nil
	}
	return r.BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData
}

func (r *dataPlatformSupplyChainRelationshipGeneralDatumR) GetBuyerDataPlatformSupplyChainRelationshipDeliveryRelationData() DataPlatformSupplyChainRelationshipDeliveryRelationDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSupplyChainRelationshipDeliveryRelationData
}

func (r *dataPlatformSupplyChainRelationshipGeneralDatumR) GetBuyerDataPlatformSupplyChainRelationshipTransactionData() DataPlatformSupplyChainRelationshipTransactionDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSupplyChainRelationshipTransactionData
}

// dataPlatformSupplyChainRelationshipGeneralDatumL is where Load methods for each relationship are stored.
type dataPlatformSupplyChainRelationshipGeneralDatumL struct{}

var (
	dataPlatformSupplyChainRelationshipGeneralDatumAllColumns            = []string{"SupplyChainRelationshipID", "Buyer", "Seller", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformSupplyChainRelationshipGeneralDatumColumnsWithoutDefault = []string{"SupplyChainRelationshipID", "Buyer", "Seller", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformSupplyChainRelationshipGeneralDatumColumnsWithDefault    = []string{}
	dataPlatformSupplyChainRelationshipGeneralDatumPrimaryKeyColumns     = []string{"SupplyChainRelationshipID", "Buyer", "Seller"}
	dataPlatformSupplyChainRelationshipGeneralDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformSupplyChainRelationshipGeneralDatumSlice is an alias for a slice of pointers to DataPlatformSupplyChainRelationshipGeneralDatum.
	// This should almost always be used instead of []DataPlatformSupplyChainRelationshipGeneralDatum.
	DataPlatformSupplyChainRelationshipGeneralDatumSlice []*DataPlatformSupplyChainRelationshipGeneralDatum

	dataPlatformSupplyChainRelationshipGeneralDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformSupplyChainRelationshipGeneralDatumType                 = reflect.TypeOf(&DataPlatformSupplyChainRelationshipGeneralDatum{})
	dataPlatformSupplyChainRelationshipGeneralDatumMapping              = queries.MakeStructMapping(dataPlatformSupplyChainRelationshipGeneralDatumType)
	dataPlatformSupplyChainRelationshipGeneralDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformSupplyChainRelationshipGeneralDatumType, dataPlatformSupplyChainRelationshipGeneralDatumMapping, dataPlatformSupplyChainRelationshipGeneralDatumPrimaryKeyColumns)
	dataPlatformSupplyChainRelationshipGeneralDatumInsertCacheMut       sync.RWMutex
	dataPlatformSupplyChainRelationshipGeneralDatumInsertCache          = make(map[string]insertCache)
	dataPlatformSupplyChainRelationshipGeneralDatumUpdateCacheMut       sync.RWMutex
	dataPlatformSupplyChainRelationshipGeneralDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformSupplyChainRelationshipGeneralDatumUpsertCacheMut       sync.RWMutex
	dataPlatformSupplyChainRelationshipGeneralDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformSupplyChainRelationshipGeneralDatum record from the query.
func (q dataPlatformSupplyChainRelationshipGeneralDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformSupplyChainRelationshipGeneralDatum, error) {
	o := &DataPlatformSupplyChainRelationshipGeneralDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_supply_chain_relationship_general_data")
	}

	return o, nil
}

// All returns all DataPlatformSupplyChainRelationshipGeneralDatum records from the query.
func (q dataPlatformSupplyChainRelationshipGeneralDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformSupplyChainRelationshipGeneralDatumSlice, error) {
	var o []*DataPlatformSupplyChainRelationshipGeneralDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformSupplyChainRelationshipGeneralDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformSupplyChainRelationshipGeneralDatum records in the query.
func (q dataPlatformSupplyChainRelationshipGeneralDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_supply_chain_relationship_general_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformSupplyChainRelationshipGeneralDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_supply_chain_relationship_general_data exists")
	}

	return count > 0, nil
}

// BuyerDataPlatformBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *DataPlatformSupplyChainRelationshipGeneralDatum) BuyerDataPlatformBusinessPartnerGeneralDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// SellerDataPlatformBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *DataPlatformSupplyChainRelationshipGeneralDatum) SellerDataPlatformBusinessPartnerGeneralDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.Seller),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// BuyerDataPlatformBillOfMaterialHeaderData retrieves all the data_platform_bill_of_material_header_datum's DataPlatformBillOfMaterialHeaderData with an executor via Buyer column.
func (o *DataPlatformSupplyChainRelationshipGeneralDatum) BuyerDataPlatformBillOfMaterialHeaderData(mods ...qm.QueryMod) dataPlatformBillOfMaterialHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_bill_of_material_header_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformBillOfMaterialHeaderData(queryMods...)
}

// ComponentProductBuyerDataPlatformBillOfMaterialItemData retrieves all the data_platform_bill_of_material_item_datum's DataPlatformBillOfMaterialItemData with an executor via ComponentProductBuyer column.
func (o *DataPlatformSupplyChainRelationshipGeneralDatum) ComponentProductBuyerDataPlatformBillOfMaterialItemData(mods ...qm.QueryMod) dataPlatformBillOfMaterialItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_bill_of_material_item_data`.`ComponentProductBuyer`=?", o.Buyer),
	)

	return DataPlatformBillOfMaterialItemData(queryMods...)
}

// BuyerDataPlatformOperationsHeaderData retrieves all the data_platform_operations_header_datum's DataPlatformOperationsHeaderData with an executor via Buyer column.
func (o *DataPlatformSupplyChainRelationshipGeneralDatum) BuyerDataPlatformOperationsHeaderData(mods ...qm.QueryMod) dataPlatformOperationsHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_operations_header_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformOperationsHeaderData(queryMods...)
}

// BuyerDataPlatformOperationsItemData retrieves all the data_platform_operations_item_datum's DataPlatformOperationsItemData with an executor via Buyer column.
func (o *DataPlatformSupplyChainRelationshipGeneralDatum) BuyerDataPlatformOperationsItemData(mods ...qm.QueryMod) dataPlatformOperationsItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_operations_item_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformOperationsItemData(queryMods...)
}

// BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData retrieves all the data_platform_supply_chain_relationship_billing_relation_datum's DataPlatformSupplyChainRelationshipBillingRelationData with an executor via Buyer column.
func (o *DataPlatformSupplyChainRelationshipGeneralDatum) BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData(mods ...qm.QueryMod) dataPlatformSupplyChainRelationshipBillingRelationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_supply_chain_relationship_billing_relation_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformSupplyChainRelationshipBillingRelationData(queryMods...)
}

// BuyerDataPlatformSupplyChainRelationshipDeliveryRelationData retrieves all the data_platform_supply_chain_relationship_delivery_relation_datum's DataPlatformSupplyChainRelationshipDeliveryRelationData with an executor via Buyer column.
func (o *DataPlatformSupplyChainRelationshipGeneralDatum) BuyerDataPlatformSupplyChainRelationshipDeliveryRelationData(mods ...qm.QueryMod) dataPlatformSupplyChainRelationshipDeliveryRelationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_supply_chain_relationship_delivery_relation_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformSupplyChainRelationshipDeliveryRelationData(queryMods...)
}

// BuyerDataPlatformSupplyChainRelationshipTransactionData retrieves all the data_platform_supply_chain_relationship_transaction_datum's DataPlatformSupplyChainRelationshipTransactionData with an executor via Buyer column.
func (o *DataPlatformSupplyChainRelationshipGeneralDatum) BuyerDataPlatformSupplyChainRelationshipTransactionData(mods ...qm.QueryMod) dataPlatformSupplyChainRelationshipTransactionDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_supply_chain_relationship_transaction_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformSupplyChainRelationshipTransactionData(queryMods...)
}

// LoadBuyerDataPlatformBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSupplyChainRelationshipGeneralDatumL) LoadBuyerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSupplyChainRelationshipGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSupplyChainRelationshipGeneralDatum
	var object *DataPlatformSupplyChainRelationshipGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSupplyChainRelationshipGeneralDatum.(*DataPlatformSupplyChainRelationshipGeneralDatum)
		if !ok {
			object = new(DataPlatformSupplyChainRelationshipGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSupplyChainRelationshipGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSupplyChainRelationshipGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSupplyChainRelationshipGeneralDatum.(*[]*DataPlatformSupplyChainRelationshipGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSupplyChainRelationshipGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSupplyChainRelationshipGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSupplyChainRelationshipGeneralDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSupplyChainRelationshipGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerGeneralDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformBusinessPartnerGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.BusinessPartner {
				local.R.BuyerDataPlatformBusinessPartnerGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadSellerDataPlatformBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSupplyChainRelationshipGeneralDatumL) LoadSellerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSupplyChainRelationshipGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSupplyChainRelationshipGeneralDatum
	var object *DataPlatformSupplyChainRelationshipGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSupplyChainRelationshipGeneralDatum.(*DataPlatformSupplyChainRelationshipGeneralDatum)
		if !ok {
			object = new(DataPlatformSupplyChainRelationshipGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSupplyChainRelationshipGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSupplyChainRelationshipGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSupplyChainRelationshipGeneralDatum.(*[]*DataPlatformSupplyChainRelationshipGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSupplyChainRelationshipGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSupplyChainRelationshipGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSupplyChainRelationshipGeneralDatumR{}
		}
		args = append(args, object.Seller)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSupplyChainRelationshipGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Seller {
					continue Outer
				}
			}

			args = append(args, obj.Seller)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerGeneralDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SellerDataPlatformBusinessPartnerGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Seller == foreign.BusinessPartner {
				local.R.SellerDataPlatformBusinessPartnerGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformBillOfMaterialHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSupplyChainRelationshipGeneralDatumL) LoadBuyerDataPlatformBillOfMaterialHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSupplyChainRelationshipGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSupplyChainRelationshipGeneralDatum
	var object *DataPlatformSupplyChainRelationshipGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSupplyChainRelationshipGeneralDatum.(*DataPlatformSupplyChainRelationshipGeneralDatum)
		if !ok {
			object = new(DataPlatformSupplyChainRelationshipGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSupplyChainRelationshipGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSupplyChainRelationshipGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSupplyChainRelationshipGeneralDatum.(*[]*DataPlatformSupplyChainRelationshipGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSupplyChainRelationshipGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSupplyChainRelationshipGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSupplyChainRelationshipGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSupplyChainRelationshipGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_bill_of_material_header_data`),
		qm.WhereIn(`data_platform_bill_of_material_header_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_bill_of_material_header_data")
	}

	var resultSlice []*DataPlatformBillOfMaterialHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_bill_of_material_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_bill_of_material_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_bill_of_material_header_data")
	}

	if singular {
		object.R.BuyerDataPlatformBillOfMaterialHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformBillOfMaterialHeaderData = append(local.R.BuyerDataPlatformBillOfMaterialHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadComponentProductBuyerDataPlatformBillOfMaterialItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSupplyChainRelationshipGeneralDatumL) LoadComponentProductBuyerDataPlatformBillOfMaterialItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSupplyChainRelationshipGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSupplyChainRelationshipGeneralDatum
	var object *DataPlatformSupplyChainRelationshipGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSupplyChainRelationshipGeneralDatum.(*DataPlatformSupplyChainRelationshipGeneralDatum)
		if !ok {
			object = new(DataPlatformSupplyChainRelationshipGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSupplyChainRelationshipGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSupplyChainRelationshipGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSupplyChainRelationshipGeneralDatum.(*[]*DataPlatformSupplyChainRelationshipGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSupplyChainRelationshipGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSupplyChainRelationshipGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSupplyChainRelationshipGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSupplyChainRelationshipGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_bill_of_material_item_data`),
		qm.WhereIn(`data_platform_bill_of_material_item_data.ComponentProductBuyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_bill_of_material_item_data")
	}

	var resultSlice []*DataPlatformBillOfMaterialItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_bill_of_material_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_bill_of_material_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_bill_of_material_item_data")
	}

	if singular {
		object.R.ComponentProductBuyerDataPlatformBillOfMaterialItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.ComponentProductBuyer {
				local.R.ComponentProductBuyerDataPlatformBillOfMaterialItemData = append(local.R.ComponentProductBuyerDataPlatformBillOfMaterialItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformOperationsHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSupplyChainRelationshipGeneralDatumL) LoadBuyerDataPlatformOperationsHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSupplyChainRelationshipGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSupplyChainRelationshipGeneralDatum
	var object *DataPlatformSupplyChainRelationshipGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSupplyChainRelationshipGeneralDatum.(*DataPlatformSupplyChainRelationshipGeneralDatum)
		if !ok {
			object = new(DataPlatformSupplyChainRelationshipGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSupplyChainRelationshipGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSupplyChainRelationshipGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSupplyChainRelationshipGeneralDatum.(*[]*DataPlatformSupplyChainRelationshipGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSupplyChainRelationshipGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSupplyChainRelationshipGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSupplyChainRelationshipGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSupplyChainRelationshipGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_operations_header_data`),
		qm.WhereIn(`data_platform_operations_header_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_operations_header_data")
	}

	var resultSlice []*DataPlatformOperationsHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_operations_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_operations_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_operations_header_data")
	}

	if singular {
		object.R.BuyerDataPlatformOperationsHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformOperationsHeaderData = append(local.R.BuyerDataPlatformOperationsHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformOperationsItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSupplyChainRelationshipGeneralDatumL) LoadBuyerDataPlatformOperationsItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSupplyChainRelationshipGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSupplyChainRelationshipGeneralDatum
	var object *DataPlatformSupplyChainRelationshipGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSupplyChainRelationshipGeneralDatum.(*DataPlatformSupplyChainRelationshipGeneralDatum)
		if !ok {
			object = new(DataPlatformSupplyChainRelationshipGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSupplyChainRelationshipGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSupplyChainRelationshipGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSupplyChainRelationshipGeneralDatum.(*[]*DataPlatformSupplyChainRelationshipGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSupplyChainRelationshipGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSupplyChainRelationshipGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSupplyChainRelationshipGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSupplyChainRelationshipGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_operations_item_data`),
		qm.WhereIn(`data_platform_operations_item_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_operations_item_data")
	}

	var resultSlice []*DataPlatformOperationsItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_operations_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_operations_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_operations_item_data")
	}

	if singular {
		object.R.BuyerDataPlatformOperationsItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformOperationsItemData = append(local.R.BuyerDataPlatformOperationsItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSupplyChainRelationshipGeneralDatumL) LoadBillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSupplyChainRelationshipGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSupplyChainRelationshipGeneralDatum
	var object *DataPlatformSupplyChainRelationshipGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSupplyChainRelationshipGeneralDatum.(*DataPlatformSupplyChainRelationshipGeneralDatum)
		if !ok {
			object = new(DataPlatformSupplyChainRelationshipGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSupplyChainRelationshipGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSupplyChainRelationshipGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSupplyChainRelationshipGeneralDatum.(*[]*DataPlatformSupplyChainRelationshipGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSupplyChainRelationshipGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSupplyChainRelationshipGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSupplyChainRelationshipGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSupplyChainRelationshipGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_supply_chain_relationship_billing_relation_data`),
		qm.WhereIn(`data_platform_supply_chain_relationship_billing_relation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_supply_chain_relationship_billing_relation_data")
	}

	var resultSlice []*DataPlatformSupplyChainRelationshipBillingRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_supply_chain_relationship_billing_relation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_supply_chain_relationship_billing_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_supply_chain_relationship_billing_relation_data")
	}

	if singular {
		object.R.BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData = append(local.R.BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSupplyChainRelationshipDeliveryRelationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSupplyChainRelationshipGeneralDatumL) LoadBuyerDataPlatformSupplyChainRelationshipDeliveryRelationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSupplyChainRelationshipGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSupplyChainRelationshipGeneralDatum
	var object *DataPlatformSupplyChainRelationshipGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSupplyChainRelationshipGeneralDatum.(*DataPlatformSupplyChainRelationshipGeneralDatum)
		if !ok {
			object = new(DataPlatformSupplyChainRelationshipGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSupplyChainRelationshipGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSupplyChainRelationshipGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSupplyChainRelationshipGeneralDatum.(*[]*DataPlatformSupplyChainRelationshipGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSupplyChainRelationshipGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSupplyChainRelationshipGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSupplyChainRelationshipGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSupplyChainRelationshipGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_supply_chain_relationship_delivery_relation_data`),
		qm.WhereIn(`data_platform_supply_chain_relationship_delivery_relation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_supply_chain_relationship_delivery_relation_data")
	}

	var resultSlice []*DataPlatformSupplyChainRelationshipDeliveryRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_supply_chain_relationship_delivery_relation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_supply_chain_relationship_delivery_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_supply_chain_relationship_delivery_relation_data")
	}

	if singular {
		object.R.BuyerDataPlatformSupplyChainRelationshipDeliveryRelationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSupplyChainRelationshipDeliveryRelationData = append(local.R.BuyerDataPlatformSupplyChainRelationshipDeliveryRelationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSupplyChainRelationshipTransactionData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSupplyChainRelationshipGeneralDatumL) LoadBuyerDataPlatformSupplyChainRelationshipTransactionData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSupplyChainRelationshipGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSupplyChainRelationshipGeneralDatum
	var object *DataPlatformSupplyChainRelationshipGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSupplyChainRelationshipGeneralDatum.(*DataPlatformSupplyChainRelationshipGeneralDatum)
		if !ok {
			object = new(DataPlatformSupplyChainRelationshipGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSupplyChainRelationshipGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSupplyChainRelationshipGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSupplyChainRelationshipGeneralDatum.(*[]*DataPlatformSupplyChainRelationshipGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSupplyChainRelationshipGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSupplyChainRelationshipGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSupplyChainRelationshipGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSupplyChainRelationshipGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_supply_chain_relationship_transaction_data`),
		qm.WhereIn(`data_platform_supply_chain_relationship_transaction_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_supply_chain_relationship_transaction_data")
	}

	var resultSlice []*DataPlatformSupplyChainRelationshipTransactionDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_supply_chain_relationship_transaction_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_supply_chain_relationship_transaction_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_supply_chain_relationship_transaction_data")
	}

	if singular {
		object.R.BuyerDataPlatformSupplyChainRelationshipTransactionData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSupplyChainRelationshipTransactionData = append(local.R.BuyerDataPlatformSupplyChainRelationshipTransactionData, foreign)
				break
			}
		}
	}

	return nil
}

// SetBuyerDataPlatformBusinessPartnerGeneralDatum of the dataPlatformSupplyChainRelationshipGeneralDatum to the related item.
// Sets o.R.BuyerDataPlatformBusinessPartnerGeneralDatum to related.
func (o *DataPlatformSupplyChainRelationshipGeneralDatum) SetBuyerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_supply_chain_relationship_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSupplyChainRelationshipGeneralDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.SupplyChainRelationshipID, o.Buyer, o.Seller}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformSupplyChainRelationshipGeneralDatumR{
			BuyerDataPlatformBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformBusinessPartnerGeneralDatum = related
	}

	return nil
}

// SetSellerDataPlatformBusinessPartnerGeneralDatum of the dataPlatformSupplyChainRelationshipGeneralDatum to the related item.
// Sets o.R.SellerDataPlatformBusinessPartnerGeneralDatum to related.
func (o *DataPlatformSupplyChainRelationshipGeneralDatum) SetSellerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_supply_chain_relationship_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Seller"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSupplyChainRelationshipGeneralDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.SupplyChainRelationshipID, o.Buyer, o.Seller}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Seller = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformSupplyChainRelationshipGeneralDatumR{
			SellerDataPlatformBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.SellerDataPlatformBusinessPartnerGeneralDatum = related
	}

	return nil
}

// AddBuyerDataPlatformBillOfMaterialHeaderData adds the given related objects to the existing relationships
// of the data_platform_supply_chain_relationship_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformBillOfMaterialHeaderData.
func (o *DataPlatformSupplyChainRelationshipGeneralDatum) AddBuyerDataPlatformBillOfMaterialHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBillOfMaterialHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_bill_of_material_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBillOfMaterialHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.BillOfMaterial}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSupplyChainRelationshipGeneralDatumR{
			BuyerDataPlatformBillOfMaterialHeaderData: related,
		}
	} else {
		o.R.BuyerDataPlatformBillOfMaterialHeaderData = append(o.R.BuyerDataPlatformBillOfMaterialHeaderData, related...)
	}

	return nil
}

// AddComponentProductBuyerDataPlatformBillOfMaterialItemData adds the given related objects to the existing relationships
// of the data_platform_supply_chain_relationship_general_datum, optionally inserting them as new records.
// Appends related to o.R.ComponentProductBuyerDataPlatformBillOfMaterialItemData.
func (o *DataPlatformSupplyChainRelationshipGeneralDatum) AddComponentProductBuyerDataPlatformBillOfMaterialItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBillOfMaterialItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ComponentProductBuyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_bill_of_material_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ComponentProductBuyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBillOfMaterialItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.BillOfMaterial, rel.BillOfMaterialItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ComponentProductBuyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSupplyChainRelationshipGeneralDatumR{
			ComponentProductBuyerDataPlatformBillOfMaterialItemData: related,
		}
	} else {
		o.R.ComponentProductBuyerDataPlatformBillOfMaterialItemData = append(o.R.ComponentProductBuyerDataPlatformBillOfMaterialItemData, related...)
	}

	return nil
}

// AddBuyerDataPlatformOperationsHeaderData adds the given related objects to the existing relationships
// of the data_platform_supply_chain_relationship_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformOperationsHeaderData.
func (o *DataPlatformSupplyChainRelationshipGeneralDatum) AddBuyerDataPlatformOperationsHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOperationsHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_operations_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOperationsHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.Operations}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSupplyChainRelationshipGeneralDatumR{
			BuyerDataPlatformOperationsHeaderData: related,
		}
	} else {
		o.R.BuyerDataPlatformOperationsHeaderData = append(o.R.BuyerDataPlatformOperationsHeaderData, related...)
	}

	return nil
}

// AddBuyerDataPlatformOperationsItemData adds the given related objects to the existing relationships
// of the data_platform_supply_chain_relationship_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformOperationsItemData.
func (o *DataPlatformSupplyChainRelationshipGeneralDatum) AddBuyerDataPlatformOperationsItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOperationsItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_operations_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOperationsItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.Operations, rel.OperationsItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSupplyChainRelationshipGeneralDatumR{
			BuyerDataPlatformOperationsItemData: related,
		}
	} else {
		o.R.BuyerDataPlatformOperationsItemData = append(o.R.BuyerDataPlatformOperationsItemData, related...)
	}

	return nil
}

// AddBillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData adds the given related objects to the existing relationships
// of the data_platform_supply_chain_relationship_general_datum, optionally inserting them as new records.
// Appends related to o.R.BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData.
func (o *DataPlatformSupplyChainRelationshipGeneralDatum) AddBillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSupplyChainRelationshipBillingRelationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_supply_chain_relationship_billing_relation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSupplyChainRelationshipBillingRelationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipBillingID, rel.Buyer, rel.Seller, rel.BillToParty, rel.BillFromParty}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSupplyChainRelationshipGeneralDatumR{
			BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData: related,
		}
	} else {
		o.R.BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData = append(o.R.BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData, related...)
	}

	return nil
}

// AddBuyerDataPlatformSupplyChainRelationshipDeliveryRelationData adds the given related objects to the existing relationships
// of the data_platform_supply_chain_relationship_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformSupplyChainRelationshipDeliveryRelationData.
func (o *DataPlatformSupplyChainRelationshipGeneralDatum) AddBuyerDataPlatformSupplyChainRelationshipDeliveryRelationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSupplyChainRelationshipDeliveryRelationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_supply_chain_relationship_delivery_relation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSupplyChainRelationshipDeliveryRelationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipDeliveryID, rel.Buyer, rel.Seller, rel.DeliverToParty, rel.DeliverFromParty}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSupplyChainRelationshipGeneralDatumR{
			BuyerDataPlatformSupplyChainRelationshipDeliveryRelationData: related,
		}
	} else {
		o.R.BuyerDataPlatformSupplyChainRelationshipDeliveryRelationData = append(o.R.BuyerDataPlatformSupplyChainRelationshipDeliveryRelationData, related...)
	}

	return nil
}

// AddBuyerDataPlatformSupplyChainRelationshipTransactionData adds the given related objects to the existing relationships
// of the data_platform_supply_chain_relationship_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformSupplyChainRelationshipTransactionData.
func (o *DataPlatformSupplyChainRelationshipGeneralDatum) AddBuyerDataPlatformSupplyChainRelationshipTransactionData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSupplyChainRelationshipTransactionDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_supply_chain_relationship_transaction_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSupplyChainRelationshipTransactionDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.SupplyChainRelationshipID, rel.Buyer, rel.Seller}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSupplyChainRelationshipGeneralDatumR{
			BuyerDataPlatformSupplyChainRelationshipTransactionData: related,
		}
	} else {
		o.R.BuyerDataPlatformSupplyChainRelationshipTransactionData = append(o.R.BuyerDataPlatformSupplyChainRelationshipTransactionData, related...)
	}

	return nil
}

// DataPlatformSupplyChainRelationshipGeneralData retrieves all the records using an executor.
func DataPlatformSupplyChainRelationshipGeneralData(mods ...qm.QueryMod) dataPlatformSupplyChainRelationshipGeneralDatumQuery {
	mods = append(mods, qm.From("`data_platform_supply_chain_relationship_general_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_supply_chain_relationship_general_data`.*"})
	}

	return dataPlatformSupplyChainRelationshipGeneralDatumQuery{q}
}

// FindDataPlatformSupplyChainRelationshipGeneralDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformSupplyChainRelationshipGeneralDatum(ctx context.Context, exec boil.ContextExecutor, supplyChainRelationshipID int, buyer int, seller int, selectCols ...string) (*DataPlatformSupplyChainRelationshipGeneralDatum, error) {
	dataPlatformSupplyChainRelationshipGeneralDatumObj := &DataPlatformSupplyChainRelationshipGeneralDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_supply_chain_relationship_general_data` where `SupplyChainRelationshipID`=? AND `Buyer`=? AND `Seller`=?", sel,
	)

	q := queries.Raw(query, supplyChainRelationshipID, buyer, seller)

	err := q.Bind(ctx, exec, dataPlatformSupplyChainRelationshipGeneralDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_supply_chain_relationship_general_data")
	}

	return dataPlatformSupplyChainRelationshipGeneralDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformSupplyChainRelationshipGeneralDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_supply_chain_relationship_general_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformSupplyChainRelationshipGeneralDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformSupplyChainRelationshipGeneralDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformSupplyChainRelationshipGeneralDatumInsertCache[key]
	dataPlatformSupplyChainRelationshipGeneralDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformSupplyChainRelationshipGeneralDatumAllColumns,
			dataPlatformSupplyChainRelationshipGeneralDatumColumnsWithDefault,
			dataPlatformSupplyChainRelationshipGeneralDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformSupplyChainRelationshipGeneralDatumType, dataPlatformSupplyChainRelationshipGeneralDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformSupplyChainRelationshipGeneralDatumType, dataPlatformSupplyChainRelationshipGeneralDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_supply_chain_relationship_general_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_supply_chain_relationship_general_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_supply_chain_relationship_general_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformSupplyChainRelationshipGeneralDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_supply_chain_relationship_general_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SupplyChainRelationshipID,
		o.Buyer,
		o.Seller,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_supply_chain_relationship_general_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformSupplyChainRelationshipGeneralDatumInsertCacheMut.Lock()
		dataPlatformSupplyChainRelationshipGeneralDatumInsertCache[key] = cache
		dataPlatformSupplyChainRelationshipGeneralDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformSupplyChainRelationshipGeneralDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformSupplyChainRelationshipGeneralDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformSupplyChainRelationshipGeneralDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformSupplyChainRelationshipGeneralDatumUpdateCache[key]
	dataPlatformSupplyChainRelationshipGeneralDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformSupplyChainRelationshipGeneralDatumAllColumns,
			dataPlatformSupplyChainRelationshipGeneralDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_supply_chain_relationship_general_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_supply_chain_relationship_general_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformSupplyChainRelationshipGeneralDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformSupplyChainRelationshipGeneralDatumType, dataPlatformSupplyChainRelationshipGeneralDatumMapping, append(wl, dataPlatformSupplyChainRelationshipGeneralDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_supply_chain_relationship_general_data row")
	}

	if !cached {
		dataPlatformSupplyChainRelationshipGeneralDatumUpdateCacheMut.Lock()
		dataPlatformSupplyChainRelationshipGeneralDatumUpdateCache[key] = cache
		dataPlatformSupplyChainRelationshipGeneralDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformSupplyChainRelationshipGeneralDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_supply_chain_relationship_general_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformSupplyChainRelationshipGeneralDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSupplyChainRelationshipGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_supply_chain_relationship_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSupplyChainRelationshipGeneralDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformSupplyChainRelationshipGeneralDatum slice")
	}

	return nil
}

var mySQLDataPlatformSupplyChainRelationshipGeneralDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformSupplyChainRelationshipGeneralDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_supply_chain_relationship_general_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformSupplyChainRelationshipGeneralDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformSupplyChainRelationshipGeneralDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformSupplyChainRelationshipGeneralDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformSupplyChainRelationshipGeneralDatumUpsertCache[key]
	dataPlatformSupplyChainRelationshipGeneralDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformSupplyChainRelationshipGeneralDatumAllColumns,
			dataPlatformSupplyChainRelationshipGeneralDatumColumnsWithDefault,
			dataPlatformSupplyChainRelationshipGeneralDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformSupplyChainRelationshipGeneralDatumAllColumns,
			dataPlatformSupplyChainRelationshipGeneralDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_supply_chain_relationship_general_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_supply_chain_relationship_general_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_supply_chain_relationship_general_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformSupplyChainRelationshipGeneralDatumType, dataPlatformSupplyChainRelationshipGeneralDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformSupplyChainRelationshipGeneralDatumType, dataPlatformSupplyChainRelationshipGeneralDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_supply_chain_relationship_general_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformSupplyChainRelationshipGeneralDatumType, dataPlatformSupplyChainRelationshipGeneralDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_supply_chain_relationship_general_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_supply_chain_relationship_general_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformSupplyChainRelationshipGeneralDatumUpsertCacheMut.Lock()
		dataPlatformSupplyChainRelationshipGeneralDatumUpsertCache[key] = cache
		dataPlatformSupplyChainRelationshipGeneralDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformSupplyChainRelationshipGeneralDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformSupplyChainRelationshipGeneralDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformSupplyChainRelationshipGeneralDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformSupplyChainRelationshipGeneralDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_supply_chain_relationship_general_data` WHERE `SupplyChainRelationshipID`=? AND `Buyer`=? AND `Seller`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_supply_chain_relationship_general_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformSupplyChainRelationshipGeneralDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformSupplyChainRelationshipGeneralDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_supply_chain_relationship_general_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformSupplyChainRelationshipGeneralDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSupplyChainRelationshipGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_supply_chain_relationship_general_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSupplyChainRelationshipGeneralDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformSupplyChainRelationshipGeneralDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformSupplyChainRelationshipGeneralDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformSupplyChainRelationshipGeneralDatum(ctx, exec, o.SupplyChainRelationshipID, o.Buyer, o.Seller)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformSupplyChainRelationshipGeneralDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformSupplyChainRelationshipGeneralDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSupplyChainRelationshipGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_supply_chain_relationship_general_data`.* FROM `data_platform_supply_chain_relationship_general_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSupplyChainRelationshipGeneralDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformSupplyChainRelationshipGeneralDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformSupplyChainRelationshipGeneralDatumExists checks if the DataPlatformSupplyChainRelationshipGeneralDatum row exists.
func DataPlatformSupplyChainRelationshipGeneralDatumExists(ctx context.Context, exec boil.ContextExecutor, supplyChainRelationshipID int, buyer int, seller int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_supply_chain_relationship_general_data` where `SupplyChainRelationshipID`=? AND `Buyer`=? AND `Seller`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, supplyChainRelationshipID, buyer, seller)
	}
	row := exec.QueryRowContext(ctx, sql, supplyChainRelationshipID, buyer, seller)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_supply_chain_relationship_general_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformSupplyChainRelationshipGeneralDatum row exists.
func (o *DataPlatformSupplyChainRelationshipGeneralDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformSupplyChainRelationshipGeneralDatumExists(ctx, exec, o.SupplyChainRelationshipID, o.Buyer, o.Seller)
}
