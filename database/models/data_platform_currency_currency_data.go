// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformCurrencyCurrencyDatum is an object representing the database table.
type DataPlatformCurrencyCurrencyDatum struct {
	Currency string `boil:"Currency" json:"Currency" toml:"Currency" yaml:"Currency"`

	R *dataPlatformCurrencyCurrencyDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformCurrencyCurrencyDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformCurrencyCurrencyDatumColumns = struct {
	Currency string
}{
	Currency: "Currency",
}

var DataPlatformCurrencyCurrencyDatumTableColumns = struct {
	Currency string
}{
	Currency: "data_platform_currency_currency_data.Currency",
}

// Generated where

var DataPlatformCurrencyCurrencyDatumWhere = struct {
	Currency whereHelperstring
}{
	Currency: whereHelperstring{field: "`data_platform_currency_currency_data`.`Currency`"},
}

// DataPlatformCurrencyCurrencyDatumRels is where relationship names are stored.
var DataPlatformCurrencyCurrencyDatumRels = struct {
	CurrencyDataPlatformBusinessPartnerGeneralData            string
	CurrencyDataPlatformCurrencyCurrencyTextData              string
	TransactionCurrencyDataPlatformDeliveryDocumentHeaderData string
	TransactionCurrencyDataPlatformOrdersHeaderData           string
	ConditionCurrencyDataPlatformPriceMasterPriceMasterData   string
	TransactionCurrencyDataPlatformSCRTransactionData         string
}{
	CurrencyDataPlatformBusinessPartnerGeneralData:            "CurrencyDataPlatformBusinessPartnerGeneralData",
	CurrencyDataPlatformCurrencyCurrencyTextData:              "CurrencyDataPlatformCurrencyCurrencyTextData",
	TransactionCurrencyDataPlatformDeliveryDocumentHeaderData: "TransactionCurrencyDataPlatformDeliveryDocumentHeaderData",
	TransactionCurrencyDataPlatformOrdersHeaderData:           "TransactionCurrencyDataPlatformOrdersHeaderData",
	ConditionCurrencyDataPlatformPriceMasterPriceMasterData:   "ConditionCurrencyDataPlatformPriceMasterPriceMasterData",
	TransactionCurrencyDataPlatformSCRTransactionData:         "TransactionCurrencyDataPlatformSCRTransactionData",
}

// dataPlatformCurrencyCurrencyDatumR is where relationships are stored.
type dataPlatformCurrencyCurrencyDatumR struct {
	CurrencyDataPlatformBusinessPartnerGeneralData            DataPlatformBusinessPartnerGeneralDatumSlice `boil:"CurrencyDataPlatformBusinessPartnerGeneralData" json:"CurrencyDataPlatformBusinessPartnerGeneralData" toml:"CurrencyDataPlatformBusinessPartnerGeneralData" yaml:"CurrencyDataPlatformBusinessPartnerGeneralData"`
	CurrencyDataPlatformCurrencyCurrencyTextData              DataPlatformCurrencyCurrencyTextDatumSlice   `boil:"CurrencyDataPlatformCurrencyCurrencyTextData" json:"CurrencyDataPlatformCurrencyCurrencyTextData" toml:"CurrencyDataPlatformCurrencyCurrencyTextData" yaml:"CurrencyDataPlatformCurrencyCurrencyTextData"`
	TransactionCurrencyDataPlatformDeliveryDocumentHeaderData DataPlatformDeliveryDocumentHeaderDatumSlice `boil:"TransactionCurrencyDataPlatformDeliveryDocumentHeaderData" json:"TransactionCurrencyDataPlatformDeliveryDocumentHeaderData" toml:"TransactionCurrencyDataPlatformDeliveryDocumentHeaderData" yaml:"TransactionCurrencyDataPlatformDeliveryDocumentHeaderData"`
	TransactionCurrencyDataPlatformOrdersHeaderData           DataPlatformOrdersHeaderDatumSlice           `boil:"TransactionCurrencyDataPlatformOrdersHeaderData" json:"TransactionCurrencyDataPlatformOrdersHeaderData" toml:"TransactionCurrencyDataPlatformOrdersHeaderData" yaml:"TransactionCurrencyDataPlatformOrdersHeaderData"`
	ConditionCurrencyDataPlatformPriceMasterPriceMasterData   DataPlatformPriceMasterPriceMasterDatumSlice `boil:"ConditionCurrencyDataPlatformPriceMasterPriceMasterData" json:"ConditionCurrencyDataPlatformPriceMasterPriceMasterData" toml:"ConditionCurrencyDataPlatformPriceMasterPriceMasterData" yaml:"ConditionCurrencyDataPlatformPriceMasterPriceMasterData"`
	TransactionCurrencyDataPlatformSCRTransactionData         DataPlatformSCRTransactionDatumSlice         `boil:"TransactionCurrencyDataPlatformSCRTransactionData" json:"TransactionCurrencyDataPlatformSCRTransactionData" toml:"TransactionCurrencyDataPlatformSCRTransactionData" yaml:"TransactionCurrencyDataPlatformSCRTransactionData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformCurrencyCurrencyDatumR) NewStruct() *dataPlatformCurrencyCurrencyDatumR {
	return &dataPlatformCurrencyCurrencyDatumR{}
}

func (r *dataPlatformCurrencyCurrencyDatumR) GetCurrencyDataPlatformBusinessPartnerGeneralData() DataPlatformBusinessPartnerGeneralDatumSlice {
	if r == nil {
		return nil
	}
	return r.CurrencyDataPlatformBusinessPartnerGeneralData
}

func (r *dataPlatformCurrencyCurrencyDatumR) GetCurrencyDataPlatformCurrencyCurrencyTextData() DataPlatformCurrencyCurrencyTextDatumSlice {
	if r == nil {
		return nil
	}
	return r.CurrencyDataPlatformCurrencyCurrencyTextData
}

func (r *dataPlatformCurrencyCurrencyDatumR) GetTransactionCurrencyDataPlatformDeliveryDocumentHeaderData() DataPlatformDeliveryDocumentHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.TransactionCurrencyDataPlatformDeliveryDocumentHeaderData
}

func (r *dataPlatformCurrencyCurrencyDatumR) GetTransactionCurrencyDataPlatformOrdersHeaderData() DataPlatformOrdersHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.TransactionCurrencyDataPlatformOrdersHeaderData
}

func (r *dataPlatformCurrencyCurrencyDatumR) GetConditionCurrencyDataPlatformPriceMasterPriceMasterData() DataPlatformPriceMasterPriceMasterDatumSlice {
	if r == nil {
		return nil
	}
	return r.ConditionCurrencyDataPlatformPriceMasterPriceMasterData
}

func (r *dataPlatformCurrencyCurrencyDatumR) GetTransactionCurrencyDataPlatformSCRTransactionData() DataPlatformSCRTransactionDatumSlice {
	if r == nil {
		return nil
	}
	return r.TransactionCurrencyDataPlatformSCRTransactionData
}

// dataPlatformCurrencyCurrencyDatumL is where Load methods for each relationship are stored.
type dataPlatformCurrencyCurrencyDatumL struct{}

var (
	dataPlatformCurrencyCurrencyDatumAllColumns            = []string{"Currency"}
	dataPlatformCurrencyCurrencyDatumColumnsWithoutDefault = []string{"Currency"}
	dataPlatformCurrencyCurrencyDatumColumnsWithDefault    = []string{}
	dataPlatformCurrencyCurrencyDatumPrimaryKeyColumns     = []string{"Currency"}
	dataPlatformCurrencyCurrencyDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformCurrencyCurrencyDatumSlice is an alias for a slice of pointers to DataPlatformCurrencyCurrencyDatum.
	// This should almost always be used instead of []DataPlatformCurrencyCurrencyDatum.
	DataPlatformCurrencyCurrencyDatumSlice []*DataPlatformCurrencyCurrencyDatum

	dataPlatformCurrencyCurrencyDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformCurrencyCurrencyDatumType                 = reflect.TypeOf(&DataPlatformCurrencyCurrencyDatum{})
	dataPlatformCurrencyCurrencyDatumMapping              = queries.MakeStructMapping(dataPlatformCurrencyCurrencyDatumType)
	dataPlatformCurrencyCurrencyDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformCurrencyCurrencyDatumType, dataPlatformCurrencyCurrencyDatumMapping, dataPlatformCurrencyCurrencyDatumPrimaryKeyColumns)
	dataPlatformCurrencyCurrencyDatumInsertCacheMut       sync.RWMutex
	dataPlatformCurrencyCurrencyDatumInsertCache          = make(map[string]insertCache)
	dataPlatformCurrencyCurrencyDatumUpdateCacheMut       sync.RWMutex
	dataPlatformCurrencyCurrencyDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformCurrencyCurrencyDatumUpsertCacheMut       sync.RWMutex
	dataPlatformCurrencyCurrencyDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformCurrencyCurrencyDatum record from the query.
func (q dataPlatformCurrencyCurrencyDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformCurrencyCurrencyDatum, error) {
	o := &DataPlatformCurrencyCurrencyDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_currency_currency_data")
	}

	return o, nil
}

// All returns all DataPlatformCurrencyCurrencyDatum records from the query.
func (q dataPlatformCurrencyCurrencyDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformCurrencyCurrencyDatumSlice, error) {
	var o []*DataPlatformCurrencyCurrencyDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformCurrencyCurrencyDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformCurrencyCurrencyDatum records in the query.
func (q dataPlatformCurrencyCurrencyDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_currency_currency_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformCurrencyCurrencyDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_currency_currency_data exists")
	}

	return count > 0, nil
}

// CurrencyDataPlatformBusinessPartnerGeneralData retrieves all the data_platform_business_partner_general_datum's DataPlatformBusinessPartnerGeneralData with an executor via Currency column.
func (o *DataPlatformCurrencyCurrencyDatum) CurrencyDataPlatformBusinessPartnerGeneralData(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_business_partner_general_data`.`Currency`=?", o.Currency),
	)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// CurrencyDataPlatformCurrencyCurrencyTextData retrieves all the data_platform_currency_currency_text_datum's DataPlatformCurrencyCurrencyTextData with an executor via Currency column.
func (o *DataPlatformCurrencyCurrencyDatum) CurrencyDataPlatformCurrencyCurrencyTextData(mods ...qm.QueryMod) dataPlatformCurrencyCurrencyTextDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_currency_currency_text_data`.`Currency`=?", o.Currency),
	)

	return DataPlatformCurrencyCurrencyTextData(queryMods...)
}

// TransactionCurrencyDataPlatformDeliveryDocumentHeaderData retrieves all the data_platform_delivery_document_header_datum's DataPlatformDeliveryDocumentHeaderData with an executor via TransactionCurrency column.
func (o *DataPlatformCurrencyCurrencyDatum) TransactionCurrencyDataPlatformDeliveryDocumentHeaderData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_header_data`.`TransactionCurrency`=?", o.Currency),
	)

	return DataPlatformDeliveryDocumentHeaderData(queryMods...)
}

// TransactionCurrencyDataPlatformOrdersHeaderData retrieves all the data_platform_orders_header_datum's DataPlatformOrdersHeaderData with an executor via TransactionCurrency column.
func (o *DataPlatformCurrencyCurrencyDatum) TransactionCurrencyDataPlatformOrdersHeaderData(mods ...qm.QueryMod) dataPlatformOrdersHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_header_data`.`TransactionCurrency`=?", o.Currency),
	)

	return DataPlatformOrdersHeaderData(queryMods...)
}

// ConditionCurrencyDataPlatformPriceMasterPriceMasterData retrieves all the data_platform_price_master_price_master_datum's DataPlatformPriceMasterPriceMasterData with an executor via ConditionCurrency column.
func (o *DataPlatformCurrencyCurrencyDatum) ConditionCurrencyDataPlatformPriceMasterPriceMasterData(mods ...qm.QueryMod) dataPlatformPriceMasterPriceMasterDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_price_master_price_master_data`.`ConditionCurrency`=?", o.Currency),
	)

	return DataPlatformPriceMasterPriceMasterData(queryMods...)
}

// TransactionCurrencyDataPlatformSCRTransactionData retrieves all the data_platform_scr_transaction_datum's DataPlatformSCRTransactionData with an executor via TransactionCurrency column.
func (o *DataPlatformCurrencyCurrencyDatum) TransactionCurrencyDataPlatformSCRTransactionData(mods ...qm.QueryMod) dataPlatformSCRTransactionDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_transaction_data`.`TransactionCurrency`=?", o.Currency),
	)

	return DataPlatformSCRTransactionData(queryMods...)
}

// LoadCurrencyDataPlatformBusinessPartnerGeneralData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformCurrencyCurrencyDatumL) LoadCurrencyDataPlatformBusinessPartnerGeneralData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCurrencyCurrencyDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCurrencyCurrencyDatum
	var object *DataPlatformCurrencyCurrencyDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCurrencyCurrencyDatum.(*DataPlatformCurrencyCurrencyDatum)
		if !ok {
			object = new(DataPlatformCurrencyCurrencyDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCurrencyCurrencyDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCurrencyCurrencyDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCurrencyCurrencyDatum.(*[]*DataPlatformCurrencyCurrencyDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCurrencyCurrencyDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCurrencyCurrencyDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCurrencyCurrencyDatumR{}
		}
		args = append(args, object.Currency)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCurrencyCurrencyDatumR{}
			}

			for _, a := range args {
				if a == obj.Currency {
					continue Outer
				}
			}

			args = append(args, obj.Currency)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.Currency in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_business_partner_general_data")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_business_partner_general_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if singular {
		object.R.CurrencyDataPlatformBusinessPartnerGeneralData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Currency == foreign.Currency {
				local.R.CurrencyDataPlatformBusinessPartnerGeneralData = append(local.R.CurrencyDataPlatformBusinessPartnerGeneralData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadCurrencyDataPlatformCurrencyCurrencyTextData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformCurrencyCurrencyDatumL) LoadCurrencyDataPlatformCurrencyCurrencyTextData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCurrencyCurrencyDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCurrencyCurrencyDatum
	var object *DataPlatformCurrencyCurrencyDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCurrencyCurrencyDatum.(*DataPlatformCurrencyCurrencyDatum)
		if !ok {
			object = new(DataPlatformCurrencyCurrencyDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCurrencyCurrencyDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCurrencyCurrencyDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCurrencyCurrencyDatum.(*[]*DataPlatformCurrencyCurrencyDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCurrencyCurrencyDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCurrencyCurrencyDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCurrencyCurrencyDatumR{}
		}
		args = append(args, object.Currency)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCurrencyCurrencyDatumR{}
			}

			for _, a := range args {
				if a == obj.Currency {
					continue Outer
				}
			}

			args = append(args, obj.Currency)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_currency_currency_text_data`),
		qm.WhereIn(`data_platform_currency_currency_text_data.Currency in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_currency_currency_text_data")
	}

	var resultSlice []*DataPlatformCurrencyCurrencyTextDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_currency_currency_text_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_currency_currency_text_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_currency_currency_text_data")
	}

	if singular {
		object.R.CurrencyDataPlatformCurrencyCurrencyTextData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Currency == foreign.Currency {
				local.R.CurrencyDataPlatformCurrencyCurrencyTextData = append(local.R.CurrencyDataPlatformCurrencyCurrencyTextData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadTransactionCurrencyDataPlatformDeliveryDocumentHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformCurrencyCurrencyDatumL) LoadTransactionCurrencyDataPlatformDeliveryDocumentHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCurrencyCurrencyDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCurrencyCurrencyDatum
	var object *DataPlatformCurrencyCurrencyDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCurrencyCurrencyDatum.(*DataPlatformCurrencyCurrencyDatum)
		if !ok {
			object = new(DataPlatformCurrencyCurrencyDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCurrencyCurrencyDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCurrencyCurrencyDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCurrencyCurrencyDatum.(*[]*DataPlatformCurrencyCurrencyDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCurrencyCurrencyDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCurrencyCurrencyDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCurrencyCurrencyDatumR{}
		}
		args = append(args, object.Currency)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCurrencyCurrencyDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Currency) {
					continue Outer
				}
			}

			args = append(args, obj.Currency)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_header_data`),
		qm.WhereIn(`data_platform_delivery_document_header_data.TransactionCurrency in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_header_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_header_data")
	}

	if singular {
		object.R.TransactionCurrencyDataPlatformDeliveryDocumentHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Currency, foreign.TransactionCurrency) {
				local.R.TransactionCurrencyDataPlatformDeliveryDocumentHeaderData = append(local.R.TransactionCurrencyDataPlatformDeliveryDocumentHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadTransactionCurrencyDataPlatformOrdersHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformCurrencyCurrencyDatumL) LoadTransactionCurrencyDataPlatformOrdersHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCurrencyCurrencyDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCurrencyCurrencyDatum
	var object *DataPlatformCurrencyCurrencyDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCurrencyCurrencyDatum.(*DataPlatformCurrencyCurrencyDatum)
		if !ok {
			object = new(DataPlatformCurrencyCurrencyDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCurrencyCurrencyDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCurrencyCurrencyDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCurrencyCurrencyDatum.(*[]*DataPlatformCurrencyCurrencyDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCurrencyCurrencyDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCurrencyCurrencyDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCurrencyCurrencyDatumR{}
		}
		args = append(args, object.Currency)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCurrencyCurrencyDatumR{}
			}

			for _, a := range args {
				if a == obj.Currency {
					continue Outer
				}
			}

			args = append(args, obj.Currency)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_header_data`),
		qm.WhereIn(`data_platform_orders_header_data.TransactionCurrency in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_header_data")
	}

	var resultSlice []*DataPlatformOrdersHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_header_data")
	}

	if singular {
		object.R.TransactionCurrencyDataPlatformOrdersHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Currency == foreign.TransactionCurrency {
				local.R.TransactionCurrencyDataPlatformOrdersHeaderData = append(local.R.TransactionCurrencyDataPlatformOrdersHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadConditionCurrencyDataPlatformPriceMasterPriceMasterData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformCurrencyCurrencyDatumL) LoadConditionCurrencyDataPlatformPriceMasterPriceMasterData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCurrencyCurrencyDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCurrencyCurrencyDatum
	var object *DataPlatformCurrencyCurrencyDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCurrencyCurrencyDatum.(*DataPlatformCurrencyCurrencyDatum)
		if !ok {
			object = new(DataPlatformCurrencyCurrencyDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCurrencyCurrencyDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCurrencyCurrencyDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCurrencyCurrencyDatum.(*[]*DataPlatformCurrencyCurrencyDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCurrencyCurrencyDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCurrencyCurrencyDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCurrencyCurrencyDatumR{}
		}
		args = append(args, object.Currency)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCurrencyCurrencyDatumR{}
			}

			for _, a := range args {
				if a == obj.Currency {
					continue Outer
				}
			}

			args = append(args, obj.Currency)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_price_master_price_master_data`),
		qm.WhereIn(`data_platform_price_master_price_master_data.ConditionCurrency in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_price_master_price_master_data")
	}

	var resultSlice []*DataPlatformPriceMasterPriceMasterDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_price_master_price_master_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_price_master_price_master_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_price_master_price_master_data")
	}

	if singular {
		object.R.ConditionCurrencyDataPlatformPriceMasterPriceMasterData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Currency == foreign.ConditionCurrency {
				local.R.ConditionCurrencyDataPlatformPriceMasterPriceMasterData = append(local.R.ConditionCurrencyDataPlatformPriceMasterPriceMasterData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadTransactionCurrencyDataPlatformSCRTransactionData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformCurrencyCurrencyDatumL) LoadTransactionCurrencyDataPlatformSCRTransactionData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCurrencyCurrencyDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCurrencyCurrencyDatum
	var object *DataPlatformCurrencyCurrencyDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCurrencyCurrencyDatum.(*DataPlatformCurrencyCurrencyDatum)
		if !ok {
			object = new(DataPlatformCurrencyCurrencyDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCurrencyCurrencyDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCurrencyCurrencyDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCurrencyCurrencyDatum.(*[]*DataPlatformCurrencyCurrencyDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCurrencyCurrencyDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCurrencyCurrencyDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCurrencyCurrencyDatumR{}
		}
		args = append(args, object.Currency)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCurrencyCurrencyDatumR{}
			}

			for _, a := range args {
				if a == obj.Currency {
					continue Outer
				}
			}

			args = append(args, obj.Currency)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_transaction_data`),
		qm.WhereIn(`data_platform_scr_transaction_data.TransactionCurrency in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_transaction_data")
	}

	var resultSlice []*DataPlatformSCRTransactionDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_transaction_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_transaction_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_transaction_data")
	}

	if singular {
		object.R.TransactionCurrencyDataPlatformSCRTransactionData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Currency == foreign.TransactionCurrency {
				local.R.TransactionCurrencyDataPlatformSCRTransactionData = append(local.R.TransactionCurrencyDataPlatformSCRTransactionData, foreign)
				break
			}
		}
	}

	return nil
}

// AddCurrencyDataPlatformBusinessPartnerGeneralData adds the given related objects to the existing relationships
// of the data_platform_currency_currency_datum, optionally inserting them as new records.
// Appends related to o.R.CurrencyDataPlatformBusinessPartnerGeneralData.
func (o *DataPlatformCurrencyCurrencyDatum) AddCurrencyDataPlatformBusinessPartnerGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Currency = o.Currency
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_business_partner_general_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Currency"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Currency, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Currency = o.Currency
		}
	}

	if o.R == nil {
		o.R = &dataPlatformCurrencyCurrencyDatumR{
			CurrencyDataPlatformBusinessPartnerGeneralData: related,
		}
	} else {
		o.R.CurrencyDataPlatformBusinessPartnerGeneralData = append(o.R.CurrencyDataPlatformBusinessPartnerGeneralData, related...)
	}

	return nil
}

// AddCurrencyDataPlatformCurrencyCurrencyTextData adds the given related objects to the existing relationships
// of the data_platform_currency_currency_datum, optionally inserting them as new records.
// Appends related to o.R.CurrencyDataPlatformCurrencyCurrencyTextData.
func (o *DataPlatformCurrencyCurrencyDatum) AddCurrencyDataPlatformCurrencyCurrencyTextData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformCurrencyCurrencyTextDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Currency = o.Currency
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_currency_currency_text_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Currency"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformCurrencyCurrencyTextDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Currency, rel.Currency, rel.Language}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Currency = o.Currency
		}
	}

	if o.R == nil {
		o.R = &dataPlatformCurrencyCurrencyDatumR{
			CurrencyDataPlatformCurrencyCurrencyTextData: related,
		}
	} else {
		o.R.CurrencyDataPlatformCurrencyCurrencyTextData = append(o.R.CurrencyDataPlatformCurrencyCurrencyTextData, related...)
	}

	return nil
}

// AddTransactionCurrencyDataPlatformDeliveryDocumentHeaderData adds the given related objects to the existing relationships
// of the data_platform_currency_currency_datum, optionally inserting them as new records.
// Appends related to o.R.TransactionCurrencyDataPlatformDeliveryDocumentHeaderData.
func (o *DataPlatformCurrencyCurrencyDatum) AddTransactionCurrencyDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TransactionCurrency, o.Currency)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"TransactionCurrency"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Currency, rel.DeliveryDocument}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TransactionCurrency, o.Currency)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformCurrencyCurrencyDatumR{
			TransactionCurrencyDataPlatformDeliveryDocumentHeaderData: related,
		}
	} else {
		o.R.TransactionCurrencyDataPlatformDeliveryDocumentHeaderData = append(o.R.TransactionCurrencyDataPlatformDeliveryDocumentHeaderData, related...)
	}

	return nil
}

// SetTransactionCurrencyDataPlatformDeliveryDocumentHeaderData removes all previously related items of the
// data_platform_currency_currency_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TransactionCurrencyDataPlatformCurrencyCurrencyDatum's TransactionCurrencyDataPlatformDeliveryDocumentHeaderData accordingly.
// Replaces o.R.TransactionCurrencyDataPlatformDeliveryDocumentHeaderData with related.
func (o *DataPlatformCurrencyCurrencyDatum) SetTransactionCurrencyDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	query := "update `data_platform_delivery_document_header_data` set `TransactionCurrency` = null where `TransactionCurrency` = ?"
	values := []interface{}{o.Currency}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.TransactionCurrencyDataPlatformDeliveryDocumentHeaderData = nil
	}

	return o.AddTransactionCurrencyDataPlatformDeliveryDocumentHeaderData(ctx, exec, insert, related...)
}

// RemoveTransactionCurrencyDataPlatformDeliveryDocumentHeaderData relationships from objects passed in.
// Removes related items from R.TransactionCurrencyDataPlatformDeliveryDocumentHeaderData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformCurrencyCurrencyDatum) RemoveTransactionCurrencyDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TransactionCurrency, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("TransactionCurrency")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.TransactionCurrencyDataPlatformDeliveryDocumentHeaderData {
			if rel != ri {
				continue
			}

			ln := len(o.R.TransactionCurrencyDataPlatformDeliveryDocumentHeaderData)
			if ln > 1 && i < ln-1 {
				o.R.TransactionCurrencyDataPlatformDeliveryDocumentHeaderData[i] = o.R.TransactionCurrencyDataPlatformDeliveryDocumentHeaderData[ln-1]
			}
			o.R.TransactionCurrencyDataPlatformDeliveryDocumentHeaderData = o.R.TransactionCurrencyDataPlatformDeliveryDocumentHeaderData[:ln-1]
			break
		}
	}

	return nil
}

// AddTransactionCurrencyDataPlatformOrdersHeaderData adds the given related objects to the existing relationships
// of the data_platform_currency_currency_datum, optionally inserting them as new records.
// Appends related to o.R.TransactionCurrencyDataPlatformOrdersHeaderData.
func (o *DataPlatformCurrencyCurrencyDatum) AddTransactionCurrencyDataPlatformOrdersHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TransactionCurrency = o.Currency
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"TransactionCurrency"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Currency, rel.OrderID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TransactionCurrency = o.Currency
		}
	}

	if o.R == nil {
		o.R = &dataPlatformCurrencyCurrencyDatumR{
			TransactionCurrencyDataPlatformOrdersHeaderData: related,
		}
	} else {
		o.R.TransactionCurrencyDataPlatformOrdersHeaderData = append(o.R.TransactionCurrencyDataPlatformOrdersHeaderData, related...)
	}

	return nil
}

// AddConditionCurrencyDataPlatformPriceMasterPriceMasterData adds the given related objects to the existing relationships
// of the data_platform_currency_currency_datum, optionally inserting them as new records.
// Appends related to o.R.ConditionCurrencyDataPlatformPriceMasterPriceMasterData.
func (o *DataPlatformCurrencyCurrencyDatum) AddConditionCurrencyDataPlatformPriceMasterPriceMasterData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPriceMasterPriceMasterDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ConditionCurrency = o.Currency
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_price_master_price_master_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ConditionCurrency"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPriceMasterPriceMasterDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Currency, rel.SupplyChainRelationshipID, rel.Buyer, rel.Seller, rel.ConditionRecord, rel.ConditionSequentialNumber, rel.Product, rel.ConditionValidityStartDate, rel.ConditionValidityEndDate}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ConditionCurrency = o.Currency
		}
	}

	if o.R == nil {
		o.R = &dataPlatformCurrencyCurrencyDatumR{
			ConditionCurrencyDataPlatformPriceMasterPriceMasterData: related,
		}
	} else {
		o.R.ConditionCurrencyDataPlatformPriceMasterPriceMasterData = append(o.R.ConditionCurrencyDataPlatformPriceMasterPriceMasterData, related...)
	}

	return nil
}

// AddTransactionCurrencyDataPlatformSCRTransactionData adds the given related objects to the existing relationships
// of the data_platform_currency_currency_datum, optionally inserting them as new records.
// Appends related to o.R.TransactionCurrencyDataPlatformSCRTransactionData.
func (o *DataPlatformCurrencyCurrencyDatum) AddTransactionCurrencyDataPlatformSCRTransactionData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRTransactionDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TransactionCurrency = o.Currency
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_transaction_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"TransactionCurrency"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRTransactionDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Currency, rel.SupplyChainRelationshipID, rel.Buyer, rel.Seller}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TransactionCurrency = o.Currency
		}
	}

	if o.R == nil {
		o.R = &dataPlatformCurrencyCurrencyDatumR{
			TransactionCurrencyDataPlatformSCRTransactionData: related,
		}
	} else {
		o.R.TransactionCurrencyDataPlatformSCRTransactionData = append(o.R.TransactionCurrencyDataPlatformSCRTransactionData, related...)
	}

	return nil
}

// DataPlatformCurrencyCurrencyData retrieves all the records using an executor.
func DataPlatformCurrencyCurrencyData(mods ...qm.QueryMod) dataPlatformCurrencyCurrencyDatumQuery {
	mods = append(mods, qm.From("`data_platform_currency_currency_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_currency_currency_data`.*"})
	}

	return dataPlatformCurrencyCurrencyDatumQuery{q}
}

// FindDataPlatformCurrencyCurrencyDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformCurrencyCurrencyDatum(ctx context.Context, exec boil.ContextExecutor, currency string, selectCols ...string) (*DataPlatformCurrencyCurrencyDatum, error) {
	dataPlatformCurrencyCurrencyDatumObj := &DataPlatformCurrencyCurrencyDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_currency_currency_data` where `Currency`=?", sel,
	)

	q := queries.Raw(query, currency)

	err := q.Bind(ctx, exec, dataPlatformCurrencyCurrencyDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_currency_currency_data")
	}

	return dataPlatformCurrencyCurrencyDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformCurrencyCurrencyDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_currency_currency_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformCurrencyCurrencyDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformCurrencyCurrencyDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformCurrencyCurrencyDatumInsertCache[key]
	dataPlatformCurrencyCurrencyDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformCurrencyCurrencyDatumAllColumns,
			dataPlatformCurrencyCurrencyDatumColumnsWithDefault,
			dataPlatformCurrencyCurrencyDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformCurrencyCurrencyDatumType, dataPlatformCurrencyCurrencyDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformCurrencyCurrencyDatumType, dataPlatformCurrencyCurrencyDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_currency_currency_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_currency_currency_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_currency_currency_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformCurrencyCurrencyDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_currency_currency_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Currency,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_currency_currency_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformCurrencyCurrencyDatumInsertCacheMut.Lock()
		dataPlatformCurrencyCurrencyDatumInsertCache[key] = cache
		dataPlatformCurrencyCurrencyDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformCurrencyCurrencyDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformCurrencyCurrencyDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformCurrencyCurrencyDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformCurrencyCurrencyDatumUpdateCache[key]
	dataPlatformCurrencyCurrencyDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformCurrencyCurrencyDatumAllColumns,
			dataPlatformCurrencyCurrencyDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_currency_currency_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_currency_currency_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformCurrencyCurrencyDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformCurrencyCurrencyDatumType, dataPlatformCurrencyCurrencyDatumMapping, append(wl, dataPlatformCurrencyCurrencyDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_currency_currency_data row")
	}

	if !cached {
		dataPlatformCurrencyCurrencyDatumUpdateCacheMut.Lock()
		dataPlatformCurrencyCurrencyDatumUpdateCache[key] = cache
		dataPlatformCurrencyCurrencyDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformCurrencyCurrencyDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_currency_currency_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformCurrencyCurrencyDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformCurrencyCurrencyDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_currency_currency_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformCurrencyCurrencyDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformCurrencyCurrencyDatum slice")
	}

	return nil
}

var mySQLDataPlatformCurrencyCurrencyDatumUniqueColumns = []string{
	"Currency",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformCurrencyCurrencyDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_currency_currency_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformCurrencyCurrencyDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformCurrencyCurrencyDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformCurrencyCurrencyDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformCurrencyCurrencyDatumUpsertCache[key]
	dataPlatformCurrencyCurrencyDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformCurrencyCurrencyDatumAllColumns,
			dataPlatformCurrencyCurrencyDatumColumnsWithDefault,
			dataPlatformCurrencyCurrencyDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformCurrencyCurrencyDatumAllColumns,
			dataPlatformCurrencyCurrencyDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_currency_currency_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_currency_currency_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_currency_currency_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformCurrencyCurrencyDatumType, dataPlatformCurrencyCurrencyDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformCurrencyCurrencyDatumType, dataPlatformCurrencyCurrencyDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_currency_currency_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformCurrencyCurrencyDatumType, dataPlatformCurrencyCurrencyDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_currency_currency_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_currency_currency_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformCurrencyCurrencyDatumUpsertCacheMut.Lock()
		dataPlatformCurrencyCurrencyDatumUpsertCache[key] = cache
		dataPlatformCurrencyCurrencyDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformCurrencyCurrencyDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformCurrencyCurrencyDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformCurrencyCurrencyDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformCurrencyCurrencyDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_currency_currency_data` WHERE `Currency`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_currency_currency_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformCurrencyCurrencyDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformCurrencyCurrencyDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_currency_currency_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformCurrencyCurrencyDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformCurrencyCurrencyDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_currency_currency_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformCurrencyCurrencyDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformCurrencyCurrencyDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformCurrencyCurrencyDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformCurrencyCurrencyDatum(ctx, exec, o.Currency)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformCurrencyCurrencyDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformCurrencyCurrencyDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformCurrencyCurrencyDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_currency_currency_data`.* FROM `data_platform_currency_currency_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformCurrencyCurrencyDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformCurrencyCurrencyDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformCurrencyCurrencyDatumExists checks if the DataPlatformCurrencyCurrencyDatum row exists.
func DataPlatformCurrencyCurrencyDatumExists(ctx context.Context, exec boil.ContextExecutor, currency string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_currency_currency_data` where `Currency`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, currency)
	}
	row := exec.QueryRowContext(ctx, sql, currency)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_currency_currency_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformCurrencyCurrencyDatum row exists.
func (o *DataPlatformCurrencyCurrencyDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformCurrencyCurrencyDatumExists(ctx, exec, o.Currency)
}
