// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformProductMasterStorageLocationDatum is an object representing the database table.
type DataPlatformProductMasterStorageLocationDatum struct {
	Product              string      `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	BusinessPartner      int         `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	Plant                string      `boil:"Plant" json:"Plant" toml:"Plant" yaml:"Plant"`
	StorageLocation      string      `boil:"StorageLocation" json:"StorageLocation" toml:"StorageLocation" yaml:"StorageLocation"`
	CreationDate         null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	InventoryBlockStatus null.Bool   `boil:"InventoryBlockStatus" json:"InventoryBlockStatus,omitempty" toml:"InventoryBlockStatus" yaml:"InventoryBlockStatus,omitempty"`
	IsMarkedForDeletion  null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformProductMasterStorageLocationDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformProductMasterStorageLocationDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformProductMasterStorageLocationDatumColumns = struct {
	Product              string
	BusinessPartner      string
	Plant                string
	StorageLocation      string
	CreationDate         string
	InventoryBlockStatus string
	IsMarkedForDeletion  string
}{
	Product:              "Product",
	BusinessPartner:      "BusinessPartner",
	Plant:                "Plant",
	StorageLocation:      "StorageLocation",
	CreationDate:         "CreationDate",
	InventoryBlockStatus: "InventoryBlockStatus",
	IsMarkedForDeletion:  "IsMarkedForDeletion",
}

var DataPlatformProductMasterStorageLocationDatumTableColumns = struct {
	Product              string
	BusinessPartner      string
	Plant                string
	StorageLocation      string
	CreationDate         string
	InventoryBlockStatus string
	IsMarkedForDeletion  string
}{
	Product:              "data_platform_product_master_storage_location_data.Product",
	BusinessPartner:      "data_platform_product_master_storage_location_data.BusinessPartner",
	Plant:                "data_platform_product_master_storage_location_data.Plant",
	StorageLocation:      "data_platform_product_master_storage_location_data.StorageLocation",
	CreationDate:         "data_platform_product_master_storage_location_data.CreationDate",
	InventoryBlockStatus: "data_platform_product_master_storage_location_data.InventoryBlockStatus",
	IsMarkedForDeletion:  "data_platform_product_master_storage_location_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformProductMasterStorageLocationDatumWhere = struct {
	Product              whereHelperstring
	BusinessPartner      whereHelperint
	Plant                whereHelperstring
	StorageLocation      whereHelperstring
	CreationDate         whereHelpernull_String
	InventoryBlockStatus whereHelpernull_Bool
	IsMarkedForDeletion  whereHelpernull_Bool
}{
	Product:              whereHelperstring{field: "`data_platform_product_master_storage_location_data`.`Product`"},
	BusinessPartner:      whereHelperint{field: "`data_platform_product_master_storage_location_data`.`BusinessPartner`"},
	Plant:                whereHelperstring{field: "`data_platform_product_master_storage_location_data`.`Plant`"},
	StorageLocation:      whereHelperstring{field: "`data_platform_product_master_storage_location_data`.`StorageLocation`"},
	CreationDate:         whereHelpernull_String{field: "`data_platform_product_master_storage_location_data`.`CreationDate`"},
	InventoryBlockStatus: whereHelpernull_Bool{field: "`data_platform_product_master_storage_location_data`.`InventoryBlockStatus`"},
	IsMarkedForDeletion:  whereHelpernull_Bool{field: "`data_platform_product_master_storage_location_data`.`IsMarkedForDeletion`"},
}

// DataPlatformProductMasterStorageLocationDatumRels is where relationship names are stored.
var DataPlatformProductMasterStorageLocationDatumRels = struct {
}{}

// dataPlatformProductMasterStorageLocationDatumR is where relationships are stored.
type dataPlatformProductMasterStorageLocationDatumR struct {
}

// NewStruct creates a new relationship struct
func (*dataPlatformProductMasterStorageLocationDatumR) NewStruct() *dataPlatformProductMasterStorageLocationDatumR {
	return &dataPlatformProductMasterStorageLocationDatumR{}
}

// dataPlatformProductMasterStorageLocationDatumL is where Load methods for each relationship are stored.
type dataPlatformProductMasterStorageLocationDatumL struct{}

var (
	dataPlatformProductMasterStorageLocationDatumAllColumns            = []string{"Product", "BusinessPartner", "Plant", "StorageLocation", "CreationDate", "InventoryBlockStatus", "IsMarkedForDeletion"}
	dataPlatformProductMasterStorageLocationDatumColumnsWithoutDefault = []string{"Product", "BusinessPartner", "Plant", "StorageLocation", "CreationDate", "InventoryBlockStatus", "IsMarkedForDeletion"}
	dataPlatformProductMasterStorageLocationDatumColumnsWithDefault    = []string{}
	dataPlatformProductMasterStorageLocationDatumPrimaryKeyColumns     = []string{"Product", "BusinessPartner", "Plant", "StorageLocation"}
	dataPlatformProductMasterStorageLocationDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformProductMasterStorageLocationDatumSlice is an alias for a slice of pointers to DataPlatformProductMasterStorageLocationDatum.
	// This should almost always be used instead of []DataPlatformProductMasterStorageLocationDatum.
	DataPlatformProductMasterStorageLocationDatumSlice []*DataPlatformProductMasterStorageLocationDatum

	dataPlatformProductMasterStorageLocationDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformProductMasterStorageLocationDatumType                 = reflect.TypeOf(&DataPlatformProductMasterStorageLocationDatum{})
	dataPlatformProductMasterStorageLocationDatumMapping              = queries.MakeStructMapping(dataPlatformProductMasterStorageLocationDatumType)
	dataPlatformProductMasterStorageLocationDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformProductMasterStorageLocationDatumType, dataPlatformProductMasterStorageLocationDatumMapping, dataPlatformProductMasterStorageLocationDatumPrimaryKeyColumns)
	dataPlatformProductMasterStorageLocationDatumInsertCacheMut       sync.RWMutex
	dataPlatformProductMasterStorageLocationDatumInsertCache          = make(map[string]insertCache)
	dataPlatformProductMasterStorageLocationDatumUpdateCacheMut       sync.RWMutex
	dataPlatformProductMasterStorageLocationDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformProductMasterStorageLocationDatumUpsertCacheMut       sync.RWMutex
	dataPlatformProductMasterStorageLocationDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformProductMasterStorageLocationDatum record from the query.
func (q dataPlatformProductMasterStorageLocationDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformProductMasterStorageLocationDatum, error) {
	o := &DataPlatformProductMasterStorageLocationDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_product_master_storage_location_data")
	}

	return o, nil
}

// All returns all DataPlatformProductMasterStorageLocationDatum records from the query.
func (q dataPlatformProductMasterStorageLocationDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformProductMasterStorageLocationDatumSlice, error) {
	var o []*DataPlatformProductMasterStorageLocationDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformProductMasterStorageLocationDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformProductMasterStorageLocationDatum records in the query.
func (q dataPlatformProductMasterStorageLocationDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_product_master_storage_location_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformProductMasterStorageLocationDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_product_master_storage_location_data exists")
	}

	return count > 0, nil
}

// DataPlatformProductMasterStorageLocationData retrieves all the records using an executor.
func DataPlatformProductMasterStorageLocationData(mods ...qm.QueryMod) dataPlatformProductMasterStorageLocationDatumQuery {
	mods = append(mods, qm.From("`data_platform_product_master_storage_location_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_product_master_storage_location_data`.*"})
	}

	return dataPlatformProductMasterStorageLocationDatumQuery{q}
}

// FindDataPlatformProductMasterStorageLocationDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformProductMasterStorageLocationDatum(ctx context.Context, exec boil.ContextExecutor, product string, businessPartner int, plant string, storageLocation string, selectCols ...string) (*DataPlatformProductMasterStorageLocationDatum, error) {
	dataPlatformProductMasterStorageLocationDatumObj := &DataPlatformProductMasterStorageLocationDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_product_master_storage_location_data` where `Product`=? AND `BusinessPartner`=? AND `Plant`=? AND `StorageLocation`=?", sel,
	)

	q := queries.Raw(query, product, businessPartner, plant, storageLocation)

	err := q.Bind(ctx, exec, dataPlatformProductMasterStorageLocationDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_product_master_storage_location_data")
	}

	return dataPlatformProductMasterStorageLocationDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformProductMasterStorageLocationDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_product_master_storage_location_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductMasterStorageLocationDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformProductMasterStorageLocationDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformProductMasterStorageLocationDatumInsertCache[key]
	dataPlatformProductMasterStorageLocationDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformProductMasterStorageLocationDatumAllColumns,
			dataPlatformProductMasterStorageLocationDatumColumnsWithDefault,
			dataPlatformProductMasterStorageLocationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductMasterStorageLocationDatumType, dataPlatformProductMasterStorageLocationDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformProductMasterStorageLocationDatumType, dataPlatformProductMasterStorageLocationDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_product_master_storage_location_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_product_master_storage_location_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_product_master_storage_location_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterStorageLocationDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_product_master_storage_location_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Product,
		o.BusinessPartner,
		o.Plant,
		o.StorageLocation,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_product_master_storage_location_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductMasterStorageLocationDatumInsertCacheMut.Lock()
		dataPlatformProductMasterStorageLocationDatumInsertCache[key] = cache
		dataPlatformProductMasterStorageLocationDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformProductMasterStorageLocationDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformProductMasterStorageLocationDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformProductMasterStorageLocationDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformProductMasterStorageLocationDatumUpdateCache[key]
	dataPlatformProductMasterStorageLocationDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformProductMasterStorageLocationDatumAllColumns,
			dataPlatformProductMasterStorageLocationDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_product_master_storage_location_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_product_master_storage_location_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterStorageLocationDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformProductMasterStorageLocationDatumType, dataPlatformProductMasterStorageLocationDatumMapping, append(wl, dataPlatformProductMasterStorageLocationDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_product_master_storage_location_data row")
	}

	if !cached {
		dataPlatformProductMasterStorageLocationDatumUpdateCacheMut.Lock()
		dataPlatformProductMasterStorageLocationDatumUpdateCache[key] = cache
		dataPlatformProductMasterStorageLocationDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformProductMasterStorageLocationDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_product_master_storage_location_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformProductMasterStorageLocationDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductMasterStorageLocationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_product_master_storage_location_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductMasterStorageLocationDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformProductMasterStorageLocationDatum slice")
	}

	return nil
}

var mySQLDataPlatformProductMasterStorageLocationDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformProductMasterStorageLocationDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_product_master_storage_location_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductMasterStorageLocationDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformProductMasterStorageLocationDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformProductMasterStorageLocationDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformProductMasterStorageLocationDatumUpsertCache[key]
	dataPlatformProductMasterStorageLocationDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformProductMasterStorageLocationDatumAllColumns,
			dataPlatformProductMasterStorageLocationDatumColumnsWithDefault,
			dataPlatformProductMasterStorageLocationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformProductMasterStorageLocationDatumAllColumns,
			dataPlatformProductMasterStorageLocationDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_product_master_storage_location_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_product_master_storage_location_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_product_master_storage_location_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductMasterStorageLocationDatumType, dataPlatformProductMasterStorageLocationDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformProductMasterStorageLocationDatumType, dataPlatformProductMasterStorageLocationDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_product_master_storage_location_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformProductMasterStorageLocationDatumType, dataPlatformProductMasterStorageLocationDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_product_master_storage_location_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_product_master_storage_location_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductMasterStorageLocationDatumUpsertCacheMut.Lock()
		dataPlatformProductMasterStorageLocationDatumUpsertCache[key] = cache
		dataPlatformProductMasterStorageLocationDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformProductMasterStorageLocationDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformProductMasterStorageLocationDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformProductMasterStorageLocationDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformProductMasterStorageLocationDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_product_master_storage_location_data` WHERE `Product`=? AND `BusinessPartner`=? AND `Plant`=? AND `StorageLocation`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_product_master_storage_location_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformProductMasterStorageLocationDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformProductMasterStorageLocationDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_product_master_storage_location_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformProductMasterStorageLocationDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductMasterStorageLocationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_product_master_storage_location_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductMasterStorageLocationDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformProductMasterStorageLocationDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformProductMasterStorageLocationDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformProductMasterStorageLocationDatum(ctx, exec, o.Product, o.BusinessPartner, o.Plant, o.StorageLocation)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformProductMasterStorageLocationDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformProductMasterStorageLocationDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductMasterStorageLocationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_product_master_storage_location_data`.* FROM `data_platform_product_master_storage_location_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductMasterStorageLocationDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformProductMasterStorageLocationDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformProductMasterStorageLocationDatumExists checks if the DataPlatformProductMasterStorageLocationDatum row exists.
func DataPlatformProductMasterStorageLocationDatumExists(ctx context.Context, exec boil.ContextExecutor, product string, businessPartner int, plant string, storageLocation string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_product_master_storage_location_data` where `Product`=? AND `BusinessPartner`=? AND `Plant`=? AND `StorageLocation`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, product, businessPartner, plant, storageLocation)
	}
	row := exec.QueryRowContext(ctx, sql, product, businessPartner, plant, storageLocation)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_product_master_storage_location_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformProductMasterStorageLocationDatum row exists.
func (o *DataPlatformProductMasterStorageLocationDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformProductMasterStorageLocationDatumExists(ctx, exec, o.Product, o.BusinessPartner, o.Plant, o.StorageLocation)
}
