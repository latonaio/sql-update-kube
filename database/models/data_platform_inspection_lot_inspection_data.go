// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformInspectionLotInspectionDatum is an object representing the database table.
type DataPlatformInspectionLotInspectionDatum struct {
	InspectionLot                            int          `boil:"InspectionLot" json:"InspectionLot" toml:"InspectionLot" yaml:"InspectionLot"`
	Inspection                               int          `boil:"Inspection" json:"Inspection" toml:"Inspection" yaml:"Inspection"`
	InspectionDate                           string       `boil:"InspectionDate" json:"InspectionDate" toml:"InspectionDate" yaml:"InspectionDate"`
	InspectionType                           string       `boil:"InspectionType" json:"InspectionType" toml:"InspectionType" yaml:"InspectionType"`
	InspectionTypeValueUnit                  null.String  `boil:"InspectionTypeValueUnit" json:"InspectionTypeValueUnit,omitempty" toml:"InspectionTypeValueUnit" yaml:"InspectionTypeValueUnit,omitempty"`
	InspectionTypePlannedValue               null.Float32 `boil:"InspectionTypePlannedValue" json:"InspectionTypePlannedValue,omitempty" toml:"InspectionTypePlannedValue" yaml:"InspectionTypePlannedValue,omitempty"`
	InspectionTypeCertificateType            null.String  `boil:"InspectionTypeCertificateType" json:"InspectionTypeCertificateType,omitempty" toml:"InspectionTypeCertificateType" yaml:"InspectionTypeCertificateType,omitempty"`
	InspectionTypeCertificateValueInText     null.String  `boil:"InspectionTypeCertificateValueInText" json:"InspectionTypeCertificateValueInText,omitempty" toml:"InspectionTypeCertificateValueInText" yaml:"InspectionTypeCertificateValueInText,omitempty"`
	InspectionTypeCertificateValueInQuantity null.Float32 `boil:"InspectionTypeCertificateValueInQuantity" json:"InspectionTypeCertificateValueInQuantity,omitempty" toml:"InspectionTypeCertificateValueInQuantity" yaml:"InspectionTypeCertificateValueInQuantity,omitempty"`
	InspectionLotInspectionText              null.String  `boil:"InspectionLotInspectionText" json:"InspectionLotInspectionText,omitempty" toml:"InspectionLotInspectionText" yaml:"InspectionLotInspectionText,omitempty"`
	CreationDate                             string       `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	CreationTime                             string       `boil:"CreationTime" json:"CreationTime" toml:"CreationTime" yaml:"CreationTime"`
	LastChangeDate                           string       `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	LastChangeTime                           string       `boil:"LastChangeTime" json:"LastChangeTime" toml:"LastChangeTime" yaml:"LastChangeTime"`
	IsReleased                               null.Bool    `boil:"IsReleased" json:"IsReleased,omitempty" toml:"IsReleased" yaml:"IsReleased,omitempty"`
	IsLocked                                 null.Bool    `boil:"IsLocked" json:"IsLocked,omitempty" toml:"IsLocked" yaml:"IsLocked,omitempty"`
	IsCancelled                              null.Bool    `boil:"IsCancelled" json:"IsCancelled,omitempty" toml:"IsCancelled" yaml:"IsCancelled,omitempty"`
	IsMarkedForDeletion                      null.Bool    `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformInspectionLotInspectionDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformInspectionLotInspectionDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformInspectionLotInspectionDatumColumns = struct {
	InspectionLot                            string
	Inspection                               string
	InspectionDate                           string
	InspectionType                           string
	InspectionTypeValueUnit                  string
	InspectionTypePlannedValue               string
	InspectionTypeCertificateType            string
	InspectionTypeCertificateValueInText     string
	InspectionTypeCertificateValueInQuantity string
	InspectionLotInspectionText              string
	CreationDate                             string
	CreationTime                             string
	LastChangeDate                           string
	LastChangeTime                           string
	IsReleased                               string
	IsLocked                                 string
	IsCancelled                              string
	IsMarkedForDeletion                      string
}{
	InspectionLot:                            "InspectionLot",
	Inspection:                               "Inspection",
	InspectionDate:                           "InspectionDate",
	InspectionType:                           "InspectionType",
	InspectionTypeValueUnit:                  "InspectionTypeValueUnit",
	InspectionTypePlannedValue:               "InspectionTypePlannedValue",
	InspectionTypeCertificateType:            "InspectionTypeCertificateType",
	InspectionTypeCertificateValueInText:     "InspectionTypeCertificateValueInText",
	InspectionTypeCertificateValueInQuantity: "InspectionTypeCertificateValueInQuantity",
	InspectionLotInspectionText:              "InspectionLotInspectionText",
	CreationDate:                             "CreationDate",
	CreationTime:                             "CreationTime",
	LastChangeDate:                           "LastChangeDate",
	LastChangeTime:                           "LastChangeTime",
	IsReleased:                               "IsReleased",
	IsLocked:                                 "IsLocked",
	IsCancelled:                              "IsCancelled",
	IsMarkedForDeletion:                      "IsMarkedForDeletion",
}

var DataPlatformInspectionLotInspectionDatumTableColumns = struct {
	InspectionLot                            string
	Inspection                               string
	InspectionDate                           string
	InspectionType                           string
	InspectionTypeValueUnit                  string
	InspectionTypePlannedValue               string
	InspectionTypeCertificateType            string
	InspectionTypeCertificateValueInText     string
	InspectionTypeCertificateValueInQuantity string
	InspectionLotInspectionText              string
	CreationDate                             string
	CreationTime                             string
	LastChangeDate                           string
	LastChangeTime                           string
	IsReleased                               string
	IsLocked                                 string
	IsCancelled                              string
	IsMarkedForDeletion                      string
}{
	InspectionLot:                            "data_platform_inspection_lot_inspection_data.InspectionLot",
	Inspection:                               "data_platform_inspection_lot_inspection_data.Inspection",
	InspectionDate:                           "data_platform_inspection_lot_inspection_data.InspectionDate",
	InspectionType:                           "data_platform_inspection_lot_inspection_data.InspectionType",
	InspectionTypeValueUnit:                  "data_platform_inspection_lot_inspection_data.InspectionTypeValueUnit",
	InspectionTypePlannedValue:               "data_platform_inspection_lot_inspection_data.InspectionTypePlannedValue",
	InspectionTypeCertificateType:            "data_platform_inspection_lot_inspection_data.InspectionTypeCertificateType",
	InspectionTypeCertificateValueInText:     "data_platform_inspection_lot_inspection_data.InspectionTypeCertificateValueInText",
	InspectionTypeCertificateValueInQuantity: "data_platform_inspection_lot_inspection_data.InspectionTypeCertificateValueInQuantity",
	InspectionLotInspectionText:              "data_platform_inspection_lot_inspection_data.InspectionLotInspectionText",
	CreationDate:                             "data_platform_inspection_lot_inspection_data.CreationDate",
	CreationTime:                             "data_platform_inspection_lot_inspection_data.CreationTime",
	LastChangeDate:                           "data_platform_inspection_lot_inspection_data.LastChangeDate",
	LastChangeTime:                           "data_platform_inspection_lot_inspection_data.LastChangeTime",
	IsReleased:                               "data_platform_inspection_lot_inspection_data.IsReleased",
	IsLocked:                                 "data_platform_inspection_lot_inspection_data.IsLocked",
	IsCancelled:                              "data_platform_inspection_lot_inspection_data.IsCancelled",
	IsMarkedForDeletion:                      "data_platform_inspection_lot_inspection_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformInspectionLotInspectionDatumWhere = struct {
	InspectionLot                            whereHelperint
	Inspection                               whereHelperint
	InspectionDate                           whereHelperstring
	InspectionType                           whereHelperstring
	InspectionTypeValueUnit                  whereHelpernull_String
	InspectionTypePlannedValue               whereHelpernull_Float32
	InspectionTypeCertificateType            whereHelpernull_String
	InspectionTypeCertificateValueInText     whereHelpernull_String
	InspectionTypeCertificateValueInQuantity whereHelpernull_Float32
	InspectionLotInspectionText              whereHelpernull_String
	CreationDate                             whereHelperstring
	CreationTime                             whereHelperstring
	LastChangeDate                           whereHelperstring
	LastChangeTime                           whereHelperstring
	IsReleased                               whereHelpernull_Bool
	IsLocked                                 whereHelpernull_Bool
	IsCancelled                              whereHelpernull_Bool
	IsMarkedForDeletion                      whereHelpernull_Bool
}{
	InspectionLot:                            whereHelperint{field: "`data_platform_inspection_lot_inspection_data`.`InspectionLot`"},
	Inspection:                               whereHelperint{field: "`data_platform_inspection_lot_inspection_data`.`Inspection`"},
	InspectionDate:                           whereHelperstring{field: "`data_platform_inspection_lot_inspection_data`.`InspectionDate`"},
	InspectionType:                           whereHelperstring{field: "`data_platform_inspection_lot_inspection_data`.`InspectionType`"},
	InspectionTypeValueUnit:                  whereHelpernull_String{field: "`data_platform_inspection_lot_inspection_data`.`InspectionTypeValueUnit`"},
	InspectionTypePlannedValue:               whereHelpernull_Float32{field: "`data_platform_inspection_lot_inspection_data`.`InspectionTypePlannedValue`"},
	InspectionTypeCertificateType:            whereHelpernull_String{field: "`data_platform_inspection_lot_inspection_data`.`InspectionTypeCertificateType`"},
	InspectionTypeCertificateValueInText:     whereHelpernull_String{field: "`data_platform_inspection_lot_inspection_data`.`InspectionTypeCertificateValueInText`"},
	InspectionTypeCertificateValueInQuantity: whereHelpernull_Float32{field: "`data_platform_inspection_lot_inspection_data`.`InspectionTypeCertificateValueInQuantity`"},
	InspectionLotInspectionText:              whereHelpernull_String{field: "`data_platform_inspection_lot_inspection_data`.`InspectionLotInspectionText`"},
	CreationDate:                             whereHelperstring{field: "`data_platform_inspection_lot_inspection_data`.`CreationDate`"},
	CreationTime:                             whereHelperstring{field: "`data_platform_inspection_lot_inspection_data`.`CreationTime`"},
	LastChangeDate:                           whereHelperstring{field: "`data_platform_inspection_lot_inspection_data`.`LastChangeDate`"},
	LastChangeTime:                           whereHelperstring{field: "`data_platform_inspection_lot_inspection_data`.`LastChangeTime`"},
	IsReleased:                               whereHelpernull_Bool{field: "`data_platform_inspection_lot_inspection_data`.`IsReleased`"},
	IsLocked:                                 whereHelpernull_Bool{field: "`data_platform_inspection_lot_inspection_data`.`IsLocked`"},
	IsCancelled:                              whereHelpernull_Bool{field: "`data_platform_inspection_lot_inspection_data`.`IsCancelled`"},
	IsMarkedForDeletion:                      whereHelpernull_Bool{field: "`data_platform_inspection_lot_inspection_data`.`IsMarkedForDeletion`"},
}

// DataPlatformInspectionLotInspectionDatumRels is where relationship names are stored.
var DataPlatformInspectionLotInspectionDatumRels = struct {
	InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum string
	InspectionLotDataPlatformInspectionLotHeaderDatum                string
}{
	InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum: "InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum",
	InspectionLotDataPlatformInspectionLotHeaderDatum:                "InspectionLotDataPlatformInspectionLotHeaderDatum",
}

// dataPlatformInspectionLotInspectionDatumR is where relationships are stored.
type dataPlatformInspectionLotInspectionDatumR struct {
	InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum *DataPlatformQuantityUnitQuantityUnitDatum `boil:"InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	InspectionLotDataPlatformInspectionLotHeaderDatum                *DataPlatformInspectionLotHeaderDatum      `boil:"InspectionLotDataPlatformInspectionLotHeaderDatum" json:"InspectionLotDataPlatformInspectionLotHeaderDatum" toml:"InspectionLotDataPlatformInspectionLotHeaderDatum" yaml:"InspectionLotDataPlatformInspectionLotHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformInspectionLotInspectionDatumR) NewStruct() *dataPlatformInspectionLotInspectionDatumR {
	return &dataPlatformInspectionLotInspectionDatumR{}
}

func (r *dataPlatformInspectionLotInspectionDatumR) GetInspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformInspectionLotInspectionDatumR) GetInspectionLotDataPlatformInspectionLotHeaderDatum() *DataPlatformInspectionLotHeaderDatum {
	if r == nil {
		return nil
	}
	return r.InspectionLotDataPlatformInspectionLotHeaderDatum
}

// dataPlatformInspectionLotInspectionDatumL is where Load methods for each relationship are stored.
type dataPlatformInspectionLotInspectionDatumL struct{}

var (
	dataPlatformInspectionLotInspectionDatumAllColumns            = []string{"InspectionLot", "Inspection", "InspectionDate", "InspectionType", "InspectionTypeValueUnit", "InspectionTypePlannedValue", "InspectionTypeCertificateType", "InspectionTypeCertificateValueInText", "InspectionTypeCertificateValueInQuantity", "InspectionLotInspectionText", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsReleased", "IsLocked", "IsCancelled", "IsMarkedForDeletion"}
	dataPlatformInspectionLotInspectionDatumColumnsWithoutDefault = []string{"InspectionLot", "Inspection", "InspectionDate", "InspectionType", "InspectionTypeValueUnit", "InspectionTypePlannedValue", "InspectionTypeCertificateType", "InspectionTypeCertificateValueInText", "InspectionTypeCertificateValueInQuantity", "InspectionLotInspectionText", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsReleased", "IsLocked", "IsCancelled", "IsMarkedForDeletion"}
	dataPlatformInspectionLotInspectionDatumColumnsWithDefault    = []string{}
	dataPlatformInspectionLotInspectionDatumPrimaryKeyColumns     = []string{"InspectionLot", "Inspection"}
	dataPlatformInspectionLotInspectionDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformInspectionLotInspectionDatumSlice is an alias for a slice of pointers to DataPlatformInspectionLotInspectionDatum.
	// This should almost always be used instead of []DataPlatformInspectionLotInspectionDatum.
	DataPlatformInspectionLotInspectionDatumSlice []*DataPlatformInspectionLotInspectionDatum

	dataPlatformInspectionLotInspectionDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformInspectionLotInspectionDatumType                 = reflect.TypeOf(&DataPlatformInspectionLotInspectionDatum{})
	dataPlatformInspectionLotInspectionDatumMapping              = queries.MakeStructMapping(dataPlatformInspectionLotInspectionDatumType)
	dataPlatformInspectionLotInspectionDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformInspectionLotInspectionDatumType, dataPlatformInspectionLotInspectionDatumMapping, dataPlatformInspectionLotInspectionDatumPrimaryKeyColumns)
	dataPlatformInspectionLotInspectionDatumInsertCacheMut       sync.RWMutex
	dataPlatformInspectionLotInspectionDatumInsertCache          = make(map[string]insertCache)
	dataPlatformInspectionLotInspectionDatumUpdateCacheMut       sync.RWMutex
	dataPlatformInspectionLotInspectionDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformInspectionLotInspectionDatumUpsertCacheMut       sync.RWMutex
	dataPlatformInspectionLotInspectionDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformInspectionLotInspectionDatum record from the query.
func (q dataPlatformInspectionLotInspectionDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformInspectionLotInspectionDatum, error) {
	o := &DataPlatformInspectionLotInspectionDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_inspection_lot_inspection_data")
	}

	return o, nil
}

// All returns all DataPlatformInspectionLotInspectionDatum records from the query.
func (q dataPlatformInspectionLotInspectionDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformInspectionLotInspectionDatumSlice, error) {
	var o []*DataPlatformInspectionLotInspectionDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformInspectionLotInspectionDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformInspectionLotInspectionDatum records in the query.
func (q dataPlatformInspectionLotInspectionDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_inspection_lot_inspection_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformInspectionLotInspectionDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_inspection_lot_inspection_data exists")
	}

	return count > 0, nil
}

// InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformInspectionLotInspectionDatum) InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.InspectionTypeValueUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// InspectionLotDataPlatformInspectionLotHeaderDatum pointed to by the foreign key.
func (o *DataPlatformInspectionLotInspectionDatum) InspectionLotDataPlatformInspectionLotHeaderDatum(mods ...qm.QueryMod) dataPlatformInspectionLotHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`InspectionLot` = ?", o.InspectionLot),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformInspectionLotHeaderData(queryMods...)
}

// LoadInspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInspectionLotInspectionDatumL) LoadInspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionLotInspectionDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionLotInspectionDatum
	var object *DataPlatformInspectionLotInspectionDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionLotInspectionDatum.(*DataPlatformInspectionLotInspectionDatum)
		if !ok {
			object = new(DataPlatformInspectionLotInspectionDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionLotInspectionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionLotInspectionDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionLotInspectionDatum.(*[]*DataPlatformInspectionLotInspectionDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionLotInspectionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionLotInspectionDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionLotInspectionDatumR{}
		}
		if !queries.IsNil(object.InspectionTypeValueUnit) {
			args = append(args, object.InspectionTypeValueUnit)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionLotInspectionDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.InspectionTypeValueUnit) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.InspectionTypeValueUnit) {
				args = append(args, obj.InspectionTypeValueUnit)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.InspectionTypeValueUnit, foreign.QuantityUnit) {
				local.R.InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadInspectionLotDataPlatformInspectionLotHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInspectionLotInspectionDatumL) LoadInspectionLotDataPlatformInspectionLotHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionLotInspectionDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionLotInspectionDatum
	var object *DataPlatformInspectionLotInspectionDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionLotInspectionDatum.(*DataPlatformInspectionLotInspectionDatum)
		if !ok {
			object = new(DataPlatformInspectionLotInspectionDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionLotInspectionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionLotInspectionDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionLotInspectionDatum.(*[]*DataPlatformInspectionLotInspectionDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionLotInspectionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionLotInspectionDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionLotInspectionDatumR{}
		}
		args = append(args, object.InspectionLot)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionLotInspectionDatumR{}
			}

			for _, a := range args {
				if a == obj.InspectionLot {
					continue Outer
				}
			}

			args = append(args, obj.InspectionLot)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_inspection_lot_header_data`),
		qm.WhereIn(`data_platform_inspection_lot_header_data.InspectionLot in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformInspectionLotHeaderDatum")
	}

	var resultSlice []*DataPlatformInspectionLotHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformInspectionLotHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_inspection_lot_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_inspection_lot_header_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.InspectionLotDataPlatformInspectionLotHeaderDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InspectionLot == foreign.InspectionLot {
				local.R.InspectionLotDataPlatformInspectionLotHeaderDatum = foreign
				break
			}
		}
	}

	return nil
}

// SetInspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformInspectionLotInspectionDatum to the related item.
// Sets o.R.InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformInspectionLotInspectionDatum) SetInspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_inspection_lot_inspection_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"InspectionTypeValueUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotInspectionDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.InspectionLot, o.Inspection}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.InspectionTypeValueUnit, related.QuantityUnit)
	if o.R == nil {
		o.R = &dataPlatformInspectionLotInspectionDatumR{
			InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// RemoveInspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum relationship.
// Sets o.R.InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum to nil.
func (o *DataPlatformInspectionLotInspectionDatum) RemoveInspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error

	queries.SetScanner(&o.InspectionTypeValueUnit, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("InspectionTypeValueUnit")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetInspectionLotDataPlatformInspectionLotHeaderDatum of the dataPlatformInspectionLotInspectionDatum to the related item.
// Sets o.R.InspectionLotDataPlatformInspectionLotHeaderDatum to related.
func (o *DataPlatformInspectionLotInspectionDatum) SetInspectionLotDataPlatformInspectionLotHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformInspectionLotHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_inspection_lot_inspection_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"InspectionLot"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotInspectionDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.InspectionLot, o.InspectionLot, o.Inspection}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InspectionLot = related.InspectionLot
	if o.R == nil {
		o.R = &dataPlatformInspectionLotInspectionDatumR{
			InspectionLotDataPlatformInspectionLotHeaderDatum: related,
		}
	} else {
		o.R.InspectionLotDataPlatformInspectionLotHeaderDatum = related
	}

	return nil
}

// DataPlatformInspectionLotInspectionData retrieves all the records using an executor.
func DataPlatformInspectionLotInspectionData(mods ...qm.QueryMod) dataPlatformInspectionLotInspectionDatumQuery {
	mods = append(mods, qm.From("`data_platform_inspection_lot_inspection_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_inspection_lot_inspection_data`.*"})
	}

	return dataPlatformInspectionLotInspectionDatumQuery{q}
}

// FindDataPlatformInspectionLotInspectionDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformInspectionLotInspectionDatum(ctx context.Context, exec boil.ContextExecutor, inspectionLot int, inspection int, selectCols ...string) (*DataPlatformInspectionLotInspectionDatum, error) {
	dataPlatformInspectionLotInspectionDatumObj := &DataPlatformInspectionLotInspectionDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_inspection_lot_inspection_data` where `InspectionLot`=? AND `Inspection`=?", sel,
	)

	q := queries.Raw(query, inspectionLot, inspection)

	err := q.Bind(ctx, exec, dataPlatformInspectionLotInspectionDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_inspection_lot_inspection_data")
	}

	return dataPlatformInspectionLotInspectionDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformInspectionLotInspectionDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_inspection_lot_inspection_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformInspectionLotInspectionDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformInspectionLotInspectionDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformInspectionLotInspectionDatumInsertCache[key]
	dataPlatformInspectionLotInspectionDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformInspectionLotInspectionDatumAllColumns,
			dataPlatformInspectionLotInspectionDatumColumnsWithDefault,
			dataPlatformInspectionLotInspectionDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformInspectionLotInspectionDatumType, dataPlatformInspectionLotInspectionDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformInspectionLotInspectionDatumType, dataPlatformInspectionLotInspectionDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_inspection_lot_inspection_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_inspection_lot_inspection_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_inspection_lot_inspection_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotInspectionDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_inspection_lot_inspection_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.InspectionLot,
		o.Inspection,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_inspection_lot_inspection_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformInspectionLotInspectionDatumInsertCacheMut.Lock()
		dataPlatformInspectionLotInspectionDatumInsertCache[key] = cache
		dataPlatformInspectionLotInspectionDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformInspectionLotInspectionDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformInspectionLotInspectionDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformInspectionLotInspectionDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformInspectionLotInspectionDatumUpdateCache[key]
	dataPlatformInspectionLotInspectionDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformInspectionLotInspectionDatumAllColumns,
			dataPlatformInspectionLotInspectionDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_inspection_lot_inspection_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_inspection_lot_inspection_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotInspectionDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformInspectionLotInspectionDatumType, dataPlatformInspectionLotInspectionDatumMapping, append(wl, dataPlatformInspectionLotInspectionDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_inspection_lot_inspection_data row")
	}

	if !cached {
		dataPlatformInspectionLotInspectionDatumUpdateCacheMut.Lock()
		dataPlatformInspectionLotInspectionDatumUpdateCache[key] = cache
		dataPlatformInspectionLotInspectionDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformInspectionLotInspectionDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_inspection_lot_inspection_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformInspectionLotInspectionDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInspectionLotInspectionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_inspection_lot_inspection_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInspectionLotInspectionDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformInspectionLotInspectionDatum slice")
	}

	return nil
}

var mySQLDataPlatformInspectionLotInspectionDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformInspectionLotInspectionDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_inspection_lot_inspection_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformInspectionLotInspectionDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformInspectionLotInspectionDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformInspectionLotInspectionDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformInspectionLotInspectionDatumUpsertCache[key]
	dataPlatformInspectionLotInspectionDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformInspectionLotInspectionDatumAllColumns,
			dataPlatformInspectionLotInspectionDatumColumnsWithDefault,
			dataPlatformInspectionLotInspectionDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformInspectionLotInspectionDatumAllColumns,
			dataPlatformInspectionLotInspectionDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_inspection_lot_inspection_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_inspection_lot_inspection_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_inspection_lot_inspection_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformInspectionLotInspectionDatumType, dataPlatformInspectionLotInspectionDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformInspectionLotInspectionDatumType, dataPlatformInspectionLotInspectionDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_inspection_lot_inspection_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformInspectionLotInspectionDatumType, dataPlatformInspectionLotInspectionDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_inspection_lot_inspection_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_inspection_lot_inspection_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformInspectionLotInspectionDatumUpsertCacheMut.Lock()
		dataPlatformInspectionLotInspectionDatumUpsertCache[key] = cache
		dataPlatformInspectionLotInspectionDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformInspectionLotInspectionDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformInspectionLotInspectionDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformInspectionLotInspectionDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformInspectionLotInspectionDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_inspection_lot_inspection_data` WHERE `InspectionLot`=? AND `Inspection`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_inspection_lot_inspection_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformInspectionLotInspectionDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformInspectionLotInspectionDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_inspection_lot_inspection_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformInspectionLotInspectionDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInspectionLotInspectionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_inspection_lot_inspection_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInspectionLotInspectionDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformInspectionLotInspectionDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformInspectionLotInspectionDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformInspectionLotInspectionDatum(ctx, exec, o.InspectionLot, o.Inspection)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformInspectionLotInspectionDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformInspectionLotInspectionDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInspectionLotInspectionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_inspection_lot_inspection_data`.* FROM `data_platform_inspection_lot_inspection_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInspectionLotInspectionDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformInspectionLotInspectionDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformInspectionLotInspectionDatumExists checks if the DataPlatformInspectionLotInspectionDatum row exists.
func DataPlatformInspectionLotInspectionDatumExists(ctx context.Context, exec boil.ContextExecutor, inspectionLot int, inspection int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_inspection_lot_inspection_data` where `InspectionLot`=? AND `Inspection`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, inspectionLot, inspection)
	}
	row := exec.QueryRowContext(ctx, sql, inspectionLot, inspection)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_inspection_lot_inspection_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformInspectionLotInspectionDatum row exists.
func (o *DataPlatformInspectionLotInspectionDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformInspectionLotInspectionDatumExists(ctx, exec, o.InspectionLot, o.Inspection)
}
