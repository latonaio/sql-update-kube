// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformBusinessPartnerSupplierPartnerPlantDatum is an object representing the database table.
type DataPlatformBusinessPartnerSupplierPartnerPlantDatum struct {
	BusinessPartner                int         `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	Supplier                       int         `boil:"Supplier" json:"Supplier" toml:"Supplier" yaml:"Supplier"`
	PartnerCounter                 int         `boil:"PartnerCounter" json:"PartnerCounter" toml:"PartnerCounter" yaml:"PartnerCounter"`
	PartnerFunction                string      `boil:"PartnerFunction" json:"PartnerFunction" toml:"PartnerFunction" yaml:"PartnerFunction"`
	PartnerFunctionBusinessPartner int         `boil:"PartnerFunctionBusinessPartner" json:"PartnerFunctionBusinessPartner" toml:"PartnerFunctionBusinessPartner" yaml:"PartnerFunctionBusinessPartner"`
	PlantCounter                   int         `boil:"PlantCounter" json:"PlantCounter" toml:"PlantCounter" yaml:"PlantCounter"`
	Plant                          null.String `boil:"Plant" json:"Plant,omitempty" toml:"Plant" yaml:"Plant,omitempty"`
	DefaultPlant                   null.Bool   `boil:"DefaultPlant" json:"DefaultPlant,omitempty" toml:"DefaultPlant" yaml:"DefaultPlant,omitempty"`
	DefaultStockConfirmationPlant  null.Bool   `boil:"DefaultStockConfirmationPlant" json:"DefaultStockConfirmationPlant,omitempty" toml:"DefaultStockConfirmationPlant" yaml:"DefaultStockConfirmationPlant,omitempty"`
	IsMarkedForDeletion            null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformBusinessPartnerSupplierPartnerPlantDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformBusinessPartnerSupplierPartnerPlantDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformBusinessPartnerSupplierPartnerPlantDatumColumns = struct {
	BusinessPartner                string
	Supplier                       string
	PartnerCounter                 string
	PartnerFunction                string
	PartnerFunctionBusinessPartner string
	PlantCounter                   string
	Plant                          string
	DefaultPlant                   string
	DefaultStockConfirmationPlant  string
	IsMarkedForDeletion            string
}{
	BusinessPartner:                "BusinessPartner",
	Supplier:                       "Supplier",
	PartnerCounter:                 "PartnerCounter",
	PartnerFunction:                "PartnerFunction",
	PartnerFunctionBusinessPartner: "PartnerFunctionBusinessPartner",
	PlantCounter:                   "PlantCounter",
	Plant:                          "Plant",
	DefaultPlant:                   "DefaultPlant",
	DefaultStockConfirmationPlant:  "DefaultStockConfirmationPlant",
	IsMarkedForDeletion:            "IsMarkedForDeletion",
}

var DataPlatformBusinessPartnerSupplierPartnerPlantDatumTableColumns = struct {
	BusinessPartner                string
	Supplier                       string
	PartnerCounter                 string
	PartnerFunction                string
	PartnerFunctionBusinessPartner string
	PlantCounter                   string
	Plant                          string
	DefaultPlant                   string
	DefaultStockConfirmationPlant  string
	IsMarkedForDeletion            string
}{
	BusinessPartner:                "data_platform_business_partner_supplier_partner_plant_data.BusinessPartner",
	Supplier:                       "data_platform_business_partner_supplier_partner_plant_data.Supplier",
	PartnerCounter:                 "data_platform_business_partner_supplier_partner_plant_data.PartnerCounter",
	PartnerFunction:                "data_platform_business_partner_supplier_partner_plant_data.PartnerFunction",
	PartnerFunctionBusinessPartner: "data_platform_business_partner_supplier_partner_plant_data.PartnerFunctionBusinessPartner",
	PlantCounter:                   "data_platform_business_partner_supplier_partner_plant_data.PlantCounter",
	Plant:                          "data_platform_business_partner_supplier_partner_plant_data.Plant",
	DefaultPlant:                   "data_platform_business_partner_supplier_partner_plant_data.DefaultPlant",
	DefaultStockConfirmationPlant:  "data_platform_business_partner_supplier_partner_plant_data.DefaultStockConfirmationPlant",
	IsMarkedForDeletion:            "data_platform_business_partner_supplier_partner_plant_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformBusinessPartnerSupplierPartnerPlantDatumWhere = struct {
	BusinessPartner                whereHelperint
	Supplier                       whereHelperint
	PartnerCounter                 whereHelperint
	PartnerFunction                whereHelperstring
	PartnerFunctionBusinessPartner whereHelperint
	PlantCounter                   whereHelperint
	Plant                          whereHelpernull_String
	DefaultPlant                   whereHelpernull_Bool
	DefaultStockConfirmationPlant  whereHelpernull_Bool
	IsMarkedForDeletion            whereHelpernull_Bool
}{
	BusinessPartner:                whereHelperint{field: "`data_platform_business_partner_supplier_partner_plant_data`.`BusinessPartner`"},
	Supplier:                       whereHelperint{field: "`data_platform_business_partner_supplier_partner_plant_data`.`Supplier`"},
	PartnerCounter:                 whereHelperint{field: "`data_platform_business_partner_supplier_partner_plant_data`.`PartnerCounter`"},
	PartnerFunction:                whereHelperstring{field: "`data_platform_business_partner_supplier_partner_plant_data`.`PartnerFunction`"},
	PartnerFunctionBusinessPartner: whereHelperint{field: "`data_platform_business_partner_supplier_partner_plant_data`.`PartnerFunctionBusinessPartner`"},
	PlantCounter:                   whereHelperint{field: "`data_platform_business_partner_supplier_partner_plant_data`.`PlantCounter`"},
	Plant:                          whereHelpernull_String{field: "`data_platform_business_partner_supplier_partner_plant_data`.`Plant`"},
	DefaultPlant:                   whereHelpernull_Bool{field: "`data_platform_business_partner_supplier_partner_plant_data`.`DefaultPlant`"},
	DefaultStockConfirmationPlant:  whereHelpernull_Bool{field: "`data_platform_business_partner_supplier_partner_plant_data`.`DefaultStockConfirmationPlant`"},
	IsMarkedForDeletion:            whereHelpernull_Bool{field: "`data_platform_business_partner_supplier_partner_plant_data`.`IsMarkedForDeletion`"},
}

// DataPlatformBusinessPartnerSupplierPartnerPlantDatumRels is where relationship names are stored.
var DataPlatformBusinessPartnerSupplierPartnerPlantDatumRels = struct {
	BusinessPartnerDataPlatformPlantGeneralDatum                           string
	BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionDatum string
}{
	BusinessPartnerDataPlatformPlantGeneralDatum:                           "BusinessPartnerDataPlatformPlantGeneralDatum",
	BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionDatum: "BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionDatum",
}

// dataPlatformBusinessPartnerSupplierPartnerPlantDatumR is where relationships are stored.
type dataPlatformBusinessPartnerSupplierPartnerPlantDatumR struct {
	BusinessPartnerDataPlatformPlantGeneralDatum                           *DataPlatformPlantGeneralDatum                           `boil:"BusinessPartnerDataPlatformPlantGeneralDatum" json:"BusinessPartnerDataPlatformPlantGeneralDatum" toml:"BusinessPartnerDataPlatformPlantGeneralDatum" yaml:"BusinessPartnerDataPlatformPlantGeneralDatum"`
	BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionDatum *DataPlatformBusinessPartnerSupplierPartnerFunctionDatum `boil:"BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionDatum" json:"BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionDatum" toml:"BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionDatum" yaml:"BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformBusinessPartnerSupplierPartnerPlantDatumR) NewStruct() *dataPlatformBusinessPartnerSupplierPartnerPlantDatumR {
	return &dataPlatformBusinessPartnerSupplierPartnerPlantDatumR{}
}

func (r *dataPlatformBusinessPartnerSupplierPartnerPlantDatumR) GetBusinessPartnerDataPlatformPlantGeneralDatum() *DataPlatformPlantGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformPlantGeneralDatum
}

func (r *dataPlatformBusinessPartnerSupplierPartnerPlantDatumR) GetBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionDatum() *DataPlatformBusinessPartnerSupplierPartnerFunctionDatum {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionDatum
}

// dataPlatformBusinessPartnerSupplierPartnerPlantDatumL is where Load methods for each relationship are stored.
type dataPlatformBusinessPartnerSupplierPartnerPlantDatumL struct{}

var (
	dataPlatformBusinessPartnerSupplierPartnerPlantDatumAllColumns            = []string{"BusinessPartner", "Supplier", "PartnerCounter", "PartnerFunction", "PartnerFunctionBusinessPartner", "PlantCounter", "Plant", "DefaultPlant", "DefaultStockConfirmationPlant", "IsMarkedForDeletion"}
	dataPlatformBusinessPartnerSupplierPartnerPlantDatumColumnsWithoutDefault = []string{"BusinessPartner", "Supplier", "PartnerCounter", "PartnerFunction", "PartnerFunctionBusinessPartner", "PlantCounter", "Plant", "DefaultPlant", "DefaultStockConfirmationPlant", "IsMarkedForDeletion"}
	dataPlatformBusinessPartnerSupplierPartnerPlantDatumColumnsWithDefault    = []string{}
	dataPlatformBusinessPartnerSupplierPartnerPlantDatumPrimaryKeyColumns     = []string{"BusinessPartner", "Supplier", "PartnerCounter", "PartnerFunction", "PartnerFunctionBusinessPartner", "PlantCounter"}
	dataPlatformBusinessPartnerSupplierPartnerPlantDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformBusinessPartnerSupplierPartnerPlantDatumSlice is an alias for a slice of pointers to DataPlatformBusinessPartnerSupplierPartnerPlantDatum.
	// This should almost always be used instead of []DataPlatformBusinessPartnerSupplierPartnerPlantDatum.
	DataPlatformBusinessPartnerSupplierPartnerPlantDatumSlice []*DataPlatformBusinessPartnerSupplierPartnerPlantDatum
	// DataPlatformBusinessPartnerSupplierPartnerPlantDatumHook is the signature for custom DataPlatformBusinessPartnerSupplierPartnerPlantDatum hook methods
	DataPlatformBusinessPartnerSupplierPartnerPlantDatumHook func(context.Context, boil.ContextExecutor, *DataPlatformBusinessPartnerSupplierPartnerPlantDatum) error

	dataPlatformBusinessPartnerSupplierPartnerPlantDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformBusinessPartnerSupplierPartnerPlantDatumType                 = reflect.TypeOf(&DataPlatformBusinessPartnerSupplierPartnerPlantDatum{})
	dataPlatformBusinessPartnerSupplierPartnerPlantDatumMapping              = queries.MakeStructMapping(dataPlatformBusinessPartnerSupplierPartnerPlantDatumType)
	dataPlatformBusinessPartnerSupplierPartnerPlantDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformBusinessPartnerSupplierPartnerPlantDatumType, dataPlatformBusinessPartnerSupplierPartnerPlantDatumMapping, dataPlatformBusinessPartnerSupplierPartnerPlantDatumPrimaryKeyColumns)
	dataPlatformBusinessPartnerSupplierPartnerPlantDatumInsertCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerSupplierPartnerPlantDatumInsertCache          = make(map[string]insertCache)
	dataPlatformBusinessPartnerSupplierPartnerPlantDatumUpdateCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerSupplierPartnerPlantDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformBusinessPartnerSupplierPartnerPlantDatumUpsertCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerSupplierPartnerPlantDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dataPlatformBusinessPartnerSupplierPartnerPlantDatumAfterSelectHooks []DataPlatformBusinessPartnerSupplierPartnerPlantDatumHook

var dataPlatformBusinessPartnerSupplierPartnerPlantDatumBeforeInsertHooks []DataPlatformBusinessPartnerSupplierPartnerPlantDatumHook
var dataPlatformBusinessPartnerSupplierPartnerPlantDatumAfterInsertHooks []DataPlatformBusinessPartnerSupplierPartnerPlantDatumHook

var dataPlatformBusinessPartnerSupplierPartnerPlantDatumBeforeUpdateHooks []DataPlatformBusinessPartnerSupplierPartnerPlantDatumHook
var dataPlatformBusinessPartnerSupplierPartnerPlantDatumAfterUpdateHooks []DataPlatformBusinessPartnerSupplierPartnerPlantDatumHook

var dataPlatformBusinessPartnerSupplierPartnerPlantDatumBeforeDeleteHooks []DataPlatformBusinessPartnerSupplierPartnerPlantDatumHook
var dataPlatformBusinessPartnerSupplierPartnerPlantDatumAfterDeleteHooks []DataPlatformBusinessPartnerSupplierPartnerPlantDatumHook

var dataPlatformBusinessPartnerSupplierPartnerPlantDatumBeforeUpsertHooks []DataPlatformBusinessPartnerSupplierPartnerPlantDatumHook
var dataPlatformBusinessPartnerSupplierPartnerPlantDatumAfterUpsertHooks []DataPlatformBusinessPartnerSupplierPartnerPlantDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DataPlatformBusinessPartnerSupplierPartnerPlantDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerSupplierPartnerPlantDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DataPlatformBusinessPartnerSupplierPartnerPlantDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerSupplierPartnerPlantDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DataPlatformBusinessPartnerSupplierPartnerPlantDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerSupplierPartnerPlantDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DataPlatformBusinessPartnerSupplierPartnerPlantDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerSupplierPartnerPlantDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DataPlatformBusinessPartnerSupplierPartnerPlantDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerSupplierPartnerPlantDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DataPlatformBusinessPartnerSupplierPartnerPlantDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerSupplierPartnerPlantDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DataPlatformBusinessPartnerSupplierPartnerPlantDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerSupplierPartnerPlantDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DataPlatformBusinessPartnerSupplierPartnerPlantDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerSupplierPartnerPlantDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DataPlatformBusinessPartnerSupplierPartnerPlantDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerSupplierPartnerPlantDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDataPlatformBusinessPartnerSupplierPartnerPlantDatumHook registers your hook function for all future operations.
func AddDataPlatformBusinessPartnerSupplierPartnerPlantDatumHook(hookPoint boil.HookPoint, dataPlatformBusinessPartnerSupplierPartnerPlantDatumHook DataPlatformBusinessPartnerSupplierPartnerPlantDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dataPlatformBusinessPartnerSupplierPartnerPlantDatumAfterSelectHooks = append(dataPlatformBusinessPartnerSupplierPartnerPlantDatumAfterSelectHooks, dataPlatformBusinessPartnerSupplierPartnerPlantDatumHook)
	case boil.BeforeInsertHook:
		dataPlatformBusinessPartnerSupplierPartnerPlantDatumBeforeInsertHooks = append(dataPlatformBusinessPartnerSupplierPartnerPlantDatumBeforeInsertHooks, dataPlatformBusinessPartnerSupplierPartnerPlantDatumHook)
	case boil.AfterInsertHook:
		dataPlatformBusinessPartnerSupplierPartnerPlantDatumAfterInsertHooks = append(dataPlatformBusinessPartnerSupplierPartnerPlantDatumAfterInsertHooks, dataPlatformBusinessPartnerSupplierPartnerPlantDatumHook)
	case boil.BeforeUpdateHook:
		dataPlatformBusinessPartnerSupplierPartnerPlantDatumBeforeUpdateHooks = append(dataPlatformBusinessPartnerSupplierPartnerPlantDatumBeforeUpdateHooks, dataPlatformBusinessPartnerSupplierPartnerPlantDatumHook)
	case boil.AfterUpdateHook:
		dataPlatformBusinessPartnerSupplierPartnerPlantDatumAfterUpdateHooks = append(dataPlatformBusinessPartnerSupplierPartnerPlantDatumAfterUpdateHooks, dataPlatformBusinessPartnerSupplierPartnerPlantDatumHook)
	case boil.BeforeDeleteHook:
		dataPlatformBusinessPartnerSupplierPartnerPlantDatumBeforeDeleteHooks = append(dataPlatformBusinessPartnerSupplierPartnerPlantDatumBeforeDeleteHooks, dataPlatformBusinessPartnerSupplierPartnerPlantDatumHook)
	case boil.AfterDeleteHook:
		dataPlatformBusinessPartnerSupplierPartnerPlantDatumAfterDeleteHooks = append(dataPlatformBusinessPartnerSupplierPartnerPlantDatumAfterDeleteHooks, dataPlatformBusinessPartnerSupplierPartnerPlantDatumHook)
	case boil.BeforeUpsertHook:
		dataPlatformBusinessPartnerSupplierPartnerPlantDatumBeforeUpsertHooks = append(dataPlatformBusinessPartnerSupplierPartnerPlantDatumBeforeUpsertHooks, dataPlatformBusinessPartnerSupplierPartnerPlantDatumHook)
	case boil.AfterUpsertHook:
		dataPlatformBusinessPartnerSupplierPartnerPlantDatumAfterUpsertHooks = append(dataPlatformBusinessPartnerSupplierPartnerPlantDatumAfterUpsertHooks, dataPlatformBusinessPartnerSupplierPartnerPlantDatumHook)
	}
}

// One returns a single dataPlatformBusinessPartnerSupplierPartnerPlantDatum record from the query.
func (q dataPlatformBusinessPartnerSupplierPartnerPlantDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformBusinessPartnerSupplierPartnerPlantDatum, error) {
	o := &DataPlatformBusinessPartnerSupplierPartnerPlantDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_business_partner_supplier_partner_plant_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DataPlatformBusinessPartnerSupplierPartnerPlantDatum records from the query.
func (q dataPlatformBusinessPartnerSupplierPartnerPlantDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformBusinessPartnerSupplierPartnerPlantDatumSlice, error) {
	var o []*DataPlatformBusinessPartnerSupplierPartnerPlantDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformBusinessPartnerSupplierPartnerPlantDatum slice")
	}

	if len(dataPlatformBusinessPartnerSupplierPartnerPlantDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DataPlatformBusinessPartnerSupplierPartnerPlantDatum records in the query.
func (q dataPlatformBusinessPartnerSupplierPartnerPlantDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_business_partner_supplier_partner_plant_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformBusinessPartnerSupplierPartnerPlantDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_business_partner_supplier_partner_plant_data exists")
	}

	return count > 0, nil
}

// BusinessPartnerDataPlatformPlantGeneralDatum pointed to by the foreign key.
func (o *DataPlatformBusinessPartnerSupplierPartnerPlantDatum) BusinessPartnerDataPlatformPlantGeneralDatum(mods ...qm.QueryMod) dataPlatformPlantGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.BusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPlantGeneralData(queryMods...)
}

// BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionDatum pointed to by the foreign key.
func (o *DataPlatformBusinessPartnerSupplierPartnerPlantDatum) BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerSupplierPartnerFunctionDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.BusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerSupplierPartnerFunctionData(queryMods...)
}

// LoadBusinessPartnerDataPlatformPlantGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBusinessPartnerSupplierPartnerPlantDatumL) LoadBusinessPartnerDataPlatformPlantGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerSupplierPartnerPlantDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerSupplierPartnerPlantDatum
	var object *DataPlatformBusinessPartnerSupplierPartnerPlantDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerSupplierPartnerPlantDatum.(*DataPlatformBusinessPartnerSupplierPartnerPlantDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerSupplierPartnerPlantDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerSupplierPartnerPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerSupplierPartnerPlantDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerSupplierPartnerPlantDatum.(*[]*DataPlatformBusinessPartnerSupplierPartnerPlantDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerSupplierPartnerPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerSupplierPartnerPlantDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerSupplierPartnerPlantDatumR{}
		}
		args = append(args, object.BusinessPartner)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerSupplierPartnerPlantDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_general_data`),
		qm.WhereIn(`data_platform_plant_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPlantGeneralDatum")
	}

	var resultSlice []*DataPlatformPlantGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPlantGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_plant_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_general_data")
	}

	if len(dataPlatformPlantGeneralDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BusinessPartnerDataPlatformPlantGeneralDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformPlantGeneralDatumR{}
		}
		foreign.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData = append(foreign.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformPlantGeneralDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformPlantGeneralDatumR{}
				}
				foreign.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData = append(foreign.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData, local)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBusinessPartnerSupplierPartnerPlantDatumL) LoadBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerSupplierPartnerPlantDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerSupplierPartnerPlantDatum
	var object *DataPlatformBusinessPartnerSupplierPartnerPlantDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerSupplierPartnerPlantDatum.(*DataPlatformBusinessPartnerSupplierPartnerPlantDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerSupplierPartnerPlantDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerSupplierPartnerPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerSupplierPartnerPlantDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerSupplierPartnerPlantDatum.(*[]*DataPlatformBusinessPartnerSupplierPartnerPlantDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerSupplierPartnerPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerSupplierPartnerPlantDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerSupplierPartnerPlantDatumR{}
		}
		args = append(args, object.BusinessPartner)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerSupplierPartnerPlantDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_supplier_partner_function_data`),
		qm.WhereIn(`data_platform_business_partner_supplier_partner_function_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerSupplierPartnerFunctionDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerSupplierPartnerFunctionDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerSupplierPartnerFunctionDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_supplier_partner_function_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_supplier_partner_function_data")
	}

	if len(dataPlatformBusinessPartnerSupplierPartnerFunctionDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformBusinessPartnerSupplierPartnerFunctionDatumR{}
		}
		foreign.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData = append(foreign.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformBusinessPartnerSupplierPartnerFunctionDatumR{}
				}
				foreign.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData = append(foreign.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData, local)
				break
			}
		}
	}

	return nil
}

// SetBusinessPartnerDataPlatformPlantGeneralDatum of the dataPlatformBusinessPartnerSupplierPartnerPlantDatum to the related item.
// Sets o.R.BusinessPartnerDataPlatformPlantGeneralDatum to related.
// Adds o to related.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData.
func (o *DataPlatformBusinessPartnerSupplierPartnerPlantDatum) SetBusinessPartnerDataPlatformPlantGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPlantGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_business_partner_supplier_partner_plant_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerSupplierPartnerPlantDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.BusinessPartner, o.Supplier, o.PartnerCounter, o.PartnerFunction, o.PartnerFunctionBusinessPartner, o.PlantCounter}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BusinessPartner = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerSupplierPartnerPlantDatumR{
			BusinessPartnerDataPlatformPlantGeneralDatum: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformPlantGeneralDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformPlantGeneralDatumR{
			BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData: DataPlatformBusinessPartnerSupplierPartnerPlantDatumSlice{o},
		}
	} else {
		related.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData = append(related.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData, o)
	}

	return nil
}

// SetBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionDatum of the dataPlatformBusinessPartnerSupplierPartnerPlantDatum to the related item.
// Sets o.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionDatum to related.
// Adds o to related.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData.
func (o *DataPlatformBusinessPartnerSupplierPartnerPlantDatum) SetBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerSupplierPartnerFunctionDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_business_partner_supplier_partner_plant_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerSupplierPartnerPlantDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.BusinessPartner, o.Supplier, o.PartnerCounter, o.PartnerFunction, o.PartnerFunctionBusinessPartner, o.PlantCounter}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BusinessPartner = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerSupplierPartnerPlantDatumR{
			BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionDatum: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformBusinessPartnerSupplierPartnerFunctionDatumR{
			BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData: DataPlatformBusinessPartnerSupplierPartnerPlantDatumSlice{o},
		}
	} else {
		related.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData = append(related.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData, o)
	}

	return nil
}

// DataPlatformBusinessPartnerSupplierPartnerPlantData retrieves all the records using an executor.
func DataPlatformBusinessPartnerSupplierPartnerPlantData(mods ...qm.QueryMod) dataPlatformBusinessPartnerSupplierPartnerPlantDatumQuery {
	mods = append(mods, qm.From("`data_platform_business_partner_supplier_partner_plant_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_business_partner_supplier_partner_plant_data`.*"})
	}

	return dataPlatformBusinessPartnerSupplierPartnerPlantDatumQuery{q}
}

// FindDataPlatformBusinessPartnerSupplierPartnerPlantDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformBusinessPartnerSupplierPartnerPlantDatum(ctx context.Context, exec boil.ContextExecutor, businessPartner int, supplier int, partnerCounter int, partnerFunction string, partnerFunctionBusinessPartner int, plantCounter int, selectCols ...string) (*DataPlatformBusinessPartnerSupplierPartnerPlantDatum, error) {
	dataPlatformBusinessPartnerSupplierPartnerPlantDatumObj := &DataPlatformBusinessPartnerSupplierPartnerPlantDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_business_partner_supplier_partner_plant_data` where `BusinessPartner`=? AND `Supplier`=? AND `PartnerCounter`=? AND `PartnerFunction`=? AND `PartnerFunctionBusinessPartner`=? AND `PlantCounter`=?", sel,
	)

	q := queries.Raw(query, businessPartner, supplier, partnerCounter, partnerFunction, partnerFunctionBusinessPartner, plantCounter)

	err := q.Bind(ctx, exec, dataPlatformBusinessPartnerSupplierPartnerPlantDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_business_partner_supplier_partner_plant_data")
	}

	if err = dataPlatformBusinessPartnerSupplierPartnerPlantDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dataPlatformBusinessPartnerSupplierPartnerPlantDatumObj, err
	}

	return dataPlatformBusinessPartnerSupplierPartnerPlantDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformBusinessPartnerSupplierPartnerPlantDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_business_partner_supplier_partner_plant_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformBusinessPartnerSupplierPartnerPlantDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformBusinessPartnerSupplierPartnerPlantDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerSupplierPartnerPlantDatumInsertCache[key]
	dataPlatformBusinessPartnerSupplierPartnerPlantDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformBusinessPartnerSupplierPartnerPlantDatumAllColumns,
			dataPlatformBusinessPartnerSupplierPartnerPlantDatumColumnsWithDefault,
			dataPlatformBusinessPartnerSupplierPartnerPlantDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerSupplierPartnerPlantDatumType, dataPlatformBusinessPartnerSupplierPartnerPlantDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformBusinessPartnerSupplierPartnerPlantDatumType, dataPlatformBusinessPartnerSupplierPartnerPlantDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_business_partner_supplier_partner_plant_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_business_partner_supplier_partner_plant_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_business_partner_supplier_partner_plant_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerSupplierPartnerPlantDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_business_partner_supplier_partner_plant_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BusinessPartner,
		o.Supplier,
		o.PartnerCounter,
		o.PartnerFunction,
		o.PartnerFunctionBusinessPartner,
		o.PlantCounter,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_business_partner_supplier_partner_plant_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformBusinessPartnerSupplierPartnerPlantDatumInsertCacheMut.Lock()
		dataPlatformBusinessPartnerSupplierPartnerPlantDatumInsertCache[key] = cache
		dataPlatformBusinessPartnerSupplierPartnerPlantDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DataPlatformBusinessPartnerSupplierPartnerPlantDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformBusinessPartnerSupplierPartnerPlantDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dataPlatformBusinessPartnerSupplierPartnerPlantDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerSupplierPartnerPlantDatumUpdateCache[key]
	dataPlatformBusinessPartnerSupplierPartnerPlantDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformBusinessPartnerSupplierPartnerPlantDatumAllColumns,
			dataPlatformBusinessPartnerSupplierPartnerPlantDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update data_platform_business_partner_supplier_partner_plant_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_business_partner_supplier_partner_plant_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerSupplierPartnerPlantDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerSupplierPartnerPlantDatumType, dataPlatformBusinessPartnerSupplierPartnerPlantDatumMapping, append(wl, dataPlatformBusinessPartnerSupplierPartnerPlantDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update data_platform_business_partner_supplier_partner_plant_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for data_platform_business_partner_supplier_partner_plant_data")
	}

	if !cached {
		dataPlatformBusinessPartnerSupplierPartnerPlantDatumUpdateCacheMut.Lock()
		dataPlatformBusinessPartnerSupplierPartnerPlantDatumUpdateCache[key] = cache
		dataPlatformBusinessPartnerSupplierPartnerPlantDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformBusinessPartnerSupplierPartnerPlantDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for data_platform_business_partner_supplier_partner_plant_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for data_platform_business_partner_supplier_partner_plant_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformBusinessPartnerSupplierPartnerPlantDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerSupplierPartnerPlantDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_business_partner_supplier_partner_plant_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerSupplierPartnerPlantDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dataPlatformBusinessPartnerSupplierPartnerPlantDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dataPlatformBusinessPartnerSupplierPartnerPlantDatum")
	}
	return rowsAff, nil
}

var mySQLDataPlatformBusinessPartnerSupplierPartnerPlantDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformBusinessPartnerSupplierPartnerPlantDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_business_partner_supplier_partner_plant_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformBusinessPartnerSupplierPartnerPlantDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformBusinessPartnerSupplierPartnerPlantDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformBusinessPartnerSupplierPartnerPlantDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerSupplierPartnerPlantDatumUpsertCache[key]
	dataPlatformBusinessPartnerSupplierPartnerPlantDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformBusinessPartnerSupplierPartnerPlantDatumAllColumns,
			dataPlatformBusinessPartnerSupplierPartnerPlantDatumColumnsWithDefault,
			dataPlatformBusinessPartnerSupplierPartnerPlantDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformBusinessPartnerSupplierPartnerPlantDatumAllColumns,
			dataPlatformBusinessPartnerSupplierPartnerPlantDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_business_partner_supplier_partner_plant_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_business_partner_supplier_partner_plant_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_business_partner_supplier_partner_plant_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerSupplierPartnerPlantDatumType, dataPlatformBusinessPartnerSupplierPartnerPlantDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformBusinessPartnerSupplierPartnerPlantDatumType, dataPlatformBusinessPartnerSupplierPartnerPlantDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_business_partner_supplier_partner_plant_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformBusinessPartnerSupplierPartnerPlantDatumType, dataPlatformBusinessPartnerSupplierPartnerPlantDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_business_partner_supplier_partner_plant_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_business_partner_supplier_partner_plant_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformBusinessPartnerSupplierPartnerPlantDatumUpsertCacheMut.Lock()
		dataPlatformBusinessPartnerSupplierPartnerPlantDatumUpsertCache[key] = cache
		dataPlatformBusinessPartnerSupplierPartnerPlantDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DataPlatformBusinessPartnerSupplierPartnerPlantDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformBusinessPartnerSupplierPartnerPlantDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DataPlatformBusinessPartnerSupplierPartnerPlantDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformBusinessPartnerSupplierPartnerPlantDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_business_partner_supplier_partner_plant_data` WHERE `BusinessPartner`=? AND `Supplier`=? AND `PartnerCounter`=? AND `PartnerFunction`=? AND `PartnerFunctionBusinessPartner`=? AND `PlantCounter`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from data_platform_business_partner_supplier_partner_plant_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for data_platform_business_partner_supplier_partner_plant_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformBusinessPartnerSupplierPartnerPlantDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dataPlatformBusinessPartnerSupplierPartnerPlantDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from data_platform_business_partner_supplier_partner_plant_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_business_partner_supplier_partner_plant_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformBusinessPartnerSupplierPartnerPlantDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dataPlatformBusinessPartnerSupplierPartnerPlantDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerSupplierPartnerPlantDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_business_partner_supplier_partner_plant_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerSupplierPartnerPlantDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dataPlatformBusinessPartnerSupplierPartnerPlantDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_business_partner_supplier_partner_plant_data")
	}

	if len(dataPlatformBusinessPartnerSupplierPartnerPlantDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformBusinessPartnerSupplierPartnerPlantDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformBusinessPartnerSupplierPartnerPlantDatum(ctx, exec, o.BusinessPartner, o.Supplier, o.PartnerCounter, o.PartnerFunction, o.PartnerFunctionBusinessPartner, o.PlantCounter)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformBusinessPartnerSupplierPartnerPlantDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformBusinessPartnerSupplierPartnerPlantDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerSupplierPartnerPlantDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_business_partner_supplier_partner_plant_data`.* FROM `data_platform_business_partner_supplier_partner_plant_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerSupplierPartnerPlantDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformBusinessPartnerSupplierPartnerPlantDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformBusinessPartnerSupplierPartnerPlantDatumExists checks if the DataPlatformBusinessPartnerSupplierPartnerPlantDatum row exists.
func DataPlatformBusinessPartnerSupplierPartnerPlantDatumExists(ctx context.Context, exec boil.ContextExecutor, businessPartner int, supplier int, partnerCounter int, partnerFunction string, partnerFunctionBusinessPartner int, plantCounter int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_business_partner_supplier_partner_plant_data` where `BusinessPartner`=? AND `Supplier`=? AND `PartnerCounter`=? AND `PartnerFunction`=? AND `PartnerFunctionBusinessPartner`=? AND `PlantCounter`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, businessPartner, supplier, partnerCounter, partnerFunction, partnerFunctionBusinessPartner, plantCounter)
	}
	row := exec.QueryRowContext(ctx, sql, businessPartner, supplier, partnerCounter, partnerFunction, partnerFunctionBusinessPartner, plantCounter)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_business_partner_supplier_partner_plant_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformBusinessPartnerSupplierPartnerPlantDatum row exists.
func (o *DataPlatformBusinessPartnerSupplierPartnerPlantDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformBusinessPartnerSupplierPartnerPlantDatumExists(ctx, exec, o.BusinessPartner, o.Supplier, o.PartnerCounter, o.PartnerFunction, o.PartnerFunctionBusinessPartner, o.PlantCounter)
}
