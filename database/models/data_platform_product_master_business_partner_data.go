// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformProductMasterBusinessPartnerDatum is an object representing the database table.
type DataPlatformProductMasterBusinessPartnerDatum struct {
	Product                string      `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	BusinessPartner        int         `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	ValidityEndDate        time.Time   `boil:"ValidityEndDate" json:"ValidityEndDate" toml:"ValidityEndDate" yaml:"ValidityEndDate"`
	ValidityStartDate      null.Time   `boil:"ValidityStartDate" json:"ValidityStartDate,omitempty" toml:"ValidityStartDate" yaml:"ValidityStartDate,omitempty"`
	BusinessPartnerProduct null.String `boil:"BusinessPartnerProduct" json:"BusinessPartnerProduct,omitempty" toml:"BusinessPartnerProduct" yaml:"BusinessPartnerProduct,omitempty"`
	IsMarkedForDeletion    null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformProductMasterBusinessPartnerDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformProductMasterBusinessPartnerDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformProductMasterBusinessPartnerDatumColumns = struct {
	Product                string
	BusinessPartner        string
	ValidityEndDate        string
	ValidityStartDate      string
	BusinessPartnerProduct string
	IsMarkedForDeletion    string
}{
	Product:                "Product",
	BusinessPartner:        "BusinessPartner",
	ValidityEndDate:        "ValidityEndDate",
	ValidityStartDate:      "ValidityStartDate",
	BusinessPartnerProduct: "BusinessPartnerProduct",
	IsMarkedForDeletion:    "IsMarkedForDeletion",
}

var DataPlatformProductMasterBusinessPartnerDatumTableColumns = struct {
	Product                string
	BusinessPartner        string
	ValidityEndDate        string
	ValidityStartDate      string
	BusinessPartnerProduct string
	IsMarkedForDeletion    string
}{
	Product:                "data_platform_product_master_business_partner_data.Product",
	BusinessPartner:        "data_platform_product_master_business_partner_data.BusinessPartner",
	ValidityEndDate:        "data_platform_product_master_business_partner_data.ValidityEndDate",
	ValidityStartDate:      "data_platform_product_master_business_partner_data.ValidityStartDate",
	BusinessPartnerProduct: "data_platform_product_master_business_partner_data.BusinessPartnerProduct",
	IsMarkedForDeletion:    "data_platform_product_master_business_partner_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformProductMasterBusinessPartnerDatumWhere = struct {
	Product                whereHelperstring
	BusinessPartner        whereHelperint
	ValidityEndDate        whereHelpertime_Time
	ValidityStartDate      whereHelpernull_Time
	BusinessPartnerProduct whereHelpernull_String
	IsMarkedForDeletion    whereHelpernull_Bool
}{
	Product:                whereHelperstring{field: "`data_platform_product_master_business_partner_data`.`Product`"},
	BusinessPartner:        whereHelperint{field: "`data_platform_product_master_business_partner_data`.`BusinessPartner`"},
	ValidityEndDate:        whereHelpertime_Time{field: "`data_platform_product_master_business_partner_data`.`ValidityEndDate`"},
	ValidityStartDate:      whereHelpernull_Time{field: "`data_platform_product_master_business_partner_data`.`ValidityStartDate`"},
	BusinessPartnerProduct: whereHelpernull_String{field: "`data_platform_product_master_business_partner_data`.`BusinessPartnerProduct`"},
	IsMarkedForDeletion:    whereHelpernull_Bool{field: "`data_platform_product_master_business_partner_data`.`IsMarkedForDeletion`"},
}

// DataPlatformProductMasterBusinessPartnerDatumRels is where relationship names are stored.
var DataPlatformProductMasterBusinessPartnerDatumRels = struct {
	BusinessPartnerDataPlatformBusinessPartnerGeneralDatum string
	ProductDataPlatformProductMasterGeneralDatum           string
	BusinessPartnerDataPlatformProductMasterTaxData        string
}{
	BusinessPartnerDataPlatformBusinessPartnerGeneralDatum: "BusinessPartnerDataPlatformBusinessPartnerGeneralDatum",
	ProductDataPlatformProductMasterGeneralDatum:           "ProductDataPlatformProductMasterGeneralDatum",
	BusinessPartnerDataPlatformProductMasterTaxData:        "BusinessPartnerDataPlatformProductMasterTaxData",
}

// dataPlatformProductMasterBusinessPartnerDatumR is where relationships are stored.
type dataPlatformProductMasterBusinessPartnerDatumR struct {
	BusinessPartnerDataPlatformBusinessPartnerGeneralDatum *DataPlatformBusinessPartnerGeneralDatum `boil:"BusinessPartnerDataPlatformBusinessPartnerGeneralDatum" json:"BusinessPartnerDataPlatformBusinessPartnerGeneralDatum" toml:"BusinessPartnerDataPlatformBusinessPartnerGeneralDatum" yaml:"BusinessPartnerDataPlatformBusinessPartnerGeneralDatum"`
	ProductDataPlatformProductMasterGeneralDatum           *DataPlatformProductMasterGeneralDatum   `boil:"ProductDataPlatformProductMasterGeneralDatum" json:"ProductDataPlatformProductMasterGeneralDatum" toml:"ProductDataPlatformProductMasterGeneralDatum" yaml:"ProductDataPlatformProductMasterGeneralDatum"`
	BusinessPartnerDataPlatformProductMasterTaxData        DataPlatformProductMasterTaxDatumSlice   `boil:"BusinessPartnerDataPlatformProductMasterTaxData" json:"BusinessPartnerDataPlatformProductMasterTaxData" toml:"BusinessPartnerDataPlatformProductMasterTaxData" yaml:"BusinessPartnerDataPlatformProductMasterTaxData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformProductMasterBusinessPartnerDatumR) NewStruct() *dataPlatformProductMasterBusinessPartnerDatumR {
	return &dataPlatformProductMasterBusinessPartnerDatumR{}
}

func (r *dataPlatformProductMasterBusinessPartnerDatumR) GetBusinessPartnerDataPlatformBusinessPartnerGeneralDatum() *DataPlatformBusinessPartnerGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum
}

func (r *dataPlatformProductMasterBusinessPartnerDatumR) GetProductDataPlatformProductMasterGeneralDatum() *DataPlatformProductMasterGeneralDatum {
	if r == nil {
		return nil
	}
	return r.ProductDataPlatformProductMasterGeneralDatum
}

func (r *dataPlatformProductMasterBusinessPartnerDatumR) GetBusinessPartnerDataPlatformProductMasterTaxData() DataPlatformProductMasterTaxDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformProductMasterTaxData
}

// dataPlatformProductMasterBusinessPartnerDatumL is where Load methods for each relationship are stored.
type dataPlatformProductMasterBusinessPartnerDatumL struct{}

var (
	dataPlatformProductMasterBusinessPartnerDatumAllColumns            = []string{"Product", "BusinessPartner", "ValidityEndDate", "ValidityStartDate", "BusinessPartnerProduct", "IsMarkedForDeletion"}
	dataPlatformProductMasterBusinessPartnerDatumColumnsWithoutDefault = []string{"Product", "BusinessPartner", "ValidityEndDate", "ValidityStartDate", "BusinessPartnerProduct", "IsMarkedForDeletion"}
	dataPlatformProductMasterBusinessPartnerDatumColumnsWithDefault    = []string{}
	dataPlatformProductMasterBusinessPartnerDatumPrimaryKeyColumns     = []string{"Product", "BusinessPartner", "ValidityEndDate"}
	dataPlatformProductMasterBusinessPartnerDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformProductMasterBusinessPartnerDatumSlice is an alias for a slice of pointers to DataPlatformProductMasterBusinessPartnerDatum.
	// This should almost always be used instead of []DataPlatformProductMasterBusinessPartnerDatum.
	DataPlatformProductMasterBusinessPartnerDatumSlice []*DataPlatformProductMasterBusinessPartnerDatum
	// DataPlatformProductMasterBusinessPartnerDatumHook is the signature for custom DataPlatformProductMasterBusinessPartnerDatum hook methods
	DataPlatformProductMasterBusinessPartnerDatumHook func(context.Context, boil.ContextExecutor, *DataPlatformProductMasterBusinessPartnerDatum) error

	dataPlatformProductMasterBusinessPartnerDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformProductMasterBusinessPartnerDatumType                 = reflect.TypeOf(&DataPlatformProductMasterBusinessPartnerDatum{})
	dataPlatformProductMasterBusinessPartnerDatumMapping              = queries.MakeStructMapping(dataPlatformProductMasterBusinessPartnerDatumType)
	dataPlatformProductMasterBusinessPartnerDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformProductMasterBusinessPartnerDatumType, dataPlatformProductMasterBusinessPartnerDatumMapping, dataPlatformProductMasterBusinessPartnerDatumPrimaryKeyColumns)
	dataPlatformProductMasterBusinessPartnerDatumInsertCacheMut       sync.RWMutex
	dataPlatformProductMasterBusinessPartnerDatumInsertCache          = make(map[string]insertCache)
	dataPlatformProductMasterBusinessPartnerDatumUpdateCacheMut       sync.RWMutex
	dataPlatformProductMasterBusinessPartnerDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformProductMasterBusinessPartnerDatumUpsertCacheMut       sync.RWMutex
	dataPlatformProductMasterBusinessPartnerDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dataPlatformProductMasterBusinessPartnerDatumAfterSelectHooks []DataPlatformProductMasterBusinessPartnerDatumHook

var dataPlatformProductMasterBusinessPartnerDatumBeforeInsertHooks []DataPlatformProductMasterBusinessPartnerDatumHook
var dataPlatformProductMasterBusinessPartnerDatumAfterInsertHooks []DataPlatformProductMasterBusinessPartnerDatumHook

var dataPlatformProductMasterBusinessPartnerDatumBeforeUpdateHooks []DataPlatformProductMasterBusinessPartnerDatumHook
var dataPlatformProductMasterBusinessPartnerDatumAfterUpdateHooks []DataPlatformProductMasterBusinessPartnerDatumHook

var dataPlatformProductMasterBusinessPartnerDatumBeforeDeleteHooks []DataPlatformProductMasterBusinessPartnerDatumHook
var dataPlatformProductMasterBusinessPartnerDatumAfterDeleteHooks []DataPlatformProductMasterBusinessPartnerDatumHook

var dataPlatformProductMasterBusinessPartnerDatumBeforeUpsertHooks []DataPlatformProductMasterBusinessPartnerDatumHook
var dataPlatformProductMasterBusinessPartnerDatumAfterUpsertHooks []DataPlatformProductMasterBusinessPartnerDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DataPlatformProductMasterBusinessPartnerDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformProductMasterBusinessPartnerDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DataPlatformProductMasterBusinessPartnerDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformProductMasterBusinessPartnerDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DataPlatformProductMasterBusinessPartnerDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformProductMasterBusinessPartnerDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DataPlatformProductMasterBusinessPartnerDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformProductMasterBusinessPartnerDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DataPlatformProductMasterBusinessPartnerDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformProductMasterBusinessPartnerDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DataPlatformProductMasterBusinessPartnerDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformProductMasterBusinessPartnerDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DataPlatformProductMasterBusinessPartnerDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformProductMasterBusinessPartnerDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DataPlatformProductMasterBusinessPartnerDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformProductMasterBusinessPartnerDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DataPlatformProductMasterBusinessPartnerDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformProductMasterBusinessPartnerDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDataPlatformProductMasterBusinessPartnerDatumHook registers your hook function for all future operations.
func AddDataPlatformProductMasterBusinessPartnerDatumHook(hookPoint boil.HookPoint, dataPlatformProductMasterBusinessPartnerDatumHook DataPlatformProductMasterBusinessPartnerDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dataPlatformProductMasterBusinessPartnerDatumAfterSelectHooks = append(dataPlatformProductMasterBusinessPartnerDatumAfterSelectHooks, dataPlatformProductMasterBusinessPartnerDatumHook)
	case boil.BeforeInsertHook:
		dataPlatformProductMasterBusinessPartnerDatumBeforeInsertHooks = append(dataPlatformProductMasterBusinessPartnerDatumBeforeInsertHooks, dataPlatformProductMasterBusinessPartnerDatumHook)
	case boil.AfterInsertHook:
		dataPlatformProductMasterBusinessPartnerDatumAfterInsertHooks = append(dataPlatformProductMasterBusinessPartnerDatumAfterInsertHooks, dataPlatformProductMasterBusinessPartnerDatumHook)
	case boil.BeforeUpdateHook:
		dataPlatformProductMasterBusinessPartnerDatumBeforeUpdateHooks = append(dataPlatformProductMasterBusinessPartnerDatumBeforeUpdateHooks, dataPlatformProductMasterBusinessPartnerDatumHook)
	case boil.AfterUpdateHook:
		dataPlatformProductMasterBusinessPartnerDatumAfterUpdateHooks = append(dataPlatformProductMasterBusinessPartnerDatumAfterUpdateHooks, dataPlatformProductMasterBusinessPartnerDatumHook)
	case boil.BeforeDeleteHook:
		dataPlatformProductMasterBusinessPartnerDatumBeforeDeleteHooks = append(dataPlatformProductMasterBusinessPartnerDatumBeforeDeleteHooks, dataPlatformProductMasterBusinessPartnerDatumHook)
	case boil.AfterDeleteHook:
		dataPlatformProductMasterBusinessPartnerDatumAfterDeleteHooks = append(dataPlatformProductMasterBusinessPartnerDatumAfterDeleteHooks, dataPlatformProductMasterBusinessPartnerDatumHook)
	case boil.BeforeUpsertHook:
		dataPlatformProductMasterBusinessPartnerDatumBeforeUpsertHooks = append(dataPlatformProductMasterBusinessPartnerDatumBeforeUpsertHooks, dataPlatformProductMasterBusinessPartnerDatumHook)
	case boil.AfterUpsertHook:
		dataPlatformProductMasterBusinessPartnerDatumAfterUpsertHooks = append(dataPlatformProductMasterBusinessPartnerDatumAfterUpsertHooks, dataPlatformProductMasterBusinessPartnerDatumHook)
	}
}

// One returns a single dataPlatformProductMasterBusinessPartnerDatum record from the query.
func (q dataPlatformProductMasterBusinessPartnerDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformProductMasterBusinessPartnerDatum, error) {
	o := &DataPlatformProductMasterBusinessPartnerDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_product_master_business_partner_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DataPlatformProductMasterBusinessPartnerDatum records from the query.
func (q dataPlatformProductMasterBusinessPartnerDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformProductMasterBusinessPartnerDatumSlice, error) {
	var o []*DataPlatformProductMasterBusinessPartnerDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformProductMasterBusinessPartnerDatum slice")
	}

	if len(dataPlatformProductMasterBusinessPartnerDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DataPlatformProductMasterBusinessPartnerDatum records in the query.
func (q dataPlatformProductMasterBusinessPartnerDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_product_master_business_partner_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformProductMasterBusinessPartnerDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_product_master_business_partner_data exists")
	}

	return count > 0, nil
}

// BusinessPartnerDataPlatformBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *DataPlatformProductMasterBusinessPartnerDatum) BusinessPartnerDataPlatformBusinessPartnerGeneralDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.BusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// ProductDataPlatformProductMasterGeneralDatum pointed to by the foreign key.
func (o *DataPlatformProductMasterBusinessPartnerDatum) ProductDataPlatformProductMasterGeneralDatum(mods ...qm.QueryMod) dataPlatformProductMasterGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Product` = ?", o.Product),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformProductMasterGeneralData(queryMods...)
}

// BusinessPartnerDataPlatformProductMasterTaxData retrieves all the data_platform_product_master_tax_datum's DataPlatformProductMasterTaxData with an executor via BusinessPartner column.
func (o *DataPlatformProductMasterBusinessPartnerDatum) BusinessPartnerDataPlatformProductMasterTaxData(mods ...qm.QueryMod) dataPlatformProductMasterTaxDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_master_tax_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformProductMasterTaxData(queryMods...)
}

// LoadBusinessPartnerDataPlatformBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductMasterBusinessPartnerDatumL) LoadBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductMasterBusinessPartnerDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductMasterBusinessPartnerDatum
	var object *DataPlatformProductMasterBusinessPartnerDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductMasterBusinessPartnerDatum.(*DataPlatformProductMasterBusinessPartnerDatum)
		if !ok {
			object = new(DataPlatformProductMasterBusinessPartnerDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductMasterBusinessPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductMasterBusinessPartnerDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductMasterBusinessPartnerDatum.(*[]*DataPlatformProductMasterBusinessPartnerDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductMasterBusinessPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductMasterBusinessPartnerDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductMasterBusinessPartnerDatumR{}
		}
		args = append(args, object.BusinessPartner)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductMasterBusinessPartnerDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerGeneralDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(dataPlatformBusinessPartnerGeneralDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		foreign.R.BusinessPartnerDataPlatformProductMasterBusinessPartnerData = append(foreign.R.BusinessPartnerDataPlatformProductMasterBusinessPartnerData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformBusinessPartnerGeneralDatumR{}
				}
				foreign.R.BusinessPartnerDataPlatformProductMasterBusinessPartnerData = append(foreign.R.BusinessPartnerDataPlatformProductMasterBusinessPartnerData, local)
				break
			}
		}
	}

	return nil
}

// LoadProductDataPlatformProductMasterGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductMasterBusinessPartnerDatumL) LoadProductDataPlatformProductMasterGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductMasterBusinessPartnerDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductMasterBusinessPartnerDatum
	var object *DataPlatformProductMasterBusinessPartnerDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductMasterBusinessPartnerDatum.(*DataPlatformProductMasterBusinessPartnerDatum)
		if !ok {
			object = new(DataPlatformProductMasterBusinessPartnerDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductMasterBusinessPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductMasterBusinessPartnerDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductMasterBusinessPartnerDatum.(*[]*DataPlatformProductMasterBusinessPartnerDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductMasterBusinessPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductMasterBusinessPartnerDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductMasterBusinessPartnerDatumR{}
		}
		args = append(args, object.Product)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductMasterBusinessPartnerDatumR{}
			}

			for _, a := range args {
				if a == obj.Product {
					continue Outer
				}
			}

			args = append(args, obj.Product)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_general_data`),
		qm.WhereIn(`data_platform_product_master_general_data.Product in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformProductMasterGeneralDatum")
	}

	var resultSlice []*DataPlatformProductMasterGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformProductMasterGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_product_master_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_general_data")
	}

	if len(dataPlatformProductMasterGeneralDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductDataPlatformProductMasterGeneralDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformProductMasterGeneralDatumR{}
		}
		foreign.R.ProductDataPlatformProductMasterBusinessPartnerData = append(foreign.R.ProductDataPlatformProductMasterBusinessPartnerData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Product == foreign.Product {
				local.R.ProductDataPlatformProductMasterGeneralDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformProductMasterGeneralDatumR{}
				}
				foreign.R.ProductDataPlatformProductMasterBusinessPartnerData = append(foreign.R.ProductDataPlatformProductMasterBusinessPartnerData, local)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformProductMasterTaxData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductMasterBusinessPartnerDatumL) LoadBusinessPartnerDataPlatformProductMasterTaxData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductMasterBusinessPartnerDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductMasterBusinessPartnerDatum
	var object *DataPlatformProductMasterBusinessPartnerDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductMasterBusinessPartnerDatum.(*DataPlatformProductMasterBusinessPartnerDatum)
		if !ok {
			object = new(DataPlatformProductMasterBusinessPartnerDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductMasterBusinessPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductMasterBusinessPartnerDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductMasterBusinessPartnerDatum.(*[]*DataPlatformProductMasterBusinessPartnerDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductMasterBusinessPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductMasterBusinessPartnerDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductMasterBusinessPartnerDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductMasterBusinessPartnerDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_tax_data`),
		qm.WhereIn(`data_platform_product_master_tax_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_master_tax_data")
	}

	var resultSlice []*DataPlatformProductMasterTaxDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_master_tax_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_master_tax_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_tax_data")
	}

	if len(dataPlatformProductMasterTaxDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BusinessPartnerDataPlatformProductMasterTaxData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformProductMasterTaxDatumR{}
			}
			foreign.R.BusinessPartnerDataPlatformProductMasterBusinessPartnerDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformProductMasterTaxData = append(local.R.BusinessPartnerDataPlatformProductMasterTaxData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformProductMasterTaxDatumR{}
				}
				foreign.R.BusinessPartnerDataPlatformProductMasterBusinessPartnerDatum = local
				break
			}
		}
	}

	return nil
}

// SetBusinessPartnerDataPlatformBusinessPartnerGeneralDatum of the dataPlatformProductMasterBusinessPartnerDatum to the related item.
// Sets o.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum to related.
// Adds o to related.R.BusinessPartnerDataPlatformProductMasterBusinessPartnerData.
func (o *DataPlatformProductMasterBusinessPartnerDatum) SetBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_product_master_business_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterBusinessPartnerDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.Product, o.BusinessPartner, o.ValidityEndDate}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BusinessPartner = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformProductMasterBusinessPartnerDatumR{
			BusinessPartnerDataPlatformBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BusinessPartnerDataPlatformProductMasterBusinessPartnerData: DataPlatformProductMasterBusinessPartnerDatumSlice{o},
		}
	} else {
		related.R.BusinessPartnerDataPlatformProductMasterBusinessPartnerData = append(related.R.BusinessPartnerDataPlatformProductMasterBusinessPartnerData, o)
	}

	return nil
}

// SetProductDataPlatformProductMasterGeneralDatum of the dataPlatformProductMasterBusinessPartnerDatum to the related item.
// Sets o.R.ProductDataPlatformProductMasterGeneralDatum to related.
// Adds o to related.R.ProductDataPlatformProductMasterBusinessPartnerData.
func (o *DataPlatformProductMasterBusinessPartnerDatum) SetProductDataPlatformProductMasterGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformProductMasterGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_product_master_business_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Product"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterBusinessPartnerDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Product, o.Product, o.BusinessPartner, o.ValidityEndDate}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Product = related.Product
	if o.R == nil {
		o.R = &dataPlatformProductMasterBusinessPartnerDatumR{
			ProductDataPlatformProductMasterGeneralDatum: related,
		}
	} else {
		o.R.ProductDataPlatformProductMasterGeneralDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformProductMasterGeneralDatumR{
			ProductDataPlatformProductMasterBusinessPartnerData: DataPlatformProductMasterBusinessPartnerDatumSlice{o},
		}
	} else {
		related.R.ProductDataPlatformProductMasterBusinessPartnerData = append(related.R.ProductDataPlatformProductMasterBusinessPartnerData, o)
	}

	return nil
}

// AddBusinessPartnerDataPlatformProductMasterTaxData adds the given related objects to the existing relationships
// of the data_platform_product_master_business_partner_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformProductMasterTaxData.
// Sets related.R.BusinessPartnerDataPlatformProductMasterBusinessPartnerDatum appropriately.
func (o *DataPlatformProductMasterBusinessPartnerDatum) AddBusinessPartnerDataPlatformProductMasterTaxData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterTaxDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_master_tax_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterTaxDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Product, rel.BusinessPartner, rel.Country, rel.TaxCategory}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductMasterBusinessPartnerDatumR{
			BusinessPartnerDataPlatformProductMasterTaxData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformProductMasterTaxData = append(o.R.BusinessPartnerDataPlatformProductMasterTaxData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformProductMasterTaxDatumR{
				BusinessPartnerDataPlatformProductMasterBusinessPartnerDatum: o,
			}
		} else {
			rel.R.BusinessPartnerDataPlatformProductMasterBusinessPartnerDatum = o
		}
	}
	return nil
}

// DataPlatformProductMasterBusinessPartnerData retrieves all the records using an executor.
func DataPlatformProductMasterBusinessPartnerData(mods ...qm.QueryMod) dataPlatformProductMasterBusinessPartnerDatumQuery {
	mods = append(mods, qm.From("`data_platform_product_master_business_partner_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_product_master_business_partner_data`.*"})
	}

	return dataPlatformProductMasterBusinessPartnerDatumQuery{q}
}

// FindDataPlatformProductMasterBusinessPartnerDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformProductMasterBusinessPartnerDatum(ctx context.Context, exec boil.ContextExecutor, product string, businessPartner int, validityEndDate time.Time, selectCols ...string) (*DataPlatformProductMasterBusinessPartnerDatum, error) {
	dataPlatformProductMasterBusinessPartnerDatumObj := &DataPlatformProductMasterBusinessPartnerDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_product_master_business_partner_data` where `Product`=? AND `BusinessPartner`=? AND `ValidityEndDate`=?", sel,
	)

	q := queries.Raw(query, product, businessPartner, validityEndDate)

	err := q.Bind(ctx, exec, dataPlatformProductMasterBusinessPartnerDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_product_master_business_partner_data")
	}

	if err = dataPlatformProductMasterBusinessPartnerDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dataPlatformProductMasterBusinessPartnerDatumObj, err
	}

	return dataPlatformProductMasterBusinessPartnerDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformProductMasterBusinessPartnerDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_product_master_business_partner_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductMasterBusinessPartnerDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformProductMasterBusinessPartnerDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformProductMasterBusinessPartnerDatumInsertCache[key]
	dataPlatformProductMasterBusinessPartnerDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformProductMasterBusinessPartnerDatumAllColumns,
			dataPlatformProductMasterBusinessPartnerDatumColumnsWithDefault,
			dataPlatformProductMasterBusinessPartnerDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductMasterBusinessPartnerDatumType, dataPlatformProductMasterBusinessPartnerDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformProductMasterBusinessPartnerDatumType, dataPlatformProductMasterBusinessPartnerDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_product_master_business_partner_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_product_master_business_partner_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_product_master_business_partner_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterBusinessPartnerDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_product_master_business_partner_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Product,
		o.BusinessPartner,
		o.ValidityEndDate,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_product_master_business_partner_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductMasterBusinessPartnerDatumInsertCacheMut.Lock()
		dataPlatformProductMasterBusinessPartnerDatumInsertCache[key] = cache
		dataPlatformProductMasterBusinessPartnerDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DataPlatformProductMasterBusinessPartnerDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformProductMasterBusinessPartnerDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dataPlatformProductMasterBusinessPartnerDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformProductMasterBusinessPartnerDatumUpdateCache[key]
	dataPlatformProductMasterBusinessPartnerDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformProductMasterBusinessPartnerDatumAllColumns,
			dataPlatformProductMasterBusinessPartnerDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update data_platform_product_master_business_partner_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_product_master_business_partner_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterBusinessPartnerDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformProductMasterBusinessPartnerDatumType, dataPlatformProductMasterBusinessPartnerDatumMapping, append(wl, dataPlatformProductMasterBusinessPartnerDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update data_platform_product_master_business_partner_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for data_platform_product_master_business_partner_data")
	}

	if !cached {
		dataPlatformProductMasterBusinessPartnerDatumUpdateCacheMut.Lock()
		dataPlatformProductMasterBusinessPartnerDatumUpdateCache[key] = cache
		dataPlatformProductMasterBusinessPartnerDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformProductMasterBusinessPartnerDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for data_platform_product_master_business_partner_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for data_platform_product_master_business_partner_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformProductMasterBusinessPartnerDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductMasterBusinessPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_product_master_business_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductMasterBusinessPartnerDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dataPlatformProductMasterBusinessPartnerDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dataPlatformProductMasterBusinessPartnerDatum")
	}
	return rowsAff, nil
}

var mySQLDataPlatformProductMasterBusinessPartnerDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformProductMasterBusinessPartnerDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_product_master_business_partner_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductMasterBusinessPartnerDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformProductMasterBusinessPartnerDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformProductMasterBusinessPartnerDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformProductMasterBusinessPartnerDatumUpsertCache[key]
	dataPlatformProductMasterBusinessPartnerDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformProductMasterBusinessPartnerDatumAllColumns,
			dataPlatformProductMasterBusinessPartnerDatumColumnsWithDefault,
			dataPlatformProductMasterBusinessPartnerDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformProductMasterBusinessPartnerDatumAllColumns,
			dataPlatformProductMasterBusinessPartnerDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_product_master_business_partner_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_product_master_business_partner_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_product_master_business_partner_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductMasterBusinessPartnerDatumType, dataPlatformProductMasterBusinessPartnerDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformProductMasterBusinessPartnerDatumType, dataPlatformProductMasterBusinessPartnerDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_product_master_business_partner_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformProductMasterBusinessPartnerDatumType, dataPlatformProductMasterBusinessPartnerDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_product_master_business_partner_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_product_master_business_partner_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductMasterBusinessPartnerDatumUpsertCacheMut.Lock()
		dataPlatformProductMasterBusinessPartnerDatumUpsertCache[key] = cache
		dataPlatformProductMasterBusinessPartnerDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DataPlatformProductMasterBusinessPartnerDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformProductMasterBusinessPartnerDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DataPlatformProductMasterBusinessPartnerDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformProductMasterBusinessPartnerDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_product_master_business_partner_data` WHERE `Product`=? AND `BusinessPartner`=? AND `ValidityEndDate`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from data_platform_product_master_business_partner_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for data_platform_product_master_business_partner_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformProductMasterBusinessPartnerDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dataPlatformProductMasterBusinessPartnerDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from data_platform_product_master_business_partner_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_product_master_business_partner_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformProductMasterBusinessPartnerDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dataPlatformProductMasterBusinessPartnerDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductMasterBusinessPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_product_master_business_partner_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductMasterBusinessPartnerDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dataPlatformProductMasterBusinessPartnerDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_product_master_business_partner_data")
	}

	if len(dataPlatformProductMasterBusinessPartnerDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformProductMasterBusinessPartnerDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformProductMasterBusinessPartnerDatum(ctx, exec, o.Product, o.BusinessPartner, o.ValidityEndDate)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformProductMasterBusinessPartnerDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformProductMasterBusinessPartnerDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductMasterBusinessPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_product_master_business_partner_data`.* FROM `data_platform_product_master_business_partner_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductMasterBusinessPartnerDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformProductMasterBusinessPartnerDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformProductMasterBusinessPartnerDatumExists checks if the DataPlatformProductMasterBusinessPartnerDatum row exists.
func DataPlatformProductMasterBusinessPartnerDatumExists(ctx context.Context, exec boil.ContextExecutor, product string, businessPartner int, validityEndDate time.Time) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_product_master_business_partner_data` where `Product`=? AND `BusinessPartner`=? AND `ValidityEndDate`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, product, businessPartner, validityEndDate)
	}
	row := exec.QueryRowContext(ctx, sql, product, businessPartner, validityEndDate)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_product_master_business_partner_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformProductMasterBusinessPartnerDatum row exists.
func (o *DataPlatformProductMasterBusinessPartnerDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformProductMasterBusinessPartnerDatumExists(ctx, exec, o.Product, o.BusinessPartner, o.ValidityEndDate)
}
