// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformOrdersItemDatum is an object representing the database table.
type DataPlatformOrdersItemDatum struct {
	OrderID                                       int          `boil:"OrderID" json:"OrderID" toml:"OrderID" yaml:"OrderID"`
	OrderItem                                     int          `boil:"OrderItem" json:"OrderItem" toml:"OrderItem" yaml:"OrderItem"`
	OrderItemCategory                             string       `boil:"OrderItemCategory" json:"OrderItemCategory" toml:"OrderItemCategory" yaml:"OrderItemCategory"`
	SupplyChainRelationshipID                     int          `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipDeliveryID             null.Int     `boil:"SupplyChainRelationshipDeliveryID" json:"SupplyChainRelationshipDeliveryID,omitempty" toml:"SupplyChainRelationshipDeliveryID" yaml:"SupplyChainRelationshipDeliveryID,omitempty"`
	SupplyChainRelationshipDeliveryPlantID        null.Int     `boil:"SupplyChainRelationshipDeliveryPlantID" json:"SupplyChainRelationshipDeliveryPlantID,omitempty" toml:"SupplyChainRelationshipDeliveryPlantID" yaml:"SupplyChainRelationshipDeliveryPlantID,omitempty"`
	SupplyChainRelationshipStockConfPlantID       null.Int     `boil:"SupplyChainRelationshipStockConfPlantID" json:"SupplyChainRelationshipStockConfPlantID,omitempty" toml:"SupplyChainRelationshipStockConfPlantID" yaml:"SupplyChainRelationshipStockConfPlantID,omitempty"`
	SupplyChainRelationshipProductionPlantID      null.Int     `boil:"SupplyChainRelationshipProductionPlantID" json:"SupplyChainRelationshipProductionPlantID,omitempty" toml:"SupplyChainRelationshipProductionPlantID" yaml:"SupplyChainRelationshipProductionPlantID,omitempty"`
	OrderItemText                                 string       `boil:"OrderItemText" json:"OrderItemText" toml:"OrderItemText" yaml:"OrderItemText"`
	OrderItemTextByBuyer                          string       `boil:"OrderItemTextByBuyer" json:"OrderItemTextByBuyer" toml:"OrderItemTextByBuyer" yaml:"OrderItemTextByBuyer"`
	OrderItemTextBySeller                         string       `boil:"OrderItemTextBySeller" json:"OrderItemTextBySeller" toml:"OrderItemTextBySeller" yaml:"OrderItemTextBySeller"`
	Product                                       string       `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	ProductStandardID                             string       `boil:"ProductStandardID" json:"ProductStandardID" toml:"ProductStandardID" yaml:"ProductStandardID"`
	ProductGroup                                  null.String  `boil:"ProductGroup" json:"ProductGroup,omitempty" toml:"ProductGroup" yaml:"ProductGroup,omitempty"`
	BaseUnit                                      string       `boil:"BaseUnit" json:"BaseUnit" toml:"BaseUnit" yaml:"BaseUnit"`
	PricingDate                                   string       `boil:"PricingDate" json:"PricingDate" toml:"PricingDate" yaml:"PricingDate"`
	PriceDetnExchangeRate                         null.Float32 `boil:"PriceDetnExchangeRate" json:"PriceDetnExchangeRate,omitempty" toml:"PriceDetnExchangeRate" yaml:"PriceDetnExchangeRate,omitempty"`
	RequestedDeliveryDate                         string       `boil:"RequestedDeliveryDate" json:"RequestedDeliveryDate" toml:"RequestedDeliveryDate" yaml:"RequestedDeliveryDate"`
	RequestedDeliveryTime                         string       `boil:"RequestedDeliveryTime" json:"RequestedDeliveryTime" toml:"RequestedDeliveryTime" yaml:"RequestedDeliveryTime"`
	DeliverToParty                                null.Int     `boil:"DeliverToParty" json:"DeliverToParty,omitempty" toml:"DeliverToParty" yaml:"DeliverToParty,omitempty"`
	DeliverFromParty                              null.Int     `boil:"DeliverFromParty" json:"DeliverFromParty,omitempty" toml:"DeliverFromParty" yaml:"DeliverFromParty,omitempty"`
	CreationDate                                  string       `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	CreationTime                                  string       `boil:"CreationTime" json:"CreationTime" toml:"CreationTime" yaml:"CreationTime"`
	LastChangeDate                                string       `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	LastChangeTime                                string       `boil:"LastChangeTime" json:"LastChangeTime" toml:"LastChangeTime" yaml:"LastChangeTime"`
	DeliverToPlant                                null.String  `boil:"DeliverToPlant" json:"DeliverToPlant,omitempty" toml:"DeliverToPlant" yaml:"DeliverToPlant,omitempty"`
	DeliverToPlantTimeZone                        null.String  `boil:"DeliverToPlantTimeZone" json:"DeliverToPlantTimeZone,omitempty" toml:"DeliverToPlantTimeZone" yaml:"DeliverToPlantTimeZone,omitempty"`
	DeliverToPlantStorageLocation                 null.String  `boil:"DeliverToPlantStorageLocation" json:"DeliverToPlantStorageLocation,omitempty" toml:"DeliverToPlantStorageLocation" yaml:"DeliverToPlantStorageLocation,omitempty"`
	ProductIsBatchManagedInDeliverToPlant         null.Bool    `boil:"ProductIsBatchManagedInDeliverToPlant" json:"ProductIsBatchManagedInDeliverToPlant,omitempty" toml:"ProductIsBatchManagedInDeliverToPlant" yaml:"ProductIsBatchManagedInDeliverToPlant,omitempty"`
	BatchMgmtPolicyInDeliverToPlant               null.String  `boil:"BatchMgmtPolicyInDeliverToPlant" json:"BatchMgmtPolicyInDeliverToPlant,omitempty" toml:"BatchMgmtPolicyInDeliverToPlant" yaml:"BatchMgmtPolicyInDeliverToPlant,omitempty"`
	DeliverToPlantBatch                           null.String  `boil:"DeliverToPlantBatch" json:"DeliverToPlantBatch,omitempty" toml:"DeliverToPlantBatch" yaml:"DeliverToPlantBatch,omitempty"`
	DeliverToPlantBatchValidityStartDate          null.String  `boil:"DeliverToPlantBatchValidityStartDate" json:"DeliverToPlantBatchValidityStartDate,omitempty" toml:"DeliverToPlantBatchValidityStartDate" yaml:"DeliverToPlantBatchValidityStartDate,omitempty"`
	DeliverToPlantBatchValidityStartTime          null.String  `boil:"DeliverToPlantBatchValidityStartTime" json:"DeliverToPlantBatchValidityStartTime,omitempty" toml:"DeliverToPlantBatchValidityStartTime" yaml:"DeliverToPlantBatchValidityStartTime,omitempty"`
	DeliverToPlantBatchValidityEndDate            null.String  `boil:"DeliverToPlantBatchValidityEndDate" json:"DeliverToPlantBatchValidityEndDate,omitempty" toml:"DeliverToPlantBatchValidityEndDate" yaml:"DeliverToPlantBatchValidityEndDate,omitempty"`
	DeliverToPlantBatchValidityEndTime            null.String  `boil:"DeliverToPlantBatchValidityEndTime" json:"DeliverToPlantBatchValidityEndTime,omitempty" toml:"DeliverToPlantBatchValidityEndTime" yaml:"DeliverToPlantBatchValidityEndTime,omitempty"`
	DeliverFromPlant                              null.String  `boil:"DeliverFromPlant" json:"DeliverFromPlant,omitempty" toml:"DeliverFromPlant" yaml:"DeliverFromPlant,omitempty"`
	DeliverFromPlantTimeZone                      null.String  `boil:"DeliverFromPlantTimeZone" json:"DeliverFromPlantTimeZone,omitempty" toml:"DeliverFromPlantTimeZone" yaml:"DeliverFromPlantTimeZone,omitempty"`
	DeliverFromPlantStorageLocation               null.String  `boil:"DeliverFromPlantStorageLocation" json:"DeliverFromPlantStorageLocation,omitempty" toml:"DeliverFromPlantStorageLocation" yaml:"DeliverFromPlantStorageLocation,omitempty"`
	ProductIsBatchManagedInDeliverFromPlant       null.Bool    `boil:"ProductIsBatchManagedInDeliverFromPlant" json:"ProductIsBatchManagedInDeliverFromPlant,omitempty" toml:"ProductIsBatchManagedInDeliverFromPlant" yaml:"ProductIsBatchManagedInDeliverFromPlant,omitempty"`
	BatchMgmtPolicyInDeliverFromPlant             null.String  `boil:"BatchMgmtPolicyInDeliverFromPlant" json:"BatchMgmtPolicyInDeliverFromPlant,omitempty" toml:"BatchMgmtPolicyInDeliverFromPlant" yaml:"BatchMgmtPolicyInDeliverFromPlant,omitempty"`
	DeliverFromPlantBatch                         null.String  `boil:"DeliverFromPlantBatch" json:"DeliverFromPlantBatch,omitempty" toml:"DeliverFromPlantBatch" yaml:"DeliverFromPlantBatch,omitempty"`
	DeliverFromPlantBatchValidityStartDate        null.String  `boil:"DeliverFromPlantBatchValidityStartDate" json:"DeliverFromPlantBatchValidityStartDate,omitempty" toml:"DeliverFromPlantBatchValidityStartDate" yaml:"DeliverFromPlantBatchValidityStartDate,omitempty"`
	DeliverFromPlantBatchValidityStartTime        null.String  `boil:"DeliverFromPlantBatchValidityStartTime" json:"DeliverFromPlantBatchValidityStartTime,omitempty" toml:"DeliverFromPlantBatchValidityStartTime" yaml:"DeliverFromPlantBatchValidityStartTime,omitempty"`
	DeliverFromPlantBatchValidityEndDate          null.String  `boil:"DeliverFromPlantBatchValidityEndDate" json:"DeliverFromPlantBatchValidityEndDate,omitempty" toml:"DeliverFromPlantBatchValidityEndDate" yaml:"DeliverFromPlantBatchValidityEndDate,omitempty"`
	DeliverFromPlantBatchValidityEndTime          null.String  `boil:"DeliverFromPlantBatchValidityEndTime" json:"DeliverFromPlantBatchValidityEndTime,omitempty" toml:"DeliverFromPlantBatchValidityEndTime" yaml:"DeliverFromPlantBatchValidityEndTime,omitempty"`
	DeliveryUnit                                  string       `boil:"DeliveryUnit" json:"DeliveryUnit" toml:"DeliveryUnit" yaml:"DeliveryUnit"`
	StockConfirmationBusinessPartner              null.Int     `boil:"StockConfirmationBusinessPartner" json:"StockConfirmationBusinessPartner,omitempty" toml:"StockConfirmationBusinessPartner" yaml:"StockConfirmationBusinessPartner,omitempty"`
	StockConfirmationPlant                        null.String  `boil:"StockConfirmationPlant" json:"StockConfirmationPlant,omitempty" toml:"StockConfirmationPlant" yaml:"StockConfirmationPlant,omitempty"`
	StockConfirmationPlantTimeZone                null.String  `boil:"StockConfirmationPlantTimeZone" json:"StockConfirmationPlantTimeZone,omitempty" toml:"StockConfirmationPlantTimeZone" yaml:"StockConfirmationPlantTimeZone,omitempty"`
	ProductIsBatchManagedInStockConfirmationPlant null.Bool    `boil:"ProductIsBatchManagedInStockConfirmationPlant" json:"ProductIsBatchManagedInStockConfirmationPlant,omitempty" toml:"ProductIsBatchManagedInStockConfirmationPlant" yaml:"ProductIsBatchManagedInStockConfirmationPlant,omitempty"`
	BatchMgmtPolicyInStockConfirmationPlant       null.String  `boil:"BatchMgmtPolicyInStockConfirmationPlant" json:"BatchMgmtPolicyInStockConfirmationPlant,omitempty" toml:"BatchMgmtPolicyInStockConfirmationPlant" yaml:"BatchMgmtPolicyInStockConfirmationPlant,omitempty"`
	StockConfirmationPlantBatch                   null.String  `boil:"StockConfirmationPlantBatch" json:"StockConfirmationPlantBatch,omitempty" toml:"StockConfirmationPlantBatch" yaml:"StockConfirmationPlantBatch,omitempty"`
	StockConfirmationPlantBatchValidityStartDate  null.String  `boil:"StockConfirmationPlantBatchValidityStartDate" json:"StockConfirmationPlantBatchValidityStartDate,omitempty" toml:"StockConfirmationPlantBatchValidityStartDate" yaml:"StockConfirmationPlantBatchValidityStartDate,omitempty"`
	StockConfirmationPlantBatchValidityStartTime  null.String  `boil:"StockConfirmationPlantBatchValidityStartTime" json:"StockConfirmationPlantBatchValidityStartTime,omitempty" toml:"StockConfirmationPlantBatchValidityStartTime" yaml:"StockConfirmationPlantBatchValidityStartTime,omitempty"`
	StockConfirmationPlantBatchValidityEndDate    null.String  `boil:"StockConfirmationPlantBatchValidityEndDate" json:"StockConfirmationPlantBatchValidityEndDate,omitempty" toml:"StockConfirmationPlantBatchValidityEndDate" yaml:"StockConfirmationPlantBatchValidityEndDate,omitempty"`
	StockConfirmationPlantBatchValidityEndTime    null.String  `boil:"StockConfirmationPlantBatchValidityEndTime" json:"StockConfirmationPlantBatchValidityEndTime,omitempty" toml:"StockConfirmationPlantBatchValidityEndTime" yaml:"StockConfirmationPlantBatchValidityEndTime,omitempty"`
	ServicesRenderingDate                         null.String  `boil:"ServicesRenderingDate" json:"ServicesRenderingDate,omitempty" toml:"ServicesRenderingDate" yaml:"ServicesRenderingDate,omitempty"`
	OrderQuantityInBaseUnit                       float32      `boil:"OrderQuantityInBaseUnit" json:"OrderQuantityInBaseUnit" toml:"OrderQuantityInBaseUnit" yaml:"OrderQuantityInBaseUnit"`
	OrderQuantityInDeliveryUnit                   float32      `boil:"OrderQuantityInDeliveryUnit" json:"OrderQuantityInDeliveryUnit" toml:"OrderQuantityInDeliveryUnit" yaml:"OrderQuantityInDeliveryUnit"`
	QuantityPerPackage                            null.Float32 `boil:"QuantityPerPackage" json:"QuantityPerPackage,omitempty" toml:"QuantityPerPackage" yaml:"QuantityPerPackage,omitempty"`
	StockConfirmationPolicy                       null.String  `boil:"StockConfirmationPolicy" json:"StockConfirmationPolicy,omitempty" toml:"StockConfirmationPolicy" yaml:"StockConfirmationPolicy,omitempty"`
	StockConfirmationStatus                       null.String  `boil:"StockConfirmationStatus" json:"StockConfirmationStatus,omitempty" toml:"StockConfirmationStatus" yaml:"StockConfirmationStatus,omitempty"`
	ConfirmedOrderQuantityInBaseUnit              null.Float32 `boil:"ConfirmedOrderQuantityInBaseUnit" json:"ConfirmedOrderQuantityInBaseUnit,omitempty" toml:"ConfirmedOrderQuantityInBaseUnit" yaml:"ConfirmedOrderQuantityInBaseUnit,omitempty"`
	ItemWeightUnit                                null.String  `boil:"ItemWeightUnit" json:"ItemWeightUnit,omitempty" toml:"ItemWeightUnit" yaml:"ItemWeightUnit,omitempty"`
	ProductGrossWeight                            null.Float32 `boil:"ProductGrossWeight" json:"ProductGrossWeight,omitempty" toml:"ProductGrossWeight" yaml:"ProductGrossWeight,omitempty"`
	ItemGrossWeight                               null.Float32 `boil:"ItemGrossWeight" json:"ItemGrossWeight,omitempty" toml:"ItemGrossWeight" yaml:"ItemGrossWeight,omitempty"`
	ProductNetWeight                              null.Float32 `boil:"ProductNetWeight" json:"ProductNetWeight,omitempty" toml:"ProductNetWeight" yaml:"ProductNetWeight,omitempty"`
	ItemNetWeight                                 null.Float32 `boil:"ItemNetWeight" json:"ItemNetWeight,omitempty" toml:"ItemNetWeight" yaml:"ItemNetWeight,omitempty"`
	InternalCapacityQuantity                      null.Float32 `boil:"InternalCapacityQuantity" json:"InternalCapacityQuantity,omitempty" toml:"InternalCapacityQuantity" yaml:"InternalCapacityQuantity,omitempty"`
	InternalCapacityQuantityUnit                  null.String  `boil:"InternalCapacityQuantityUnit" json:"InternalCapacityQuantityUnit,omitempty" toml:"InternalCapacityQuantityUnit" yaml:"InternalCapacityQuantityUnit,omitempty"`
	NetAmount                                     null.Float32 `boil:"NetAmount" json:"NetAmount,omitempty" toml:"NetAmount" yaml:"NetAmount,omitempty"`
	TaxAmount                                     null.Float32 `boil:"TaxAmount" json:"TaxAmount,omitempty" toml:"TaxAmount" yaml:"TaxAmount,omitempty"`
	GrossAmount                                   null.Float32 `boil:"GrossAmount" json:"GrossAmount,omitempty" toml:"GrossAmount" yaml:"GrossAmount,omitempty"`
	InvoiceDocumentDate                           null.String  `boil:"InvoiceDocumentDate" json:"InvoiceDocumentDate,omitempty" toml:"InvoiceDocumentDate" yaml:"InvoiceDocumentDate,omitempty"`
	ProductionPlantBusinessPartner                null.Int     `boil:"ProductionPlantBusinessPartner" json:"ProductionPlantBusinessPartner,omitempty" toml:"ProductionPlantBusinessPartner" yaml:"ProductionPlantBusinessPartner,omitempty"`
	ProductionPlant                               null.String  `boil:"ProductionPlant" json:"ProductionPlant,omitempty" toml:"ProductionPlant" yaml:"ProductionPlant,omitempty"`
	ProductionPlantTimeZone                       null.String  `boil:"ProductionPlantTimeZone" json:"ProductionPlantTimeZone,omitempty" toml:"ProductionPlantTimeZone" yaml:"ProductionPlantTimeZone,omitempty"`
	ProductionPlantStorageLocation                null.String  `boil:"ProductionPlantStorageLocation" json:"ProductionPlantStorageLocation,omitempty" toml:"ProductionPlantStorageLocation" yaml:"ProductionPlantStorageLocation,omitempty"`
	ProductIsBatchManagedInProductionPlant        null.Bool    `boil:"ProductIsBatchManagedInProductionPlant" json:"ProductIsBatchManagedInProductionPlant,omitempty" toml:"ProductIsBatchManagedInProductionPlant" yaml:"ProductIsBatchManagedInProductionPlant,omitempty"`
	BatchMgmtPolicyInProductionPlant              null.String  `boil:"BatchMgmtPolicyInProductionPlant" json:"BatchMgmtPolicyInProductionPlant,omitempty" toml:"BatchMgmtPolicyInProductionPlant" yaml:"BatchMgmtPolicyInProductionPlant,omitempty"`
	ProductionPlantBatch                          null.String  `boil:"ProductionPlantBatch" json:"ProductionPlantBatch,omitempty" toml:"ProductionPlantBatch" yaml:"ProductionPlantBatch,omitempty"`
	ProductionPlantBatchValidityStartDate         null.String  `boil:"ProductionPlantBatchValidityStartDate" json:"ProductionPlantBatchValidityStartDate,omitempty" toml:"ProductionPlantBatchValidityStartDate" yaml:"ProductionPlantBatchValidityStartDate,omitempty"`
	ProductionPlantBatchValidityStartTime         null.String  `boil:"ProductionPlantBatchValidityStartTime" json:"ProductionPlantBatchValidityStartTime,omitempty" toml:"ProductionPlantBatchValidityStartTime" yaml:"ProductionPlantBatchValidityStartTime,omitempty"`
	ProductionPlantBatchValidityEndDate           null.String  `boil:"ProductionPlantBatchValidityEndDate" json:"ProductionPlantBatchValidityEndDate,omitempty" toml:"ProductionPlantBatchValidityEndDate" yaml:"ProductionPlantBatchValidityEndDate,omitempty"`
	ProductionPlantBatchValidityEndTime           null.String  `boil:"ProductionPlantBatchValidityEndTime" json:"ProductionPlantBatchValidityEndTime,omitempty" toml:"ProductionPlantBatchValidityEndTime" yaml:"ProductionPlantBatchValidityEndTime,omitempty"`
	InspectionPlan                                null.Int     `boil:"InspectionPlan" json:"InspectionPlan,omitempty" toml:"InspectionPlan" yaml:"InspectionPlan,omitempty"`
	InspectionPlant                               null.String  `boil:"InspectionPlant" json:"InspectionPlant,omitempty" toml:"InspectionPlant" yaml:"InspectionPlant,omitempty"`
	InspectionOrder                               null.Int     `boil:"InspectionOrder" json:"InspectionOrder,omitempty" toml:"InspectionOrder" yaml:"InspectionOrder,omitempty"`
	Incoterms                                     null.String  `boil:"Incoterms" json:"Incoterms,omitempty" toml:"Incoterms" yaml:"Incoterms,omitempty"`
	TransactionTaxClassification                  string       `boil:"TransactionTaxClassification" json:"TransactionTaxClassification" toml:"TransactionTaxClassification" yaml:"TransactionTaxClassification"`
	ProductTaxClassificationBillToCountry         string       `boil:"ProductTaxClassificationBillToCountry" json:"ProductTaxClassificationBillToCountry" toml:"ProductTaxClassificationBillToCountry" yaml:"ProductTaxClassificationBillToCountry"`
	ProductTaxClassificationBillFromCountry       string       `boil:"ProductTaxClassificationBillFromCountry" json:"ProductTaxClassificationBillFromCountry" toml:"ProductTaxClassificationBillFromCountry" yaml:"ProductTaxClassificationBillFromCountry"`
	DefinedTaxClassification                      string       `boil:"DefinedTaxClassification" json:"DefinedTaxClassification" toml:"DefinedTaxClassification" yaml:"DefinedTaxClassification"`
	AccountAssignmentGroup                        string       `boil:"AccountAssignmentGroup" json:"AccountAssignmentGroup" toml:"AccountAssignmentGroup" yaml:"AccountAssignmentGroup"`
	ProductAccountAssignmentGroup                 string       `boil:"ProductAccountAssignmentGroup" json:"ProductAccountAssignmentGroup" toml:"ProductAccountAssignmentGroup" yaml:"ProductAccountAssignmentGroup"`
	PaymentTerms                                  string       `boil:"PaymentTerms" json:"PaymentTerms" toml:"PaymentTerms" yaml:"PaymentTerms"`
	DueCalculationBaseDate                        null.String  `boil:"DueCalculationBaseDate" json:"DueCalculationBaseDate,omitempty" toml:"DueCalculationBaseDate" yaml:"DueCalculationBaseDate,omitempty"`
	PaymentDueDate                                null.String  `boil:"PaymentDueDate" json:"PaymentDueDate,omitempty" toml:"PaymentDueDate" yaml:"PaymentDueDate,omitempty"`
	NetPaymentDays                                null.Int     `boil:"NetPaymentDays" json:"NetPaymentDays,omitempty" toml:"NetPaymentDays" yaml:"NetPaymentDays,omitempty"`
	PaymentMethod                                 string       `boil:"PaymentMethod" json:"PaymentMethod" toml:"PaymentMethod" yaml:"PaymentMethod"`
	Project                                       null.String  `boil:"Project" json:"Project,omitempty" toml:"Project" yaml:"Project,omitempty"`
	AccountingExchangeRate                        null.Float32 `boil:"AccountingExchangeRate" json:"AccountingExchangeRate,omitempty" toml:"AccountingExchangeRate" yaml:"AccountingExchangeRate,omitempty"`
	ReferenceDocument                             null.Int     `boil:"ReferenceDocument" json:"ReferenceDocument,omitempty" toml:"ReferenceDocument" yaml:"ReferenceDocument,omitempty"`
	ReferenceDocumentItem                         null.Int     `boil:"ReferenceDocumentItem" json:"ReferenceDocumentItem,omitempty" toml:"ReferenceDocumentItem" yaml:"ReferenceDocumentItem,omitempty"`
	ItemCompleteDeliveryIsDefined                 null.Bool    `boil:"ItemCompleteDeliveryIsDefined" json:"ItemCompleteDeliveryIsDefined,omitempty" toml:"ItemCompleteDeliveryIsDefined" yaml:"ItemCompleteDeliveryIsDefined,omitempty"`
	ItemDeliveryStatus                            null.String  `boil:"ItemDeliveryStatus" json:"ItemDeliveryStatus,omitempty" toml:"ItemDeliveryStatus" yaml:"ItemDeliveryStatus,omitempty"`
	IssuingStatus                                 null.String  `boil:"IssuingStatus" json:"IssuingStatus,omitempty" toml:"IssuingStatus" yaml:"IssuingStatus,omitempty"`
	ReceivingStatus                               null.String  `boil:"ReceivingStatus" json:"ReceivingStatus,omitempty" toml:"ReceivingStatus" yaml:"ReceivingStatus,omitempty"`
	ItemBillingStatus                             null.String  `boil:"ItemBillingStatus" json:"ItemBillingStatus,omitempty" toml:"ItemBillingStatus" yaml:"ItemBillingStatus,omitempty"`
	TaxCode                                       null.String  `boil:"TaxCode" json:"TaxCode,omitempty" toml:"TaxCode" yaml:"TaxCode,omitempty"`
	TaxRate                                       null.Float32 `boil:"TaxRate" json:"TaxRate,omitempty" toml:"TaxRate" yaml:"TaxRate,omitempty"`
	CountryOfOrigin                               null.String  `boil:"CountryOfOrigin" json:"CountryOfOrigin,omitempty" toml:"CountryOfOrigin" yaml:"CountryOfOrigin,omitempty"`
	CountryOfOriginLanguage                       null.String  `boil:"CountryOfOriginLanguage" json:"CountryOfOriginLanguage,omitempty" toml:"CountryOfOriginLanguage" yaml:"CountryOfOriginLanguage,omitempty"`
	ItemBlockStatus                               null.Bool    `boil:"ItemBlockStatus" json:"ItemBlockStatus,omitempty" toml:"ItemBlockStatus" yaml:"ItemBlockStatus,omitempty"`
	ItemDeliveryBlockStatus                       null.Bool    `boil:"ItemDeliveryBlockStatus" json:"ItemDeliveryBlockStatus,omitempty" toml:"ItemDeliveryBlockStatus" yaml:"ItemDeliveryBlockStatus,omitempty"`
	ItemBillingBlockStatus                        null.Bool    `boil:"ItemBillingBlockStatus" json:"ItemBillingBlockStatus,omitempty" toml:"ItemBillingBlockStatus" yaml:"ItemBillingBlockStatus,omitempty"`
	IsCancelled                                   null.Bool    `boil:"IsCancelled" json:"IsCancelled,omitempty" toml:"IsCancelled" yaml:"IsCancelled,omitempty"`
	IsMarkedForDeletion                           null.Bool    `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformOrdersItemDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformOrdersItemDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformOrdersItemDatumColumns = struct {
	OrderID                                       string
	OrderItem                                     string
	OrderItemCategory                             string
	SupplyChainRelationshipID                     string
	SupplyChainRelationshipDeliveryID             string
	SupplyChainRelationshipDeliveryPlantID        string
	SupplyChainRelationshipStockConfPlantID       string
	SupplyChainRelationshipProductionPlantID      string
	OrderItemText                                 string
	OrderItemTextByBuyer                          string
	OrderItemTextBySeller                         string
	Product                                       string
	ProductStandardID                             string
	ProductGroup                                  string
	BaseUnit                                      string
	PricingDate                                   string
	PriceDetnExchangeRate                         string
	RequestedDeliveryDate                         string
	RequestedDeliveryTime                         string
	DeliverToParty                                string
	DeliverFromParty                              string
	CreationDate                                  string
	CreationTime                                  string
	LastChangeDate                                string
	LastChangeTime                                string
	DeliverToPlant                                string
	DeliverToPlantTimeZone                        string
	DeliverToPlantStorageLocation                 string
	ProductIsBatchManagedInDeliverToPlant         string
	BatchMgmtPolicyInDeliverToPlant               string
	DeliverToPlantBatch                           string
	DeliverToPlantBatchValidityStartDate          string
	DeliverToPlantBatchValidityStartTime          string
	DeliverToPlantBatchValidityEndDate            string
	DeliverToPlantBatchValidityEndTime            string
	DeliverFromPlant                              string
	DeliverFromPlantTimeZone                      string
	DeliverFromPlantStorageLocation               string
	ProductIsBatchManagedInDeliverFromPlant       string
	BatchMgmtPolicyInDeliverFromPlant             string
	DeliverFromPlantBatch                         string
	DeliverFromPlantBatchValidityStartDate        string
	DeliverFromPlantBatchValidityStartTime        string
	DeliverFromPlantBatchValidityEndDate          string
	DeliverFromPlantBatchValidityEndTime          string
	DeliveryUnit                                  string
	StockConfirmationBusinessPartner              string
	StockConfirmationPlant                        string
	StockConfirmationPlantTimeZone                string
	ProductIsBatchManagedInStockConfirmationPlant string
	BatchMgmtPolicyInStockConfirmationPlant       string
	StockConfirmationPlantBatch                   string
	StockConfirmationPlantBatchValidityStartDate  string
	StockConfirmationPlantBatchValidityStartTime  string
	StockConfirmationPlantBatchValidityEndDate    string
	StockConfirmationPlantBatchValidityEndTime    string
	ServicesRenderingDate                         string
	OrderQuantityInBaseUnit                       string
	OrderQuantityInDeliveryUnit                   string
	QuantityPerPackage                            string
	StockConfirmationPolicy                       string
	StockConfirmationStatus                       string
	ConfirmedOrderQuantityInBaseUnit              string
	ItemWeightUnit                                string
	ProductGrossWeight                            string
	ItemGrossWeight                               string
	ProductNetWeight                              string
	ItemNetWeight                                 string
	InternalCapacityQuantity                      string
	InternalCapacityQuantityUnit                  string
	NetAmount                                     string
	TaxAmount                                     string
	GrossAmount                                   string
	InvoiceDocumentDate                           string
	ProductionPlantBusinessPartner                string
	ProductionPlant                               string
	ProductionPlantTimeZone                       string
	ProductionPlantStorageLocation                string
	ProductIsBatchManagedInProductionPlant        string
	BatchMgmtPolicyInProductionPlant              string
	ProductionPlantBatch                          string
	ProductionPlantBatchValidityStartDate         string
	ProductionPlantBatchValidityStartTime         string
	ProductionPlantBatchValidityEndDate           string
	ProductionPlantBatchValidityEndTime           string
	InspectionPlan                                string
	InspectionPlant                               string
	InspectionOrder                               string
	Incoterms                                     string
	TransactionTaxClassification                  string
	ProductTaxClassificationBillToCountry         string
	ProductTaxClassificationBillFromCountry       string
	DefinedTaxClassification                      string
	AccountAssignmentGroup                        string
	ProductAccountAssignmentGroup                 string
	PaymentTerms                                  string
	DueCalculationBaseDate                        string
	PaymentDueDate                                string
	NetPaymentDays                                string
	PaymentMethod                                 string
	Project                                       string
	AccountingExchangeRate                        string
	ReferenceDocument                             string
	ReferenceDocumentItem                         string
	ItemCompleteDeliveryIsDefined                 string
	ItemDeliveryStatus                            string
	IssuingStatus                                 string
	ReceivingStatus                               string
	ItemBillingStatus                             string
	TaxCode                                       string
	TaxRate                                       string
	CountryOfOrigin                               string
	CountryOfOriginLanguage                       string
	ItemBlockStatus                               string
	ItemDeliveryBlockStatus                       string
	ItemBillingBlockStatus                        string
	IsCancelled                                   string
	IsMarkedForDeletion                           string
}{
	OrderID:                                       "OrderID",
	OrderItem:                                     "OrderItem",
	OrderItemCategory:                             "OrderItemCategory",
	SupplyChainRelationshipID:                     "SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:             "SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:        "SupplyChainRelationshipDeliveryPlantID",
	SupplyChainRelationshipStockConfPlantID:       "SupplyChainRelationshipStockConfPlantID",
	SupplyChainRelationshipProductionPlantID:      "SupplyChainRelationshipProductionPlantID",
	OrderItemText:                                 "OrderItemText",
	OrderItemTextByBuyer:                          "OrderItemTextByBuyer",
	OrderItemTextBySeller:                         "OrderItemTextBySeller",
	Product:                                       "Product",
	ProductStandardID:                             "ProductStandardID",
	ProductGroup:                                  "ProductGroup",
	BaseUnit:                                      "BaseUnit",
	PricingDate:                                   "PricingDate",
	PriceDetnExchangeRate:                         "PriceDetnExchangeRate",
	RequestedDeliveryDate:                         "RequestedDeliveryDate",
	RequestedDeliveryTime:                         "RequestedDeliveryTime",
	DeliverToParty:                                "DeliverToParty",
	DeliverFromParty:                              "DeliverFromParty",
	CreationDate:                                  "CreationDate",
	CreationTime:                                  "CreationTime",
	LastChangeDate:                                "LastChangeDate",
	LastChangeTime:                                "LastChangeTime",
	DeliverToPlant:                                "DeliverToPlant",
	DeliverToPlantTimeZone:                        "DeliverToPlantTimeZone",
	DeliverToPlantStorageLocation:                 "DeliverToPlantStorageLocation",
	ProductIsBatchManagedInDeliverToPlant:         "ProductIsBatchManagedInDeliverToPlant",
	BatchMgmtPolicyInDeliverToPlant:               "BatchMgmtPolicyInDeliverToPlant",
	DeliverToPlantBatch:                           "DeliverToPlantBatch",
	DeliverToPlantBatchValidityStartDate:          "DeliverToPlantBatchValidityStartDate",
	DeliverToPlantBatchValidityStartTime:          "DeliverToPlantBatchValidityStartTime",
	DeliverToPlantBatchValidityEndDate:            "DeliverToPlantBatchValidityEndDate",
	DeliverToPlantBatchValidityEndTime:            "DeliverToPlantBatchValidityEndTime",
	DeliverFromPlant:                              "DeliverFromPlant",
	DeliverFromPlantTimeZone:                      "DeliverFromPlantTimeZone",
	DeliverFromPlantStorageLocation:               "DeliverFromPlantStorageLocation",
	ProductIsBatchManagedInDeliverFromPlant:       "ProductIsBatchManagedInDeliverFromPlant",
	BatchMgmtPolicyInDeliverFromPlant:             "BatchMgmtPolicyInDeliverFromPlant",
	DeliverFromPlantBatch:                         "DeliverFromPlantBatch",
	DeliverFromPlantBatchValidityStartDate:        "DeliverFromPlantBatchValidityStartDate",
	DeliverFromPlantBatchValidityStartTime:        "DeliverFromPlantBatchValidityStartTime",
	DeliverFromPlantBatchValidityEndDate:          "DeliverFromPlantBatchValidityEndDate",
	DeliverFromPlantBatchValidityEndTime:          "DeliverFromPlantBatchValidityEndTime",
	DeliveryUnit:                                  "DeliveryUnit",
	StockConfirmationBusinessPartner:              "StockConfirmationBusinessPartner",
	StockConfirmationPlant:                        "StockConfirmationPlant",
	StockConfirmationPlantTimeZone:                "StockConfirmationPlantTimeZone",
	ProductIsBatchManagedInStockConfirmationPlant: "ProductIsBatchManagedInStockConfirmationPlant",
	BatchMgmtPolicyInStockConfirmationPlant:       "BatchMgmtPolicyInStockConfirmationPlant",
	StockConfirmationPlantBatch:                   "StockConfirmationPlantBatch",
	StockConfirmationPlantBatchValidityStartDate:  "StockConfirmationPlantBatchValidityStartDate",
	StockConfirmationPlantBatchValidityStartTime:  "StockConfirmationPlantBatchValidityStartTime",
	StockConfirmationPlantBatchValidityEndDate:    "StockConfirmationPlantBatchValidityEndDate",
	StockConfirmationPlantBatchValidityEndTime:    "StockConfirmationPlantBatchValidityEndTime",
	ServicesRenderingDate:                         "ServicesRenderingDate",
	OrderQuantityInBaseUnit:                       "OrderQuantityInBaseUnit",
	OrderQuantityInDeliveryUnit:                   "OrderQuantityInDeliveryUnit",
	QuantityPerPackage:                            "QuantityPerPackage",
	StockConfirmationPolicy:                       "StockConfirmationPolicy",
	StockConfirmationStatus:                       "StockConfirmationStatus",
	ConfirmedOrderQuantityInBaseUnit:              "ConfirmedOrderQuantityInBaseUnit",
	ItemWeightUnit:                                "ItemWeightUnit",
	ProductGrossWeight:                            "ProductGrossWeight",
	ItemGrossWeight:                               "ItemGrossWeight",
	ProductNetWeight:                              "ProductNetWeight",
	ItemNetWeight:                                 "ItemNetWeight",
	InternalCapacityQuantity:                      "InternalCapacityQuantity",
	InternalCapacityQuantityUnit:                  "InternalCapacityQuantityUnit",
	NetAmount:                                     "NetAmount",
	TaxAmount:                                     "TaxAmount",
	GrossAmount:                                   "GrossAmount",
	InvoiceDocumentDate:                           "InvoiceDocumentDate",
	ProductionPlantBusinessPartner:                "ProductionPlantBusinessPartner",
	ProductionPlant:                               "ProductionPlant",
	ProductionPlantTimeZone:                       "ProductionPlantTimeZone",
	ProductionPlantStorageLocation:                "ProductionPlantStorageLocation",
	ProductIsBatchManagedInProductionPlant:        "ProductIsBatchManagedInProductionPlant",
	BatchMgmtPolicyInProductionPlant:              "BatchMgmtPolicyInProductionPlant",
	ProductionPlantBatch:                          "ProductionPlantBatch",
	ProductionPlantBatchValidityStartDate:         "ProductionPlantBatchValidityStartDate",
	ProductionPlantBatchValidityStartTime:         "ProductionPlantBatchValidityStartTime",
	ProductionPlantBatchValidityEndDate:           "ProductionPlantBatchValidityEndDate",
	ProductionPlantBatchValidityEndTime:           "ProductionPlantBatchValidityEndTime",
	InspectionPlan:                                "InspectionPlan",
	InspectionPlant:                               "InspectionPlant",
	InspectionOrder:                               "InspectionOrder",
	Incoterms:                                     "Incoterms",
	TransactionTaxClassification:                  "TransactionTaxClassification",
	ProductTaxClassificationBillToCountry:         "ProductTaxClassificationBillToCountry",
	ProductTaxClassificationBillFromCountry:       "ProductTaxClassificationBillFromCountry",
	DefinedTaxClassification:                      "DefinedTaxClassification",
	AccountAssignmentGroup:                        "AccountAssignmentGroup",
	ProductAccountAssignmentGroup:                 "ProductAccountAssignmentGroup",
	PaymentTerms:                                  "PaymentTerms",
	DueCalculationBaseDate:                        "DueCalculationBaseDate",
	PaymentDueDate:                                "PaymentDueDate",
	NetPaymentDays:                                "NetPaymentDays",
	PaymentMethod:                                 "PaymentMethod",
	Project:                                       "Project",
	AccountingExchangeRate:                        "AccountingExchangeRate",
	ReferenceDocument:                             "ReferenceDocument",
	ReferenceDocumentItem:                         "ReferenceDocumentItem",
	ItemCompleteDeliveryIsDefined:                 "ItemCompleteDeliveryIsDefined",
	ItemDeliveryStatus:                            "ItemDeliveryStatus",
	IssuingStatus:                                 "IssuingStatus",
	ReceivingStatus:                               "ReceivingStatus",
	ItemBillingStatus:                             "ItemBillingStatus",
	TaxCode:                                       "TaxCode",
	TaxRate:                                       "TaxRate",
	CountryOfOrigin:                               "CountryOfOrigin",
	CountryOfOriginLanguage:                       "CountryOfOriginLanguage",
	ItemBlockStatus:                               "ItemBlockStatus",
	ItemDeliveryBlockStatus:                       "ItemDeliveryBlockStatus",
	ItemBillingBlockStatus:                        "ItemBillingBlockStatus",
	IsCancelled:                                   "IsCancelled",
	IsMarkedForDeletion:                           "IsMarkedForDeletion",
}

var DataPlatformOrdersItemDatumTableColumns = struct {
	OrderID                                       string
	OrderItem                                     string
	OrderItemCategory                             string
	SupplyChainRelationshipID                     string
	SupplyChainRelationshipDeliveryID             string
	SupplyChainRelationshipDeliveryPlantID        string
	SupplyChainRelationshipStockConfPlantID       string
	SupplyChainRelationshipProductionPlantID      string
	OrderItemText                                 string
	OrderItemTextByBuyer                          string
	OrderItemTextBySeller                         string
	Product                                       string
	ProductStandardID                             string
	ProductGroup                                  string
	BaseUnit                                      string
	PricingDate                                   string
	PriceDetnExchangeRate                         string
	RequestedDeliveryDate                         string
	RequestedDeliveryTime                         string
	DeliverToParty                                string
	DeliverFromParty                              string
	CreationDate                                  string
	CreationTime                                  string
	LastChangeDate                                string
	LastChangeTime                                string
	DeliverToPlant                                string
	DeliverToPlantTimeZone                        string
	DeliverToPlantStorageLocation                 string
	ProductIsBatchManagedInDeliverToPlant         string
	BatchMgmtPolicyInDeliverToPlant               string
	DeliverToPlantBatch                           string
	DeliverToPlantBatchValidityStartDate          string
	DeliverToPlantBatchValidityStartTime          string
	DeliverToPlantBatchValidityEndDate            string
	DeliverToPlantBatchValidityEndTime            string
	DeliverFromPlant                              string
	DeliverFromPlantTimeZone                      string
	DeliverFromPlantStorageLocation               string
	ProductIsBatchManagedInDeliverFromPlant       string
	BatchMgmtPolicyInDeliverFromPlant             string
	DeliverFromPlantBatch                         string
	DeliverFromPlantBatchValidityStartDate        string
	DeliverFromPlantBatchValidityStartTime        string
	DeliverFromPlantBatchValidityEndDate          string
	DeliverFromPlantBatchValidityEndTime          string
	DeliveryUnit                                  string
	StockConfirmationBusinessPartner              string
	StockConfirmationPlant                        string
	StockConfirmationPlantTimeZone                string
	ProductIsBatchManagedInStockConfirmationPlant string
	BatchMgmtPolicyInStockConfirmationPlant       string
	StockConfirmationPlantBatch                   string
	StockConfirmationPlantBatchValidityStartDate  string
	StockConfirmationPlantBatchValidityStartTime  string
	StockConfirmationPlantBatchValidityEndDate    string
	StockConfirmationPlantBatchValidityEndTime    string
	ServicesRenderingDate                         string
	OrderQuantityInBaseUnit                       string
	OrderQuantityInDeliveryUnit                   string
	QuantityPerPackage                            string
	StockConfirmationPolicy                       string
	StockConfirmationStatus                       string
	ConfirmedOrderQuantityInBaseUnit              string
	ItemWeightUnit                                string
	ProductGrossWeight                            string
	ItemGrossWeight                               string
	ProductNetWeight                              string
	ItemNetWeight                                 string
	InternalCapacityQuantity                      string
	InternalCapacityQuantityUnit                  string
	NetAmount                                     string
	TaxAmount                                     string
	GrossAmount                                   string
	InvoiceDocumentDate                           string
	ProductionPlantBusinessPartner                string
	ProductionPlant                               string
	ProductionPlantTimeZone                       string
	ProductionPlantStorageLocation                string
	ProductIsBatchManagedInProductionPlant        string
	BatchMgmtPolicyInProductionPlant              string
	ProductionPlantBatch                          string
	ProductionPlantBatchValidityStartDate         string
	ProductionPlantBatchValidityStartTime         string
	ProductionPlantBatchValidityEndDate           string
	ProductionPlantBatchValidityEndTime           string
	InspectionPlan                                string
	InspectionPlant                               string
	InspectionOrder                               string
	Incoterms                                     string
	TransactionTaxClassification                  string
	ProductTaxClassificationBillToCountry         string
	ProductTaxClassificationBillFromCountry       string
	DefinedTaxClassification                      string
	AccountAssignmentGroup                        string
	ProductAccountAssignmentGroup                 string
	PaymentTerms                                  string
	DueCalculationBaseDate                        string
	PaymentDueDate                                string
	NetPaymentDays                                string
	PaymentMethod                                 string
	Project                                       string
	AccountingExchangeRate                        string
	ReferenceDocument                             string
	ReferenceDocumentItem                         string
	ItemCompleteDeliveryIsDefined                 string
	ItemDeliveryStatus                            string
	IssuingStatus                                 string
	ReceivingStatus                               string
	ItemBillingStatus                             string
	TaxCode                                       string
	TaxRate                                       string
	CountryOfOrigin                               string
	CountryOfOriginLanguage                       string
	ItemBlockStatus                               string
	ItemDeliveryBlockStatus                       string
	ItemBillingBlockStatus                        string
	IsCancelled                                   string
	IsMarkedForDeletion                           string
}{
	OrderID:                                       "data_platform_orders_item_data.OrderID",
	OrderItem:                                     "data_platform_orders_item_data.OrderItem",
	OrderItemCategory:                             "data_platform_orders_item_data.OrderItemCategory",
	SupplyChainRelationshipID:                     "data_platform_orders_item_data.SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:             "data_platform_orders_item_data.SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:        "data_platform_orders_item_data.SupplyChainRelationshipDeliveryPlantID",
	SupplyChainRelationshipStockConfPlantID:       "data_platform_orders_item_data.SupplyChainRelationshipStockConfPlantID",
	SupplyChainRelationshipProductionPlantID:      "data_platform_orders_item_data.SupplyChainRelationshipProductionPlantID",
	OrderItemText:                                 "data_platform_orders_item_data.OrderItemText",
	OrderItemTextByBuyer:                          "data_platform_orders_item_data.OrderItemTextByBuyer",
	OrderItemTextBySeller:                         "data_platform_orders_item_data.OrderItemTextBySeller",
	Product:                                       "data_platform_orders_item_data.Product",
	ProductStandardID:                             "data_platform_orders_item_data.ProductStandardID",
	ProductGroup:                                  "data_platform_orders_item_data.ProductGroup",
	BaseUnit:                                      "data_platform_orders_item_data.BaseUnit",
	PricingDate:                                   "data_platform_orders_item_data.PricingDate",
	PriceDetnExchangeRate:                         "data_platform_orders_item_data.PriceDetnExchangeRate",
	RequestedDeliveryDate:                         "data_platform_orders_item_data.RequestedDeliveryDate",
	RequestedDeliveryTime:                         "data_platform_orders_item_data.RequestedDeliveryTime",
	DeliverToParty:                                "data_platform_orders_item_data.DeliverToParty",
	DeliverFromParty:                              "data_platform_orders_item_data.DeliverFromParty",
	CreationDate:                                  "data_platform_orders_item_data.CreationDate",
	CreationTime:                                  "data_platform_orders_item_data.CreationTime",
	LastChangeDate:                                "data_platform_orders_item_data.LastChangeDate",
	LastChangeTime:                                "data_platform_orders_item_data.LastChangeTime",
	DeliverToPlant:                                "data_platform_orders_item_data.DeliverToPlant",
	DeliverToPlantTimeZone:                        "data_platform_orders_item_data.DeliverToPlantTimeZone",
	DeliverToPlantStorageLocation:                 "data_platform_orders_item_data.DeliverToPlantStorageLocation",
	ProductIsBatchManagedInDeliverToPlant:         "data_platform_orders_item_data.ProductIsBatchManagedInDeliverToPlant",
	BatchMgmtPolicyInDeliverToPlant:               "data_platform_orders_item_data.BatchMgmtPolicyInDeliverToPlant",
	DeliverToPlantBatch:                           "data_platform_orders_item_data.DeliverToPlantBatch",
	DeliverToPlantBatchValidityStartDate:          "data_platform_orders_item_data.DeliverToPlantBatchValidityStartDate",
	DeliverToPlantBatchValidityStartTime:          "data_platform_orders_item_data.DeliverToPlantBatchValidityStartTime",
	DeliverToPlantBatchValidityEndDate:            "data_platform_orders_item_data.DeliverToPlantBatchValidityEndDate",
	DeliverToPlantBatchValidityEndTime:            "data_platform_orders_item_data.DeliverToPlantBatchValidityEndTime",
	DeliverFromPlant:                              "data_platform_orders_item_data.DeliverFromPlant",
	DeliverFromPlantTimeZone:                      "data_platform_orders_item_data.DeliverFromPlantTimeZone",
	DeliverFromPlantStorageLocation:               "data_platform_orders_item_data.DeliverFromPlantStorageLocation",
	ProductIsBatchManagedInDeliverFromPlant:       "data_platform_orders_item_data.ProductIsBatchManagedInDeliverFromPlant",
	BatchMgmtPolicyInDeliverFromPlant:             "data_platform_orders_item_data.BatchMgmtPolicyInDeliverFromPlant",
	DeliverFromPlantBatch:                         "data_platform_orders_item_data.DeliverFromPlantBatch",
	DeliverFromPlantBatchValidityStartDate:        "data_platform_orders_item_data.DeliverFromPlantBatchValidityStartDate",
	DeliverFromPlantBatchValidityStartTime:        "data_platform_orders_item_data.DeliverFromPlantBatchValidityStartTime",
	DeliverFromPlantBatchValidityEndDate:          "data_platform_orders_item_data.DeliverFromPlantBatchValidityEndDate",
	DeliverFromPlantBatchValidityEndTime:          "data_platform_orders_item_data.DeliverFromPlantBatchValidityEndTime",
	DeliveryUnit:                                  "data_platform_orders_item_data.DeliveryUnit",
	StockConfirmationBusinessPartner:              "data_platform_orders_item_data.StockConfirmationBusinessPartner",
	StockConfirmationPlant:                        "data_platform_orders_item_data.StockConfirmationPlant",
	StockConfirmationPlantTimeZone:                "data_platform_orders_item_data.StockConfirmationPlantTimeZone",
	ProductIsBatchManagedInStockConfirmationPlant: "data_platform_orders_item_data.ProductIsBatchManagedInStockConfirmationPlant",
	BatchMgmtPolicyInStockConfirmationPlant:       "data_platform_orders_item_data.BatchMgmtPolicyInStockConfirmationPlant",
	StockConfirmationPlantBatch:                   "data_platform_orders_item_data.StockConfirmationPlantBatch",
	StockConfirmationPlantBatchValidityStartDate:  "data_platform_orders_item_data.StockConfirmationPlantBatchValidityStartDate",
	StockConfirmationPlantBatchValidityStartTime:  "data_platform_orders_item_data.StockConfirmationPlantBatchValidityStartTime",
	StockConfirmationPlantBatchValidityEndDate:    "data_platform_orders_item_data.StockConfirmationPlantBatchValidityEndDate",
	StockConfirmationPlantBatchValidityEndTime:    "data_platform_orders_item_data.StockConfirmationPlantBatchValidityEndTime",
	ServicesRenderingDate:                         "data_platform_orders_item_data.ServicesRenderingDate",
	OrderQuantityInBaseUnit:                       "data_platform_orders_item_data.OrderQuantityInBaseUnit",
	OrderQuantityInDeliveryUnit:                   "data_platform_orders_item_data.OrderQuantityInDeliveryUnit",
	QuantityPerPackage:                            "data_platform_orders_item_data.QuantityPerPackage",
	StockConfirmationPolicy:                       "data_platform_orders_item_data.StockConfirmationPolicy",
	StockConfirmationStatus:                       "data_platform_orders_item_data.StockConfirmationStatus",
	ConfirmedOrderQuantityInBaseUnit:              "data_platform_orders_item_data.ConfirmedOrderQuantityInBaseUnit",
	ItemWeightUnit:                                "data_platform_orders_item_data.ItemWeightUnit",
	ProductGrossWeight:                            "data_platform_orders_item_data.ProductGrossWeight",
	ItemGrossWeight:                               "data_platform_orders_item_data.ItemGrossWeight",
	ProductNetWeight:                              "data_platform_orders_item_data.ProductNetWeight",
	ItemNetWeight:                                 "data_platform_orders_item_data.ItemNetWeight",
	InternalCapacityQuantity:                      "data_platform_orders_item_data.InternalCapacityQuantity",
	InternalCapacityQuantityUnit:                  "data_platform_orders_item_data.InternalCapacityQuantityUnit",
	NetAmount:                                     "data_platform_orders_item_data.NetAmount",
	TaxAmount:                                     "data_platform_orders_item_data.TaxAmount",
	GrossAmount:                                   "data_platform_orders_item_data.GrossAmount",
	InvoiceDocumentDate:                           "data_platform_orders_item_data.InvoiceDocumentDate",
	ProductionPlantBusinessPartner:                "data_platform_orders_item_data.ProductionPlantBusinessPartner",
	ProductionPlant:                               "data_platform_orders_item_data.ProductionPlant",
	ProductionPlantTimeZone:                       "data_platform_orders_item_data.ProductionPlantTimeZone",
	ProductionPlantStorageLocation:                "data_platform_orders_item_data.ProductionPlantStorageLocation",
	ProductIsBatchManagedInProductionPlant:        "data_platform_orders_item_data.ProductIsBatchManagedInProductionPlant",
	BatchMgmtPolicyInProductionPlant:              "data_platform_orders_item_data.BatchMgmtPolicyInProductionPlant",
	ProductionPlantBatch:                          "data_platform_orders_item_data.ProductionPlantBatch",
	ProductionPlantBatchValidityStartDate:         "data_platform_orders_item_data.ProductionPlantBatchValidityStartDate",
	ProductionPlantBatchValidityStartTime:         "data_platform_orders_item_data.ProductionPlantBatchValidityStartTime",
	ProductionPlantBatchValidityEndDate:           "data_platform_orders_item_data.ProductionPlantBatchValidityEndDate",
	ProductionPlantBatchValidityEndTime:           "data_platform_orders_item_data.ProductionPlantBatchValidityEndTime",
	InspectionPlan:                                "data_platform_orders_item_data.InspectionPlan",
	InspectionPlant:                               "data_platform_orders_item_data.InspectionPlant",
	InspectionOrder:                               "data_platform_orders_item_data.InspectionOrder",
	Incoterms:                                     "data_platform_orders_item_data.Incoterms",
	TransactionTaxClassification:                  "data_platform_orders_item_data.TransactionTaxClassification",
	ProductTaxClassificationBillToCountry:         "data_platform_orders_item_data.ProductTaxClassificationBillToCountry",
	ProductTaxClassificationBillFromCountry:       "data_platform_orders_item_data.ProductTaxClassificationBillFromCountry",
	DefinedTaxClassification:                      "data_platform_orders_item_data.DefinedTaxClassification",
	AccountAssignmentGroup:                        "data_platform_orders_item_data.AccountAssignmentGroup",
	ProductAccountAssignmentGroup:                 "data_platform_orders_item_data.ProductAccountAssignmentGroup",
	PaymentTerms:                                  "data_platform_orders_item_data.PaymentTerms",
	DueCalculationBaseDate:                        "data_platform_orders_item_data.DueCalculationBaseDate",
	PaymentDueDate:                                "data_platform_orders_item_data.PaymentDueDate",
	NetPaymentDays:                                "data_platform_orders_item_data.NetPaymentDays",
	PaymentMethod:                                 "data_platform_orders_item_data.PaymentMethod",
	Project:                                       "data_platform_orders_item_data.Project",
	AccountingExchangeRate:                        "data_platform_orders_item_data.AccountingExchangeRate",
	ReferenceDocument:                             "data_platform_orders_item_data.ReferenceDocument",
	ReferenceDocumentItem:                         "data_platform_orders_item_data.ReferenceDocumentItem",
	ItemCompleteDeliveryIsDefined:                 "data_platform_orders_item_data.ItemCompleteDeliveryIsDefined",
	ItemDeliveryStatus:                            "data_platform_orders_item_data.ItemDeliveryStatus",
	IssuingStatus:                                 "data_platform_orders_item_data.IssuingStatus",
	ReceivingStatus:                               "data_platform_orders_item_data.ReceivingStatus",
	ItemBillingStatus:                             "data_platform_orders_item_data.ItemBillingStatus",
	TaxCode:                                       "data_platform_orders_item_data.TaxCode",
	TaxRate:                                       "data_platform_orders_item_data.TaxRate",
	CountryOfOrigin:                               "data_platform_orders_item_data.CountryOfOrigin",
	CountryOfOriginLanguage:                       "data_platform_orders_item_data.CountryOfOriginLanguage",
	ItemBlockStatus:                               "data_platform_orders_item_data.ItemBlockStatus",
	ItemDeliveryBlockStatus:                       "data_platform_orders_item_data.ItemDeliveryBlockStatus",
	ItemBillingBlockStatus:                        "data_platform_orders_item_data.ItemBillingBlockStatus",
	IsCancelled:                                   "data_platform_orders_item_data.IsCancelled",
	IsMarkedForDeletion:                           "data_platform_orders_item_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformOrdersItemDatumWhere = struct {
	OrderID                                       whereHelperint
	OrderItem                                     whereHelperint
	OrderItemCategory                             whereHelperstring
	SupplyChainRelationshipID                     whereHelperint
	SupplyChainRelationshipDeliveryID             whereHelpernull_Int
	SupplyChainRelationshipDeliveryPlantID        whereHelpernull_Int
	SupplyChainRelationshipStockConfPlantID       whereHelpernull_Int
	SupplyChainRelationshipProductionPlantID      whereHelpernull_Int
	OrderItemText                                 whereHelperstring
	OrderItemTextByBuyer                          whereHelperstring
	OrderItemTextBySeller                         whereHelperstring
	Product                                       whereHelperstring
	ProductStandardID                             whereHelperstring
	ProductGroup                                  whereHelpernull_String
	BaseUnit                                      whereHelperstring
	PricingDate                                   whereHelperstring
	PriceDetnExchangeRate                         whereHelpernull_Float32
	RequestedDeliveryDate                         whereHelperstring
	RequestedDeliveryTime                         whereHelperstring
	DeliverToParty                                whereHelpernull_Int
	DeliverFromParty                              whereHelpernull_Int
	CreationDate                                  whereHelperstring
	CreationTime                                  whereHelperstring
	LastChangeDate                                whereHelperstring
	LastChangeTime                                whereHelperstring
	DeliverToPlant                                whereHelpernull_String
	DeliverToPlantTimeZone                        whereHelpernull_String
	DeliverToPlantStorageLocation                 whereHelpernull_String
	ProductIsBatchManagedInDeliverToPlant         whereHelpernull_Bool
	BatchMgmtPolicyInDeliverToPlant               whereHelpernull_String
	DeliverToPlantBatch                           whereHelpernull_String
	DeliverToPlantBatchValidityStartDate          whereHelpernull_String
	DeliverToPlantBatchValidityStartTime          whereHelpernull_String
	DeliverToPlantBatchValidityEndDate            whereHelpernull_String
	DeliverToPlantBatchValidityEndTime            whereHelpernull_String
	DeliverFromPlant                              whereHelpernull_String
	DeliverFromPlantTimeZone                      whereHelpernull_String
	DeliverFromPlantStorageLocation               whereHelpernull_String
	ProductIsBatchManagedInDeliverFromPlant       whereHelpernull_Bool
	BatchMgmtPolicyInDeliverFromPlant             whereHelpernull_String
	DeliverFromPlantBatch                         whereHelpernull_String
	DeliverFromPlantBatchValidityStartDate        whereHelpernull_String
	DeliverFromPlantBatchValidityStartTime        whereHelpernull_String
	DeliverFromPlantBatchValidityEndDate          whereHelpernull_String
	DeliverFromPlantBatchValidityEndTime          whereHelpernull_String
	DeliveryUnit                                  whereHelperstring
	StockConfirmationBusinessPartner              whereHelpernull_Int
	StockConfirmationPlant                        whereHelpernull_String
	StockConfirmationPlantTimeZone                whereHelpernull_String
	ProductIsBatchManagedInStockConfirmationPlant whereHelpernull_Bool
	BatchMgmtPolicyInStockConfirmationPlant       whereHelpernull_String
	StockConfirmationPlantBatch                   whereHelpernull_String
	StockConfirmationPlantBatchValidityStartDate  whereHelpernull_String
	StockConfirmationPlantBatchValidityStartTime  whereHelpernull_String
	StockConfirmationPlantBatchValidityEndDate    whereHelpernull_String
	StockConfirmationPlantBatchValidityEndTime    whereHelpernull_String
	ServicesRenderingDate                         whereHelpernull_String
	OrderQuantityInBaseUnit                       whereHelperfloat32
	OrderQuantityInDeliveryUnit                   whereHelperfloat32
	QuantityPerPackage                            whereHelpernull_Float32
	StockConfirmationPolicy                       whereHelpernull_String
	StockConfirmationStatus                       whereHelpernull_String
	ConfirmedOrderQuantityInBaseUnit              whereHelpernull_Float32
	ItemWeightUnit                                whereHelpernull_String
	ProductGrossWeight                            whereHelpernull_Float32
	ItemGrossWeight                               whereHelpernull_Float32
	ProductNetWeight                              whereHelpernull_Float32
	ItemNetWeight                                 whereHelpernull_Float32
	InternalCapacityQuantity                      whereHelpernull_Float32
	InternalCapacityQuantityUnit                  whereHelpernull_String
	NetAmount                                     whereHelpernull_Float32
	TaxAmount                                     whereHelpernull_Float32
	GrossAmount                                   whereHelpernull_Float32
	InvoiceDocumentDate                           whereHelpernull_String
	ProductionPlantBusinessPartner                whereHelpernull_Int
	ProductionPlant                               whereHelpernull_String
	ProductionPlantTimeZone                       whereHelpernull_String
	ProductionPlantStorageLocation                whereHelpernull_String
	ProductIsBatchManagedInProductionPlant        whereHelpernull_Bool
	BatchMgmtPolicyInProductionPlant              whereHelpernull_String
	ProductionPlantBatch                          whereHelpernull_String
	ProductionPlantBatchValidityStartDate         whereHelpernull_String
	ProductionPlantBatchValidityStartTime         whereHelpernull_String
	ProductionPlantBatchValidityEndDate           whereHelpernull_String
	ProductionPlantBatchValidityEndTime           whereHelpernull_String
	InspectionPlan                                whereHelpernull_Int
	InspectionPlant                               whereHelpernull_String
	InspectionOrder                               whereHelpernull_Int
	Incoterms                                     whereHelpernull_String
	TransactionTaxClassification                  whereHelperstring
	ProductTaxClassificationBillToCountry         whereHelperstring
	ProductTaxClassificationBillFromCountry       whereHelperstring
	DefinedTaxClassification                      whereHelperstring
	AccountAssignmentGroup                        whereHelperstring
	ProductAccountAssignmentGroup                 whereHelperstring
	PaymentTerms                                  whereHelperstring
	DueCalculationBaseDate                        whereHelpernull_String
	PaymentDueDate                                whereHelpernull_String
	NetPaymentDays                                whereHelpernull_Int
	PaymentMethod                                 whereHelperstring
	Project                                       whereHelpernull_String
	AccountingExchangeRate                        whereHelpernull_Float32
	ReferenceDocument                             whereHelpernull_Int
	ReferenceDocumentItem                         whereHelpernull_Int
	ItemCompleteDeliveryIsDefined                 whereHelpernull_Bool
	ItemDeliveryStatus                            whereHelpernull_String
	IssuingStatus                                 whereHelpernull_String
	ReceivingStatus                               whereHelpernull_String
	ItemBillingStatus                             whereHelpernull_String
	TaxCode                                       whereHelpernull_String
	TaxRate                                       whereHelpernull_Float32
	CountryOfOrigin                               whereHelpernull_String
	CountryOfOriginLanguage                       whereHelpernull_String
	ItemBlockStatus                               whereHelpernull_Bool
	ItemDeliveryBlockStatus                       whereHelpernull_Bool
	ItemBillingBlockStatus                        whereHelpernull_Bool
	IsCancelled                                   whereHelpernull_Bool
	IsMarkedForDeletion                           whereHelpernull_Bool
}{
	OrderID:                                       whereHelperint{field: "`data_platform_orders_item_data`.`OrderID`"},
	OrderItem:                                     whereHelperint{field: "`data_platform_orders_item_data`.`OrderItem`"},
	OrderItemCategory:                             whereHelperstring{field: "`data_platform_orders_item_data`.`OrderItemCategory`"},
	SupplyChainRelationshipID:                     whereHelperint{field: "`data_platform_orders_item_data`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipDeliveryID:             whereHelpernull_Int{field: "`data_platform_orders_item_data`.`SupplyChainRelationshipDeliveryID`"},
	SupplyChainRelationshipDeliveryPlantID:        whereHelpernull_Int{field: "`data_platform_orders_item_data`.`SupplyChainRelationshipDeliveryPlantID`"},
	SupplyChainRelationshipStockConfPlantID:       whereHelpernull_Int{field: "`data_platform_orders_item_data`.`SupplyChainRelationshipStockConfPlantID`"},
	SupplyChainRelationshipProductionPlantID:      whereHelpernull_Int{field: "`data_platform_orders_item_data`.`SupplyChainRelationshipProductionPlantID`"},
	OrderItemText:                                 whereHelperstring{field: "`data_platform_orders_item_data`.`OrderItemText`"},
	OrderItemTextByBuyer:                          whereHelperstring{field: "`data_platform_orders_item_data`.`OrderItemTextByBuyer`"},
	OrderItemTextBySeller:                         whereHelperstring{field: "`data_platform_orders_item_data`.`OrderItemTextBySeller`"},
	Product:                                       whereHelperstring{field: "`data_platform_orders_item_data`.`Product`"},
	ProductStandardID:                             whereHelperstring{field: "`data_platform_orders_item_data`.`ProductStandardID`"},
	ProductGroup:                                  whereHelpernull_String{field: "`data_platform_orders_item_data`.`ProductGroup`"},
	BaseUnit:                                      whereHelperstring{field: "`data_platform_orders_item_data`.`BaseUnit`"},
	PricingDate:                                   whereHelperstring{field: "`data_platform_orders_item_data`.`PricingDate`"},
	PriceDetnExchangeRate:                         whereHelpernull_Float32{field: "`data_platform_orders_item_data`.`PriceDetnExchangeRate`"},
	RequestedDeliveryDate:                         whereHelperstring{field: "`data_platform_orders_item_data`.`RequestedDeliveryDate`"},
	RequestedDeliveryTime:                         whereHelperstring{field: "`data_platform_orders_item_data`.`RequestedDeliveryTime`"},
	DeliverToParty:                                whereHelpernull_Int{field: "`data_platform_orders_item_data`.`DeliverToParty`"},
	DeliverFromParty:                              whereHelpernull_Int{field: "`data_platform_orders_item_data`.`DeliverFromParty`"},
	CreationDate:                                  whereHelperstring{field: "`data_platform_orders_item_data`.`CreationDate`"},
	CreationTime:                                  whereHelperstring{field: "`data_platform_orders_item_data`.`CreationTime`"},
	LastChangeDate:                                whereHelperstring{field: "`data_platform_orders_item_data`.`LastChangeDate`"},
	LastChangeTime:                                whereHelperstring{field: "`data_platform_orders_item_data`.`LastChangeTime`"},
	DeliverToPlant:                                whereHelpernull_String{field: "`data_platform_orders_item_data`.`DeliverToPlant`"},
	DeliverToPlantTimeZone:                        whereHelpernull_String{field: "`data_platform_orders_item_data`.`DeliverToPlantTimeZone`"},
	DeliverToPlantStorageLocation:                 whereHelpernull_String{field: "`data_platform_orders_item_data`.`DeliverToPlantStorageLocation`"},
	ProductIsBatchManagedInDeliverToPlant:         whereHelpernull_Bool{field: "`data_platform_orders_item_data`.`ProductIsBatchManagedInDeliverToPlant`"},
	BatchMgmtPolicyInDeliverToPlant:               whereHelpernull_String{field: "`data_platform_orders_item_data`.`BatchMgmtPolicyInDeliverToPlant`"},
	DeliverToPlantBatch:                           whereHelpernull_String{field: "`data_platform_orders_item_data`.`DeliverToPlantBatch`"},
	DeliverToPlantBatchValidityStartDate:          whereHelpernull_String{field: "`data_platform_orders_item_data`.`DeliverToPlantBatchValidityStartDate`"},
	DeliverToPlantBatchValidityStartTime:          whereHelpernull_String{field: "`data_platform_orders_item_data`.`DeliverToPlantBatchValidityStartTime`"},
	DeliverToPlantBatchValidityEndDate:            whereHelpernull_String{field: "`data_platform_orders_item_data`.`DeliverToPlantBatchValidityEndDate`"},
	DeliverToPlantBatchValidityEndTime:            whereHelpernull_String{field: "`data_platform_orders_item_data`.`DeliverToPlantBatchValidityEndTime`"},
	DeliverFromPlant:                              whereHelpernull_String{field: "`data_platform_orders_item_data`.`DeliverFromPlant`"},
	DeliverFromPlantTimeZone:                      whereHelpernull_String{field: "`data_platform_orders_item_data`.`DeliverFromPlantTimeZone`"},
	DeliverFromPlantStorageLocation:               whereHelpernull_String{field: "`data_platform_orders_item_data`.`DeliverFromPlantStorageLocation`"},
	ProductIsBatchManagedInDeliverFromPlant:       whereHelpernull_Bool{field: "`data_platform_orders_item_data`.`ProductIsBatchManagedInDeliverFromPlant`"},
	BatchMgmtPolicyInDeliverFromPlant:             whereHelpernull_String{field: "`data_platform_orders_item_data`.`BatchMgmtPolicyInDeliverFromPlant`"},
	DeliverFromPlantBatch:                         whereHelpernull_String{field: "`data_platform_orders_item_data`.`DeliverFromPlantBatch`"},
	DeliverFromPlantBatchValidityStartDate:        whereHelpernull_String{field: "`data_platform_orders_item_data`.`DeliverFromPlantBatchValidityStartDate`"},
	DeliverFromPlantBatchValidityStartTime:        whereHelpernull_String{field: "`data_platform_orders_item_data`.`DeliverFromPlantBatchValidityStartTime`"},
	DeliverFromPlantBatchValidityEndDate:          whereHelpernull_String{field: "`data_platform_orders_item_data`.`DeliverFromPlantBatchValidityEndDate`"},
	DeliverFromPlantBatchValidityEndTime:          whereHelpernull_String{field: "`data_platform_orders_item_data`.`DeliverFromPlantBatchValidityEndTime`"},
	DeliveryUnit:                                  whereHelperstring{field: "`data_platform_orders_item_data`.`DeliveryUnit`"},
	StockConfirmationBusinessPartner:              whereHelpernull_Int{field: "`data_platform_orders_item_data`.`StockConfirmationBusinessPartner`"},
	StockConfirmationPlant:                        whereHelpernull_String{field: "`data_platform_orders_item_data`.`StockConfirmationPlant`"},
	StockConfirmationPlantTimeZone:                whereHelpernull_String{field: "`data_platform_orders_item_data`.`StockConfirmationPlantTimeZone`"},
	ProductIsBatchManagedInStockConfirmationPlant: whereHelpernull_Bool{field: "`data_platform_orders_item_data`.`ProductIsBatchManagedInStockConfirmationPlant`"},
	BatchMgmtPolicyInStockConfirmationPlant:       whereHelpernull_String{field: "`data_platform_orders_item_data`.`BatchMgmtPolicyInStockConfirmationPlant`"},
	StockConfirmationPlantBatch:                   whereHelpernull_String{field: "`data_platform_orders_item_data`.`StockConfirmationPlantBatch`"},
	StockConfirmationPlantBatchValidityStartDate:  whereHelpernull_String{field: "`data_platform_orders_item_data`.`StockConfirmationPlantBatchValidityStartDate`"},
	StockConfirmationPlantBatchValidityStartTime:  whereHelpernull_String{field: "`data_platform_orders_item_data`.`StockConfirmationPlantBatchValidityStartTime`"},
	StockConfirmationPlantBatchValidityEndDate:    whereHelpernull_String{field: "`data_platform_orders_item_data`.`StockConfirmationPlantBatchValidityEndDate`"},
	StockConfirmationPlantBatchValidityEndTime:    whereHelpernull_String{field: "`data_platform_orders_item_data`.`StockConfirmationPlantBatchValidityEndTime`"},
	ServicesRenderingDate:                         whereHelpernull_String{field: "`data_platform_orders_item_data`.`ServicesRenderingDate`"},
	OrderQuantityInBaseUnit:                       whereHelperfloat32{field: "`data_platform_orders_item_data`.`OrderQuantityInBaseUnit`"},
	OrderQuantityInDeliveryUnit:                   whereHelperfloat32{field: "`data_platform_orders_item_data`.`OrderQuantityInDeliveryUnit`"},
	QuantityPerPackage:                            whereHelpernull_Float32{field: "`data_platform_orders_item_data`.`QuantityPerPackage`"},
	StockConfirmationPolicy:                       whereHelpernull_String{field: "`data_platform_orders_item_data`.`StockConfirmationPolicy`"},
	StockConfirmationStatus:                       whereHelpernull_String{field: "`data_platform_orders_item_data`.`StockConfirmationStatus`"},
	ConfirmedOrderQuantityInBaseUnit:              whereHelpernull_Float32{field: "`data_platform_orders_item_data`.`ConfirmedOrderQuantityInBaseUnit`"},
	ItemWeightUnit:                                whereHelpernull_String{field: "`data_platform_orders_item_data`.`ItemWeightUnit`"},
	ProductGrossWeight:                            whereHelpernull_Float32{field: "`data_platform_orders_item_data`.`ProductGrossWeight`"},
	ItemGrossWeight:                               whereHelpernull_Float32{field: "`data_platform_orders_item_data`.`ItemGrossWeight`"},
	ProductNetWeight:                              whereHelpernull_Float32{field: "`data_platform_orders_item_data`.`ProductNetWeight`"},
	ItemNetWeight:                                 whereHelpernull_Float32{field: "`data_platform_orders_item_data`.`ItemNetWeight`"},
	InternalCapacityQuantity:                      whereHelpernull_Float32{field: "`data_platform_orders_item_data`.`InternalCapacityQuantity`"},
	InternalCapacityQuantityUnit:                  whereHelpernull_String{field: "`data_platform_orders_item_data`.`InternalCapacityQuantityUnit`"},
	NetAmount:                                     whereHelpernull_Float32{field: "`data_platform_orders_item_data`.`NetAmount`"},
	TaxAmount:                                     whereHelpernull_Float32{field: "`data_platform_orders_item_data`.`TaxAmount`"},
	GrossAmount:                                   whereHelpernull_Float32{field: "`data_platform_orders_item_data`.`GrossAmount`"},
	InvoiceDocumentDate:                           whereHelpernull_String{field: "`data_platform_orders_item_data`.`InvoiceDocumentDate`"},
	ProductionPlantBusinessPartner:                whereHelpernull_Int{field: "`data_platform_orders_item_data`.`ProductionPlantBusinessPartner`"},
	ProductionPlant:                               whereHelpernull_String{field: "`data_platform_orders_item_data`.`ProductionPlant`"},
	ProductionPlantTimeZone:                       whereHelpernull_String{field: "`data_platform_orders_item_data`.`ProductionPlantTimeZone`"},
	ProductionPlantStorageLocation:                whereHelpernull_String{field: "`data_platform_orders_item_data`.`ProductionPlantStorageLocation`"},
	ProductIsBatchManagedInProductionPlant:        whereHelpernull_Bool{field: "`data_platform_orders_item_data`.`ProductIsBatchManagedInProductionPlant`"},
	BatchMgmtPolicyInProductionPlant:              whereHelpernull_String{field: "`data_platform_orders_item_data`.`BatchMgmtPolicyInProductionPlant`"},
	ProductionPlantBatch:                          whereHelpernull_String{field: "`data_platform_orders_item_data`.`ProductionPlantBatch`"},
	ProductionPlantBatchValidityStartDate:         whereHelpernull_String{field: "`data_platform_orders_item_data`.`ProductionPlantBatchValidityStartDate`"},
	ProductionPlantBatchValidityStartTime:         whereHelpernull_String{field: "`data_platform_orders_item_data`.`ProductionPlantBatchValidityStartTime`"},
	ProductionPlantBatchValidityEndDate:           whereHelpernull_String{field: "`data_platform_orders_item_data`.`ProductionPlantBatchValidityEndDate`"},
	ProductionPlantBatchValidityEndTime:           whereHelpernull_String{field: "`data_platform_orders_item_data`.`ProductionPlantBatchValidityEndTime`"},
	InspectionPlan:                                whereHelpernull_Int{field: "`data_platform_orders_item_data`.`InspectionPlan`"},
	InspectionPlant:                               whereHelpernull_String{field: "`data_platform_orders_item_data`.`InspectionPlant`"},
	InspectionOrder:                               whereHelpernull_Int{field: "`data_platform_orders_item_data`.`InspectionOrder`"},
	Incoterms:                                     whereHelpernull_String{field: "`data_platform_orders_item_data`.`Incoterms`"},
	TransactionTaxClassification:                  whereHelperstring{field: "`data_platform_orders_item_data`.`TransactionTaxClassification`"},
	ProductTaxClassificationBillToCountry:         whereHelperstring{field: "`data_platform_orders_item_data`.`ProductTaxClassificationBillToCountry`"},
	ProductTaxClassificationBillFromCountry:       whereHelperstring{field: "`data_platform_orders_item_data`.`ProductTaxClassificationBillFromCountry`"},
	DefinedTaxClassification:                      whereHelperstring{field: "`data_platform_orders_item_data`.`DefinedTaxClassification`"},
	AccountAssignmentGroup:                        whereHelperstring{field: "`data_platform_orders_item_data`.`AccountAssignmentGroup`"},
	ProductAccountAssignmentGroup:                 whereHelperstring{field: "`data_platform_orders_item_data`.`ProductAccountAssignmentGroup`"},
	PaymentTerms:                                  whereHelperstring{field: "`data_platform_orders_item_data`.`PaymentTerms`"},
	DueCalculationBaseDate:                        whereHelpernull_String{field: "`data_platform_orders_item_data`.`DueCalculationBaseDate`"},
	PaymentDueDate:                                whereHelpernull_String{field: "`data_platform_orders_item_data`.`PaymentDueDate`"},
	NetPaymentDays:                                whereHelpernull_Int{field: "`data_platform_orders_item_data`.`NetPaymentDays`"},
	PaymentMethod:                                 whereHelperstring{field: "`data_platform_orders_item_data`.`PaymentMethod`"},
	Project:                                       whereHelpernull_String{field: "`data_platform_orders_item_data`.`Project`"},
	AccountingExchangeRate:                        whereHelpernull_Float32{field: "`data_platform_orders_item_data`.`AccountingExchangeRate`"},
	ReferenceDocument:                             whereHelpernull_Int{field: "`data_platform_orders_item_data`.`ReferenceDocument`"},
	ReferenceDocumentItem:                         whereHelpernull_Int{field: "`data_platform_orders_item_data`.`ReferenceDocumentItem`"},
	ItemCompleteDeliveryIsDefined:                 whereHelpernull_Bool{field: "`data_platform_orders_item_data`.`ItemCompleteDeliveryIsDefined`"},
	ItemDeliveryStatus:                            whereHelpernull_String{field: "`data_platform_orders_item_data`.`ItemDeliveryStatus`"},
	IssuingStatus:                                 whereHelpernull_String{field: "`data_platform_orders_item_data`.`IssuingStatus`"},
	ReceivingStatus:                               whereHelpernull_String{field: "`data_platform_orders_item_data`.`ReceivingStatus`"},
	ItemBillingStatus:                             whereHelpernull_String{field: "`data_platform_orders_item_data`.`ItemBillingStatus`"},
	TaxCode:                                       whereHelpernull_String{field: "`data_platform_orders_item_data`.`TaxCode`"},
	TaxRate:                                       whereHelpernull_Float32{field: "`data_platform_orders_item_data`.`TaxRate`"},
	CountryOfOrigin:                               whereHelpernull_String{field: "`data_platform_orders_item_data`.`CountryOfOrigin`"},
	CountryOfOriginLanguage:                       whereHelpernull_String{field: "`data_platform_orders_item_data`.`CountryOfOriginLanguage`"},
	ItemBlockStatus:                               whereHelpernull_Bool{field: "`data_platform_orders_item_data`.`ItemBlockStatus`"},
	ItemDeliveryBlockStatus:                       whereHelpernull_Bool{field: "`data_platform_orders_item_data`.`ItemDeliveryBlockStatus`"},
	ItemBillingBlockStatus:                        whereHelpernull_Bool{field: "`data_platform_orders_item_data`.`ItemBillingBlockStatus`"},
	IsCancelled:                                   whereHelpernull_Bool{field: "`data_platform_orders_item_data`.`IsCancelled`"},
	IsMarkedForDeletion:                           whereHelpernull_Bool{field: "`data_platform_orders_item_data`.`IsMarkedForDeletion`"},
}

// DataPlatformOrdersItemDatumRels is where relationship names are stored.
var DataPlatformOrdersItemDatumRels = struct {
	OrderIDDataPlatformDeliveryDocumentHeaderData string
	OrderIDDataPlatformDeliveryDocumentItemData   string
	OrderIDDataPlatformPlannedOrderHeaderData     string
	OrderIDDataPlatformPlannedOrderItemData       string
}{
	OrderIDDataPlatformDeliveryDocumentHeaderData: "OrderIDDataPlatformDeliveryDocumentHeaderData",
	OrderIDDataPlatformDeliveryDocumentItemData:   "OrderIDDataPlatformDeliveryDocumentItemData",
	OrderIDDataPlatformPlannedOrderHeaderData:     "OrderIDDataPlatformPlannedOrderHeaderData",
	OrderIDDataPlatformPlannedOrderItemData:       "OrderIDDataPlatformPlannedOrderItemData",
}

// dataPlatformOrdersItemDatumR is where relationships are stored.
type dataPlatformOrdersItemDatumR struct {
	OrderIDDataPlatformDeliveryDocumentHeaderData DataPlatformDeliveryDocumentHeaderDatumSlice `boil:"OrderIDDataPlatformDeliveryDocumentHeaderData" json:"OrderIDDataPlatformDeliveryDocumentHeaderData" toml:"OrderIDDataPlatformDeliveryDocumentHeaderData" yaml:"OrderIDDataPlatformDeliveryDocumentHeaderData"`
	OrderIDDataPlatformDeliveryDocumentItemData   DataPlatformDeliveryDocumentItemDatumSlice   `boil:"OrderIDDataPlatformDeliveryDocumentItemData" json:"OrderIDDataPlatformDeliveryDocumentItemData" toml:"OrderIDDataPlatformDeliveryDocumentItemData" yaml:"OrderIDDataPlatformDeliveryDocumentItemData"`
	OrderIDDataPlatformPlannedOrderHeaderData     DataPlatformPlannedOrderHeaderDatumSlice     `boil:"OrderIDDataPlatformPlannedOrderHeaderData" json:"OrderIDDataPlatformPlannedOrderHeaderData" toml:"OrderIDDataPlatformPlannedOrderHeaderData" yaml:"OrderIDDataPlatformPlannedOrderHeaderData"`
	OrderIDDataPlatformPlannedOrderItemData       DataPlatformPlannedOrderItemDatumSlice       `boil:"OrderIDDataPlatformPlannedOrderItemData" json:"OrderIDDataPlatformPlannedOrderItemData" toml:"OrderIDDataPlatformPlannedOrderItemData" yaml:"OrderIDDataPlatformPlannedOrderItemData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformOrdersItemDatumR) NewStruct() *dataPlatformOrdersItemDatumR {
	return &dataPlatformOrdersItemDatumR{}
}

func (r *dataPlatformOrdersItemDatumR) GetOrderIDDataPlatformDeliveryDocumentHeaderData() DataPlatformDeliveryDocumentHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.OrderIDDataPlatformDeliveryDocumentHeaderData
}

func (r *dataPlatformOrdersItemDatumR) GetOrderIDDataPlatformDeliveryDocumentItemData() DataPlatformDeliveryDocumentItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.OrderIDDataPlatformDeliveryDocumentItemData
}

func (r *dataPlatformOrdersItemDatumR) GetOrderIDDataPlatformPlannedOrderHeaderData() DataPlatformPlannedOrderHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.OrderIDDataPlatformPlannedOrderHeaderData
}

func (r *dataPlatformOrdersItemDatumR) GetOrderIDDataPlatformPlannedOrderItemData() DataPlatformPlannedOrderItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.OrderIDDataPlatformPlannedOrderItemData
}

// dataPlatformOrdersItemDatumL is where Load methods for each relationship are stored.
type dataPlatformOrdersItemDatumL struct{}

var (
	dataPlatformOrdersItemDatumAllColumns            = []string{"OrderID", "OrderItem", "OrderItemCategory", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "SupplyChainRelationshipStockConfPlantID", "SupplyChainRelationshipProductionPlantID", "OrderItemText", "OrderItemTextByBuyer", "OrderItemTextBySeller", "Product", "ProductStandardID", "ProductGroup", "BaseUnit", "PricingDate", "PriceDetnExchangeRate", "RequestedDeliveryDate", "RequestedDeliveryTime", "DeliverToParty", "DeliverFromParty", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "DeliverToPlant", "DeliverToPlantTimeZone", "DeliverToPlantStorageLocation", "ProductIsBatchManagedInDeliverToPlant", "BatchMgmtPolicyInDeliverToPlant", "DeliverToPlantBatch", "DeliverToPlantBatchValidityStartDate", "DeliverToPlantBatchValidityStartTime", "DeliverToPlantBatchValidityEndDate", "DeliverToPlantBatchValidityEndTime", "DeliverFromPlant", "DeliverFromPlantTimeZone", "DeliverFromPlantStorageLocation", "ProductIsBatchManagedInDeliverFromPlant", "BatchMgmtPolicyInDeliverFromPlant", "DeliverFromPlantBatch", "DeliverFromPlantBatchValidityStartDate", "DeliverFromPlantBatchValidityStartTime", "DeliverFromPlantBatchValidityEndDate", "DeliverFromPlantBatchValidityEndTime", "DeliveryUnit", "StockConfirmationBusinessPartner", "StockConfirmationPlant", "StockConfirmationPlantTimeZone", "ProductIsBatchManagedInStockConfirmationPlant", "BatchMgmtPolicyInStockConfirmationPlant", "StockConfirmationPlantBatch", "StockConfirmationPlantBatchValidityStartDate", "StockConfirmationPlantBatchValidityStartTime", "StockConfirmationPlantBatchValidityEndDate", "StockConfirmationPlantBatchValidityEndTime", "ServicesRenderingDate", "OrderQuantityInBaseUnit", "OrderQuantityInDeliveryUnit", "QuantityPerPackage", "StockConfirmationPolicy", "StockConfirmationStatus", "ConfirmedOrderQuantityInBaseUnit", "ItemWeightUnit", "ProductGrossWeight", "ItemGrossWeight", "ProductNetWeight", "ItemNetWeight", "InternalCapacityQuantity", "InternalCapacityQuantityUnit", "NetAmount", "TaxAmount", "GrossAmount", "InvoiceDocumentDate", "ProductionPlantBusinessPartner", "ProductionPlant", "ProductionPlantTimeZone", "ProductionPlantStorageLocation", "ProductIsBatchManagedInProductionPlant", "BatchMgmtPolicyInProductionPlant", "ProductionPlantBatch", "ProductionPlantBatchValidityStartDate", "ProductionPlantBatchValidityStartTime", "ProductionPlantBatchValidityEndDate", "ProductionPlantBatchValidityEndTime", "InspectionPlan", "InspectionPlant", "InspectionOrder", "Incoterms", "TransactionTaxClassification", "ProductTaxClassificationBillToCountry", "ProductTaxClassificationBillFromCountry", "DefinedTaxClassification", "AccountAssignmentGroup", "ProductAccountAssignmentGroup", "PaymentTerms", "DueCalculationBaseDate", "PaymentDueDate", "NetPaymentDays", "PaymentMethod", "Project", "AccountingExchangeRate", "ReferenceDocument", "ReferenceDocumentItem", "ItemCompleteDeliveryIsDefined", "ItemDeliveryStatus", "IssuingStatus", "ReceivingStatus", "ItemBillingStatus", "TaxCode", "TaxRate", "CountryOfOrigin", "CountryOfOriginLanguage", "ItemBlockStatus", "ItemDeliveryBlockStatus", "ItemBillingBlockStatus", "IsCancelled", "IsMarkedForDeletion"}
	dataPlatformOrdersItemDatumColumnsWithoutDefault = []string{"OrderID", "OrderItem", "OrderItemCategory", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "SupplyChainRelationshipStockConfPlantID", "SupplyChainRelationshipProductionPlantID", "OrderItemText", "OrderItemTextByBuyer", "OrderItemTextBySeller", "Product", "ProductStandardID", "ProductGroup", "BaseUnit", "PricingDate", "PriceDetnExchangeRate", "RequestedDeliveryDate", "RequestedDeliveryTime", "DeliverToParty", "DeliverFromParty", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "DeliverToPlant", "DeliverToPlantTimeZone", "DeliverToPlantStorageLocation", "ProductIsBatchManagedInDeliverToPlant", "BatchMgmtPolicyInDeliverToPlant", "DeliverToPlantBatch", "DeliverToPlantBatchValidityStartDate", "DeliverToPlantBatchValidityStartTime", "DeliverToPlantBatchValidityEndDate", "DeliverToPlantBatchValidityEndTime", "DeliverFromPlant", "DeliverFromPlantTimeZone", "DeliverFromPlantStorageLocation", "ProductIsBatchManagedInDeliverFromPlant", "BatchMgmtPolicyInDeliverFromPlant", "DeliverFromPlantBatch", "DeliverFromPlantBatchValidityStartDate", "DeliverFromPlantBatchValidityStartTime", "DeliverFromPlantBatchValidityEndDate", "DeliverFromPlantBatchValidityEndTime", "DeliveryUnit", "StockConfirmationBusinessPartner", "StockConfirmationPlant", "StockConfirmationPlantTimeZone", "ProductIsBatchManagedInStockConfirmationPlant", "BatchMgmtPolicyInStockConfirmationPlant", "StockConfirmationPlantBatch", "StockConfirmationPlantBatchValidityStartDate", "StockConfirmationPlantBatchValidityStartTime", "StockConfirmationPlantBatchValidityEndDate", "StockConfirmationPlantBatchValidityEndTime", "ServicesRenderingDate", "OrderQuantityInBaseUnit", "OrderQuantityInDeliveryUnit", "QuantityPerPackage", "StockConfirmationPolicy", "StockConfirmationStatus", "ConfirmedOrderQuantityInBaseUnit", "ItemWeightUnit", "ProductGrossWeight", "ItemGrossWeight", "ProductNetWeight", "ItemNetWeight", "InternalCapacityQuantity", "InternalCapacityQuantityUnit", "NetAmount", "TaxAmount", "GrossAmount", "InvoiceDocumentDate", "ProductionPlantBusinessPartner", "ProductionPlant", "ProductionPlantTimeZone", "ProductionPlantStorageLocation", "ProductIsBatchManagedInProductionPlant", "BatchMgmtPolicyInProductionPlant", "ProductionPlantBatch", "ProductionPlantBatchValidityStartDate", "ProductionPlantBatchValidityStartTime", "ProductionPlantBatchValidityEndDate", "ProductionPlantBatchValidityEndTime", "InspectionPlan", "InspectionPlant", "InspectionOrder", "Incoterms", "TransactionTaxClassification", "ProductTaxClassificationBillToCountry", "ProductTaxClassificationBillFromCountry", "DefinedTaxClassification", "AccountAssignmentGroup", "ProductAccountAssignmentGroup", "PaymentTerms", "DueCalculationBaseDate", "PaymentDueDate", "NetPaymentDays", "PaymentMethod", "Project", "AccountingExchangeRate", "ReferenceDocument", "ReferenceDocumentItem", "ItemCompleteDeliveryIsDefined", "ItemDeliveryStatus", "IssuingStatus", "ReceivingStatus", "ItemBillingStatus", "TaxCode", "TaxRate", "CountryOfOrigin", "CountryOfOriginLanguage", "ItemBlockStatus", "ItemDeliveryBlockStatus", "ItemBillingBlockStatus", "IsCancelled", "IsMarkedForDeletion"}
	dataPlatformOrdersItemDatumColumnsWithDefault    = []string{}
	dataPlatformOrdersItemDatumPrimaryKeyColumns     = []string{"OrderID", "OrderItem"}
	dataPlatformOrdersItemDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformOrdersItemDatumSlice is an alias for a slice of pointers to DataPlatformOrdersItemDatum.
	// This should almost always be used instead of []DataPlatformOrdersItemDatum.
	DataPlatformOrdersItemDatumSlice []*DataPlatformOrdersItemDatum

	dataPlatformOrdersItemDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformOrdersItemDatumType                 = reflect.TypeOf(&DataPlatformOrdersItemDatum{})
	dataPlatformOrdersItemDatumMapping              = queries.MakeStructMapping(dataPlatformOrdersItemDatumType)
	dataPlatformOrdersItemDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformOrdersItemDatumType, dataPlatformOrdersItemDatumMapping, dataPlatformOrdersItemDatumPrimaryKeyColumns)
	dataPlatformOrdersItemDatumInsertCacheMut       sync.RWMutex
	dataPlatformOrdersItemDatumInsertCache          = make(map[string]insertCache)
	dataPlatformOrdersItemDatumUpdateCacheMut       sync.RWMutex
	dataPlatformOrdersItemDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformOrdersItemDatumUpsertCacheMut       sync.RWMutex
	dataPlatformOrdersItemDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformOrdersItemDatum record from the query.
func (q dataPlatformOrdersItemDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformOrdersItemDatum, error) {
	o := &DataPlatformOrdersItemDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_orders_item_data")
	}

	return o, nil
}

// All returns all DataPlatformOrdersItemDatum records from the query.
func (q dataPlatformOrdersItemDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformOrdersItemDatumSlice, error) {
	var o []*DataPlatformOrdersItemDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformOrdersItemDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformOrdersItemDatum records in the query.
func (q dataPlatformOrdersItemDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_orders_item_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformOrdersItemDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_orders_item_data exists")
	}

	return count > 0, nil
}

// OrderIDDataPlatformDeliveryDocumentHeaderData retrieves all the data_platform_delivery_document_header_datum's DataPlatformDeliveryDocumentHeaderData with an executor via OrderID column.
func (o *DataPlatformOrdersItemDatum) OrderIDDataPlatformDeliveryDocumentHeaderData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_header_data`.`OrderID`=?", o.OrderID),
	)

	return DataPlatformDeliveryDocumentHeaderData(queryMods...)
}

// OrderIDDataPlatformDeliveryDocumentItemData retrieves all the data_platform_delivery_document_item_datum's DataPlatformDeliveryDocumentItemData with an executor via OrderID column.
func (o *DataPlatformOrdersItemDatum) OrderIDDataPlatformDeliveryDocumentItemData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_item_data`.`OrderID`=?", o.OrderID),
	)

	return DataPlatformDeliveryDocumentItemData(queryMods...)
}

// OrderIDDataPlatformPlannedOrderHeaderData retrieves all the data_platform_planned_order_header_datum's DataPlatformPlannedOrderHeaderData with an executor via OrderID column.
func (o *DataPlatformOrdersItemDatum) OrderIDDataPlatformPlannedOrderHeaderData(mods ...qm.QueryMod) dataPlatformPlannedOrderHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_header_data`.`OrderID`=?", o.OrderID),
	)

	return DataPlatformPlannedOrderHeaderData(queryMods...)
}

// OrderIDDataPlatformPlannedOrderItemData retrieves all the data_platform_planned_order_item_datum's DataPlatformPlannedOrderItemData with an executor via OrderID column.
func (o *DataPlatformOrdersItemDatum) OrderIDDataPlatformPlannedOrderItemData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_data`.`OrderID`=?", o.OrderID),
	)

	return DataPlatformPlannedOrderItemData(queryMods...)
}

// LoadOrderIDDataPlatformDeliveryDocumentHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformOrdersItemDatumL) LoadOrderIDDataPlatformDeliveryDocumentHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOrdersItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOrdersItemDatum
	var object *DataPlatformOrdersItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOrdersItemDatum.(*DataPlatformOrdersItemDatum)
		if !ok {
			object = new(DataPlatformOrdersItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOrdersItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOrdersItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOrdersItemDatum.(*[]*DataPlatformOrdersItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOrdersItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOrdersItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOrdersItemDatumR{}
		}
		args = append(args, object.OrderID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOrdersItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OrderID) {
					continue Outer
				}
			}

			args = append(args, obj.OrderID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_header_data`),
		qm.WhereIn(`data_platform_delivery_document_header_data.OrderID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_header_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_header_data")
	}

	if singular {
		object.R.OrderIDDataPlatformDeliveryDocumentHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.OrderID, foreign.OrderID) {
				local.R.OrderIDDataPlatformDeliveryDocumentHeaderData = append(local.R.OrderIDDataPlatformDeliveryDocumentHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadOrderIDDataPlatformDeliveryDocumentItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformOrdersItemDatumL) LoadOrderIDDataPlatformDeliveryDocumentItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOrdersItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOrdersItemDatum
	var object *DataPlatformOrdersItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOrdersItemDatum.(*DataPlatformOrdersItemDatum)
		if !ok {
			object = new(DataPlatformOrdersItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOrdersItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOrdersItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOrdersItemDatum.(*[]*DataPlatformOrdersItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOrdersItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOrdersItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOrdersItemDatumR{}
		}
		args = append(args, object.OrderID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOrdersItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OrderID) {
					continue Outer
				}
			}

			args = append(args, obj.OrderID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_item_data`),
		qm.WhereIn(`data_platform_delivery_document_item_data.OrderID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_item_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_item_data")
	}

	if singular {
		object.R.OrderIDDataPlatformDeliveryDocumentItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.OrderID, foreign.OrderID) {
				local.R.OrderIDDataPlatformDeliveryDocumentItemData = append(local.R.OrderIDDataPlatformDeliveryDocumentItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadOrderIDDataPlatformPlannedOrderHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformOrdersItemDatumL) LoadOrderIDDataPlatformPlannedOrderHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOrdersItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOrdersItemDatum
	var object *DataPlatformOrdersItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOrdersItemDatum.(*DataPlatformOrdersItemDatum)
		if !ok {
			object = new(DataPlatformOrdersItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOrdersItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOrdersItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOrdersItemDatum.(*[]*DataPlatformOrdersItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOrdersItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOrdersItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOrdersItemDatumR{}
		}
		args = append(args, object.OrderID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOrdersItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OrderID) {
					continue Outer
				}
			}

			args = append(args, obj.OrderID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_header_data`),
		qm.WhereIn(`data_platform_planned_order_header_data.OrderID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_header_data")
	}

	var resultSlice []*DataPlatformPlannedOrderHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_header_data")
	}

	if singular {
		object.R.OrderIDDataPlatformPlannedOrderHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.OrderID, foreign.OrderID) {
				local.R.OrderIDDataPlatformPlannedOrderHeaderData = append(local.R.OrderIDDataPlatformPlannedOrderHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadOrderIDDataPlatformPlannedOrderItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformOrdersItemDatumL) LoadOrderIDDataPlatformPlannedOrderItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOrdersItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOrdersItemDatum
	var object *DataPlatformOrdersItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOrdersItemDatum.(*DataPlatformOrdersItemDatum)
		if !ok {
			object = new(DataPlatformOrdersItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOrdersItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOrdersItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOrdersItemDatum.(*[]*DataPlatformOrdersItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOrdersItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOrdersItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOrdersItemDatumR{}
		}
		args = append(args, object.OrderID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOrdersItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OrderID) {
					continue Outer
				}
			}

			args = append(args, obj.OrderID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_data`),
		qm.WhereIn(`data_platform_planned_order_item_data.OrderID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_data")
	}

	if singular {
		object.R.OrderIDDataPlatformPlannedOrderItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.OrderID, foreign.OrderID) {
				local.R.OrderIDDataPlatformPlannedOrderItemData = append(local.R.OrderIDDataPlatformPlannedOrderItemData, foreign)
				break
			}
		}
	}

	return nil
}

// AddOrderIDDataPlatformDeliveryDocumentHeaderData adds the given related objects to the existing relationships
// of the data_platform_orders_item_datum, optionally inserting them as new records.
// Appends related to o.R.OrderIDDataPlatformDeliveryDocumentHeaderData.
func (o *DataPlatformOrdersItemDatum) AddOrderIDDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OrderID, o.OrderID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"OrderID"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.OrderID, rel.DeliveryDocument}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OrderID, o.OrderID)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformOrdersItemDatumR{
			OrderIDDataPlatformDeliveryDocumentHeaderData: related,
		}
	} else {
		o.R.OrderIDDataPlatformDeliveryDocumentHeaderData = append(o.R.OrderIDDataPlatformDeliveryDocumentHeaderData, related...)
	}

	return nil
}

// SetOrderIDDataPlatformDeliveryDocumentHeaderData removes all previously related items of the
// data_platform_orders_item_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OrderIDDataPlatformOrdersItemDatum's OrderIDDataPlatformDeliveryDocumentHeaderData accordingly.
// Replaces o.R.OrderIDDataPlatformDeliveryDocumentHeaderData with related.
func (o *DataPlatformOrdersItemDatum) SetOrderIDDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	query := "update `data_platform_delivery_document_header_data` set `OrderID` = null where `OrderID` = ?"
	values := []interface{}{o.OrderID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.OrderIDDataPlatformDeliveryDocumentHeaderData = nil
	}

	return o.AddOrderIDDataPlatformDeliveryDocumentHeaderData(ctx, exec, insert, related...)
}

// RemoveOrderIDDataPlatformDeliveryDocumentHeaderData relationships from objects passed in.
// Removes related items from R.OrderIDDataPlatformDeliveryDocumentHeaderData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformOrdersItemDatum) RemoveOrderIDDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.OrderID, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("OrderID")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OrderIDDataPlatformDeliveryDocumentHeaderData {
			if rel != ri {
				continue
			}

			ln := len(o.R.OrderIDDataPlatformDeliveryDocumentHeaderData)
			if ln > 1 && i < ln-1 {
				o.R.OrderIDDataPlatformDeliveryDocumentHeaderData[i] = o.R.OrderIDDataPlatformDeliveryDocumentHeaderData[ln-1]
			}
			o.R.OrderIDDataPlatformDeliveryDocumentHeaderData = o.R.OrderIDDataPlatformDeliveryDocumentHeaderData[:ln-1]
			break
		}
	}

	return nil
}

// AddOrderIDDataPlatformDeliveryDocumentItemData adds the given related objects to the existing relationships
// of the data_platform_orders_item_datum, optionally inserting them as new records.
// Appends related to o.R.OrderIDDataPlatformDeliveryDocumentItemData.
func (o *DataPlatformOrdersItemDatum) AddOrderIDDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OrderID, o.OrderID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"OrderID"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.OrderID, rel.DeliveryDocument, rel.DeliveryDocumentItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OrderID, o.OrderID)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformOrdersItemDatumR{
			OrderIDDataPlatformDeliveryDocumentItemData: related,
		}
	} else {
		o.R.OrderIDDataPlatformDeliveryDocumentItemData = append(o.R.OrderIDDataPlatformDeliveryDocumentItemData, related...)
	}

	return nil
}

// SetOrderIDDataPlatformDeliveryDocumentItemData removes all previously related items of the
// data_platform_orders_item_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OrderIDDataPlatformOrdersItemDatum's OrderIDDataPlatformDeliveryDocumentItemData accordingly.
// Replaces o.R.OrderIDDataPlatformDeliveryDocumentItemData with related.
func (o *DataPlatformOrdersItemDatum) SetOrderIDDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	query := "update `data_platform_delivery_document_item_data` set `OrderID` = null where `OrderID` = ?"
	values := []interface{}{o.OrderID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.OrderIDDataPlatformDeliveryDocumentItemData = nil
	}

	return o.AddOrderIDDataPlatformDeliveryDocumentItemData(ctx, exec, insert, related...)
}

// RemoveOrderIDDataPlatformDeliveryDocumentItemData relationships from objects passed in.
// Removes related items from R.OrderIDDataPlatformDeliveryDocumentItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformOrdersItemDatum) RemoveOrderIDDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.OrderID, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("OrderID")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OrderIDDataPlatformDeliveryDocumentItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.OrderIDDataPlatformDeliveryDocumentItemData)
			if ln > 1 && i < ln-1 {
				o.R.OrderIDDataPlatformDeliveryDocumentItemData[i] = o.R.OrderIDDataPlatformDeliveryDocumentItemData[ln-1]
			}
			o.R.OrderIDDataPlatformDeliveryDocumentItemData = o.R.OrderIDDataPlatformDeliveryDocumentItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddOrderIDDataPlatformPlannedOrderHeaderData adds the given related objects to the existing relationships
// of the data_platform_orders_item_datum, optionally inserting them as new records.
// Appends related to o.R.OrderIDDataPlatformPlannedOrderHeaderData.
func (o *DataPlatformOrdersItemDatum) AddOrderIDDataPlatformPlannedOrderHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OrderID, o.OrderID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"OrderID"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.OrderID, rel.PlannedOrder}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OrderID, o.OrderID)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformOrdersItemDatumR{
			OrderIDDataPlatformPlannedOrderHeaderData: related,
		}
	} else {
		o.R.OrderIDDataPlatformPlannedOrderHeaderData = append(o.R.OrderIDDataPlatformPlannedOrderHeaderData, related...)
	}

	return nil
}

// SetOrderIDDataPlatformPlannedOrderHeaderData removes all previously related items of the
// data_platform_orders_item_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OrderIDDataPlatformOrdersItemDatum's OrderIDDataPlatformPlannedOrderHeaderData accordingly.
// Replaces o.R.OrderIDDataPlatformPlannedOrderHeaderData with related.
func (o *DataPlatformOrdersItemDatum) SetOrderIDDataPlatformPlannedOrderHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderHeaderDatum) error {
	query := "update `data_platform_planned_order_header_data` set `OrderID` = null where `OrderID` = ?"
	values := []interface{}{o.OrderID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.OrderIDDataPlatformPlannedOrderHeaderData = nil
	}

	return o.AddOrderIDDataPlatformPlannedOrderHeaderData(ctx, exec, insert, related...)
}

// RemoveOrderIDDataPlatformPlannedOrderHeaderData relationships from objects passed in.
// Removes related items from R.OrderIDDataPlatformPlannedOrderHeaderData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformOrdersItemDatum) RemoveOrderIDDataPlatformPlannedOrderHeaderData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformPlannedOrderHeaderDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.OrderID, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("OrderID")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OrderIDDataPlatformPlannedOrderHeaderData {
			if rel != ri {
				continue
			}

			ln := len(o.R.OrderIDDataPlatformPlannedOrderHeaderData)
			if ln > 1 && i < ln-1 {
				o.R.OrderIDDataPlatformPlannedOrderHeaderData[i] = o.R.OrderIDDataPlatformPlannedOrderHeaderData[ln-1]
			}
			o.R.OrderIDDataPlatformPlannedOrderHeaderData = o.R.OrderIDDataPlatformPlannedOrderHeaderData[:ln-1]
			break
		}
	}

	return nil
}

// AddOrderIDDataPlatformPlannedOrderItemData adds the given related objects to the existing relationships
// of the data_platform_orders_item_datum, optionally inserting them as new records.
// Appends related to o.R.OrderIDDataPlatformPlannedOrderItemData.
func (o *DataPlatformOrdersItemDatum) AddOrderIDDataPlatformPlannedOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OrderID, o.OrderID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"OrderID"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.OrderID, rel.PlannedOrder, rel.PlannedOrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OrderID, o.OrderID)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformOrdersItemDatumR{
			OrderIDDataPlatformPlannedOrderItemData: related,
		}
	} else {
		o.R.OrderIDDataPlatformPlannedOrderItemData = append(o.R.OrderIDDataPlatformPlannedOrderItemData, related...)
	}

	return nil
}

// SetOrderIDDataPlatformPlannedOrderItemData removes all previously related items of the
// data_platform_orders_item_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OrderIDDataPlatformOrdersItemDatum's OrderIDDataPlatformPlannedOrderItemData accordingly.
// Replaces o.R.OrderIDDataPlatformPlannedOrderItemData with related.
func (o *DataPlatformOrdersItemDatum) SetOrderIDDataPlatformPlannedOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemDatum) error {
	query := "update `data_platform_planned_order_item_data` set `OrderID` = null where `OrderID` = ?"
	values := []interface{}{o.OrderID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.OrderIDDataPlatformPlannedOrderItemData = nil
	}

	return o.AddOrderIDDataPlatformPlannedOrderItemData(ctx, exec, insert, related...)
}

// RemoveOrderIDDataPlatformPlannedOrderItemData relationships from objects passed in.
// Removes related items from R.OrderIDDataPlatformPlannedOrderItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformOrdersItemDatum) RemoveOrderIDDataPlatformPlannedOrderItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformPlannedOrderItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.OrderID, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("OrderID")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OrderIDDataPlatformPlannedOrderItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.OrderIDDataPlatformPlannedOrderItemData)
			if ln > 1 && i < ln-1 {
				o.R.OrderIDDataPlatformPlannedOrderItemData[i] = o.R.OrderIDDataPlatformPlannedOrderItemData[ln-1]
			}
			o.R.OrderIDDataPlatformPlannedOrderItemData = o.R.OrderIDDataPlatformPlannedOrderItemData[:ln-1]
			break
		}
	}

	return nil
}

// DataPlatformOrdersItemData retrieves all the records using an executor.
func DataPlatformOrdersItemData(mods ...qm.QueryMod) dataPlatformOrdersItemDatumQuery {
	mods = append(mods, qm.From("`data_platform_orders_item_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_orders_item_data`.*"})
	}

	return dataPlatformOrdersItemDatumQuery{q}
}

// FindDataPlatformOrdersItemDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformOrdersItemDatum(ctx context.Context, exec boil.ContextExecutor, orderID int, orderItem int, selectCols ...string) (*DataPlatformOrdersItemDatum, error) {
	dataPlatformOrdersItemDatumObj := &DataPlatformOrdersItemDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_orders_item_data` where `OrderID`=? AND `OrderItem`=?", sel,
	)

	q := queries.Raw(query, orderID, orderItem)

	err := q.Bind(ctx, exec, dataPlatformOrdersItemDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_orders_item_data")
	}

	return dataPlatformOrdersItemDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformOrdersItemDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_orders_item_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformOrdersItemDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformOrdersItemDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformOrdersItemDatumInsertCache[key]
	dataPlatformOrdersItemDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformOrdersItemDatumAllColumns,
			dataPlatformOrdersItemDatumColumnsWithDefault,
			dataPlatformOrdersItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformOrdersItemDatumType, dataPlatformOrdersItemDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformOrdersItemDatumType, dataPlatformOrdersItemDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_orders_item_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_orders_item_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_orders_item_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_orders_item_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.OrderID,
		o.OrderItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_orders_item_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformOrdersItemDatumInsertCacheMut.Lock()
		dataPlatformOrdersItemDatumInsertCache[key] = cache
		dataPlatformOrdersItemDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformOrdersItemDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformOrdersItemDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformOrdersItemDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformOrdersItemDatumUpdateCache[key]
	dataPlatformOrdersItemDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformOrdersItemDatumAllColumns,
			dataPlatformOrdersItemDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_orders_item_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_orders_item_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformOrdersItemDatumType, dataPlatformOrdersItemDatumMapping, append(wl, dataPlatformOrdersItemDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_orders_item_data row")
	}

	if !cached {
		dataPlatformOrdersItemDatumUpdateCacheMut.Lock()
		dataPlatformOrdersItemDatumUpdateCache[key] = cache
		dataPlatformOrdersItemDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformOrdersItemDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_orders_item_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformOrdersItemDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformOrdersItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_orders_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformOrdersItemDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformOrdersItemDatum slice")
	}

	return nil
}

var mySQLDataPlatformOrdersItemDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformOrdersItemDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_orders_item_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformOrdersItemDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformOrdersItemDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformOrdersItemDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformOrdersItemDatumUpsertCache[key]
	dataPlatformOrdersItemDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformOrdersItemDatumAllColumns,
			dataPlatformOrdersItemDatumColumnsWithDefault,
			dataPlatformOrdersItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformOrdersItemDatumAllColumns,
			dataPlatformOrdersItemDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_orders_item_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_orders_item_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_orders_item_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformOrdersItemDatumType, dataPlatformOrdersItemDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformOrdersItemDatumType, dataPlatformOrdersItemDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_orders_item_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformOrdersItemDatumType, dataPlatformOrdersItemDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_orders_item_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_orders_item_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformOrdersItemDatumUpsertCacheMut.Lock()
		dataPlatformOrdersItemDatumUpsertCache[key] = cache
		dataPlatformOrdersItemDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformOrdersItemDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformOrdersItemDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformOrdersItemDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformOrdersItemDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_orders_item_data` WHERE `OrderID`=? AND `OrderItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_orders_item_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformOrdersItemDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformOrdersItemDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_orders_item_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformOrdersItemDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformOrdersItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_orders_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformOrdersItemDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformOrdersItemDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformOrdersItemDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformOrdersItemDatum(ctx, exec, o.OrderID, o.OrderItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformOrdersItemDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformOrdersItemDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformOrdersItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_orders_item_data`.* FROM `data_platform_orders_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformOrdersItemDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformOrdersItemDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformOrdersItemDatumExists checks if the DataPlatformOrdersItemDatum row exists.
func DataPlatformOrdersItemDatumExists(ctx context.Context, exec boil.ContextExecutor, orderID int, orderItem int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_orders_item_data` where `OrderID`=? AND `OrderItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, orderID, orderItem)
	}
	row := exec.QueryRowContext(ctx, sql, orderID, orderItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_orders_item_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformOrdersItemDatum row exists.
func (o *DataPlatformOrdersItemDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformOrdersItemDatumExists(ctx, exec, o.OrderID, o.OrderItem)
}
